Introduction
漂亮的代码更可能是简单的——清晰且易于理解的。
漂亮的代码是紧凑的——足够完成任务，没有一点多余。
漂亮的代码是通用的，它以一种统一的方式解决一大类问题。它优雅，有品味，精炼。

本章我将描述一些实现正则表达式匹配的漂亮代码，它满足以上标准。

正则表达式是用来描述文本模式的符号，实际上是一类模式匹配的专用语言。
尽管它有很多变种，但基本上都有着以下思想：模式中的大多数字符匹配自身，只有一些
“元字符”（metacharacters）具有特殊意思，例如"*"表示重复，[...]意味着匹配[...]集合中的任一字符。

实践中，程序中（如文本编辑器）的大多数搜索都是针对单词的直接查找，像"print"将会匹配"printf",
"sprint", "print paper"。 在unix和windows中对文件名的所谓通用匹配中，"*"匹配任意数量字符，所以
*.c 会匹配所有以.c结尾的文件。有很多正则表达式的变种，难以统一。
Jeffrey Friedl的《Mastering Regular Expressions》是对这一主题的详尽探究。

正则表达式首先是为了作为表示有穷自动机的符号而发明的，后被用于QED文本编辑器。
从QED到unix的ed编辑器，然后正则表达式成为unix的工具——grep的精髓。然后在unix社区迅速传播。

Ken的最初的匹配其是很快的，因为它合并了两个独立的思想。一是在运行时生成机器指令。另一则是
在每一阶段推进所有可能匹配，所以不用回退去检查潜在匹配。而Ken在ed中所写的匹配代码则采用更简单
的算法，它在必要时回溯。理论上会慢些，但已足够。

egrep 和 fgrep 丰富了正则表达式。之后愈加流行，不仅被包括进c的库中，甚至成为一些脚本语言的语法部分。

《The Practice of Programming》
此书的最后一章——notation，收集了几个使用好符号让程序更优秀的例子。包括printf的使用，以及利用表
来生成代码。
也谈了正则表达式，包括一种实现。也谈了grep，以及它的设计。

问题在于，所以存在的正则表达式包都太大了。grep超过500行。开源正则包简直巨大，差不多一本书，因为
它们是工业化代码，为了通用性，灵活性以及速度。找不到一个适于学习的。

我向Rob建议说，我们需要找到一个最小的正则包，既能表达根本思想，又有用且意义重大的。最好是，代码
只有一页左右。

Rob离开办公室，我现在仍记得，一两个小时后他回来了，带着30多行C代码，这段代码随后出现在TPOP的
第9章。它实现了一个处理以下情况的正则匹配器：
	c    matches any literal character c （匹配字符c）
    .    matches any single character （匹配任何单字符）
    ^    matches the beginning of the input string （匹配字符串的首位置）
    $    matches the end of the input string （匹配字符串的末尾位置）
    *    matches zero or more occurrences of the previous character （前置字符的0或多次重复）

这真是一个极好的分类；据我的经验看来，它占了所以实例的95%。
在大多数情况下，解决正确的问题是迈向漂亮程序的一大步。Rob从那么大的一个集合中，选出了最小的精华，
必须得点赞。

Rob的实现堪称漂亮代码的典范：紧凑，优雅，有效，有用。是我见过的递归的最佳实例，更显示了C指针的威力。
尽管那时我们想表达的是一个好的记号对于提高程序易用性和易实现性的帮助，但那段正则表达式代码也是展现
算法，数据结构，测试，性能优化和其他重要主题的绝佳方式。

Implementation（实现）
程序从标准输入，或从一系列文件中读取，然后输出匹配行。

/* match: search for regexp anywhere in text */
    int match(char *regexp, char *text)
    {
        if (regexp[0] == '^')
            return matchhere(regexp+1, text);
        do {    /* must look even if string is empty */
            if (matchhere(regexp, text))
                return 1;
        } while (*text++ != '\0');
        return 0;
    }

    /* matchhere: search for regexp at beginning of text */
    int matchhere(char *regexp, char *text)
    {
        if (regexp[0] == '\0')
            return 1;
        if (regexp[1] == '*')
            return matchstar(regexp[0], regexp+2, text);
        if (regexp[0] == '$' && regexp[1] == '\0')
            return *text == '\0';
        if (*text!='\0' && (regexp[0]=='.' || regexp[0]==*text))
            return matchhere(regexp+1, text+1);
        return 0;
    }

    /* matchstar: search for c*regexp at beginning of text */
    int matchstar(int c, char *regexp, char *text)
    {
        do {    /* a * matches zero or more instances */
            if (matchhere(regexp, text))
                return 1;
        } while (*text != '\0' && (*text++ == c || c == '.'));
        return 0;
    }

函数match(regexp, text) 检测text的任何地方是否存在与正则表达式的匹配；如果存在匹配就返回1，否则0.
如果不止一处匹配，它只匹配最左边和最短匹配。
match的基本操作是直接的。如果正则表达式的首字符是 ^ (一个固定匹配)，则可能的匹配必须是出现在字符串
开始处。也就是说，如果正则式是 ^xyz, 它只匹配开头是 xyz 的文本，只能在开头，不能在中间。所以只尝试
匹配余下的正则式与文本的开始处往后。

否则的话，正则表达式就尝试与文本的任何位置匹配。通过将文本往前依次扫描与模式尝试匹配。如果存在多处
匹配，只有最左边的匹配被定位。也就是说，如果正则式是xyz，它只匹配xyz的第一次出现。

注意到这里使用do-while来扫描文本，这总是会提出个问题：为什么不是在循环开始前就检测终止条件？但是这里的
检测是对的：因为 * 操作符允许0长度匹配，我们首先要检查空匹配是否可能。

多数的工作是在matchhere(regexp, text)中完成的，它检测正则表达式是否与文本的某处开始匹配。函数尝试
检查模式的首字符是否与文本的首字符匹配。如果匹配失败，那么就没有在这个位置(here)的匹配，matchhere
就返回0。如果匹配成功，就继续向前推进，匹配模式的下个字符与文本的下个字符，这是通过递归调用matchhere
实现的。

由于特殊情况的存在以及停止递归的需要而使情形有点复杂。最简单的情况是正则式是否到达末尾(regexp[0] == '\0')，
而之前的检测都是成功的，所以正则式与文本匹配。
如果正则表达式是一个字符后跟一个*，matchstar将被调用以检测之后的匹配。matchstar(c,regexp, text)尝试
匹配文本字符c 的重复出现，0次或多次，直到发现一个与余下文本的匹配，或者失败因此可断定没有匹配存在。
这是一种最短匹配，适合于简单模式匹配，如在grep中，想尽可能快的找到。最长匹配策略适合于文本编辑器。
大多数现在的正则表达式库提供两种方案，TPOP提供了matchstar的一个变体，稍后。

如果正则表达式以$结尾，那么相应的只有文本也到达末尾才能匹配。
否则，如果我们还没有到达文本串的末尾(即 *text!='\0')而且如果文本串的首字符与正则式的首字符匹配，那正好。
我们继续往前检查下一个字符是否匹配，通过调用matchhere。这个递归调用是这个算法的核心，也是代码如此紧凑
和干净的原因。

如果所以这些匹配尝试失败，那么就不存在匹配，所以matchhere返回0。
这段代码充满c指针。在递归的每个阶段，如果某处匹配了，在指针运算(regexp+1 and text+1)之后即进行递归调用
以使得下次执行是检测下个字符。递归调用的深度不会超过模式的长度，匹配模式在正常情况下很短，所以不用担心
耗完内存空间。

Alternatives（可改进的）
这段代码很优雅很棒，但不是完美的。还可以有什么改进？如果是我，我会重排matchhere，在*之前处理$。
尽管没什么不同，但感觉更自然点，而是遵循了简单情况先处理的原则。

一般来说，检测的顺序很重要。例如，matchstar中的检测：
	} while (*text != '\0' && (*text++ == c || c == '.'));
不管怎样，我们得提前检测文本串还有多余字符，以使得text++能够顺利执行。

这段代码对于终止条件处理很小心。总的来说，匹配是否成功取决于正则表达式是否与文本一起走完。如果一起
走完，意味着匹配；如果谁先跑完，就说明没匹配。这是很明显的，像
	if (regexp[0] == '$' && regexp[1] == '\0')
            return *text == '\0';


automate the boring stuff with python
