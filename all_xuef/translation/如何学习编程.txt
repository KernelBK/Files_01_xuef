我觉得重要的原则
the practice of programming
the elements of programming style
sicp
programming perls
how2think like a computer scientist
python in a nutshell
python cookbook
learning python
headfirst python

0-. 你必须对你自己的学习能力建立信心——相信尽管当你对某问题近乎一无所知，
但只要你一点一点地试验、学习，最终会掌握并解决它。

0. 你需要读和写计算机程序——而且要大量地做。

0+. 程序不是一下子就写好的，它需要不断调整修改。

1-. 一遍看不懂，请看五遍。

1. 记住，代码是为了解决问题。
就如同，看一本书的目的不是为了把它看完。
当然，一些经典的思想性的书值得反复阅读，但是工具书是用来查找以解决问题的。

2. 代码要自己跑一遍，不要以为自己看懂了，然而你并没有懂。

3. 理解语言特性的最佳方法是自己去实现它。
一个人只能真正理解它自己建造的东西。

4. 遇到问题，要搜索相关知识，记住，一定要使用google！

5. 英文很重要。

6. 相似的问题解决一万遍也无济于事。
一定要不断地给自己挑战。学习就是变挑战区为舒适区，
一定是做有挑战但又不是太难的项目，不会不怕，不会到会不懂到懂才是学习啊。

7. 养成记录的习惯。把遇到的问题，其状其景，其解决办法记录清楚。
做好命名和分类，定期整理备份，让它可检索，将来需要时可以迅速定位。
 
8. 品位必须要高！
在我看来，高质量的信息源，与之相关的也一定是高质量信息，它们构成一个网络。
同理，低质量信息一定把你引向其他低质信息。
这是要用google，要使用英文，要读好书，要与厉害的人交朋友的原因。
如果觉得英文吃力，那开始学嘛。
如果觉得厉害的人怎么会与我交朋友啊，那就不断让自己优秀啊。

9. Reading Great Code
从大神的代码中，向大神学习。

10. 写作分享。
把自己的感悟，学习所获写出来，分享给大家。

11. 遇到问题，不要惊慌，不要嫌烦。
使用费曼技巧，把问题分解成一个个小问题，逐一解决掉。
背景知识不够就去补。
多花点时间总能理解的。


昨天去见了个朋友，聊了很多。
我谈了我的读书经验。
以前捧起一本书，视作神圣。小心的翻开第一页，开始仔细认真读。生怕漏掉一点信息。
基本上，各种序言，译者序还没看完，就要睡着了。过几天可能就忘了要读这本书了。
什么东西一旦到手，便顿时失掉了恨不得卑躬屈膝的曾经的渴求。这是大多数贱的原因。
如今明白，书只是我的工具，而读一本书的目的也不是要把它读完。而是你有一个困惑一个问题，
你需要一种或几种参考意见或供你继续思考前行的背景知识。或者，就是有趣。

我谈了，知识与有用。
也就两年前，我的思想还是停留在，某种知识绝对论的阶段。
那时，我觉得人的意义在于创造新的东西。就像维特根斯坦在少年时对自己的拷问——
我是不是天才，如果不是，我的存在还有什么意义。
归根到底，还是想要牛逼闪闪，灰常灰常拉风的人生。
现在想来，还是淡点好，平常心。
不过，对世界的思考是有益的。
由于印刷术，进而是当今的全球互联网，使得知识得到迅速传播。
当然，某些竞争也是全球性的。
知识以怎样的速度传播，就以怎样的速度贬值。
平庸的你我创造不了知识，很多知识自己理解都困难。
我们身处何处，要如何处之。
能够解决某一特定场景下的问题，便是价值所在。
普通的土地长出的粮食一样能够喂养人。
做一些需要技术和理解力的工作。


我谈了物质与精神。

一切思考和行动，都要从“此在”出发，这个世界最重要的首先的事实便是——你的存在。
之后的思考和行动都要以此为目的，维持和拓展自己。

我谈了教育。

我们谈了很多，却也只是互相的安慰。然而，已足矣，可慰我心。

几乎所有的谈话，会谈论任何东西，唯独不会说那真正的问题，那在根处的问题。
孟德斯鸠在《论法的精神》中说，是的，一个错误没什么，然而那让他犯错的本性却是致命的。
尼采在《偶像的黄昏》

 

