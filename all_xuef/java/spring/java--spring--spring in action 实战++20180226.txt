
Spring 是如何简化 Java 开发的？
为了降低 Java 开发的复杂性， Spring 采取了以下 4 种关键策略：
1. 基于 POJO 的轻量级和最小侵入性编程；
2. 通过依赖注入和面向接口实现松耦合；
3. 基于切面和惯例进行声明式编程；
4. 通过切面和模板减少样板式代码。

1.1.1 　激发 POJO 的潜能 （plain old java object）
如果你从事 Java 编程有一段时间了，那么你或许会发现（可能你也实际使用过）很多框架通过强迫应用继承它们的类或实现
它们的接口从而导致应用与框架绑死。

Spring 赋予 POJO 魔力的方式之一就是通过 DI 来装配它们。让我们看看 DI 是如何帮助应用
对象彼此之间保持松散耦合的。

1.1.2 　依赖注入
依赖注入这个词让人望而生畏，现在已经演变成一项复杂的编程技巧或设计模式理念。但事实证明，依赖注入并不像它听上去那么复杂。
在项目中应用 DI ，你会发现你的代码会变得异常简单并且更容易理解和测试。

DI 功能是如何实现的
任何一个有实际意义的应用（肯定比 Hello World 示例更复杂）都会由两个或者更多的类组成，这些类相互之间进行协作来完成特定
的业务逻辑。按照传统的做法，每个对象负责管理与自己相互协作的对象（即它所依赖的对象）的引用，这将会导致高度耦合和难以测
试的代码。

耦合具有两面性（ two-headed beast ）。一方面，紧密耦合的代码难以测试、难以复用、难以理解，并且典型地表现出 “ 打地鼠 ” 式的 bug 特性
（修复一个 bug ，将会出现一个或者更多新的 bug ）。另一方面，一定程度的耦合又是必须的 —— 完全没有耦合的代码什么也做不了。为了完成
有实际意义的功能，不同的类必须以适当的方式进行交互。总而言之，耦合是必须的，但应当被小心谨慎地管理。

通过 DI ，对象的依赖关系将由系统中负责协调各对象的第三方组件在创建对象的时候进行设定。对象无需自行创建或管理它们的依赖关系。

这里的要点是 BraveKnight 没有与任何特定的 Quest 实现发生耦合。对它来说，被要求挑战的探险任务只要实现了 Quest 接口，那么具体是
哪种类型的探险就无关紧要了。这就是 DI 所带来的最大收益 —— 松耦合。如果一个对象只通过接口（而不是具体实现或初始化过程）来表明依
赖关系，那么这种依赖就能够在对象本身毫不知情的情况下，用不同的具体实现进行替换。


创建应用组件之间协作的行为通常称为装配（ wiring ）。 Spring 有多种装配 bean 的方式，采用 XML 是很常见的一种装配方式。


如果 XML 配置不符合你的喜好的话， Spring 还支持使用 Java 来描述配置。比如，程序清单 1.7 展现了基于 Java 的配置，
它的功能与程序清单 1.6相同。


现在让我们再关注 Spring 简化 Java 开发的下一个理念：基于切面进行声明式编程。
1.1.3 　应用切面
DI 能够让相互协作的软件组件保持松散耦合，而面向切面编程（ aspect-oriented programming ， AOP ）允许你把遍布应用
各处的功能分离出来形成可重用的组件。


程序清单 1.12 中的代码和你实现其他 JDBC 操作时所写的代码几乎是相同的。只有少量的代码与查询员工逻辑有关系，其他的代码都是 JDBC 的
样板代码。
JDBC 不是产生样板式代码的唯一场景。在许多编程场景中往往都会导致类似的样板式代码， JMS 、 JNDI 和使用 REST 服务通常也涉及大量的
重复代码。
Spring 旨在通过模板封装来消除样板式代码。 Spring 的 JdbcTemplate 使得执行数据库操作时，避免传统的 JDBC 样板代码成为了可能。

我已经向你展示了 Spring 通过面向 POJO 编程、 DI 、切面和模板技术来简化 Java 开发中的复杂性。在这个过程中，我展示了在基于 XML 的配置
文件中如何配置 bean 和切面，但这些文件是如何加载的呢？它们被加载到哪里去了？让我们再了解下 Spring 容器，这是应用中的所有 bean 所驻
留的地方。


1.2 容纳你的 Bean

在基于 Spring 的应用中，你的应用对象生存于 Spring 容器（ container ）中。如图 1.4 所示， Spring 容器负责创建对象，装配它们，配置它们并管
理它们的整个生命周期，从生存到死亡(在这里，可能就是 new 到 finalize())。

Spring 容器并不是只有一个。 Spring 自带了多个容器实现，可以归为两种不同的类型。 bean 工厂
（由 org.springframework. beans.factory.eanFactory 接口定义）是最简单的容器，提供基本的 DI 支持。
应用上下文（由 org.springframework.context.ApplicationContext 接口定义）基于 BeanFactory 构建，
并提供应用框架级别的服务，例如从属性文件解析文本信息以及发布应用事件给感兴趣的事件监听者。


1.3 俯瞰 Spring 风景线
正如你所看到的， Spring 框架关注于通过 DI 、 AOP 和消除样板式代码来简化企业级 Java 开发。即使这是 Spring 所能做的全部事情，那 Spring 也
值得一用。但是， Spring 实际上的功能超乎你的想象。
在 Spring 框架的范畴内，你会发现 Spring 简化 Java 开发的多种方式。但在 Spring 框架之外还存在一个构建在核心框架之上的庞大生态圈，它将
Spring 扩展到不同的领域，例如 Web 服务、 REST 、移动开发以及 NoSQL 。
首先让我们拆开 Spring 框架的核心来看看它究竟为我们带来了什么，然后我们再浏览下 Spring Portfolio 中的其他成员。

DAO （ Data Access Object ）
ORM （ Object-Relational Mapping ）

MVC （ Model-View-Controller ）






























