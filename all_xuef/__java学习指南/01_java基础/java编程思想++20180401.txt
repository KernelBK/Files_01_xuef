

章4

1、对象的创建过程(p115)
在这里有必要总结一下对象的创建过程。请考虑一个名为 Dog的类：
(1) 类型为 Dog的一个对象首次创建时，或者Dog 类的static方法／static 字段首次访问时，Java 解释器
必须找到Dog.class（在事先设好的类路径里搜索）。
(2) 找到Dog.class 后（它会创建一个 Class对象，这将在后面学到），它的所有 static初始化模块都会运
行。因此，static初始化仅发生一次——在 Class 对象首次载入的时候。
(3) 创建一个new Dog()时，Dog 对象的构建进程首先会在内存堆（Heap）里为一个 Dog对象分配足够多的存
储空间。
(4) 这种存储空间会清为零，将Dog中的所有基本类型设为它们的默认值（零用于数字，以及 boolean和
char 的等价设定）。
(5) 进行字段定义时发生的所有初始化都会执行。
(6) 执行构建器。正如第6 章将要讲到的那样，这实际可能要求进行相当多的操作，特别是在涉及继承的时
候。


章5隐藏实施过程
“进行面向对象的设计时，一项基本的考虑是：如何将发生变化的东西与保持不变的东西分隔开。”


如果库的创建者想删除一种旧有的实施方案，并置入新代码，此时又该怎么办呢？
对那些成员进行的任何改动都可能中断客户程序员的代码。
为解决这个问题，Java 推出了“访问指示符”的概念，允许库创建者声明哪些东西是客户程序员可以使用
的，哪些是不可使用的。这种访问控制的级别在“最大访问”和“最小访问”的范围之间，分别包括：
public，“友好的”（无关键字），protected 以及private。

大家或许已总结出作为一名库设计者，应将所有东西都尽可能保持为“private”（私有），并只展示出那些
想让客户程序员使用的方法。


然而，随着学习的深入，大家就会发现private 仍然有非常重要的用途，特别是在涉及多线程处理的时候。





但在类主体的起
始花括号之前，需要放置一个关键字extends，在后面跟随“基础类”的名字。若采取这种做法，就可自动
获得基础类的所有数据成员以及方法。

所以表达式super.scrub()调用的是方法 scrub()的基础类版本。

1. 含有自变量的构建器
上述例子有自己默认的构建器；也就是说，它们不含任何自变量。编译器可以很容易地调用它们，因为不存
在具体传递什么自变量的问题。如果类没有默认的自变量，或者想调用含有一个自变量的某个基础类构建
器，必须明确地编写对基础类的调用代码。这是用 super 关键字以及适当的自变量列表实现的



章6

# final
对于基本数据类
型，final 会将值变成一个常数；但对于对象句柄，final 会将句柄变成一个常数。进行声明时，必须将句柄
初始化到一个具体的对象。而且永远不能将句柄变成指向另一个对象。然而，对象本身是可以修改的。




