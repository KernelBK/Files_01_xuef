

章4
setter 注入，javabean一定要有默认构造方法。


Spring容器最初提供了两种bean的scope类型：singleton和prototype，但发布2.0之后，又引入了另
外三种scope类型，即request、session和global session类型。不过这三种类型有所限制，只能在Web应
用中使用。也就是说，只有在支持Web应用的 ApplicationContext 中使用这三个scope才是合理的。


<!-- XSD -->
<bean id="mockObject1" class="...MockBusinessObject" scope="singleton"/>
* 对象实例数量。singleton类型的bean定义，在一个容器中只存在一个共享实例
* 对象存活时间。singleton类型bean定义，从容器启动，到它第一次被请求而实例化开始，只要
容器不销毁或者退出，该类型bean的单一实例就会一直存活。

通常情况下，如果你不指定bean的scope，singleton便是容器默认的scope。


<bean id="mockObject2" class="...MockBusinessObject" scope="prototype"/>
2. prototype
针对声明为拥有prototype scope的bean定义，容器在接到该类型对象的请求的时候，会每次都重新
生成一个新的对象实例给请求方。虽然这种类型的对象的实例化以及属性设置等工作都是由容器负责
的，但是只要准备完毕，并且对象实例返回给请求方之后，容器就不再拥有当前返回对象的引用，请
求方需要自己负责当前返回对象的后继生命周期的管理工作，包括该对象的销毁。也就是说，容器每
次返回给请求方一个新的对象实例之后，就任由这个对象实例“自生自灭”了。

通常，声明为prototype的scope的bean定义类型，都是一些有状态的，比如保存每个顾客信息的对象。



4. 自定义scope类型
？？？？？？



4.3.6 工厂方法与 FactoryBean

在强调“面向接口编程”的同时，有一点需要注意：虽然对象可以通过声明接口来避免对特定接
口实现类的过度耦合，但总归需要一种方式将声明依赖接口的对象与接口实现类关联起来。否则，只
依赖一个不做任何事情的接口是没有任何用处的。

如果该类是由我们设计并开发的，那么还好说，我们可以通过依赖注入，让容器帮助我们解除接
口与实现类之间的耦合性。但是，有时，我们需要依赖第三方库，需要实例化并使用第三方库中的相
关类，这时，接口与实现类的耦合性需要其他方式来避免。

通常的做法是通过使用工厂方法（Factory Method）模式，提供一个工厂类来实例化具体的接口
实现类，这样，主体对象只需要依赖工厂类，具体使用的实现类有变更的话，只是变更工厂类，而主
体对象不需要做任何变动。


代码清单4-31 使用了工厂方法模式的 Foo 类可能定义
public class Foo
{
	private BarInterface barInterface;
	public Foo()
	{
		// barInterface = BarInterfaceFactory.getInstance();
		// 或者
		// barInterface = new BarInterfaceFactory().getInstance();
	}
...
}


针对使用工厂方法模式实例化对象的方式，Spring的IoC容器同样提供了对应的集成支持。我们所
要做的，只是将工厂类所返回的具体的接口实现类注入给主体对象（这里是 Foo ）。

1. 静态工厂方法（Static Factory Method）
假设某个第三方库发布了 BarInterface ，为了向使用该接口的客户端对象屏蔽以后可能对
BarInterface 实现类的变动，同时还提供了一个静态的工厂方法实现类 StaticBarInterface-
Factory ，代码如下：
public class StaticBarInterfaceFactory
{
	public static BarInterface getInstance()
	{
		return new BarInterfaceImpl();
	}
}
为了将该静态工厂方法类返回的实现注入 Foo ，我们使用以下方式进行配置（通过setter方法注入
方式为 Foo 注入 BarInterface 的实例）：
<bean id="foo" class="...Foo">
	<property name="barInterface">
		<ref bean="bar"/>
	</property>
</bean>
<bean id="bar" class="...StaticBarInterfaceFactory" factory-method="getInstance"/>


2. 非静态工厂


3. FactoryBean




4.4 容器背后的秘密

子曰：学而不思则罔。除了了解Spring的IoC容器如何使用，了解Spring的IoC容器都提供了哪些功
能，我们也应该想一下，Spring的IoC容器内部到底是如何来实现这些的呢？虽然我们不太可能“重新
发明轮子”，但是，如图4-7（该图摘自Spring官方参考文档）所示的那样，只告诉你“Magic Happens
Here”，你是否就能心满意足呢？


4.4.1 “战略性观望”
Spring的IoC容器所起的作用，就像图4-7所展示的那样，它会以某种方式加载Configuration
Metadata（通常也就是XML格式的配置信息），然后根据这些信息绑定整个系统的对象，最终组装成
一个可用的基于轻量级容器的应用系统。
Spring的IoC容器实现以上功能的过程，基本上可以按照类似的流程划分为两个阶段，即容器启动
阶段和Bean实例化阶段，如图4-8所示。

Spring的IoC容器在实现的时候，充分运用了这两个实现阶段的不同特点，在每个阶段都加入了相
应的容器扩展点，以便我们可以根据具体场景的需要加入自定义的扩展逻辑。


????????????????????????????????????????
4.4.2 插手“容器的启动”
????????????????????????????????????????
Spring提供了一种叫做 BeanFactoryPostProcessor 的容器扩展机制。该机制允许我们在容器实
例化相应对象之前，对注册到容器的 BeanDefinition 所保存的信息做相应的修改。这就相当于在容
器实现的第一阶段最后加入一道工序，让我们对最终的 BeanDefinition 做一些额外的操作，比如修
改其中bean定义的某些属性，为bean定义增加其他信息等。


4.4.3 了解 bean 的一生
在已经可以借助于 BeanFactoryPostProcessor 来干预Magic实现的第一个阶段
动之后，我们就可以开始探索下一个阶段，即bean实例化阶段的实现逻辑了。

除了检查标记接口以便应用自定义逻辑，还可以通过 BeanPostProcessor 对当前对象实例做更多
的处理。比如替换当前对象实例或者字节码增强当前对象实例等。Spring的AOP则更多地使用
BeanPostProcessor 来为对象生成相应的代理对象，如 org.springframework.aop.framework.
autoproxy.BeanNameAutoProxyCreator 。


# 自定义 BeanPostProcessor
假设系统中所有的 IFXNewsListener 实现类需要从某个位置取得相应的服务器连接密码，而且系
统中保存的密码是加密的，那么在 IFXNewsListener 发送这个密码给新闻服务器进行连接验证的时
候，首先需要对系统中取得的密码进行解密，然后才能发送。我们将采用 BeanPostProcessor 技术，
对所有的 IFXNewsListener 的实现类进行统一的解密操作。


