
# 列表推导式

# enumerate 获取索引

# 迭代器

# 生成器
"""
使得需要返回一系列元素的函数所需要的代码更加简单、高效。
基于yield指令，可以暂停一个函数并返回中间结果。该函数将保存执行魂晶并且可以在必要时恢复执行。
"""
# 生成器对降低程序复杂新也有帮助，并且能够提升基于多个序列的数据转换算法的性能。
# 把每个序列当作一个迭代器，然后把它们合并到一个高级别的函数中，这是一种避免函数
# 变得庞大、丑陋、不可理解的好办法。而且这可以给整个处理链提供实时的反馈。

## send，使得该函数可以根据客户端代码来改变其行为。
## throw允许客户端代码传入要抛出的任何类型的异常
## close，将会抛出一个特定的异常--GeneratorExit


# 协同程序是可以挂起、恢复，并且有多个进入点的函数。
# 它们可以实现协同的多任务和管道机制。
# 例如，每个协同程序将消费或生成数据，然后暂停，直到其他数据被传递。
# Python中，协同程序的替代者是线程，它可以实现代码块之间的交互。
# 但是因为它们表现出一种抢先式的风格，所以必须注意资源锁，而协同程序不需要。
# https://www.python.org/dev/peps/pep-0342/






















