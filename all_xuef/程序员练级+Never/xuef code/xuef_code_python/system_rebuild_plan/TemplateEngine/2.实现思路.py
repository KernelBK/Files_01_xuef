
#实现方法
"""
模板引擎具有两个主要的阶段：解析模板，然后渲染模板。
渲染模板具体包括：
    管理动态上下文和数据源
    执行逻辑元素
    实现点访问和过滤器执行
"""

"""
从解析阶段向渲染阶段传递什么东西是问题的关键。解析生产出什么来供渲染？
有两个主要的选择，我们叫它们解释和编译，使用了和其他语言实现相关的术语。

在一个解释模型中，解析产生一个数据结构表示模板的结构。渲染阶段遍历那个数据结构，
基于找到的指令装配结果文本。一个真实的例子是Django模板引擎使用这种方法。

在一个编译模型中，解析产生某种形式的可直接执行的代码。渲染阶段执行那个代码，产生结果。
Jinja2和Mako都是使用编译方法的模板引擎。

我们实现的引擎使用编译方法：我们将模板编译为python代码。执行时，代码将结果组装起来。
"""

# 一个代码生成的通用技术的小例子
"""
将模板编译为python代码有点复杂，但是没有你想的那么糟糕。
此外，编写能够写代码的程序比编写程序本身有趣多了！
我们的模板编译器是一个代码生成的通用技术的小例子。
代码生成技术构成许多强大而灵活的工具的基础，包括编程语言编译器。
代码生成可以变得很复杂，但它是一个很值得拥有的有用的技术。

"""


# 解析阶段将一个模板转换为一个Python函数。

