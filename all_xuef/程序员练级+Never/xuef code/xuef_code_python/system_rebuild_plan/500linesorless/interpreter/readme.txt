
https://linux.cn/article-7753-1.html

在这一章我们会搞清楚这个解释器的结构，给你足够探索下去的背景知识。我们的目标不是向你展示解释器的每个细节---像编程和计算机科学其他有趣的领域一样，
你可能会投入几年的时间去深入了解这个主题。


在本章中，“解释器”有一个更精确的意思：Python 程序的执行过程中的最后一步。
在解释器接手之前，Python 会执行其他 3 个步骤：词法分析，语法解析和编译。这三步合起来把源代码转换成代码对象code object，
它包含着解释器可以理解的指令。而解释器的工作就是解释代码对象中的指令。

用 Byterun 执行代码要比用 CPython 执行慢的多，CPython 解释器是用 C 语言实现的，并做了认真优化。然而 Byterun 是为了学习而设计的，
所以速度对我们不重要。使用 Python 最大优势是我们可以仅仅实现解释器，而不用担心 Python 运行时部分，特别是对象系统。

比如当 Byterun 需要创建一个类时，它就会回退到“真正”的 Python。另外一个优势是 Byterun 很容易理解，部分原因是它是用人们很容易理解的高级语言写的（Python ！）
（另外我们不会对解释器做优化 —— 再一次，清晰和简单比速度更重要）



在我们考察 Byterun 代码之前，我们需要从高层次对解释器结构有一些了解。Python 解释器是如何工作的？

Python 解释器是一个虚拟机virtual machine，是一个模拟真实计算机的软件。我们这个虚拟机是栈机器stack machine，
它用几个栈来完成操作（与之相对的是寄存器机器register machine，它从特定的内存地址读写数据）。
