

除了在装饰器中有用处之外，闭包还是回调式异步编程和函数式编程风格的基础。

本章的最终目标是解释清楚函数装饰器的工作原理，包括最简单的注册
装饰器和较复杂的参数化装饰器。但是，在实现这一目标之前，我们要
讨论下述话题：
	1. Python 如何计算装饰器句法
	2. Python 如何判断变量是不是局部的
	3. 闭包存在的原因和工作原理
	4. nonlocal 能解决什么问题
掌握这些基础知识后，我们可以进一步探讨装饰器：
	1. 实现行为良好的装饰器
	2. 标准库中有用的装饰器
	3. 实现一个参数化装饰器


其实，闭包指延伸了作用域的函数，其中包含函数定义体中引用、但是
不在定义体中定义的非全局变量。函数是不是匿名的没有关系，关键是
它能访问定义体之外定义的非全局变量。