{一些洞见}

#一些洞见

##语法的本质

语法其实只是对语言的本质结构，“抽象语法树”（abstract syntax tree，AST），的一种编码。
一个良好的编码，应该极度简单，不引起歧义，而且应该容易解码。在程序语言里，这个“解码”的
过程叫做“语法分析”（parse）。

为什么我们却又需要语法呢？因为受到现有工具（操作系统，文本编辑器）的限制，到目前为止，
几乎所有语言的程序都是用字符串的形式存放在文件里的。
为了让字符串能够表示“树”这种结构，人们才给程序语言设计了“语法”这种东西。

想一下，如果要表达一颗“树”，最简单的编码方式是什么？
就是用括号把每个节点的“数据”和“子节点”都括起来放在一起。

在 Lisp 里面，函数调用看起来是这样(f 1)，而算术操作看起来也是这样(+ 1 2)。
你发现有什么共同点吗？那就是 f 和 + 在位置上的对应。实际上，加法在本质也是一个函数。
这样做的好处，不但是突出了加法的这一本质，而且它让人可以用跟定义函数一模一样的方式，
来定义“运算符”！这比起 C++ 的“运算符重载”强大很多，却又极其简单。

中缀表达式却是容易出现歧义的。如果你有多个操作符，比如 1+2*3。
那么它表示的是 (+ 1 (* 2 3)) 呢，还是 (* (+ 1 2) 3)？


对于四则运算，这些优先级还算简单。可是一旦有了更多的操作，就容易出现混淆。
这就是为什么数学（以及逻辑学）的书籍难以看懂。 实际上，那些看似复杂的公式，符号，
不过是在表示一些程序里的“数据结构”，“对象”以及“函数”。大部分读数学书的时间，
其实是浪费在琢磨这些公式：它们到底要表达的什么样一个“数据结构”或者“操作”！
这个“琢磨”的过程，其实就是程序语言里所谓的“语法分析”（parse）。


其实 Lisp 已经可以轻松地表示这种公式，比如对 x^2 进行微分，可以表示成
```
(D ‘(^ x 2) ‘x)
```
看到了吗？微分不过是一个用于处理符号的函数 D，输入一个表达式和另一个符号，
输出一个新的表达式。

在 Lisp 里，你其实可以比较轻松地实现符号微分的计算。


另外，由于 Lisp 的表达能力和灵活性比其他语言要大很多，所以类似 C 或者 Pascal 那样
的语法其实不能满足 Lisp 的需要。
在 Lisp 里，你可以写 (+ 10 (if test 1 2)) 这样的代码，然而如果你使用 C 那样的无括号语法，
就会发现没法很有效的嵌入里面的那个条件语句而不出现歧义。


## 程序所做的几乎一切事情，都是信息的传递和分支

## 自然语言都是建立在递归和重复的子结构之上的。

## Lisp 程序代码与数据的形式完全相同

这使得它非常强大，能完成许多其他语言不能完成的事情。

S-表达式求值也是典型的 Lisp 式过程：首先取列表第一个元素为操作符，
然后遍历所有剩下的元素，将它们作为操作数。

## 堆中的数据必须手动申请和释放。




