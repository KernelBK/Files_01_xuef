{what language is}

# 面对一门编程语言，你要问哪些问题?

## 重要原则

- 分清哪些是本质，哪些是语法糖 (DeSugar)

- 关注语言特性而不是语言

- 区分语法和语义，语法是表面的东西

- 学习一打语言

- 关注元语言，语言的语言。

- 学习编译原理和程序语言设计理论

- 问题驱动，而不是手册驱动

## 从数据的角度看

- Storing Data (它如何存储数据)

- Mutate Data (如何修改数据)

- Manipulate Data (如何操控数据)

## 语言提供了哪些抽象手段(控制系统的复杂度)

-- 数据抽象手段 (如类)

-- 过程抽象手段 (如高阶函数)

-- 学习《sicp》or《cs61a》


## 一些语言特性(王垠)

- 变量定义

- 算术运算

- for 循环语句，while 循环语句

- 函数定义，函数调用

- 递归

- 静态类型系统

- 类型推导

- lambda 函数

- 面向对象

- 垃圾回收

- 指针算术

- goto 语句


## 问一些关键的问题

- What are the Rules of Composition? (组合的手段有哪些)

- 这个语言的“变量定义”是什么语法，需要“声明类型”吗，还是可以用“类型推导”？

- 它的“类型”是什么语法？是否支持“泛型”？泛型的 “variance” 如何表达？

- 这个语言的“函数”是什么语法，“函数调用”是什么语法，可否使用“缺省参数”？

- 支持闭包吗？函数是一等公民吗？

- syntactic scope? 词法作用域还是动态作用域？

- 允许进行状态修改吗？如何修改？

- Java是OOP的，与Python的OOP， JavaScript的OOP， Racket的OOP有何相似点，有何不同点？

- 它的求值模型

## 自己动手实现语言特性


## 参考

- 《sicp》

- 《王垠》

- 《plai》: (http://cs.brown.edu/courses/cs173/2012/book/)

- 《cs61as》: (http://berkeley-cs61as.github.io/syllabus.html)
