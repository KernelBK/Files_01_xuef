
# C10K问题

## 如何在一颗 1GHz CPU, 2G内存， 1gnps网络环境下，让单台服务器同时为1万个客户端提供FTP服务


# Unix下5中IO模型

"""
1. 阻塞式
阻塞不消耗 cpu
2. 非阻塞式
当下一步操作不依懒于上一步的返回状态信息时，当有其他事情可做时。
立即返回 + 需要轮询(耗cpu)

3. IO复用(多数高并发IO使用的技术，比较稳定和成熟)
select, 操作系统提供的支持，我们调用该方法后，操作系统会给我们返回哪些
socket或者文件句柄已经准备好。

！！！
进程受阻于select调用，等待可能多个套接字中的任一个变为可读。

select 可以监听多个文件句柄和socket。

select减少了等待数据的时间，
但是针对已经准备好的 socket, recvfrom(数据复制到应用程序期间的进程阻塞)导致的等待时间
尚不能避免。所以 select还有改进的空间！！！

4. 异步IO(aio_read)

"""

# select,poll,epoll
"""
select,poll,epoll都是 io多路复用的机制 。多路复用就是通过一种机制，一个进程可以监视多个描述符，
一旦某个描述符就绪(一般是读就绪或者写就绪)，能够通知程序进行相应的读写操作。
但select,poll,epoll本质上都是同步io，因为他们都需要在读写事件就绪后自己负责进行读写，
也就是说这个读写过程是阻塞的 而异步io则无需自己负责进行读写，异步io的实现会负责把数据从内核拷贝
到用户空间。
"""
## 在并发高，连接活跃度不是很高的情况下，epoll优于select
## 并发不高，同时连接很活跃时，select比epoll好。


























