


1. 域名-->ip地址
由谁主导这个过程？浏览器？

a. 先查找本地host文件(host劫持攻击)
b. 访问 dns 服务器

① Chrome浏览器 会首先搜索浏览器自身的DNS缓存（缓存时间比较短，大概只有1分钟，且只能容纳1000条缓存），看自身的缓存中是否有www.google.com 对应的条目，
而且没有过期，如果有且没有过期则解析到此结束。

    注：我们怎么查看Chrome自身的缓存？可以使用 chrome://net-internals/#dns 来进行查看


② 如果浏览器自身的缓存里面没有找到对应的条目，那么Chrome会搜索操作系统自身的DNS缓存,如果找到且没有过期则停止搜索解析到此结束.

     注：怎么查看操作系统自身的DNS缓存，以Windows系统为例，可以在命令行下使用 ipconfig /displaydns 来进行查看  


③ 如果在Windows系统的DNS缓存也没有找到，那么尝试读取hosts文件（位于C:\Windows\System32\drivers\etc），看看这里面有没有该域名对应的IP地址，如果有则解析成功。


④ 如果在hosts文件中也没有找到对应的条目，浏览器就会发起一个DNS的系统调用


2.发起TCP的3次握手
拿到域名对应的IP地址之后，User-Agent（一般是指浏览器）会以一个随机端口（1024 < 端口 < 65535）向服务器的WEB程序（常用的有httpd,nginx等）
80端口发起TCP的连接请求。这个连接请求（原始的http请求经过TCP/IP4层模型的层层封包）到达服务器端后（这中间通过各种路由设备，局域网内除外），
进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，
最终到达WEB程序（本文就以Nginx为例），最终建立了TCP/IP的连接。



cdn
nginx
tomcat








