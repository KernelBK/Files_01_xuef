
#https://zhuanlan.zhihu.com/p/36301857
"""
大家真的懂 JavaScript 吗？能描述出 JavaScript 的语法规则吗？能理解语法所代指的逻辑结构吗？
知道 JavaScript 是如何在被解释和执行的吗？所以，大家真的懂 JavaScript 吗？反正我是至今没有底气
说自己”精通“ JavaScript ，原因是我还不懂如何实现一个 JIT。

"""
##我们多数时候称自己“精通”某编程语言的时候，仅仅指会熟练使用某编程语言，
##但是编译原理这门学科折腾的核心恰恰是编程语言，它要求我们对编程语言有深入的了解，
##了解它是如何构造和解释的。我们如果没有这项基础其实是很难学好这门学科的。

"""
部分国外高校的计算机专业喜欢用 Lisp 系的 Scheme 入门，一开始我并不明白其中缘由，
直到我发现他们的课程作业中最后总会要求实现一个简易的 Lisp 解释器时我才恍然大悟。
外国学校安排课程的水平真是高明，学校教 Scheme 可不是为了让学生拿来写工程代码，
而是让学生学习编程以及编程语言本身到底是一个什么东西。

Lisp 是一门具备现代编程语言特性的几乎最简的实现，所有编程语言都是 Lisp 方言真的不仅仅
是一句玩笑话。简易的 Lisp 的解释难度很低，Lisp 语法的解析只有解析 JSON 同等的难度，
我们会经常看到很多新手用百来行代码就能实现一个 Lisp 解释器。虽然实现一个 Lisp 解释器不难，
但是他对学生来说的意义非常重大，它能让学生们对编程语言和程序的构造和执行有一个非常非常基础
但又非常全面的认识。而这种对编程语言全面的认识，也正是我们这些拿着 C/C++ 亦或者 JavaScript
入门的大家所缺失的。

所以如何学好编程语言？正途当然是啃我们的经典神书 《SICP》了。
"""

#代码到底是什么
##其实代码跟 JSON 一样，是一种结构化的文本数据格式。
##在这里我们要仅仅抓着两个特点——“文本”和“结构化”。
####实际上，代码的本质根本就不是字符串，它本来就是一个具有复杂拓扑的数据结构，就像电路一样。
"""
(源)代码的第一个特点是文本，那意味着我们所有对字符串的拼接、截取或者替换等所有操作，
都可以应用在代码上面。很多程序员虽然都能对各类文本的读写了如指掌，但大家好像都没有意识到代码文件，
也可以是那个可以读写、修改的文件之一。

对代码文件的读写和操作是进入编译世界的第一个重要门槛，有的时候并不需要太复杂的算法就能够对代码
做一些有意义的转换，比如我们可以直接通过正则分析 import / export / require 来实现一个简易的 webpack，
比如在我之前一篇文章也是通过简单的正则优化尾递归代码。真正有意识地把代码文件当成文本文件以后，
我们就能把代码从此拉下“神坛”，可以让大家能够像思考文本一样思考代码。
"""


##解析代码是一个比较无聊、复杂而又繁琐的过程。这种复杂和繁琐是来由于编程语言本身
##语法设计的繁琐和复杂导致的。
##比如我们前文讨论过的 Lisp 由于语法设计的非常简单、一致而又无歧义，所以解析起来非常轻松，
##但是作为代价的就是 Lisp 那个被吐槽很多的括号括号括号。
"""
解析代码的第二个步骤是语法分析，语法分析是将我们上面词法分析出的 Token 转化成 AST。
语法分析我们要学习上下文无关文法（CFG），并且可以用 BNF 这个表示。
CFG 比正则表达能力更强，强在 CFG 能表达递归结构，常见的递归结构有表达式和代码块。
在语法分析这个部分，会基本的 LL(1) 算法，能够对自顶向下的分析有足够的了解，就已经足够了。
"""
##Parser 在编译原理里面是难点但却不是重点，所以在这一部分大家觉得复杂的算法完全可以跳过，
##不建议浪费太多时间。Parser 都是可以根据正则和 CFG 自动生成的，并不需要自己手写。
##所以这部分主要目的是学好的是正则和 CFG，那些复杂的算法学起来意义很小。











