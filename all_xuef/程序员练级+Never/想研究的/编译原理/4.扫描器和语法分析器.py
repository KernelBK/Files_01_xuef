
#一个程序设计语言的扫描器和语法分析器的共同责任，就是去发现给定程序的语法结构。
#这一发现过程是把程序变换到目标语言中的等价程序的第一步。

"""
语法分析器处于编译器的中心。它调用扫描器以获得输入程序的单词，把这些单词组装到一棵语法分析树里，
并把这棵树传递给后续阶段，让它们去做语义分析、代码生成和改进。
"""
#扫描器通常还删除注释。如果需要，它还产生出带标注的源代码列表，给各个单词加上行列标记，使后续
#阶段可以更容易生成出高质量的错误信息。
#由于扫描器通常只能处理非递归的结构，嵌套的注释就需要特殊处理了。

#理论上看，一个扫描器就是一个识别某个程序设计语言单词的确定性的有限自动机(DFA)
#语法分析器就是一个识别改语言的上下文无关语法的下推自动机(PDA)

#从效果上看，正则表达式就像是一种针对很有限的问题领域(扫描)的说明性语言。


#LL  &&  LR

#递归下降(参考Python-Cookbook第二章)
##在递归下降分析器里，针对每个非终结符有一个子程序。它还需要有一种机制去检查来自扫描器的下一个单词，
##还有一个例程称为(match)使用这个单词，并在使用中验证它正是所需要的。


#??????????
#表格驱动的自上向下语法分析
## LL(1) 文法

























