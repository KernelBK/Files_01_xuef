
"""
《Engineering a Compiler》
即《编译器设计第二版》
https://www.clear.rice.edu/comp412/
"""
# 《parsing-techniques》 讲前端
## http://parsing-techniques.duguying.net/ebook/2/1/3.html

"""
前端看Parsing Techniques，后端看鲸书，都是最好的。
"""

# 《essential of programming language》
# sicp

"""
如果对编程语言设计方面感兴趣，想对编程语言和编译器设计有大概的概念，可以看看PLP。
想快速实践可以看《自制脚本语言》，《engineer a compiler》和《编程语言实现模式》。

还是那句话，多做少说，实现一遍，比啥都好使。
"""

"""
Flex&Bison 算是《lex与yacc》的后一版。很详细的介绍了Flex与Bison这两个工具。
书的后面章节从无到有的构造了一个SQL的解释器。
"""

## 有何用
"""
作者：蓝色
链接：https://www.zhihu.com/question/21755487/answer/30574966


你现在觉得枯燥，我想既跟编译原理本身比较抽象的知识有关，也跟讲述者有关。
一个好的讲述者会试着化抽象为形象，以丰富生动的例子来为你解释。而编译原理是否有用？
我认为这门课是一门真正与代码做斗争的课程，对于一个有至于追求技术的人是不容错过的课程，
而且编译原理可以说是一个计算机科学的缩影。你学习它更多的是去追寻程序设计语言的本质，
如它在寄存器分配中将会使用到贪心算法，死代码消除中将会使用到图论算法，
数据流分析中使用到的Fixed-Point Algorithm，词法分析与语法分析中使用到有限状态机与递归下降这样的
重要思想等等，也许你以后不会成为一个编译器开发工作者，但是编译原理的学习中所获，所思的东西足以让你
终生获益。同时，学完这门课程，对于一个有Geek精神的开发者，他会开始运用自己的所学开发享受“上帝”的感觉，
去尝试创造一门语言，我想这种感觉不是每门课程都能带给你的。
我相信，当你真正完成这个过程后，你对你所写的程序、程序语言都会有更深的本质认识，
这样的认识也会让你站的高度完全不同，如果你真的学的好，我想别人看到的是语法，
你看到的是背后的实现，这样的感觉真的很好的，不信你试试。
有了这么多好处，无论如何都有足够的理由支撑你好好学习了。

自从学会了编译原理，我用编译原理的眼光来看带我自己的代码，写出了优秀的单元测试。

文本编辑器的代码高亮功能，代码提示功能就是运用编译原理知识，如果自己写一个是不是很好玩？

"""
## 学习目标
"""
对于普通程序员，我认为编译原理这门课主要掌握几点就够用了：
1. 词法分析方面，掌握正则表达式，了解dfa/nfa。

2. Parsing 方面，能读懂BNF，知道AST，会写简单的递归下降parser，会用antlr之类的parser generator。

3. 优化方面，知道现代编译器的优化能力有多强，知道如何配合编译器写出高效易读的代码，
避免试图outsmart编译器。

4. 会实现简单的虚拟机（stack-based，不带GC），并把四则运算表达式翻译为虚拟机指令。

作者：陈硕
链接：https://www.zhihu.com/question/21755487/answer/30585811
"""

