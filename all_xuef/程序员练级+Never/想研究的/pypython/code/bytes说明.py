
#bytes如何阅读
"""
Python对不可变序列进行重复拼接操作效率会很低，因为每次都会生成一个新的对象，解释器需要
把原来对象中的元素先复制到新的对象里，然后再追加新的元素。

但是CPython对字符串操作进行了优化，因为对字符串做+=操作实在是太普遍了。

>>> s_code = 'a += "b"'
>>> c = compile(s_code, '', 'exec')
>>> c.co_code
b'e\x00\x00d\x00\x007Z\x00\x00d\x01\x00S'
>>> c.co_names
('a',)
>>> c.co_consts
('b', None)

"""
#\x00 是一个字节，只不过没有对应的 ASCII字符

##得到的字节码是Bytes类型的。这里穿插一些Bytes类型的知识。
"""
Bytes类型
b'e\x00\x00d\x00\x007Z\x00\x00d\x01\x00S'，b表示是Bytes类型。
Bytes以二进制字节序列的形式记录数据，每一个字符就代表一个字节（8位）。
比如上面的e表示二进制0110 0101。部分ASCII码对照表如下图所示。

但是，不是所有的字节都是可显示的，甚至有些字节无法对应到ASCII码上
（因为ASCII码只定义了128个字符，而一个字节有256个）。比如0000 0000对应的ASCII是
不可显示的、0111 1111没有对应的ASCII码。

为了表示这些无法显示的字节，就引入了\x符号，其表示后续的字符为16进制。
如，\x00表示16进制的00，也就是二进制的0000 0000。

至此，所有字节都可被表示。
"""









