
#类型是干什么用的？
"""
Haskell 中的每个函数和表达式都带有各自的类型，通常称一个表达式拥有类型 T ，
或者说这个表达式的类型为 T 。举个例子，布尔值 True 的类型为 Bool ，
而字符串 "foo" 的类型为 String 。一个值的类型标识了它和该类型的其他值所共有的
一簇属性（property），比如我们可以对数字进行相加，对列表进行拼接，诸如此类。

在对 Haskell 的类型系统进行更深入的探讨之前，不妨先来了解下，我们为什么要关心
类型 —— 也即是，它们是干什么用的？
"""

#Haskell 的类型系统
"""
Haskell 中的类型有三个有趣的方面：首先，它们是强（strong）类型的；
其次，它们是静态（static）的；
第三，它们可以通过自动推导（automatically inferred）得出。
"""

##强类型
"""
要在 Haskell 中进行类型转换，必须显式地使用类型转换函数。

有些时候，强类型会让某种类型代码的编写变得困难。比如说，一种编写底层 C 代码的
典型方式就是将一系列字节数组当作复杂的数据结构来操作。这种做法的效率非常高，
因为它避免了对字节的复制操作。因为 Haskell 不允许这种形式的转换，所以要获得同等
结构形式的数据，可能需要进行一些复制操作，这可能会对性能造成细微影响。

强类型的最大好处是可以让 bug 在代码实际运行之前浮现出来。比如说，在强类型的语言中，
“不小心将整数当成了字符串来使用”这样的情况不可能出现。
"""

##静态类型
"""
静态类型系统指的是，编译器可以在编译期（而不是执行期）知道每个值和表达式的类型。
Haskell 编译器或解释器会察觉出类型不正确的表达式，并拒绝这些表达式的执行

静态类型有时候会让某种有用代码的编写变得困难。在 Python 这类语言里， duck typing 非常流行，
只要两个对象的行为足够相似，那么就可以在它们之间进行互换。 幸运的是， Haskell 提供的
typeclass 机制以一种安全、方便、实用的方式提供了大部分动态类型的优点。

使用动态类型语言编写的程序，常常需要通过大量的测试来预防类型错误的发生，然而，
测试通常很难做到巨细无遗：一些常见的任务，比如重构，非常容易引入一些测试没覆盖到的新类型错误。


要理解静态类型的好处，可以用玩拼图的例子来打比方：在 Haskell 里，如果一块拼图的形状不正确，
那么它就不能被使用。另一方面，动态类型的拼图全部都是 1 x 1 大小的正方形，这些拼图无论放在
那里都可以匹配，为了验证这些拼图被放到了正确的地方，必须使用测试来进行检查。

"""

##类型推导
"""
更进一步来说，因为 Haskell 里值和函数的类型都可以通过自动推导得出，所以 Haskell 程序既可以
获得静态类型带来的所有好处，而又不必像传统的静态类型语言那样，忙于添加各种各样的类型签名
[译注：比如 C 语言的函数原型声明]

在其他语言里，类型系统为编译器服务；而在 Haskell 里，类型系统为你服务。唯一的要求是，
你需要学习如何在类型系统提供的框架下工作。

"""














