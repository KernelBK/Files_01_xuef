
## 数组和指针是如何访问的
首先需要注意的是"地址y"和"地址y的内容"之间的区别。
这相当微妙，因为大多数编程语言中我们用同一个符号来表示这两样东西，由编译器根据上下文环境来判断它的具体含义。

x = y;
在这个上下文中，符号x的含义是x所代表的地址，符号y的含义是y所代表的地址的内容。
左值在编译时可知，表示存储结果的地方。右值直到运行时才知。

char a[9] = "abcdefgh";
	编译器符号表具有一个地址 9980, 若要 c = a[i],
	运行时步骤一：取i的值，将它与 9980相加
	运行时步骤二：取地址 (9980+i) 的内容
这就是为什么 char a[] 与 char a[100]等价的原因。这两个声明都提示a是个数组，也就是一个内存地址，数组内的字符可以从这个地址找到。
编译器并不需要知道数组总共有多长。

相反，如果声明 char *p, 它将告诉编译器 p是个指针，它指向的对象是一个字符。
为了取得这个字符，必须得到地址 p 的内容，把它作为字符的地址并从这个地址中取得这个字符。
指针的访问要灵活的多，但需要增加一次额外的提取。
char *p;
c = *p;
编译器符号表有一个符号 p, 它的地址为 4624
运行时步骤一：取地址4624的内容，就是'5081'
运行时步骤二：取地址5081处的内容


a[i] 只是简单的以 a+i 为地址取得数据


！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
专业C程序员必须熟练掌握 malloc 函数，并且学会用指针操纵匿名内存。
！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！

	