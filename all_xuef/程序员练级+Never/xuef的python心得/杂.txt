<Effective Python>
用Python编写程序，是相当容易的，所以这门语言非常流行。
但若想掌握Python所特有的优势、魅力和表达能力，则相当困难，而且语言中还有很多隐藏的陷阱，容易令开发者犯错。

Remember: All Python objects are "first-class"
•Which means that all objects are fair-game(可作弄的对象) for use in a generator pipeline


Iterable Mutable Callable Hashable
#1 python中的一致性
我们可以迭代所有实现了Iterable协议的类型(包括自定义类型)
内置类型如: list, dict, str, file...

大量操作是针对 Iterable 的，如
Consuming Iterables
•Many operations consume an "iterable" object
•Reductions:
sum(s), min(s), max(s)
•Constructors
list(s), tuple(s), set(s), dict(s)
•Various operators
item in s
•Many others in the library


python是通过鸭子类型和协议来支持这些的。所以真正的python coder，深知python之道，能够写出通用、简洁的代码！


#2 维持上下文(类比于人的记忆功能)多次调用之间保存信息
类与对象
闭包
生成器(其栈帧存在于堆内存)

迭代器，保存生成数据的方式和最少的必要上下文信息，而不保存数据。这为无穷序列提供支持

#3 Callable object(在实现 支持wsgi的web_frame时需要了解这个)
类 :A()
实现了 __call__方法的类的实例: obj()
函数: func()

#4 为什么需要对象机制
The Hitchhiker’s Guide to Python 说的最好

#5 更彻底的皆对象。一致性！！！这是python灵活的一个重要原因！
函数，类(可理解为模板对象)，代码，模块。都是对象
类既是对象，我们就能够动态修改它。

函数和类在python中是一等公民，可以：
1. 可以赋值给变量
2. 可以添加到集合对象中
3. 可以作为参数传递给函数
4. 可以作为函数的返回值


#6 更高视角来审视python
0. 数据类型
1. 数据结构
2. 把函数当作对象
一等函数
闭包
装饰器
3. 面向对象
4. 控制流程
生成器
上下文管理器
多线程
协程
5. 元编程

#7 改变流程
基本的条件分支
异常
	迭代器和生成器利用 StopIteration 来终止。
控制协程
	使用next,send, throw,close来与协程通信和数据交流

	
#8 system programming
files, file systems,
parsing, networking, threads, etc.
	
	
#9 yield
yield produces a value, but suspends the function

#10 generator
A generator function is a much more convenient way of writing an iterator	
	

Generator Expressions
•General syntax
(expression for i in s if condition)
•What it means
for i in s:
	if condition:
		yield expression
		
		
		
使用协程能以多种新方式组织代码，不过与递归和多态（动态调度）一样，要花点时间才能习惯。		
		

		
		
动态语言不需要这 23 种设计模式，它们早就把设计模式做成了语言特性。
比如 Scala 的单例对象，Python 的 kwargs、函数第一性和内省，哪个不是设计模式的替代？




作者：灵剑
链接：https://www.zhihu.com/question/63734103/answer/212353641

本质上来说，动态语言的多态要比静态语言的多态更纯粹。
Java的多态基于interface和类继承，可以说完全是受实现的性能要求（包括编译和运行）的妥协。而动态语言，以Python为例，本质上来说其实只有两个多态的点：callable和getattr所有的callable，只要能接受相同的参数，就可以通用所有的对象，只要能通过__getattribute__机制获取到相同的属性，就可以通用更重要的是这两条原则不需要任何的声明就能够成立，这样设计上来说要比基于interface和显式定义简洁得多。具体到Python，所有其他特性可以说都是在这个基础上成立的：类是callable，构造对象就是调用类类也是对象，构造类是调用metaclass许多语法特性本质上是获取magic方法（__开头和结束）然后调用获取对象的属性就是调用对象对应类的__getattribute__。__getattribute__可以认为是设计模式里模板模式的体现，它的默认实现有很多注入点，__getattr__，descriptor，继承，实例方法，类方法，静态方法，__dict__等都来自于默认实现。因为这些特性，原来的所谓设计原则，在动态语言中并不需要特别的设计：开闭原则：动态语言天生就是对扩展和修改都开放的，不需要任何特别的设计。只要一个新的对象有以前对象相同的属性，它就可以替代以前的对象；只要一个新的callable接受相同的参数，它就可以替代以前的callable。甚至，在必要的时候，以前的实现也可以通过修改类来完全替换掉（Python中一般叫monkey patch）。里氏代换原则：动态语言中只需要考虑Duck Type，Duck Type都可以互相替代，子类天生是Duck Type，仅此而已。依赖倒转原则：这个仍然是很重要的，但是在动态语言中，可以认为上层用到了哪些特性，哪些特性就是接口，不需要特意定义。这样不管是增加还是减少都比较容易。要让这个依赖的部分最小化，仍然需要精心设计。接口隔离原则：同上，用到的才是接口，没有用到的就等于不存在，可以不用实现，可以认为接口天生是最小化的。还可以通过动态检测判断输入是否实现了某个接口，从而自动适应不同特性。最少知道原则：这个仍然需要设计保证。合成复用原则：在动态语言中，合成与继承没有本质的区别，无论使用哪一种都不会造成问题。合成可以通过动态属性或者直接复制属性来假装自己是继承关系，继承也可以通过动态属性屏蔽来自父类的接口（比如在Python中可以raise AttributeError）来假装自己不是父类的派生类，甚至还可以不调用父类的__init__()。可以看出，需要严格考虑得设计原则本来就要少得多，依赖倒转和最少知道两条足矣。因为这些特性，许多以前在Java中需要技巧实现的场景，在Python中都可以用直接的方式实现，比如：类就是自己的Factory实例可以动态增加方法，因此不需要Adaptor或者Decoratorcallable可以单独传递，观察者等模式都可以简化



其实动态语言倒是不太晚出现，LISP这些都很早的，Python从第一个版本说也不晚，不过工程中曾经静态语言使用更广泛。静态语言为了能有效编译、有效执行是做了一些妥协的，比如说Java/C++里面，构造一个对象需要使用new关键字以及构造函数，而构造函数是不能多态的，这样就需要引入Factory类；而Python里，直接用class就能起到factory的作用。还有很多其他的例子，比如Java多态必须要使用interface，而Python直接传递相应的对象，接口兼容即可。这就对设计产生了很大的影响。
