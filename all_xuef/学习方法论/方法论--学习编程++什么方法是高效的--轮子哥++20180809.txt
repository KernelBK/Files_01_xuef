

要点：
1. 要呆在学习区！舒适区是不可能进步的。
2. 先自己写，然后再看书。

https://blog.csdn.net/qq_35246620/article/details/78149036
轮子哥：回顾我走过的编程之路
在这个过程中我深刻的感觉到，如果要快速提高自己的编程水平的话，你必须总是去做一些你做得出来，
但是难度大到只要再难一点点你就做不出来的事情。再这么坚持好些年之后，肯定会进入高手的行列。

https://www.douban.com/note/489186551/
轮子哥：关于编程的扯淡

写到这里，我想起很多人都问过我，程序要怎么写才能写得好，或者说设计模式要怎么写，之类的问题。
如果把学习编程花费的精神代价做标准的话，捷径是没有的。但是如果仅仅把时间作为标准的话，捷径
显然是有的。怎样才能加速你学习的过程呢？答案就是，先写再看书。对于像编译原理这种略微高深的
知识，总要自己写过几遍，吃了一些苦头，才能知道为什么书里非要把算法那么设计结构那么安排。
对于像设计模式这种需要大量经验才可以领悟到的知识，如果你从来没独立写过一个上万行的程序，你
觉得你能理解设计模式在讲什么吗？我觉得这种时候能做的也就是背下来，理解什么的都是扯淡。
诸如此类，学习程序，如果要加速那个过程，肯定要花大量的时间写代码。
当你把项目做得越大、越复杂、算法越扭曲、界面越华丽、尺寸已经大到你觉得不学习新的方法论就肯定
会让代码失控的时候，这个时候你来看设计模式的书，保证是每看到一个模式都觉得人家说到你心坎里去了。
那你不仅可以迅速理解，而且以后还可以不由自主的想起来使用它。

当然，如果你不是一个喜欢写代码的人，那这个方法肯定没有用，因为中途放弃什么的太多了。
这种时候，只能怪你没缘分，设计模式不渡你了。如果你最后撑下来了，虽然你自己觉得你也花费了
相当的努力，但是别人反正是看不到你的努力的，就会开始觉得你有捷径了。为什么呢？因为效率高啊，时间花得短啊。

光写代码也是没用的。同人于野一篇讲成年人还能不能进步的博客说得很好，知识分为舒适区，学习区和恐慌区。
舒适区的意思就是，你很容易就可以做完。学习区的意思就是，你需要花费大量的智力才可以做完。
恐慌区的意思就是，你根本不知道如何下手。当你在为了练习编写大量的代码的时候，你要尽量把题目都安排在
学习区这里，这样才能让你进步快的同时，还不会被问题打倒，可以继续积累成就感了。

学生做这个最方便了，工作之后，如果刚好遇上个黑心公司要你天天加班，你反而没时间做学习区的内容了，
公司给你的肯定是舒适区的苦力活。

说到这里，如果你还有时间练习的话，千万不要去想：“我每一个程序都要跨平台”，“我只做这个语言”等等。
反正将来，语言你都要会，平台的差异你都要知道，为什么要断送自己了解这些东西的机会呢？你真的以为
不知道垃圾收集的原理，和一些底层的可以通过C++的练习而得到的的操作，你真的可以在某些关键时刻操纵
好C#吗？当然有些人会觉得，我估计一辈子不会遇到这些问题的，所以我还是不管他了。
人各有志嘛，C#不渡你，也是你自己的事情。如果你真的可以一辈子都在一个平台上用一种语言做同一种
程序做到退休，那真是幸福的生活啊。










大量 Coding

每天 coding, 刷题算是算法方面的 coding, 也可以尝试其他方向的 coding, 牛逼一点的去 Github 找感兴趣的项目帮忙，
差一点的也有办法，比如去实现一些类库，比如 linked list, stack, queue, hash map, priority queue, binary search tree 等。
如果有机会，学校期间多参加 technical project 或者 internship，多和比自己水平高的人一起 coding, code quality 会不知不觉的提高。

至少有一门熟练使用的语言

最好是一门高级面向对象语言 + 一门动态类型语言；对于语言的了解不要仅限于刷题时用到的 syntax；熟悉语言绝不仅是搞定语言的 syntax, 
你需要懂得语言中大量的细节和常见惯例，这需要大量的 coding 和 code study；

建立 Feedback loop

对于学生或者工作经验很少的朋友们，准备期不要完全闭门造车。自己在家刷题的确方便省事儿，但 Leetcode 除了会告诉你 Success/Fail 之外，
不会对 code quality 做任何判断。大到代码结构、抽象层次，小到变量、函数命名，这些体现基本功的地方是很难靠自己速成。建议大家找有很
丰富技术经验的朋友做 code review （同学就算了，除非是大牛），有 feedback 才能有针对性的改进，才能提高的更快。

从里到外的明白

设计类的题目，无论是系统设计还是面向对象设计，是很多朋友面试前的心头病。

为什么怕？还是因为“虚”嘛。

电脑上写代码用 IDE 各种自动化, 刷题上网站，连配环境都不需要。好处是练算法非常直接，坏处是省掉了很多可以学习的机会。
比如你写的 java code 是怎样编译运行的？如果只用 command line, 你能做到么？其实这些知识也许不会在面试中遇到，但在寻
找答案和摸索的过程中，你会不断接触到很多深入一点的知识。

同样的道理，你天天使用的 weicht, weibo, 知乎，google doc, twitter, netflix 等，他们有什么样的技术挑战？具体又是怎样实现的？

在计算机这个领域，保持好奇心、探索态度是非常重要的。对于每一个技术细节，从里到外的弄明白，你才有一个 coder 的范儿。
保持这种态度，慢慢的你会发现，CS 这个领域的知识是相通的，需要解决的问题是类似的。总有一天，你也可以入手那些从前看不懂
的设计问题，对面试官侃侃而谈。











