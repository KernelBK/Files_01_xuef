package com.interp.lox.parse;

import java.util.List;

import com.interp.lox.Token;

public abstract class Stmt {
	interface Visitor<R> {
		R visitBlockStmt(Block stmt);

		// R visitClassStmt(Class stmt);

		R visitExpressionStmt(Expression stmt);

		R visitFunctionStmt(Function stmt);

		R visitIfStmt(If stmt);

		R visitPrintStmt(Print stmt);

		// R visitReturnStmt(Return stmt);

		R visitVarStmt(Var stmt);

		R visitWhileStmt(While stmt);
	}

	// ±äÁ¿ÉùÃ÷Óï¾ä
	static class Var extends Stmt {
		Token name;
		// the initializer expression.
		// (If there isn¡¯t an initializer, that¡¯s null.)
		Expr initializer;

		Var(Token name, Expr initializer) {
			this.name = name;
			this.initializer = initializer;
		}

		@Override
		<R> R accept(Visitor<R> visitor) {
			return visitor.visitVarStmt(this);
		}
	}

	// ???
	static class Expression extends Stmt {
		Expression(Expr expression) {
			this.expression = expression;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitExpressionStmt(this);
		}

		final Expr expression;
	}

	static class Print extends Stmt {
		Print(Expr expression) {
			this.expression = expression;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitPrintStmt(this);
		}

		final Expr expression;
	}

	static class Block extends Stmt {
		List<Stmt> stmts;

		Block(List<Stmt> ss) {
			this.stmts = ss;
		}

		@Override
		<R> R accept(Visitor<R> visitor) {
			return visitor.visitBlockStmt(this);
		}

	}

	static class If extends Stmt {
		Expr test;
		Stmt trueClause;
		Stmt falseClause;

		If(Expr test, Stmt trueClause, Stmt falseClause) {
			this.test = test;
			this.trueClause = trueClause;
			this.falseClause = falseClause;
		}

		@Override
		<R> R accept(Visitor<R> visitor) {
			return null;
		}

	}

	static class While extends Stmt {
		Expr condition;
		Stmt body;

		While(Expr condition, Stmt body) {
			this.condition = condition;
			this.body = body;
		}

		@Override
		<R> R accept(Visitor<R> visitor) {
			return visitor.visitWhileStmt(this);
		}

	}

	static class Function extends Stmt {
		Function(Token name, List<Token> params, List<Stmt> body) {
			this.name = name;
			this.params = params;
			this.body = body;
		}

		<R> R accept(Visitor<R> visitor) {
			return visitor.visitFunctionStmt(this);
		}

		final Token name;
		final List<Token> params;
		final List<Stmt> body;
	}

	abstract <R> R accept(Visitor<R> visitor);
}
