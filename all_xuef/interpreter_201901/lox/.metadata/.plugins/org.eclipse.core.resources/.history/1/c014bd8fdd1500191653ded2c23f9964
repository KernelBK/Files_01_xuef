package com.interp.lox.parse;

import com.interp.lox.Token;

public abstract class Expr {
	interface Visitor<R> {
//	    R visitAssignExpr(Assign expr);
	    R visitBinaryExpr(Binary expr);
//	    R visitCallExpr(Call expr);
//	    R visitGetExpr(Get expr);
	    R visitGroupingExpr(Grouping expr);
	    R visitLiteralExpr(Literal expr);
//	    R visitLogicalExpr(Logical expr);
//	    R visitSetExpr(Set expr);
//	    R visitSuperExpr(Super expr);
//	    R visitThisExpr(This expr);
	    R visitUnaryExpr(Unary expr);
//	    R visitVariableExpr(Variable expr);
	  }
	static class Binary extends Expr {
		final Expr left;
		final Token operator;
		final Expr right;

		Binary(Expr left, Token operator, Expr right) {
			this.left = left;
			this.operator = operator;
			this.right = right;
		}
		<R> R accept(Visitor<R> visitor) {
		      return visitor.visitAssignExpr(this);
		}
	}

	static class Grouping extends Expr {
		Grouping(Expr expression) {
			this.expression = expression;
		}

		final Expr expression;
	}

	static class Literal extends Expr {
		Literal(Object value) {
			this.value = value;
		}

		final Object value;
	}

	static class Unary extends Expr {
		Unary(Token operator, Expr right) {
			this.operator = operator;
			this.right = right;
		}

		final Token operator;
		final Expr right;
	}
}
