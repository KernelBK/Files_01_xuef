
http://wdxtub.com/2016/04/16/thin-csapp-0/
不周山之读薄 CSAPP】零 系列概览

作者：李远
链接：https://www.zhihu.com/question/20402534/answer/223555103
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

昨天15513出分了结果还不错，趁着记忆还比较新鲜来说一下对CSAPP以及这门课的感觉。学CS的话，不太建议看书。
凡是学一门课，看优秀的公开课视频以及写编程作业是最有效率的方法。对CSAPP也不例外。这本书对应的课是CMU 15213/15513。

课程网站的官方地址是15-213/18-218/15-513: Introduction to Computer Systems。目前正在更新2017 fall的内容。

刚看了下，第一节的教学视频是最新的。建议对计算机系统感兴趣的同学看视频，遇到问题或者对某些具体细节感兴趣的时候再去看书。

15513的ppt和lecture提炼的很好，基本把书中最干活最重要的内容包含进来了。相比于看书可能能节省不少时间。

学习这门课我觉得收获最大是写lab。这门课一共有6个lab。分别是
Data Lab：bit 运算与float的相关操作
Bomb Lab：阅读汇编破解密码
Attack Lab：Buffer Overflow 攻击
Cache Lab：实现一个cache simulator已经一个cache efficient的矩阵转置。
Shell Lab：用多进程实现一个简单的linux shell。主要是熟悉进程控制与同步。
Malloc Lab：自己写一个C语言的malloc函数。
Proxy Lab：写一个支持HTML的多线程Server。熟悉Unix网络编程与多线程的控制与同步。

个人感觉收获比较大的是Shell Lab和Proxy Lab。因为线程，进程的控制与同步，光看视频或者教科书可能印象不是很深。
可是一旦自己实现了就会对这个块内容理解地更加透彻。

这里赞一下CMU的Autolab,每次作业都会提供很多测试用例。Handout也写得很详细，会告诉很多debug的方法与工具。

所以我的建议是，没必要直接啃书，先去看视频，然后一定要做对应部分的Lab。

Lab的handout和start code可以在
CS:APP3e, Bryant and O'Hallaron (http://csapp.cs.cmu.edu/3e/labs.html)这里找到。

有关其他计算机科学和机器学习的公开课推荐，可以参看我的另一个回答：李远：Coursera 上有哪些课程值得推荐？






作者：Fredric
链接：https://www.zhihu.com/question/20402534/answer/217406152
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

我今年36岁，本科电信，研究生计算机，工作这些年一直从事研发及研发管理工作。题主那些答案里罗列的书我大部分都看过，
几乎所有的知识点也多少有实际的项目经验。这是我第一次在知乎上回答问题，之所以忍不住是个人觉得楼主如果按着那些书单
去啃《深入理解计算机系统》效率会相当低，因为我自己当年就走过这样的弯路；以下是一些个人看法，希望对你有帮助：      
当题主打算去阅读《深入理解计算机系统》这种书，其实是分拆为三个层次的知识点：
1、计算机硬件基础：这部分最好的学习方式是先去搞一块单片机的开发板，51什么的都可以；搭个开发环境把芯片手册上的基础程序都跑一遍；
你就可以知道MCU、存储、外围电路和软件是如何配合工作的（此时还不涉及操作系统）；对于复杂CPU中的知识比如流水线之类，我认为能
有概念就可以，可以去看一些类似《大话CPU》这样普及类的书或博客；除非你将来的方向可能是芯片设计，那么数字电路、verilog是需要
学习的，然后有一个日本人写的《CPU自制入门》不错：）

2、操作系统：如果要深入理解OS，不要一开始上来就是大部头的Linux和Unix。我个人经验是先上《嵌入式实时操作系统ucos-II》，搭配
大约几千行C源码，它不包含多线程、文件系统、驱动管理等高级OS特性；看这个可以先对OS的进程（任务）调度、内存管理、中断等有基
本的认识；之后再去看Linux操作系统，我自己是从《Linux 内核完全注释》（基于linux 0.11版本）啃的，很花时间，也需要很多前置知识，
比如保护模式的X86 CPU、AT&T的汇编、内联汇编等；当然要深入OS其实国内也有很多大牛的好书，比如《自己动手写操作系统》、
《自己动手写嵌入式操作系统》等。这块我认为如果只是为了学习知识，那么到UCOS就可以了；后面深入的，还是要先等自己积累一定的
开发经验，比如实际在linux上写过万把行代码再说。至于编译这块，其实当你在做上面这些工作时多少已经有涉猎到了，比如单片机程序
加载、ucosII/Linux 启动加载等。想深入学习，推荐《程序员的自我修养》。备注：（UCOSII源码4、5K，Linux 0.11 大约10K（含汇编）、
Linux 现在的版本光一个进程调度就是10K左右，大家可以自己评估下可行性）

3、上层软件：按照《深入理解计算机系统》的范畴可以分为应用软件开发和网络编程两部分。网络编程这块一开始去啃所谓的协议栈是没有感觉的。
最好的方式是自己去写一些socket程序，比如在Linux环境下去实现一个TCP服务器、UDP服务器等，或搭建一个WEB服务器（书里那个tiny web也不错），
然后回过头调试的时候去抓个报文，看看传输通道里面到底有什么。应用软件存粹就是写业务逻辑，刻意尝试下多线程、文件IO等特性就好。

总结一下吧，如果你目标是深入储备这些知识，那么我不建议现在去啃这些书。经典的书是要看的，但前提是先动手做（动手是最最重要），
储备概念后再回过头来体会理解，到时候你可以花几天翻一遍梳理下知识体系就好。
