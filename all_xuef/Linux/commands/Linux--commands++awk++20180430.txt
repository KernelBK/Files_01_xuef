
它颇有玩头的原因就在于可以对列和行进行操作。
awk有很多内建的功能，比如数组、函数等。
灵活性是awk最大的优势。

$ awk 'BEGIN { i=0 } { i++ } END { print i}' filename

# 工作原理
1) 执行BEGIN { commands } 语句块中的语句。
2) 从文件或stdin中读取一行，然后执行pattern { commands }。重复这个过程，直到文件全部读取完毕。
3) 当读至输入流末尾时，执行END { commands } 语句块。

每读取一行，awk就会检查该行和提供的样式是否匹配。样式本身可以是正则表达式、条件语句以及
行匹配范围。如果匹配，则执行{}中的语句。
{} 类似于一个循环体，会对文件中的每一行进行迭代。

## 补充
awk命令具有丰富的特性。要想洞悉awk编程的精妙之处，首先应该熟悉awk重要的选项和功能。

1. 特殊变量
以下是可以用于awk的一些特殊变量。
NR: 表示记录数量，在执行过程中对应于当前行号。
NF: 表示字段数量，在执行过程中对应于当前行的字段数。
$0: 这个变量包含执行过程中当前行的文本内容。
$1: 第一个字段的文本内容。
$2: 第二个字段的文本内容。

# cat awk_data01.txt | awk '{print "line no:"NR",no of fields:"NF,"$0="$0,"$1="$1,"$2="$2,"$3="$3}'
line no:1,no of fields:3 $0=line1 f2 f3
line no:2,no of fields:3 $0=line2 f4 f5
line no:3,no of fields:3 $0=line3 f6 f7

print $NF 
print $(NF-1)

awk '{print $3,$2}' file
awk -F ":" '{print $1,$3}' /etc/passwd

seq 5|awk 'BEGIN{sum=0; print "Summation:" } {print $1"+"; sum+=$1} END{print "=="; print sum}'

3. getline

4. 使用过滤模式对awk处理的行进行过滤
awk 'NR < 5'
awk 'NR == 1, NR ==4' # 1,5之间
awk '/linux/' # 包含样式linux的行
awk '!/linux/'









