# 变量的使用和输入输出
1. 变量的定义和引用

1) shell 中的变量名
2) 通过赋值等号 = 来定义一个变量的值
name='galley' # 字符串类型，不解析任何字符
courses="abcd" # 双引号内部会解析 $ 和反斜杠特殊字符
sum=100; price=1.23
now_date=`date` # 反引号执行系统命令

shell的变量类型只有字符串类型


1) 变量的引用，使用 $
program_name="httpd"
echo $program_name
echo ${program_name}
2) 变量外面的花括号
是可选的，加是为了帮助解释器识别变量的边界，比如下面的情况：
#!/bin/bash
for skill in php java linux db2
do
  echo "I am good at ${skill}Script"
done


2. 环境变量、局部变量以及预定义变量
# 环境变量
1）定义：
一般指在os中用来指定OS runtime env的一些args：如PATH PWD USER SHELL 等
2）常见环境变量
PATH 系统路径
HOME 当前用户家目录
HISTSIZE 保存历史命令记录的条数
LOGNAME 当前用户登录名
HOSTNAME 主机名称
SHELL 当前用户使用哪种shell
LANG/LANGUAGE 和语言有关的环境变量
MAIL 邮件的存放目录
3）查看环境变量
env 显示所有环境变量
echo $PATH 

# 局部变量
1. 在shell脚本中用户自定义的变量，作用域起始于开始定义处，终于shell结束。

2. 在用户登录的shell中定义的变量，重新登录后变量消失。

# 预定义变量
和环境变量类似，也是在shell一开始就定义了的变量。不同的是，用户只能根据shell的定义
来使用这些变量，而不能重新定义它。所有预定义变量都是由$和另一个符号组成，常用的有：
$# 位置参数的数量
$* 所有位置参数的内容
$? 命令执行后返回的状态 0表示成功
$$ 当前进程的进程号
$0 当前执行的进程名


3. 脚本的输入和输出
# echo
-e 识别转义字符
echo hello\tworld

-n 忽略结尾换行

# printf

# read
读取输入设备的一行
read ipaddr



003 顺序结构

1. let 执行数值运算
let res=10%3

2. expr
整数运算，字符串操作
expr 1 + 1
expr 1 \* 1

3. 浮点运算 bc

4. 字符串操作
1) 字符串长度
expr length $str
echo ${#str}

2) 取子串
expr substr $string $position $length
expr substr $str1 1 3
或者 echo ${str1 0:3}
3) 字符串连接
str3="${str1}$str2"  # 这个地方可以定义连接字符串的分隔符
4) 字符串替换
str="you and you and she"
echo ${str/you/YOU} # 只替换一次
echo ${str//you/YOU} # 全部替换


004 Linux SHELL编程与实践4 shell程序中的运算和比较操作2
1. test 比较两个值
成功则返回0
1) 整数比较
-gt >
-lt <
-ge >=
-le <=
-eq =
-ne !=
2) 字符串比较
-z 为空
-n
=
!=

test -n $str
test $str1 = $str2
3) 逻辑比较(与或非)
-a
-o
!

# 参数个数为1，且值为100
test $# -eq 1 -a $1 -eq 100

4) 文件比较

语法：
test v1 -option v2
test $b -gt $a

#!/bin/bash
test $b -gt $a
if [ $? -eq 0 ]
  then echo "b>a"
  else echo "b<a"
fi










