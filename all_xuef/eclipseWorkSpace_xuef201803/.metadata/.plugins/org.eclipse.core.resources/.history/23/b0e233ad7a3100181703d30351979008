一定要追求完美!!!

AOP 面向切面编程(Aspect Oriented Programming)
## 切面
表示从业务逻辑中分离出来的横切逻辑，如性能监控、日志记录、权限控制等。
这些功能可从核心的业务逻辑代码中抽离出去。
即，通过AOP可以解决代码耦合问题，使职责更加单一。

## AspectJ(比Spring自带的aop好)
Spring + AspectJ

## 应用场景
1. 统计每个方法的执行时间

2. JDBC 数据库操作
开头: 连接数据库
...操作...
结尾: 关闭数据库连接

## Spring AOP
### 使用
1. 编程式
2. 声明式

### 5种切入
前置通知
后置通知
返回通知
异常通知
引入增强

### 我们想拦截某些类的某些方法
Advisor(切面)封装了Advice(增强)和Pointcut(切点)

---Spring AOP 的使用(基于正则表达式的切面类)
如何拦截指定注解的方法???

---Spring + AspectJ
AspectJ 切点表达式
1. 拦截指定类的指定方法
配置:
<aop:aspectj-autoproxy proxy-target-class="true" />
proxy-target-class="true" 才能代理类(使用CGLib动态代理)

2. 拦截指定注解的方法
1) 首先自定义注解 Tag (标注在方法上的)
2) @Before(@annotation(aop.demo.Tag))
3)将Tag标注在要拦截的方法上

### 几种注解
Around
Before
After
AfterThrowing
AfterReturning
DeclareParents












