



Exercise 2.27.  Modify your reverse procedure of exercise 2.18 to produce a deep-reverse procedure that 
takes a list as argument and returns as its value the list with its elements reversed and with all 
sublists deep-reversed as well. For example,

(define x (list (list 1 2) (list 3 4)))

x
((1 2) (3 4))

(reverse x)
((3 4) (1 2))

(deep-reverse x)
((4 3) (2 1))

;;;;;;;;;;;;;;;;;;;;;
(define (deep-reverse lst)
	(cond ((null? lst) nil)
		  ((list? (car lst)) (append (deep-reverse (cdr lst)) (list (deep-reverse (car lst)))))
		  (else (append (deep-reverse (cdr lst)) (list (car lst))))))

(define (reverse lst)
	(cond 
		((null? lst) nil)
		(else (append (reverse (cdr lst)) (list (car lst))))))

(define (deep-reverse lst) 
   (if (pair? lst) 
       (reverse (map deep-reverse lst)) 
       lst))




Exercise 2.28.  Write a procedure fringe that takes as argument a tree (represented as a list) and returns a list 
whose elements are all the leaves of the tree arranged in left-to-right order. For example,

(define x (list (list 1 2) (list 3 4)))

(fringe x)
(1 2 3 4)

(fringe (list x x))
(1 2 3 4 1 2 3 4)


(define (fringe lst)
	(cond
		((null? lst) nil)
		((list? (car lst)) (append (fringe (car lst)) (fringe (cdr lst))))
		(else (append (list (car lst)) (fringe (cdr lst))))))

















