

fold-left, fold-right 与交换律(amazing)


Exercise 2.38.  The accumulate procedure is also known as fold-right, because it combines the first element of the sequence 
with the result of combining all the elements to the right. There is also a fold-left, which is similar to fold-right, 
except that it combines elements working in the opposite direction: 


(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))


What are the values of 

(fold-right / 1 (list 1 2 3))
;; 1/(2/3) --> 3/2
(fold-left / 1 (list 1 2 3))
;; 1/2/3 --> 1/6
(fold-right list nil (list 1 2 3))
;; (list 1 (list 2 (list 3 nil))) --> (1 (2 (3 ())))
(fold-left list nil (list 1 2 3))
;; (list (list (list nil 1) 2) 3) --> (((() 1) 2) 3)

Give a property that op should satisfy to guarantee that fold-right and fold-left will produce the same values for any sequence. 

;;;; accumulate 将列表的第一个元素组合到剩余元素的累积结果上
(define (fold-right op initial sequence)
	(if (null? sequence) 
		initial
		(op (car sequence) 
			(fold-right op initial (cdr sequence)))))



Exercise 2.39.   Complete the following definitions of reverse (exercise 2.18) in terms of fold-right and fold-left from exercise 2.38: 

(define (reverse sequence)
  (fold-right (lambda (x y) (append y (list x))) nil sequence))
;; 不能通过深入 fold-left 的细节来理解; 你得整体来看
;; fold-left 是把后面的元素与前面的累积结果做累加!
(define (reverse2 sequence)
  (fold-left (lambda (x y) (append (list y) x)) nil sequence))





