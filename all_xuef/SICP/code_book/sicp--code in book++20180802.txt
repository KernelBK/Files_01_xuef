



;; sicp 书上代码

;;;; queue
In terms of data abstraction, we can regard a queue as defined by the following set of operations: 

a constructor:
	(make-queue)
	returns an empty queue (a queue containing no items).

two selectors:
	(empty-queue? <queue>)
	tests if the queue is empty.
	(front-queue <queue>)
	returns the object at the front of the queue, signaling an error if the queue is empty; it does not modify the queue.

two mutators:
	(insert-queue! <queue> <item>)
	inserts the item at the rear of the queue and returns the modified queue as its value.
	(delete-queue! <queue>)
	removes the item at the front of the queue and returns the modified queue as its value, signaling 
	an error if the queue is empty before the deletion. 


(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))

(define (make-queue) (cons nil nil))

(define (empty-queue? queue) (null? (front-ptr queue)))

(define (front-queue queue)
	(if (empty-queue? queue)
		(error "FRONT called with an empty queue" queue)
		(car (front-ptr queue))))
		
(define (insert-queue! queue item)
	(let ((new-pair (cons item nil)))
		(cond ((empty-queue? queue) (set-car! queue new-pair) (set-cdr! queue new-pair) queue)
			  (else (set-cdr! (rear-ptr queue) new-pair) (set-cdr! queue new-pair) queue)
			)))

(define (delete-queue! queue)
	(cond ((empty-queue? queue) (error "FRONT called with an empty queue" queue))
		  (else (set-car! queue (cdr (front-ptr queue))) queue)))

;; 带有局部状态的过程与对象系统						  
Exercise 3.22 使用带有局部状态的过程来表示 queue


;;; table
(define (caar lst) (car (car lst)))

(define (look-up key table)
	(let ((record (assoc key (cdr table))))
		(if record
			(cdr record)
			false)))
(define (assoc key records)
	(cond ((null? records) false)
		  ((equal? key (caar records)) (car records))
		  (else (assoc key (cdr records)))))

(define (make-table)
	(list '*table*))
(define (insert! key val table)
	(let ((record (assoc key (cdr table))))
		(if record
			(set-cdr! record val)
			(set-cdr! table (cons (cons key val) (cdr table)))))
	'ok)
	

;; build table as procedure
(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup key-1 key-2)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (cdr record)
                  false))
            false)))
    (define (insert! key-1 key-2 value)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                            (cons (cons key-2 value)
                                  (cdr subtable)))))
            (set-cdr! local-table
                      (cons (list key-1
                                  (cons key-2 value))
                            (cdr local-table)))))
      'ok)    
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))









