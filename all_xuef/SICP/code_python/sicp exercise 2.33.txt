

(define (square x)
  (* x x))

(define x (list 1 2 3))

(define (accu op initial seq)
  (if (null? seq)
      initial
      (op (car seq)
          (accu op initial (cdr seq)))
      )
  )

;; 2.33
(define (xmap p seq)
  (accu (lambda (x y) (cons (p x) y)) '() seq)
  )

(define (xappend seq1 seq2)
  (accu cons seq2 seq1))
;; 2.34
;; 多项式求值
(define (horner-eval x coefficient-sequence)
  (accu (lambda (this-coeff higher-terms) 
          (+ this-coeff (* x higher-terms)))
        0
        coefficient-sequence)
  )

  ;; 2.35
(define (count-leaves t)
  (accu + 0 (map (lambda (item)
                   (if (pair? item)
                       (count-leaves item)
                       1
                       )) t))
  )

;; 生成整数序列
(define (enumerate-interval low high)
  (if (> low high)
      '()
      (cons low (enumerate-interval (+ 1 low) high)))
  )
;; 生成 点对
(define p 
  (map (lambda (i)
       (map (lambda (j) (list i j))
            (enumerate-interval 1 (- i 1)))
       )
     (enumerate-interval 1 6)
     ))
;; 与python的列表解析式 对比
=> (() ((2 1)) ((3 1) (3 2)) ((4 1) (4 2) (4 3)) ((5 1) (5 2) (5 3) (5 4)) ((6 1) (6 2) (6 3) (6 4) (6 5)))	 

	 
	 
	 
	 