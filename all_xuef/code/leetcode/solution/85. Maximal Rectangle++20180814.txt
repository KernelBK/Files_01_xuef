

这是一道很经典的题目，各种复杂度各种思路的解法很多。在做这题之前，建议先做Largest Rectangle in Histogram

方法一
最直观也是最naive的思路：以任意两点（ib, jb), (ie, je)为两对角顶点，查看是否包含为0的元素。O(n^6),提交会TLE



https://blog.csdn.net/linhuanmars/article/details/24444491
这道题的解法灵感来自于Largest Rectangle in Histogram这道题，假设我们把矩阵沿着某一行切下来，然后把切的行作为底面，
将自底面往上的矩阵看成一个直方图（histogram）。直方图的中每个项的高度就是从底面行开始往上1的数量。
根据Largest Rectangle in Histogram我们就可以求出当前行作为矩阵下边缘的一个最大矩阵。
接下来如果对每一行都做一次Largest Rectangle in Histogram，从其中选出最大的矩阵，那么它就是整个矩阵中面积最大的子矩阵。
算法的基本思路已经出来了，剩下的就是一些节省时间空间的问题了。
我们如何计算某一行为底面时直方图的高度呢？ 如果重新计算，那么每次需要的计算数量就是当前行数乘以列数。
然而在这里我们会发现一些动态规划的踪迹，如果我们知道上一行直方图的高度，我们只需要看新加进来的行（底面）上
对应的列元素是不是0，如果是，则高度是0，否则则是上一行直方图的高度加1。利用历史信息，我们就可以在线行时间内
完成对高度的更新。我们知道，Largest Rectangle in Histogram的算法复杂度是O(n)。
所以完成对一行为底边的矩阵求解复杂度是O(n+n)=O(n)。接下来对每一行都做一次，那么算法总时间复杂度是O(m*n)。
空间上，我们只需要保存上一行直方图的高度O(n)，加上Largest Rectangle in Histogram中所使用的空间O(n)，所以总空间复杂度还是O(n)。



第一种方法是利用DP，时间复杂度是 O(m * m * n)

dp(i,j)：矩阵中同一行以(i,j)结尾的全部为1的最长子串长度


第二种方法：
来自https://oj.leetcode.com/discuss/5198/a-o-n-2-solution-based-on-largest-rectangle-in-histogram

其实这里和 Largest Rectangle in Histogram是类似的，

之前的dp(i,j)保存以第i行，第j列结尾的，同一行中连续1的个数；那么这里我们用一个数组x，使x[j]保存当前行第j列中的连续1的个数。
之后按行遍历，每一行都按Largest Rectangle in Histogram的算法处理一遍

代码如下：复杂度为O(m*n)


