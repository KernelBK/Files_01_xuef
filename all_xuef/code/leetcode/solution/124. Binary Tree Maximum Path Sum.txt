



思路：
1. 与常规path sum不同，这题的path sum可以不起始于root，也可以不终止于leaf。

2. 这样的path可以归纳为两种情况：
(1) root->leaf path中的一段：即题目例子中的1-2或1-3。
(2) 两个节点之间经过它们lowest common ancestor (LCA)的path：即题目中的2-1-3。

3. 显然top-down的递归并不适用于这题，因为对于类型(2)的path，它的path sum同时取决于LCA左右sub path的最大值。
而这样的path sum是无法通过top-down传递来获取的。

4. 所以这里可以采用bottom-up的递归方法:
对于节点x:
定义PS1(x)为从x出发向leaf方向的第一类path中最大的path sum。
定义PS2(x)为以x为LCA的第二类path中的最大path sum。
显然如果我们求得所有节点x的PS1 & PS2，其中的最大值必然就是要求的max path sum。



总结：

1. 解题的关键在于对path的分类以及应用 bottom-up recursion。
分类--类别既不多也不少，让我想起了线性代数中基的概念。
确定(类别)最小子集，使得这个子集能够涵盖所有情况。这就像确定一组基。

2. 注意的细节是当x->left或x->right的第一类path sum为负数时，则这类path不应该传递到x：ln 13-16。

3. 代码并没有特殊处理leaf节点的情况。因为当root->left和root->right都不存在时，ps1_left和ps1_right均为初始值0：ln 12。于是ps1_root = ps2_root = root->val。


