


188. Best Time to Buy and Sell Stock IV


Input: [3,2,6,5,0,3], k = 2
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4.
             Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
			 
/**
 * dp[i, j] represents the max profit up until prices[j] using at most i transactions. 
 * dp[i, j] = max(dp[i, j-1], prices[j] - prices[jj] + dp[i-1, jj]) { jj in range of [0, j-1] }
 *          = max(dp[i, j-1], prices[j] + max(dp[i-1, jj] - prices[jj]))
 * dp[0, j] = 0; 0 transactions makes 0 profit
 * dp[i, 0] = 0; if there is only one price data point you can't make any transaction.
 */
 
 

1) 最后一次交易
xxx
2) 考虑最后一天 & 不考虑最后一天

last sell
最后一只股票只可能卖, 不可能是买。

3） 最后一只卖的股票


The idea of this thread was originally proposed by @yishiluo in
https://leetcode.com/discuss/26745/c-solution-with-o-n-klgn-time-using-max-heap-and-stack

General idea:

We use the term "valley" to denote a local minimum index of prices, and the term "peak" to denote a local 
maximum index of prices. Let (v1, p1) and (v2, p2) denote two successive valley-peak pairs of the prices, 
respectively. Consider the two cases:

Case 1: prices[v1] <= prices[v2] and prices[p1] <= prices[p2]. In this case, if we can conduct one transaction, 
we will use (v1, p2). If we can conduct two transactions, we will use (v1, p1) and (v2, p2). Equivalently, 
we can consider (v1, p2) as one transaction opportunity, and (v2, p1) as another transaction opportunity. 
The key idea is that these two original valley-peak pairs provide two transaction opportunities: (v1, p2) and (v2, p1).

Case 2: prices[v1] >= prices[v2] or prices[p1] >= prices[p2]. In this case, if we can conduct one transaction, 
we will use either (v1, p1) or (v2, p2). If we can conduct two transactions, we will use both (v1, p1) and (v2, p2). 
That is, these two valley-peak pairs provides two transaction opportunities: (v1, p1) and (v2, p2).

The algorithm consists of two steps:

Step 1: Find all transaction opportunities and record their profits. We use a stack vps to store the valley-peak 
pairs of the stock prices, wherein the valley value is sorted in ascending order. (The valley value at the top of 
the stack is the largest.) The profit of all transaction opportunities are recorded in the vector profits. 
The time complexity of this step is O(n).

Step 2: Find the k most profitable transaction opportunities. The maximum profit we can get is the summation of the k opportunity. The time complexity of this step is O(n), too.

Overall complexity:

Time: O(n)

Space: worse-case O(n)





### 
局部最小值, 局部最大值
