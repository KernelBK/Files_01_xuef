"""
xuef, 20180701
sicp 2.1 复合数据

1. 隔离细节
2. 模块化
3. 更高的概念层次
# 形成复合数据的关键就在于，程序设计语言中提供了某种“粘合剂”，它们
  可以将一些数据对象组合起来，形成更复杂的数据对象。
# 甚至，我们可以构造吹萃由过程形成的复合数据

数据抽象：
1. 克服复杂性
2. 能在程序的不同部分之间建立起适当的抽象屏障
"""

"""
在处理复合数据中的一个关键思想是闭包的概念--也就是说，用于组合数据对象的粘合剂
不但能用于组合基本的数据对象，同样也可以用于复合的数据对象。

列表可以作为列表的元素

S-expressions的定义也遵循闭包的概念(The little Schemer)

这让我想起了线性代数中的“空间”概念，一个“空间”对加法和数乘操作是闭合的。
"""

"""
复合对象的使用将真正提高程序设计语言的表达能力。
考虑形成“线性组合”ax + by; 我们可能想到写一个过程。
如果以数值作为参数，这样做没有任何困难：
"""
##import operator as op
def linear_combination(a, b, x, y):
   return a*x + b*y

"""
但如果我们关心的不仅仅是数，假定我们希望表述的是基于加和乘形成的线性组合
的思想，所针对的是有理数、复数、多项式或者其他东西，我们可以将其表述为：
"""
def linear_combination_general(a, b, x, y):
    def add(a1, a2):
        pass
    def mul(a, x):
        pass
    return add(mul(a,x), mul(b,y))
