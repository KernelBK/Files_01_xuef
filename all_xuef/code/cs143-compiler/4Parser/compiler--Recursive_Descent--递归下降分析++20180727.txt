

2.19 实现一个简单的递归下降分析器
http://python3-cookbook-personal.readthedocs.io/zh_CN/latest/c02/p19_writing_recursive_descent_parser.html


自己动手写编译器
https://www.cnblogs.com/Ninputer/archive/2011/06/21/2085527.html


使用递归下降法编写语法分析器无需任何类库，编写简单的分析器时甚至连前面学习的词法分析库都无需使用。
我们来看一个例子：现在有一种表示二叉树的字符串表达式，它的文法是：
N → a ( N, N )
N → ε
其中终结符a表示任意一个英文字母，ε表示空。这个文法的含义是，二叉树的节点要么是空，要么是一个字母开头，并带有一对括号，
括号中逗号左边是这个节点的左儿子，逗号右边是这个节点的右儿子。例如字符串 A(B(,C(,)),D(,))就表示这样一棵二叉树。

现在我们要写一个解析器，输入这种字符串，然后在内存中建立起这棵二叉树。

这是一道微软面试题，曾经难倒了不少参加面试的候选人。不知在座各位是否对写出这段程序有信心呢？不少参选者想到了要用栈，或者用递归，
去寻找逗号的位置将字符串拆解开来等等方法。但是若是使用递归下降法，这个程序写起来非常容易。

我们来看看编写递归下降语法分析器的一般步骤：
1. 使用一个索引来记录当前扫描的位置。通常将它做成一个整数字段。
2. 为每个非终结符编写一个方法。
3. 如果一个非终结符有超过一个的产生式，则在这个方法中对采用哪个产生式进行分支预测。
4. 处理单一产生式时，遇到正确终结符则将第一步创建的扫描索引位置向前移动；如遇到非终结符则调用第二步中创建的相应方法。
5. 如果需要产生解析的结果（比如本例中的二叉树），在方法返回之前将它构造出来。


