#0Y_ #0Y |CHARSET|::|UTF-8|
(|SYSTEM|::|%IN-PACKAGE| "UIOP/PACKAGE" :|NICKNAMES| '|COMMON-LISP|::|NIL|
 :|USE| '|COMMON-LISP|::|NIL| :|CASE-SENSITIVE| |COMMON-LISP|::|NIL|
 :|CASE-INVERTED| |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|USE-PACKAGE| '("COMMON-LISP") "UIOP/PACKAGE")
(|SYSTEM|::|INTERN-EXPORT|
 '("FIND-PACKAGE*" "FIND-SYMBOL*" "SYMBOL-CALL" "INTERN*" "EXPORT*" "IMPORT*"
   "SHADOWING-IMPORT*" "SHADOW*" "MAKE-SYMBOL*" "UNINTERN*"
   "SYMBOL-SHADOWING-P" "HOME-PACKAGE-P" "SYMBOL-PACKAGE-NAME"
   "STANDARD-COMMON-LISP-SYMBOL-P" "REIFY-PACKAGE" "UNREIFY-PACKAGE"
   "REIFY-SYMBOL" "UNREIFY-SYMBOL" "NUKE-SYMBOL-IN-PACKAGE" "NUKE-SYMBOL"
   "REHOME-SYMBOL" "ENSURE-PACKAGE-UNUSED" "DELETE-PACKAGE*" "PACKAGE-NAMES"
   "PACKAGES-FROM-NAMES" "FRESH-PACKAGE-NAME" "RENAME-PACKAGE-AWAY"
   "PACKAGE-DEFINITION-FORM" "PARSE-DEFINE-PACKAGE-FORM" "ENSURE-PACKAGE"
   "DEFINE-PACKAGE")
 "UIOP/PACKAGE" |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|FIND-PACKAGE| "UIOP/PACKAGE")
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/PACKAGE"))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|FIND-PACKAGE*|
 (|UIOP/PACKAGE|::|PACKAGE-DESIGNATOR| |COMMON-LISP|::|&OPTIONAL|
  (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|LET|
  ((|COMMON-LISP|::|PACKAGE|
    (|COMMON-LISP|::|FIND-PACKAGE| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)))
  (|COMMON-LISP|::|COND| (|COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|PACKAGE|)
   (|COMMON-LISP|::|ERROR|
    (|COMMON-LISP|::|ERROR| "No package named ~S"
     (|COMMON-LISP|::|STRING| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|FIND-SYMBOL*|
 (|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|
  |COMMON-LISP|::|&OPTIONAL| (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|T|))
 "Find a symbol in a package of given string'ified NAME;\n
unlike CL:FIND-SYMBOL, work well with 'modern' case sensitive syntax\n
by letting you supply a symbol or keyword for the name;\n
also works well when the package is not present.\n
If optional ERROR argument is NIL, return NIL instead of an error\n
when the symbol is not found."
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|PACKAGE|
     (|UIOP/PACKAGE|::|FIND-PACKAGE*| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|
      |COMMON-LISP|::|ERROR|)))
   (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PACKAGE|
    (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
     (|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|STATUS|)
     (|COMMON-LISP|::|FIND-SYMBOL|
      (|COMMON-LISP|::|STRING| |UIOP/PACKAGE|::|NAME|)
      |COMMON-LISP|::|PACKAGE|)
     (|COMMON-LISP|::|COND|
      (|UIOP/PACKAGE|::|STATUS|
       (|COMMON-LISP|::|RETURN|
        (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|SYMBOL|
         |UIOP/PACKAGE|::|STATUS|)))
      (|COMMON-LISP|::|ERROR|
       (|COMMON-LISP|::|ERROR| "There is no symbol ~S in package ~S"
        |UIOP/PACKAGE|::|NAME|
        (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|PACKAGE|))))))
   (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|SYMBOL-CALL|
 (|COMMON-LISP|::|PACKAGE| |UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|&REST|
  |UIOP/PACKAGE|::|ARGS|)
 "Call a function associated with symbol of given name in given package,\n
with given ARGS. Useful when the call is read before the package is loaded,\n
or when loading the package is optional."
 (|COMMON-LISP|::|APPLY|
  (|UIOP/PACKAGE|::|FIND-SYMBOL*| |UIOP/PACKAGE|::|NAME|
   |COMMON-LISP|::|PACKAGE|)
  |UIOP/PACKAGE|::|ARGS|))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|INTERN*|
 (|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|
  |COMMON-LISP|::|&OPTIONAL| (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|INTERN| (|COMMON-LISP|::|STRING| |UIOP/PACKAGE|::|NAME|)
  (|UIOP/PACKAGE|::|FIND-PACKAGE*| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|
   |COMMON-LISP|::|ERROR|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|EXPORT*|
 (|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)
 (|COMMON-LISP|::|LET*|
  ((|COMMON-LISP|::|PACKAGE|
    (|UIOP/PACKAGE|::|FIND-PACKAGE*| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|))
   (|COMMON-LISP|::|SYMBOL|
    (|UIOP/PACKAGE|::|INTERN*| |UIOP/PACKAGE|::|NAME|
     |COMMON-LISP|::|PACKAGE|)))
  (|COMMON-LISP|::|EXPORT|
   (|COMMON-LISP|::|OR| |COMMON-LISP|::|SYMBOL|
    (|COMMON-LISP|::|LIST| |COMMON-LISP|::|SYMBOL|))
   |COMMON-LISP|::|PACKAGE|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|IMPORT*|
 (|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)
 (|COMMON-LISP|::|IMPORT|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|SYMBOL|
   (|COMMON-LISP|::|LIST| |COMMON-LISP|::|SYMBOL|))
  (|UIOP/PACKAGE|::|FIND-PACKAGE*| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|SHADOWING-IMPORT*|
 (|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)
 (|COMMON-LISP|::|SHADOWING-IMPORT|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|SYMBOL|
   (|COMMON-LISP|::|LIST| |COMMON-LISP|::|SYMBOL|))
  (|UIOP/PACKAGE|::|FIND-PACKAGE*| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|SHADOW*|
 (|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)
 (|COMMON-LISP|::|SHADOW|
  (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|STRING| |UIOP/PACKAGE|::|NAME|))
  (|UIOP/PACKAGE|::|FIND-PACKAGE*| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|MAKE-SYMBOL*| (|UIOP/PACKAGE|::|NAME|)
 (|COMMON-LISP|::|ETYPECASE| |UIOP/PACKAGE|::|NAME|
  (|COMMON-LISP|::|STRING|
   (|COMMON-LISP|::|MAKE-SYMBOL| |UIOP/PACKAGE|::|NAME|))
  (|COMMON-LISP|::|SYMBOL|
   (|COMMON-LISP|::|COPY-SYMBOL| |UIOP/PACKAGE|::|NAME|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|UNINTERN*|
 (|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|
  |COMMON-LISP|::|&OPTIONAL| (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|PACKAGE|
     (|UIOP/PACKAGE|::|FIND-PACKAGE*| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|
      |COMMON-LISP|::|ERROR|)))
   (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PACKAGE|
    (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
     (|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|STATUS|)
     (|UIOP/PACKAGE|::|FIND-SYMBOL*| |UIOP/PACKAGE|::|NAME|
      |COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|ERROR|)
     (|COMMON-LISP|::|COND|
      (|UIOP/PACKAGE|::|STATUS|
       (|COMMON-LISP|::|UNINTERN| |COMMON-LISP|::|SYMBOL|
        |COMMON-LISP|::|PACKAGE|)
       (|COMMON-LISP|::|RETURN|
        (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|SYMBOL|
         |UIOP/PACKAGE|::|STATUS|)))
      (|COMMON-LISP|::|ERROR|
       (|COMMON-LISP|::|ERROR| "symbol ~A not present in package ~A"
        (|COMMON-LISP|::|STRING| |COMMON-LISP|::|SYMBOL|)
        (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|PACKAGE|))))))
   (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|SYMBOL-SHADOWING-P|
 (|COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|AND|
  (|COMMON-LISP|::|MEMBER| |COMMON-LISP|::|SYMBOL|
   (|COMMON-LISP|::|PACKAGE-SHADOWING-SYMBOLS| |COMMON-LISP|::|PACKAGE|))
  |COMMON-LISP|::|T|))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|HOME-PACKAGE-P|
 (|COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|AND| |COMMON-LISP|::|PACKAGE|
  (|COMMON-LISP|::|LET|
   ((|UIOP/PACKAGE|::|SP|
     (|COMMON-LISP|::|SYMBOL-PACKAGE| |COMMON-LISP|::|SYMBOL|)))
   (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|SP|
    (|COMMON-LISP|::|LET|
     ((|UIOP/PACKAGE|::|PP|
       (|UIOP/PACKAGE|::|FIND-PACKAGE*| |COMMON-LISP|::|PACKAGE|)))
     (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|PP|
      (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|SP| |UIOP/PACKAGE|::|PP|)))))))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|FIND-PACKAGE*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|PACKAGE-DESIGNATOR| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|FIND-SYMBOL*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|
    |COMMON-LISP|::|&OPTIONAL| (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|SYMBOL-CALL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PACKAGE| |UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|&REST|
    |UIOP/PACKAGE|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|INTERN*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|
    |COMMON-LISP|::|&OPTIONAL| (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|EXPORT*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|IMPORT*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|SHADOWING-IMPORT*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|SHADOW*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|MAKE-SYMBOL*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/PACKAGE|::|NAME|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|UNINTERN*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|
    |COMMON-LISP|::|&OPTIONAL| (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|SYMBOL-SHADOWING-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|PACKAGE|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|HOME-PACKAGE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|PACKAGE|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME|
 (|COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|LET|
  ((|COMMON-LISP|::|PACKAGE|
    (|COMMON-LISP|::|SYMBOL-PACKAGE| |COMMON-LISP|::|SYMBOL|)))
  (|COMMON-LISP|::|AND| |COMMON-LISP|::|PACKAGE|
   (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|PACKAGE|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|STANDARD-COMMON-LISP-SYMBOL-P|
 (|COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
  (|UIOP/PACKAGE|::|SYM| |UIOP/PACKAGE|::|STATUS|)
  (|UIOP/PACKAGE|::|FIND-SYMBOL*| |COMMON-LISP|::|SYMBOL| :|COMMON-LISP|
   |COMMON-LISP|::|NIL|)
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|SYM| |COMMON-LISP|::|SYMBOL|)
   (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|STATUS| :|EXTERNAL|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|REIFY-PACKAGE|
 (|COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/PACKAGE|::|PACKAGE-CONTEXT|)
 (|COMMON-LISP|::|IF|
  (|COMMON-LISP|::|EQ| |COMMON-LISP|::|PACKAGE|
   |UIOP/PACKAGE|::|PACKAGE-CONTEXT|)
  |COMMON-LISP|::|T|
  (|COMMON-LISP|::|ETYPECASE| |COMMON-LISP|::|PACKAGE|
   (|COMMON-LISP|::|NULL| |COMMON-LISP|::|NIL|)
   ((|COMMON-LISP|::|EQL| (|COMMON-LISP|::|FIND-PACKAGE| :|CL|)) :|CL|)
   (|COMMON-LISP|::|PACKAGE|
    (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|PACKAGE|)))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|UNREIFY-PACKAGE|
 (|COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/PACKAGE|::|PACKAGE-CONTEXT|)
 (|COMMON-LISP|::|ETYPECASE| |COMMON-LISP|::|PACKAGE|
  (|COMMON-LISP|::|NULL| |COMMON-LISP|::|NIL|)
  ((|COMMON-LISP|::|EQL| |COMMON-LISP|::|T|) |UIOP/PACKAGE|::|PACKAGE-CONTEXT|)
  ((|COMMON-LISP|::|OR| |COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|STRING|)
   (|COMMON-LISP|::|FIND-PACKAGE| |COMMON-LISP|::|PACKAGE|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|REIFY-SYMBOL|
 (|COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/PACKAGE|::|PACKAGE-CONTEXT|)
 (|COMMON-LISP|::|ETYPECASE| |COMMON-LISP|::|SYMBOL|
  ((|COMMON-LISP|::|OR| |COMMON-LISP|::|KEYWORD|
    (|COMMON-LISP|::|SATISFIES|
     |UIOP/PACKAGE|::|STANDARD-COMMON-LISP-SYMBOL-P|))
   |COMMON-LISP|::|SYMBOL|)
  (|COMMON-LISP|::|SYMBOL|
   (|COMMON-LISP|::|VECTOR|
    (|COMMON-LISP|::|SYMBOL-NAME| |COMMON-LISP|::|SYMBOL|)
    (|UIOP/PACKAGE|::|REIFY-PACKAGE|
     (|COMMON-LISP|::|SYMBOL-PACKAGE| |COMMON-LISP|::|SYMBOL|)
     |UIOP/PACKAGE|::|PACKAGE-CONTEXT|)))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|UNREIFY-SYMBOL|
 (|COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/PACKAGE|::|PACKAGE-CONTEXT|)
 (|COMMON-LISP|::|ETYPECASE| |COMMON-LISP|::|SYMBOL|
  (|COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|SYMBOL|)
  ((|COMMON-LISP|::|SIMPLE-VECTOR| 2.)
   (|COMMON-LISP|::|LET*|
    ((|COMMON-LISP|::|SYMBOL-NAME|
      (|COMMON-LISP|::|SVREF| |COMMON-LISP|::|SYMBOL| 0.))
     (|UIOP/PACKAGE|::|PACKAGE-FOO|
      (|COMMON-LISP|::|SVREF| |COMMON-LISP|::|SYMBOL| 1.))
     (|COMMON-LISP|::|PACKAGE|
      (|UIOP/PACKAGE|::|UNREIFY-PACKAGE| |UIOP/PACKAGE|::|PACKAGE-FOO|
       |UIOP/PACKAGE|::|PACKAGE-CONTEXT|)))
    (|COMMON-LISP|::|IF| |COMMON-LISP|::|PACKAGE|
     (|UIOP/PACKAGE|::|INTERN*| |COMMON-LISP|::|SYMBOL-NAME|
      |COMMON-LISP|::|PACKAGE|)
     (|UIOP/PACKAGE|::|MAKE-SYMBOL*| |COMMON-LISP|::|SYMBOL-NAME|))))))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|SYMBOL|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|STANDARD-COMMON-LISP-SYMBOL-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|SYMBOL|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|REIFY-PACKAGE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/PACKAGE|::|PACKAGE-CONTEXT|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|UNREIFY-PACKAGE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/PACKAGE|::|PACKAGE-CONTEXT|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|REIFY-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/PACKAGE|::|PACKAGE-CONTEXT|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|UNREIFY-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/PACKAGE|::|PACKAGE-CONTEXT|)))
(|COMMON-LISP|::|DEFVAR| |UIOP/PACKAGE|::|*ALL-PACKAGE-HAPPINESS*|
 '|COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|DEFVAR| |UIOP/PACKAGE|::|*ALL-PACKAGE-FISHINESS*|
 (|COMMON-LISP|::|LIST| |COMMON-LISP|::|T|))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|RECORD-FISHY| (|UIOP/PACKAGE|::|INFO|)
 (|COMMON-LISP|::|PUSH| |UIOP/PACKAGE|::|INFO|
  |UIOP/PACKAGE|::|*ALL-PACKAGE-FISHINESS*|))
(|COMMON-LISP|::|DEFMACRO| |UIOP/PACKAGE|::|WHEN-PACKAGE-FISHINESS|
 (|COMMON-LISP|::|&BODY| |UIOP/PACKAGE|::|BODY|)
 `(|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|*ALL-PACKAGE-FISHINESS*|
   ,@|UIOP/PACKAGE|::|BODY|))
(|COMMON-LISP|::|DEFMACRO| |UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS|
 (|COMMON-LISP|::|&REST| |UIOP/PACKAGE|::|INFO|)
 `(|UIOP/PACKAGE|::|WHEN-PACKAGE-FISHINESS|
   (|UIOP/PACKAGE|::|RECORD-FISHY|
    (|COMMON-LISP|::|LIST| ,@|UIOP/PACKAGE|::|INFO|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/PACKAGE|::|*ALL-PACKAGE-HAPPINESS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/PACKAGE|::|*ALL-PACKAGE-FISHINESS*|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|RECORD-FISHY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/PACKAGE|::|INFO|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/PACKAGE|::|WHEN-PACKAGE-FISHINESS|)
(|SYSTEM|::|%PUTD| '|UIOP/PACKAGE|::|WHEN-PACKAGE-FISHINESS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/PACKAGE|::|WHEN-PACKAGE-FISHINESS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|UIOP/PACKAGE|::|BODY| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |UIOP/PACKAGE|::|WHEN-PACKAGE-FISHINESS|
      `(|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|*ALL-PACKAGE-FISHINESS*|
        ,@|UIOP/PACKAGE|::|BODY|)))))
  '(|COMMON-LISP|::|&BODY| |UIOP/PACKAGE|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS|)
(|SYSTEM|::|%PUTD| '|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|UIOP/PACKAGE|::|INFO| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS|
      `(|UIOP/PACKAGE|::|WHEN-PACKAGE-FISHINESS|
        (|UIOP/PACKAGE|::|RECORD-FISHY|
         (|COMMON-LISP|::|LIST| ,@|UIOP/PACKAGE|::|INFO|)))))))
  '(|COMMON-LISP|::|&REST| |UIOP/PACKAGE|::|INFO|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|GET-SETF-FUNCTION-SYMBOL|
 (|COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|LET|
  ((|UIOP/PACKAGE|::|SYM|
    (|COMMON-LISP|::|GET| |COMMON-LISP|::|SYMBOL| '|SYSTEM|::|SETF-FUNCTION|)))
  (|COMMON-LISP|::|IF| |UIOP/PACKAGE|::|SYM|
   (|COMMON-LISP|::|VALUES| |UIOP/PACKAGE|::|SYM| :|SETF-FUNCTION|)
   (|COMMON-LISP|::|LET|
    ((|UIOP/PACKAGE|::|SYM|
      (|COMMON-LISP|::|GET| |COMMON-LISP|::|SYMBOL|
       '|SYSTEM|::|SETF-EXPANDER|)))
    (|COMMON-LISP|::|IF| |UIOP/PACKAGE|::|SYM|
     (|COMMON-LISP|::|VALUES| |UIOP/PACKAGE|::|SYM| :|SETF-EXPANDER|)
     (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|SET-SETF-FUNCTION-SYMBOL|
 (|UIOP/PACKAGE|::|NEW-SETF-SYMBOL| |COMMON-LISP|::|SYMBOL|
  |COMMON-LISP|::|&OPTIONAL| |UIOP/PACKAGE|::|KIND|)
 (|COMMON-LISP|::|ASSERT|
  (|COMMON-LISP|::|MEMBER| |UIOP/PACKAGE|::|KIND|
   '(:|SETF-FUNCTION| :|SETF-EXPANDER|)))
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|NULL| |UIOP/PACKAGE|::|NEW-SETF-SYMBOL|)
   (|COMMON-LISP|::|REMPROP| |COMMON-LISP|::|SYMBOL|
    '|SYSTEM|::|SETF-FUNCTION|)
   (|COMMON-LISP|::|REMPROP| |COMMON-LISP|::|SYMBOL|
    '|SYSTEM|::|SETF-EXPANDER|))
  ((|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KIND| :|SETF-FUNCTION|)
   (|COMMON-LISP|::|SETF|
    (|COMMON-LISP|::|GET| |COMMON-LISP|::|SYMBOL| '|SYSTEM|::|SETF-FUNCTION|)
    |UIOP/PACKAGE|::|NEW-SETF-SYMBOL|))
  ((|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KIND| :|SETF-EXPANDER|)
   (|COMMON-LISP|::|SETF|
    (|COMMON-LISP|::|GET| |COMMON-LISP|::|SYMBOL| '|SYSTEM|::|SETF-EXPANDER|)
    |UIOP/PACKAGE|::|NEW-SETF-SYMBOL|))
  (|COMMON-LISP|::|T|
   (|COMMON-LISP|::|ERROR|
    "invalid kind of setf-function ~S for ~S to be set to ~S"
    |UIOP/PACKAGE|::|KIND| |COMMON-LISP|::|SYMBOL|
    |UIOP/PACKAGE|::|NEW-SETF-SYMBOL|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|CREATE-SETF-FUNCTION-SYMBOL|
 (|COMMON-LISP|::|SYMBOL|) (|SYSTEM|::|SETF-SYMBOL| |COMMON-LISP|::|SYMBOL|))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|SET-DUMMY-SYMBOL|
 (|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|REASON|
  |UIOP/PACKAGE|::|OTHER-SYMBOL|)
 (|COMMON-LISP|::|SETF|
  (|COMMON-LISP|::|GET| |COMMON-LISP|::|SYMBOL|
   '|UIOP/PACKAGE|::|DUMMY-SYMBOL|)
  (|COMMON-LISP|::|CONS| |UIOP/PACKAGE|::|REASON|
   |UIOP/PACKAGE|::|OTHER-SYMBOL|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|MAKE-DUMMY-SYMBOL|
 (|COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|LET|
  ((|UIOP/PACKAGE|::|DUMMY|
    (|COMMON-LISP|::|COPY-SYMBOL| |COMMON-LISP|::|SYMBOL|)))
  (|UIOP/PACKAGE|::|SET-DUMMY-SYMBOL| |UIOP/PACKAGE|::|DUMMY|
   '|UIOP/PACKAGE|::|REPLACING| |COMMON-LISP|::|SYMBOL|)
  (|UIOP/PACKAGE|::|SET-DUMMY-SYMBOL| |COMMON-LISP|::|SYMBOL|
   '|UIOP/PACKAGE|::|REPLACED-BY| |UIOP/PACKAGE|::|DUMMY|)
  |UIOP/PACKAGE|::|DUMMY|))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|DUMMY-SYMBOL|
 (|COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|GET| |COMMON-LISP|::|SYMBOL|
  '|UIOP/PACKAGE|::|DUMMY-SYMBOL|))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|GET-DUMMY-SYMBOL|
 (|COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|LET|
  ((|UIOP/PACKAGE|::|EXISTING|
    (|UIOP/PACKAGE|::|DUMMY-SYMBOL| |COMMON-LISP|::|SYMBOL|)))
  (|COMMON-LISP|::|IF| |UIOP/PACKAGE|::|EXISTING|
   (|COMMON-LISP|::|VALUES| (|COMMON-LISP|::|CDR| |UIOP/PACKAGE|::|EXISTING|)
    (|COMMON-LISP|::|CAR| |UIOP/PACKAGE|::|EXISTING|))
   (|UIOP/PACKAGE|::|MAKE-DUMMY-SYMBOL| |COMMON-LISP|::|SYMBOL|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|NUKE-SYMBOL-IN-PACKAGE|
 (|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)
 (|COMMON-LISP|::|LET|
  ((|COMMON-LISP|::|PACKAGE|
    (|UIOP/PACKAGE|::|FIND-PACKAGE*| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|))
   (|UIOP/PACKAGE|::|NAME|
    (|COMMON-LISP|::|SYMBOL-NAME| |COMMON-LISP|::|SYMBOL|)))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|UIOP/PACKAGE|::|SYM| |UIOP/PACKAGE|::|STAT|)
   (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
    |COMMON-LISP|::|PACKAGE|)
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|AND|
     (|COMMON-LISP|::|MEMBER| |UIOP/PACKAGE|::|STAT|
      '(:|INTERNAL| :|EXTERNAL|))
     (|COMMON-LISP|::|EQ| |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|SYM|))
    (|COMMON-LISP|::|IF|
     (|UIOP/PACKAGE|::|SYMBOL-SHADOWING-P| |COMMON-LISP|::|SYMBOL|
      |COMMON-LISP|::|PACKAGE|)
     (|UIOP/PACKAGE|::|SHADOWING-IMPORT*|
      (|UIOP/PACKAGE|::|GET-DUMMY-SYMBOL| |COMMON-LISP|::|SYMBOL|)
      |COMMON-LISP|::|PACKAGE|)
     (|UIOP/PACKAGE|::|UNINTERN*| |COMMON-LISP|::|SYMBOL|
      |COMMON-LISP|::|PACKAGE|))))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|NUKE-SYMBOL|
 (|COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|&OPTIONAL|
  (|UIOP/PACKAGE|::|PACKAGES| (|COMMON-LISP|::|LIST-ALL-PACKAGES|)))
 (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
  (|UIOP/PACKAGE|::|SETF-SYMBOL| |UIOP/PACKAGE|::|KIND|)
  (|UIOP/PACKAGE|::|GET-SETF-FUNCTION-SYMBOL| |COMMON-LISP|::|SYMBOL|)
  (|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|KIND|
   (|UIOP/PACKAGE|::|NUKE-SYMBOL| |UIOP/PACKAGE|::|SETF-SYMBOL|)))
 (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/PACKAGE|::|P| :|IN|
  |UIOP/PACKAGE|::|PACKAGES| :|DO|
  (|UIOP/PACKAGE|::|NUKE-SYMBOL-IN-PACKAGE| |COMMON-LISP|::|SYMBOL|
   |UIOP/PACKAGE|::|P|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|REHOME-SYMBOL|
 (|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)
 "Changes the home package of a symbol, also leaving it present in its old home if any"
 (|COMMON-LISP|::|LET*|
  ((|UIOP/PACKAGE|::|NAME|
    (|COMMON-LISP|::|SYMBOL-NAME| |COMMON-LISP|::|SYMBOL|))
   (|COMMON-LISP|::|PACKAGE|
    (|UIOP/PACKAGE|::|FIND-PACKAGE*| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|))
   (|UIOP/PACKAGE|::|OLD-PACKAGE|
    (|COMMON-LISP|::|SYMBOL-PACKAGE| |COMMON-LISP|::|SYMBOL|))
   (|UIOP/PACKAGE|::|OLD-STATUS|
    (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|OLD-PACKAGE|
     (|COMMON-LISP|::|NTH-VALUE| 1.
      (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
       |UIOP/PACKAGE|::|OLD-PACKAGE|))))
   (|UIOP/PACKAGE|::|SHADOWING|
    (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|OLD-PACKAGE|
     (|UIOP/PACKAGE|::|SYMBOL-SHADOWING-P| |COMMON-LISP|::|SYMBOL|
      |UIOP/PACKAGE|::|OLD-PACKAGE|)
     (|COMMON-LISP|::|MAKE-SYMBOL| |UIOP/PACKAGE|::|NAME|))))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL|
    |UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL-STATUS|)
   (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
    |COMMON-LISP|::|PACKAGE|)
   (|COMMON-LISP|::|UNLESS|
    (|COMMON-LISP|::|EQ| |COMMON-LISP|::|PACKAGE|
     |UIOP/PACKAGE|::|OLD-PACKAGE|)
    (|COMMON-LISP|::|LET|
     ((|UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL-SHADOWING-P|
       (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL-STATUS|
        (|UIOP/PACKAGE|::|SYMBOL-SHADOWING-P|
         |UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL| |COMMON-LISP|::|PACKAGE|))))
     (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|REHOME-SYMBOL|
      |UIOP/PACKAGE|::|NAME|
      (|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|OLD-PACKAGE|
       (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|OLD-PACKAGE|))
      |UIOP/PACKAGE|::|OLD-STATUS|
      (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|SHADOWING| |COMMON-LISP|::|T|)
      (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|PACKAGE|)
      |UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL-STATUS|
      |UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL-SHADOWING-P|)
     (|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|OLD-PACKAGE|
      (|COMMON-LISP|::|IF| |UIOP/PACKAGE|::|SHADOWING|
       (|UIOP/PACKAGE|::|SHADOWING-IMPORT*| |UIOP/PACKAGE|::|SHADOWING|
        |UIOP/PACKAGE|::|OLD-PACKAGE|))
      (|UIOP/PACKAGE|::|UNINTERN*| |COMMON-LISP|::|SYMBOL|
       |UIOP/PACKAGE|::|OLD-PACKAGE|))
     (|COMMON-LISP|::|COND|
      (|UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL-SHADOWING-P|
       (|UIOP/PACKAGE|::|SHADOWING-IMPORT*| |COMMON-LISP|::|SYMBOL|
        |COMMON-LISP|::|PACKAGE|))
      (|COMMON-LISP|::|T|
       (|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL-STATUS|
        (|UIOP/PACKAGE|::|UNINTERN*| |UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL|
         |COMMON-LISP|::|PACKAGE|))
       (|UIOP/PACKAGE|::|IMPORT*| |COMMON-LISP|::|SYMBOL|
        |COMMON-LISP|::|PACKAGE|)))
     (|COMMON-LISP|::|IF| |UIOP/PACKAGE|::|SHADOWING|
      (|UIOP/PACKAGE|::|SHADOWING-IMPORT*| |COMMON-LISP|::|SYMBOL|
       |UIOP/PACKAGE|::|OLD-PACKAGE|)
      (|UIOP/PACKAGE|::|IMPORT*| |COMMON-LISP|::|SYMBOL|
       |UIOP/PACKAGE|::|OLD-PACKAGE|))
     (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
      (|UIOP/PACKAGE|::|SETF-SYMBOL| |UIOP/PACKAGE|::|KIND|)
      (|UIOP/PACKAGE|::|GET-SETF-FUNCTION-SYMBOL| |COMMON-LISP|::|SYMBOL|)
      (|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|KIND|
       (|COMMON-LISP|::|LET*|
        ((|UIOP/PACKAGE|::|SETF-FUNCTION|
          (|COMMON-LISP|::|FDEFINITION| |UIOP/PACKAGE|::|SETF-SYMBOL|))
         (|UIOP/PACKAGE|::|NEW-SETF-SYMBOL|
          (|UIOP/PACKAGE|::|CREATE-SETF-FUNCTION-SYMBOL|
           |COMMON-LISP|::|SYMBOL|)))
        (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|SETF-FUNCTION|
         |UIOP/PACKAGE|::|NAME|
         (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|PACKAGE|)
         (|COMMON-LISP|::|SYMBOL-NAME| |UIOP/PACKAGE|::|SETF-SYMBOL|)
         (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |UIOP/PACKAGE|::|SETF-SYMBOL|)
         (|COMMON-LISP|::|SYMBOL-NAME| |UIOP/PACKAGE|::|NEW-SETF-SYMBOL|)
         (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME|
          |UIOP/PACKAGE|::|NEW-SETF-SYMBOL|))
        (|COMMON-LISP|::|WHEN|
         (|COMMON-LISP|::|SYMBOL-PACKAGE| |UIOP/PACKAGE|::|SETF-SYMBOL|)
         (|UIOP/PACKAGE|::|UNINTERN*| |UIOP/PACKAGE|::|SETF-SYMBOL|
          (|COMMON-LISP|::|SYMBOL-PACKAGE| |UIOP/PACKAGE|::|SETF-SYMBOL|)))
        (|COMMON-LISP|::|SETF|
         (|COMMON-LISP|::|FDEFINITION| |UIOP/PACKAGE|::|NEW-SETF-SYMBOL|)
         |UIOP/PACKAGE|::|SETF-FUNCTION|)
        (|UIOP/PACKAGE|::|SET-SETF-FUNCTION-SYMBOL|
         |UIOP/PACKAGE|::|NEW-SETF-SYMBOL| |COMMON-LISP|::|SYMBOL|
         |UIOP/PACKAGE|::|KIND|))))
     (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
      (|UIOP/PACKAGE|::|OVERWRITTEN-SETF| |UIOP/PACKAGE|::|FOUNDP|)
      (|UIOP/PACKAGE|::|GET-SETF-FUNCTION-SYMBOL|
       |UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL|)
      (|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|FOUNDP|
       (|COMMON-LISP|::|UNINTERN| |UIOP/PACKAGE|::|OVERWRITTEN-SETF|)))
     (|COMMON-LISP|::|WHEN|
      (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|OLD-STATUS| :|EXTERNAL|)
      (|UIOP/PACKAGE|::|EXPORT*| |COMMON-LISP|::|SYMBOL|
       |UIOP/PACKAGE|::|OLD-PACKAGE|))
     (|COMMON-LISP|::|WHEN|
      (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL-STATUS|
       :|EXTERNAL|)
      (|UIOP/PACKAGE|::|EXPORT*| |COMMON-LISP|::|SYMBOL|
       |COMMON-LISP|::|PACKAGE|))))
   (|COMMON-LISP|::|VALUES| |UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL|
    |UIOP/PACKAGE|::|OVERWRITTEN-SYMBOL-STATUS|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|ENSURE-PACKAGE-UNUSED|
 (|COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/PACKAGE|::|P| :|IN|
  (|COMMON-LISP|::|PACKAGE-USED-BY-LIST| |COMMON-LISP|::|PACKAGE|) :|DO|
  (|COMMON-LISP|::|UNUSE-PACKAGE| |COMMON-LISP|::|PACKAGE|
   |UIOP/PACKAGE|::|P|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|DELETE-PACKAGE*|
 (|COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|&KEY| |UIOP/PACKAGE|::|NUKE|)
 (|COMMON-LISP|::|LET|
  ((|UIOP/PACKAGE|::|P|
    (|COMMON-LISP|::|FIND-PACKAGE| |COMMON-LISP|::|PACKAGE|)))
  (|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|P|
   (|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|NUKE|
    (|COMMON-LISP|::|DO-SYMBOLS| (|UIOP/PACKAGE|::|S| |UIOP/PACKAGE|::|P|)
     (|COMMON-LISP|::|WHEN|
      (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |UIOP/PACKAGE|::|S|
       |UIOP/PACKAGE|::|P|)
      (|UIOP/PACKAGE|::|NUKE-SYMBOL| |UIOP/PACKAGE|::|S|))))
   (|UIOP/PACKAGE|::|ENSURE-PACKAGE-UNUSED| |UIOP/PACKAGE|::|P|)
   (|COMMON-LISP|::|DELETE-PACKAGE| |COMMON-LISP|::|PACKAGE|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|PACKAGE-NAMES|
 (|COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|CONS|
  (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|PACKAGE|)
  (|COMMON-LISP|::|PACKAGE-NICKNAMES| |COMMON-LISP|::|PACKAGE|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|PACKAGES-FROM-NAMES|
 (|UIOP/PACKAGE|::|NAMES|)
 (|COMMON-LISP|::|REMOVE-DUPLICATES|
  (|COMMON-LISP|::|REMOVE| |COMMON-LISP|::|NIL|
   (|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|FIND-PACKAGE|
    |UIOP/PACKAGE|::|NAMES|))
  :|FROM-END| |COMMON-LISP|::|T|))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|FRESH-PACKAGE-NAME|
 (|COMMON-LISP|::|&KEY| (|UIOP/PACKAGE|::|PREFIX| :|%TO-BE-DELETED|)
  |UIOP/PACKAGE|::|SEPARATOR|
  (|UIOP/PACKAGE|::|INDEX|
   (|COMMON-LISP|::|RANDOM| |COMMON-LISP|::|MOST-POSITIVE-FIXNUM|)))
 (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/PACKAGE|::|I| :|FROM|
  |UIOP/PACKAGE|::|INDEX| :|FOR| |UIOP/PACKAGE|::|N| |COMMON-LISP|::|=|
  (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "~A~@[~A~D~]"
   |UIOP/PACKAGE|::|PREFIX|
   (|COMMON-LISP|::|AND| (|COMMON-LISP|::|PLUSP| |UIOP/PACKAGE|::|I|)
    (|COMMON-LISP|::|OR| |UIOP/PACKAGE|::|SEPARATOR| ""))
   |UIOP/PACKAGE|::|I|)
  :|THEREIS|
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|NOT| (|COMMON-LISP|::|FIND-PACKAGE| |UIOP/PACKAGE|::|N|))
   |UIOP/PACKAGE|::|N|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|RENAME-PACKAGE-AWAY|
 (|UIOP/PACKAGE|::|P| |COMMON-LISP|::|&REST| |UIOP/PACKAGE|::|KEYS|
  |COMMON-LISP|::|&KEY| |UIOP/PACKAGE|::|PREFIX|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|COMMON-LISP|::|LET|
  ((|UIOP/PACKAGE|::|NEW-NAME|
    (|COMMON-LISP|::|APPLY| '|UIOP/PACKAGE|::|FRESH-PACKAGE-NAME| :|PREFIX|
     (|COMMON-LISP|::|OR| |UIOP/PACKAGE|::|PREFIX|
      (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "__~A__"
       (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|P|)))
     |UIOP/PACKAGE|::|KEYS|)))
  (|UIOP/PACKAGE|::|RECORD-FISHY|
   (|COMMON-LISP|::|LIST| :|RENAME-AWAY|
    (|UIOP/PACKAGE|::|PACKAGE-NAMES| |UIOP/PACKAGE|::|P|)
    |UIOP/PACKAGE|::|NEW-NAME|))
  (|COMMON-LISP|::|RENAME-PACKAGE| |UIOP/PACKAGE|::|P|
   |UIOP/PACKAGE|::|NEW-NAME|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|GET-SETF-FUNCTION-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|SYMBOL|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|SET-SETF-FUNCTION-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NEW-SETF-SYMBOL| |COMMON-LISP|::|SYMBOL|
    |COMMON-LISP|::|&OPTIONAL| |UIOP/PACKAGE|::|KIND|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|CREATE-SETF-FUNCTION-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|SYMBOL|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|SET-DUMMY-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|REASON|
    |UIOP/PACKAGE|::|OTHER-SYMBOL|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|MAKE-DUMMY-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|SYMBOL|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|DUMMY-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|SYMBOL|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|GET-DUMMY-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|SYMBOL|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|NUKE-SYMBOL-IN-PACKAGE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|NUKE-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|&OPTIONAL|
    (|UIOP/PACKAGE|::|PACKAGES| (|COMMON-LISP|::|LIST-ALL-PACKAGES|)))))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|REHOME-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|ENSURE-PACKAGE-UNUSED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PACKAGE|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|DELETE-PACKAGE*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|&KEY| |UIOP/PACKAGE|::|NUKE|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|PACKAGE-NAMES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PACKAGE|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|PACKAGES-FROM-NAMES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/PACKAGE|::|NAMES|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|FRESH-PACKAGE-NAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| (|UIOP/PACKAGE|::|PREFIX| :|%TO-BE-DELETED|)
    |UIOP/PACKAGE|::|SEPARATOR|
    (|UIOP/PACKAGE|::|INDEX|
     (|COMMON-LISP|::|RANDOM| |COMMON-LISP|::|MOST-POSITIVE-FIXNUM|)))))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|RENAME-PACKAGE-AWAY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|P| |COMMON-LISP|::|&REST| |UIOP/PACKAGE|::|KEYS|
    |COMMON-LISP|::|&KEY| |UIOP/PACKAGE|::|PREFIX|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|PACKAGE-DEFINITION-FORM|
 (|UIOP/PACKAGE|::|PACKAGE-DESIGNATOR| |COMMON-LISP|::|&KEY|
  (|UIOP/PACKAGE|::|NICKNAMESP| |COMMON-LISP|::|T|)
  (|UIOP/PACKAGE|::|USEP| |COMMON-LISP|::|T|)
  (|UIOP/PACKAGE|::|SHADOWP| |COMMON-LISP|::|T|)
  (|UIOP/PACKAGE|::|SHADOWING-IMPORT-P| |COMMON-LISP|::|T|)
  (|UIOP/PACKAGE|::|EXPORTP| |COMMON-LISP|::|T|)
  (|UIOP/PACKAGE|::|IMPORTP| |COMMON-LISP|::|T|) |UIOP/PACKAGE|::|INTERNP|
  (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|LET*|
  ((|COMMON-LISP|::|PACKAGE|
    (|COMMON-LISP|::|OR|
     (|UIOP/PACKAGE|::|FIND-PACKAGE*| |UIOP/PACKAGE|::|PACKAGE-DESIGNATOR|
      |COMMON-LISP|::|ERROR|)
     (|COMMON-LISP|::|RETURN-FROM| |UIOP/PACKAGE|::|PACKAGE-DEFINITION-FORM|
      |COMMON-LISP|::|NIL|)))
   (|UIOP/PACKAGE|::|NAME|
    (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|PACKAGE|))
   (|UIOP/PACKAGE|::|NICKNAMES|
    (|COMMON-LISP|::|PACKAGE-NICKNAMES| |COMMON-LISP|::|PACKAGE|))
   (|UIOP/PACKAGE|::|USE|
    (|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|PACKAGE-NAME|
     (|COMMON-LISP|::|PACKAGE-USE-LIST| |COMMON-LISP|::|PACKAGE|)))
   (|COMMON-LISP|::|SHADOW| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|SHADOWING-IMPORT|
    (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|))
   (|COMMON-LISP|::|IMPORT|
    (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|))
   (|COMMON-LISP|::|EXPORT| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|INTERN| |COMMON-LISP|::|NIL|))
  (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PACKAGE|
   (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/PACKAGE|::|SYM| :|BEING| :|THE|
    :|SYMBOLS| :|IN| |COMMON-LISP|::|PACKAGE| :|FOR| |UIOP/PACKAGE|::|STATUS|
    |COMMON-LISP|::|=|
    (|COMMON-LISP|::|NTH-VALUE| 1.
     (|UIOP/PACKAGE|::|FIND-SYMBOL*| |UIOP/PACKAGE|::|SYM|
      |COMMON-LISP|::|PACKAGE|))
    :|DO|
    (|COMMON-LISP|::|ECASE| |UIOP/PACKAGE|::|STATUS|
     ((|COMMON-LISP|::|NIL| :|INHERITED|))
     ((:|INTERNAL| :|EXTERNAL|)
      (|COMMON-LISP|::|LET*|
       ((|UIOP/PACKAGE|::|NAME|
         (|COMMON-LISP|::|SYMBOL-NAME| |UIOP/PACKAGE|::|SYM|))
        (|UIOP/PACKAGE|::|EXTERNAL|
         (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|STATUS| :|EXTERNAL|))
        (|UIOP/PACKAGE|::|HOME|
         (|COMMON-LISP|::|SYMBOL-PACKAGE| |UIOP/PACKAGE|::|SYM|))
        (|UIOP/PACKAGE|::|HOME-NAME|
         (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|HOME|))
        (|UIOP/PACKAGE|::|IMPORTED|
         (|COMMON-LISP|::|NOT|
          (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|HOME|
           |COMMON-LISP|::|PACKAGE|)))
        (|UIOP/PACKAGE|::|SHADOWING|
         (|UIOP/PACKAGE|::|SYMBOL-SHADOWING-P| |UIOP/PACKAGE|::|SYM|
          |COMMON-LISP|::|PACKAGE|)))
       (|COMMON-LISP|::|COND|
        ((|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|SHADOWING|
          |UIOP/PACKAGE|::|IMPORTED|)
         (|COMMON-LISP|::|PUSH| |UIOP/PACKAGE|::|NAME|
          (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|HOME-NAME|
           |COMMON-LISP|::|SHADOWING-IMPORT|)))
        (|UIOP/PACKAGE|::|SHADOWING|
         (|COMMON-LISP|::|PUSH| |UIOP/PACKAGE|::|NAME|
          |COMMON-LISP|::|SHADOW|))
        (|UIOP/PACKAGE|::|IMPORTED|
         (|COMMON-LISP|::|PUSH| |UIOP/PACKAGE|::|NAME|
          (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|HOME-NAME|
           |COMMON-LISP|::|IMPORT|))))
       (|COMMON-LISP|::|COND|
        (|UIOP/PACKAGE|::|EXTERNAL|
         (|COMMON-LISP|::|PUSH| |UIOP/PACKAGE|::|NAME|
          |COMMON-LISP|::|EXPORT|))
        (|UIOP/PACKAGE|::|IMPORTED|)
        (|COMMON-LISP|::|T|
         (|COMMON-LISP|::|PUSH| |UIOP/PACKAGE|::|NAME|
          |COMMON-LISP|::|INTERN|)))))))
   (|COMMON-LISP|::|LABELS|
    ((|UIOP/PACKAGE|::|SORT-NAMES| (|UIOP/PACKAGE|::|NAMES|)
      (|COMMON-LISP|::|SORT|
       (|COMMON-LISP|::|COPY-LIST| |UIOP/PACKAGE|::|NAMES|)
       #'|COMMON-LISP|::|STRING<|))
     (|UIOP/PACKAGE|::|TABLE-KEYS| (|UIOP/PACKAGE|::|TABLE|)
      (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/PACKAGE|::|K| :|BEING| :|THE|
       :|HASH-KEYS| :|OF| |UIOP/PACKAGE|::|TABLE| :|COLLECT|
       |UIOP/PACKAGE|::|K|))
     (|UIOP/PACKAGE|::|WHEN-RELEVANT|
      (|UIOP/PACKAGE|::|KEY| |UIOP/PACKAGE|::|VALUE|)
      (|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|VALUE|
       (|COMMON-LISP|::|LIST|
        (|COMMON-LISP|::|CONS| |UIOP/PACKAGE|::|KEY|
         |UIOP/PACKAGE|::|VALUE|))))
     (|UIOP/PACKAGE|::|IMPORT-OPTIONS|
      (|UIOP/PACKAGE|::|KEY| |UIOP/PACKAGE|::|TABLE|)
      (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/PACKAGE|::|I| :|IN|
       (|UIOP/PACKAGE|::|SORT-NAMES|
        (|UIOP/PACKAGE|::|TABLE-KEYS| |UIOP/PACKAGE|::|TABLE|))
       :|COLLECT|
       `(,|UIOP/PACKAGE|::|KEY| ,|UIOP/PACKAGE|::|I|
         ,@(|UIOP/PACKAGE|::|SORT-NAMES|
            (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|I|
             |UIOP/PACKAGE|::|TABLE|))))))
    `(|COMMON-LISP|::|DEFPACKAGE| ,|UIOP/PACKAGE|::|NAME|
      ,@(|UIOP/PACKAGE|::|WHEN-RELEVANT| :|NICKNAMES|
         (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|NICKNAMESP|
          (|UIOP/PACKAGE|::|SORT-NAMES| |UIOP/PACKAGE|::|NICKNAMES|)))
      (:|USE|
       ,@(|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|USEP|
          (|UIOP/PACKAGE|::|SORT-NAMES| |UIOP/PACKAGE|::|USE|)))
      ,@(|UIOP/PACKAGE|::|WHEN-RELEVANT| :|SHADOW|
         (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|SHADOWP|
          (|UIOP/PACKAGE|::|SORT-NAMES| |COMMON-LISP|::|SHADOW|)))
      ,@(|UIOP/PACKAGE|::|IMPORT-OPTIONS| :|SHADOWING-IMPORT-FROM|
         (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|SHADOWING-IMPORT-P|
          |COMMON-LISP|::|SHADOWING-IMPORT|))
      ,@(|UIOP/PACKAGE|::|IMPORT-OPTIONS| :|IMPORT-FROM|
         (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|IMPORTP|
          |COMMON-LISP|::|IMPORT|))
      ,@(|UIOP/PACKAGE|::|WHEN-RELEVANT| :|EXPORT|
         (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|EXPORTP|
          (|UIOP/PACKAGE|::|SORT-NAMES| |COMMON-LISP|::|EXPORT|)))
      ,@(|UIOP/PACKAGE|::|WHEN-RELEVANT| :|INTERN|
         (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|INTERNP|
          (|UIOP/PACKAGE|::|SORT-NAMES| |COMMON-LISP|::|INTERN|))))))))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|PACKAGE-DEFINITION-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|PACKAGE-DESIGNATOR| |COMMON-LISP|::|&KEY|
    (|UIOP/PACKAGE|::|NICKNAMESP| |COMMON-LISP|::|T|)
    (|UIOP/PACKAGE|::|USEP| |COMMON-LISP|::|T|)
    (|UIOP/PACKAGE|::|SHADOWP| |COMMON-LISP|::|T|)
    (|UIOP/PACKAGE|::|SHADOWING-IMPORT-P| |COMMON-LISP|::|T|)
    (|UIOP/PACKAGE|::|EXPORTP| |COMMON-LISP|::|T|)
    (|UIOP/PACKAGE|::|IMPORTP| |COMMON-LISP|::|T|) |UIOP/PACKAGE|::|INTERNP|
    (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|T|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|ENSURE-SHADOWING-IMPORT|
 (|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|TO-PACKAGE|
  |UIOP/PACKAGE|::|FROM-PACKAGE| |UIOP/PACKAGE|::|SHADOWED|
  |UIOP/PACKAGE|::|IMPORTED|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|STRING|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|TO-PACKAGE|
  |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|FROM-PACKAGE|
  |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|SHADOWED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|IMPORTED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|LET|
  ((|UIOP/PACKAGE|::|IMPORT-ME|
    (|UIOP/PACKAGE|::|FIND-SYMBOL*| |UIOP/PACKAGE|::|NAME|
     |UIOP/PACKAGE|::|FROM-PACKAGE|)))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|UIOP/PACKAGE|::|EXISTING| |UIOP/PACKAGE|::|STATUS|)
   (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
    |UIOP/PACKAGE|::|TO-PACKAGE|)
   (|COMMON-LISP|::|COND|
    ((|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
      |UIOP/PACKAGE|::|SHADOWED|)
     (|COMMON-LISP|::|UNLESS|
      (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|IMPORT-ME|
       |UIOP/PACKAGE|::|EXISTING|)
      (|COMMON-LISP|::|ERROR| "Conflicting shadowings for ~A"
       |UIOP/PACKAGE|::|NAME|)))
    (|COMMON-LISP|::|T|
     (|COMMON-LISP|::|SETF|
      (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
       |UIOP/PACKAGE|::|SHADOWED|)
      |COMMON-LISP|::|T|)
     (|COMMON-LISP|::|SETF|
      (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
       |UIOP/PACKAGE|::|IMPORTED|)
      |COMMON-LISP|::|T|)
     (|COMMON-LISP|::|UNLESS|
      (|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |UIOP/PACKAGE|::|STATUS|)
       (|COMMON-LISP|::|AND|
        (|COMMON-LISP|::|MEMBER| |UIOP/PACKAGE|::|STATUS|
         '(:|INTERNAL| :|EXTERNAL|))
        (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|EXISTING|
         |UIOP/PACKAGE|::|IMPORT-ME|)
        (|UIOP/PACKAGE|::|SYMBOL-SHADOWING-P| |UIOP/PACKAGE|::|EXISTING|
         |UIOP/PACKAGE|::|TO-PACKAGE|)))
      (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|SHADOWING-IMPORT|
       |UIOP/PACKAGE|::|NAME|
       (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|FROM-PACKAGE|)
       (|COMMON-LISP|::|OR|
        (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |UIOP/PACKAGE|::|IMPORT-ME|
         |UIOP/PACKAGE|::|FROM-PACKAGE|)
        (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |UIOP/PACKAGE|::|IMPORT-ME|))
       (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|TO-PACKAGE|)
       |UIOP/PACKAGE|::|STATUS|
       (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|STATUS|
        (|COMMON-LISP|::|OR|
         (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |UIOP/PACKAGE|::|EXISTING|
          |UIOP/PACKAGE|::|TO-PACKAGE|)
         (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |UIOP/PACKAGE|::|EXISTING|)))))
     (|UIOP/PACKAGE|::|SHADOWING-IMPORT*| |UIOP/PACKAGE|::|IMPORT-ME|
      |UIOP/PACKAGE|::|TO-PACKAGE|))))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|ENSURE-IMPORTED|
 (|UIOP/PACKAGE|::|IMPORT-ME| |UIOP/PACKAGE|::|INTO-PACKAGE|
  |COMMON-LISP|::|&OPTIONAL| |UIOP/PACKAGE|::|FROM-PACKAGE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|IMPORT-ME|
  |COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|INTO-PACKAGE|
  |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|FROM-PACKAGE|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|PACKAGE|))
 (|COMMON-LISP|::|LET|
  ((|UIOP/PACKAGE|::|NAME|
    (|COMMON-LISP|::|SYMBOL-NAME| |UIOP/PACKAGE|::|IMPORT-ME|)))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|UIOP/PACKAGE|::|EXISTING| |UIOP/PACKAGE|::|STATUS|)
   (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
    |UIOP/PACKAGE|::|INTO-PACKAGE|)
   (|COMMON-LISP|::|COND|
    ((|COMMON-LISP|::|NOT| |UIOP/PACKAGE|::|STATUS|)
     (|UIOP/PACKAGE|::|IMPORT*| |UIOP/PACKAGE|::|IMPORT-ME|
      |UIOP/PACKAGE|::|INTO-PACKAGE|))
    ((|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|IMPORT-ME|
      |UIOP/PACKAGE|::|EXISTING|))
    (|COMMON-LISP|::|T|
     (|COMMON-LISP|::|LET|
      ((|UIOP/PACKAGE|::|SHADOWING-P|
        (|UIOP/PACKAGE|::|SYMBOL-SHADOWING-P| |UIOP/PACKAGE|::|EXISTING|
         |UIOP/PACKAGE|::|INTO-PACKAGE|)))
      (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|ENSURE-IMPORTED|
       |UIOP/PACKAGE|::|NAME|
       (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|FROM-PACKAGE|
        (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|FROM-PACKAGE|))
       (|COMMON-LISP|::|OR|
        (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |UIOP/PACKAGE|::|IMPORT-ME|
         |UIOP/PACKAGE|::|FROM-PACKAGE|)
        (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |UIOP/PACKAGE|::|IMPORT-ME|))
       (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|INTO-PACKAGE|)
       |UIOP/PACKAGE|::|STATUS|
       (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|STATUS|
        (|COMMON-LISP|::|OR|
         (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |UIOP/PACKAGE|::|EXISTING|
          |UIOP/PACKAGE|::|INTO-PACKAGE|)
         (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |UIOP/PACKAGE|::|EXISTING|)))
       |UIOP/PACKAGE|::|SHADOWING-P|)
      (|COMMON-LISP|::|COND|
       ((|COMMON-LISP|::|OR| |UIOP/PACKAGE|::|SHADOWING-P|
         (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|STATUS| :|INHERITED|))
        (|UIOP/PACKAGE|::|SHADOWING-IMPORT*| |UIOP/PACKAGE|::|IMPORT-ME|
         |UIOP/PACKAGE|::|INTO-PACKAGE|))
       (|COMMON-LISP|::|T|
        (|UIOP/PACKAGE|::|UNINTERN*| |UIOP/PACKAGE|::|EXISTING|
         |UIOP/PACKAGE|::|INTO-PACKAGE|)
        (|UIOP/PACKAGE|::|IMPORT*| |UIOP/PACKAGE|::|IMPORT-ME|
         |UIOP/PACKAGE|::|INTO-PACKAGE|))))))))
 (|COMMON-LISP|::|VALUES|))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|ENSURE-IMPORT|
 (|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|TO-PACKAGE|
  |UIOP/PACKAGE|::|FROM-PACKAGE| |UIOP/PACKAGE|::|SHADOWED|
  |UIOP/PACKAGE|::|IMPORTED|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|STRING|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|TO-PACKAGE|
  |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|FROM-PACKAGE|
  |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|SHADOWED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|IMPORTED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
  (|UIOP/PACKAGE|::|IMPORT-ME| |UIOP/PACKAGE|::|IMPORT-STATUS|)
  (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
   |UIOP/PACKAGE|::|FROM-PACKAGE|)
  (|COMMON-LISP|::|WHEN|
   (|COMMON-LISP|::|NULL| |UIOP/PACKAGE|::|IMPORT-STATUS|)
   (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|IMPORT-UNINTERNED|
    |UIOP/PACKAGE|::|NAME|
    (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|FROM-PACKAGE|)
    (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|TO-PACKAGE|))
   (|COMMON-LISP|::|SETF| |UIOP/PACKAGE|::|IMPORT-ME|
    (|UIOP/PACKAGE|::|INTERN*| |UIOP/PACKAGE|::|NAME|
     |UIOP/PACKAGE|::|FROM-PACKAGE|)))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|UIOP/PACKAGE|::|EXISTING| |UIOP/PACKAGE|::|STATUS|)
   (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
    |UIOP/PACKAGE|::|TO-PACKAGE|)
   (|COMMON-LISP|::|COND|
    ((|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|IMPORTED|
      (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
       |UIOP/PACKAGE|::|IMPORTED|))
     (|COMMON-LISP|::|UNLESS|
      (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|STATUS|
       (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|IMPORT-ME|
        |UIOP/PACKAGE|::|EXISTING|))
      (|COMMON-LISP|::|ERROR| "Can't import ~S from both ~S and ~S"
       |UIOP/PACKAGE|::|NAME|
       (|COMMON-LISP|::|PACKAGE-NAME|
        (|COMMON-LISP|::|SYMBOL-PACKAGE| |UIOP/PACKAGE|::|EXISTING|))
       (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|FROM-PACKAGE|))))
    ((|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
      |UIOP/PACKAGE|::|SHADOWED|)
     (|COMMON-LISP|::|ERROR| "Can't both shadow ~S and import it from ~S"
      |UIOP/PACKAGE|::|NAME|
      (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|FROM-PACKAGE|)))
    (|COMMON-LISP|::|T|
     (|COMMON-LISP|::|SETF|
      (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
       |UIOP/PACKAGE|::|IMPORTED|)
      |COMMON-LISP|::|T|))))
  (|UIOP/PACKAGE|::|ENSURE-IMPORTED| |UIOP/PACKAGE|::|IMPORT-ME|
   |UIOP/PACKAGE|::|TO-PACKAGE| |UIOP/PACKAGE|::|FROM-PACKAGE|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|ENSURE-INHERITED|
 (|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|TO-PACKAGE|
  |UIOP/PACKAGE|::|FROM-PACKAGE| |UIOP/PACKAGE|::|MIXP|
  |UIOP/PACKAGE|::|SHADOWED| |UIOP/PACKAGE|::|IMPORTED|
  |UIOP/PACKAGE|::|INHERITED|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|STRING|)
 (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|TO-PACKAGE|
  |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|FROM-PACKAGE|
  |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|MIXP|
  (|COMMON-LISP|::|MEMBER| |COMMON-LISP|::|NIL| |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|SHADOWED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|IMPORTED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|INHERITED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
  (|UIOP/PACKAGE|::|EXISTING| |UIOP/PACKAGE|::|STATUS|)
  (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
   |UIOP/PACKAGE|::|TO-PACKAGE|)
  (|COMMON-LISP|::|LET*|
   ((|UIOP/PACKAGE|::|SP|
     (|COMMON-LISP|::|SYMBOL-PACKAGE| |COMMON-LISP|::|SYMBOL|))
    (|UIOP/PACKAGE|::|IN|
     (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
      |UIOP/PACKAGE|::|INHERITED|))
    (|UIOP/PACKAGE|::|XP|
     (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|STATUS|
      (|COMMON-LISP|::|SYMBOL-PACKAGE| |UIOP/PACKAGE|::|EXISTING|))))
   (|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|NULL| |UIOP/PACKAGE|::|SP|)
    (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|IMPORT-UNINTERNED|
     |UIOP/PACKAGE|::|NAME|
     (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|FROM-PACKAGE|)
     (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|TO-PACKAGE|)
     |UIOP/PACKAGE|::|MIXP|)
    (|UIOP/PACKAGE|::|IMPORT*| |COMMON-LISP|::|SYMBOL|
     |UIOP/PACKAGE|::|FROM-PACKAGE|)
    (|COMMON-LISP|::|SETF| |UIOP/PACKAGE|::|SP|
     (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|FROM-PACKAGE|)))
   (|COMMON-LISP|::|COND|
    ((|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
      |UIOP/PACKAGE|::|SHADOWED|))
    (|UIOP/PACKAGE|::|IN|
     (|COMMON-LISP|::|UNLESS|
      (|COMMON-LISP|::|EQUAL| |UIOP/PACKAGE|::|SP|
       (|COMMON-LISP|::|FIRST| |UIOP/PACKAGE|::|IN|))
      (|COMMON-LISP|::|IF| |UIOP/PACKAGE|::|MIXP|
       (|UIOP/PACKAGE|::|ENSURE-SHADOWING-IMPORT| |UIOP/PACKAGE|::|NAME|
        |UIOP/PACKAGE|::|TO-PACKAGE|
        (|COMMON-LISP|::|SECOND| |UIOP/PACKAGE|::|IN|)
        |UIOP/PACKAGE|::|SHADOWED| |UIOP/PACKAGE|::|IMPORTED|)
       (|COMMON-LISP|::|ERROR|
        "Can't inherit ~S from ~S, it is inherited from ~S"
        |UIOP/PACKAGE|::|NAME|
        (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|SP|)
        (|COMMON-LISP|::|PACKAGE-NAME|
         (|COMMON-LISP|::|FIRST| |UIOP/PACKAGE|::|IN|))))))
    ((|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
      |UIOP/PACKAGE|::|IMPORTED|)
     (|COMMON-LISP|::|UNLESS|
      (|COMMON-LISP|::|EQ| |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|EXISTING|)
      (|COMMON-LISP|::|ERROR|
       "Can't inherit ~S from ~S, it is imported from ~S"
       |UIOP/PACKAGE|::|NAME|
       (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|SP|)
       (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|XP|))))
    (|COMMON-LISP|::|T|
     (|COMMON-LISP|::|SETF|
      (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
       |UIOP/PACKAGE|::|INHERITED|)
      (|COMMON-LISP|::|LIST| |UIOP/PACKAGE|::|SP|
       |UIOP/PACKAGE|::|FROM-PACKAGE|))
     (|COMMON-LISP|::|WHEN|
      (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|STATUS|
       (|COMMON-LISP|::|NOT|
        (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|SP| |UIOP/PACKAGE|::|XP|)))
      (|COMMON-LISP|::|LET|
       ((|UIOP/PACKAGE|::|SHADOWING|
         (|UIOP/PACKAGE|::|SYMBOL-SHADOWING-P| |UIOP/PACKAGE|::|EXISTING|
          |UIOP/PACKAGE|::|TO-PACKAGE|)))
       (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|INHERITED|
        |UIOP/PACKAGE|::|NAME|
        (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|FROM-PACKAGE|)
        (|COMMON-LISP|::|OR|
         (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |COMMON-LISP|::|SYMBOL|
          |UIOP/PACKAGE|::|FROM-PACKAGE|)
         (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |COMMON-LISP|::|SYMBOL|))
        (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|TO-PACKAGE|)
        (|COMMON-LISP|::|OR|
         (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |UIOP/PACKAGE|::|EXISTING|
          |UIOP/PACKAGE|::|TO-PACKAGE|)
         (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |UIOP/PACKAGE|::|EXISTING|)))
       (|COMMON-LISP|::|IF| |UIOP/PACKAGE|::|SHADOWING|
        (|UIOP/PACKAGE|::|ENSURE-SHADOWING-IMPORT| |UIOP/PACKAGE|::|NAME|
         |UIOP/PACKAGE|::|TO-PACKAGE| |UIOP/PACKAGE|::|FROM-PACKAGE|
         |UIOP/PACKAGE|::|SHADOWED| |UIOP/PACKAGE|::|IMPORTED|)
        (|UIOP/PACKAGE|::|UNINTERN*| |UIOP/PACKAGE|::|EXISTING|
         |UIOP/PACKAGE|::|TO-PACKAGE|)))))))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|ENSURE-MIX|
 (|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|TO-PACKAGE|
  |UIOP/PACKAGE|::|FROM-PACKAGE| |UIOP/PACKAGE|::|SHADOWED|
  |UIOP/PACKAGE|::|IMPORTED| |UIOP/PACKAGE|::|INHERITED|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|STRING|)
 (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|TO-PACKAGE|
  |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|FROM-PACKAGE|
  |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|SHADOWED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|IMPORTED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|INHERITED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|SHADOWED|)
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|UIOP/PACKAGE|::|EXISTING| |UIOP/PACKAGE|::|STATUS|)
   (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
    |UIOP/PACKAGE|::|TO-PACKAGE|)
   (|COMMON-LISP|::|LET*|
    ((|UIOP/PACKAGE|::|SP|
      (|COMMON-LISP|::|SYMBOL-PACKAGE| |COMMON-LISP|::|SYMBOL|))
     (|UIOP/PACKAGE|::|IM|
      (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
       |UIOP/PACKAGE|::|IMPORTED|))
     (|UIOP/PACKAGE|::|IN|
      (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
       |UIOP/PACKAGE|::|INHERITED|)))
    (|COMMON-LISP|::|COND|
     ((|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |UIOP/PACKAGE|::|STATUS|)
       (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|STATUS|
        (|COMMON-LISP|::|EQ| |COMMON-LISP|::|SYMBOL|
         |UIOP/PACKAGE|::|EXISTING|))
       (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|IN|
        (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|SP|
         (|COMMON-LISP|::|FIRST| |UIOP/PACKAGE|::|IN|))))
      (|UIOP/PACKAGE|::|ENSURE-INHERITED| |UIOP/PACKAGE|::|NAME|
       |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|TO-PACKAGE|
       |UIOP/PACKAGE|::|FROM-PACKAGE| |COMMON-LISP|::|T|
       |UIOP/PACKAGE|::|SHADOWED| |UIOP/PACKAGE|::|IMPORTED|
       |UIOP/PACKAGE|::|INHERITED|))
     (|UIOP/PACKAGE|::|IN|
      (|COMMON-LISP|::|REMHASH| |UIOP/PACKAGE|::|NAME|
       |UIOP/PACKAGE|::|INHERITED|)
      (|UIOP/PACKAGE|::|ENSURE-SHADOWING-IMPORT| |UIOP/PACKAGE|::|NAME|
       |UIOP/PACKAGE|::|TO-PACKAGE|
       (|COMMON-LISP|::|SECOND| |UIOP/PACKAGE|::|IN|)
       |UIOP/PACKAGE|::|SHADOWED| |UIOP/PACKAGE|::|IMPORTED|))
     (|UIOP/PACKAGE|::|IM|
      (|COMMON-LISP|::|ERROR|
       "Symbol ~S import from ~S~:[~; actually ~:[uninterned~;~:*from ~S~]~] conflicts with existing symbol in ~S~:[~; actually ~:[uninterned~;from ~:*~S~]~]"
       |UIOP/PACKAGE|::|NAME|
       (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|FROM-PACKAGE|)
       (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |COMMON-LISP|::|SYMBOL|
        |UIOP/PACKAGE|::|FROM-PACKAGE|)
       (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |COMMON-LISP|::|SYMBOL|)
       (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|TO-PACKAGE|)
       (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |UIOP/PACKAGE|::|EXISTING|
        |UIOP/PACKAGE|::|TO-PACKAGE|)
       (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |UIOP/PACKAGE|::|EXISTING|)))
     (|COMMON-LISP|::|T|
      (|UIOP/PACKAGE|::|ENSURE-INHERITED| |UIOP/PACKAGE|::|NAME|
       |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|TO-PACKAGE|
       |UIOP/PACKAGE|::|FROM-PACKAGE| |COMMON-LISP|::|T|
       |UIOP/PACKAGE|::|SHADOWED| |UIOP/PACKAGE|::|IMPORTED|
       |UIOP/PACKAGE|::|INHERITED|)))))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|RECYCLE-SYMBOL|
 (|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|RECYCLE| |UIOP/PACKAGE|::|EXPORTED|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|STRING|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|RECYCLE| |COMMON-LISP|::|LIST|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|EXPORTED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|EXPORTED|)
  (|COMMON-LISP|::|LET| (|UIOP/PACKAGE|::|RECYCLED| |UIOP/PACKAGE|::|FOUNDP|)
   (|COMMON-LISP|::|DOLIST|
    (|UIOP/PACKAGE|::|R| |UIOP/PACKAGE|::|RECYCLE|
     (|COMMON-LISP|::|VALUES| |UIOP/PACKAGE|::|RECYCLED|
      |UIOP/PACKAGE|::|FOUNDP|))
    (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
     (|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|STATUS|)
     (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|R|)
     (|COMMON-LISP|::|WHEN|
      (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|STATUS|
       (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |COMMON-LISP|::|SYMBOL|
        |UIOP/PACKAGE|::|R|))
      (|COMMON-LISP|::|COND|
       (|UIOP/PACKAGE|::|FOUNDP|
        (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|RECYCLED-DUPLICATE|
         |UIOP/PACKAGE|::|NAME|
         (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|FOUNDP|)
         (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|R|)))
       (|COMMON-LISP|::|T|
        (|COMMON-LISP|::|SETF| |UIOP/PACKAGE|::|RECYCLED|
         |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|FOUNDP|
         |UIOP/PACKAGE|::|R|)))))))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|SYMBOL-RECYCLED-P|
 (|UIOP/PACKAGE|::|SYM| |UIOP/PACKAGE|::|RECYCLE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|SYM| |COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|RECYCLE| |COMMON-LISP|::|LIST|)
 (|COMMON-LISP|::|AND|
  (|COMMON-LISP|::|MEMBER|
   (|COMMON-LISP|::|SYMBOL-PACKAGE| |UIOP/PACKAGE|::|SYM|)
   |UIOP/PACKAGE|::|RECYCLE|)
  |COMMON-LISP|::|T|))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|ENSURE-SYMBOL|
 (|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|INTERN|
  |UIOP/PACKAGE|::|RECYCLE| |UIOP/PACKAGE|::|SHADOWED|
  |UIOP/PACKAGE|::|IMPORTED| |UIOP/PACKAGE|::|INHERITED|
  |UIOP/PACKAGE|::|EXPORTED|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|STRING|)
 (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|PACKAGE|
  |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|INTERN|
  (|COMMON-LISP|::|MEMBER| |COMMON-LISP|::|NIL| |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|SHADOWED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|IMPORTED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|INHERITED|
  |COMMON-LISP|::|HASH-TABLE|)
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|SHADOWED|)
   (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|IMPORTED|)
   (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
    |UIOP/PACKAGE|::|INHERITED|))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|UIOP/PACKAGE|::|EXISTING| |UIOP/PACKAGE|::|STATUS|)
   (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
    |COMMON-LISP|::|PACKAGE|)
   (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
    (|UIOP/PACKAGE|::|RECYCLED| |UIOP/PACKAGE|::|PREVIOUS|)
    (|UIOP/PACKAGE|::|RECYCLE-SYMBOL| |UIOP/PACKAGE|::|NAME|
     |UIOP/PACKAGE|::|RECYCLE| |UIOP/PACKAGE|::|EXPORTED|)
    (|COMMON-LISP|::|COND|
     ((|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|STATUS|
       (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|EXISTING|
        |UIOP/PACKAGE|::|RECYCLED|)
       (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|PREVIOUS|
        |COMMON-LISP|::|PACKAGE|)))
     (|UIOP/PACKAGE|::|PREVIOUS|
      (|UIOP/PACKAGE|::|REHOME-SYMBOL| |UIOP/PACKAGE|::|RECYCLED|
       |COMMON-LISP|::|PACKAGE|))
     ((|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|STATUS|
       (|COMMON-LISP|::|EQ| |COMMON-LISP|::|PACKAGE|
        (|COMMON-LISP|::|SYMBOL-PACKAGE| |UIOP/PACKAGE|::|EXISTING|))))
     (|COMMON-LISP|::|T|
      (|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|STATUS|
       (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|ENSURE-SYMBOL|
        |UIOP/PACKAGE|::|NAME|
        (|UIOP/PACKAGE|::|REIFY-PACKAGE|
         (|COMMON-LISP|::|SYMBOL-PACKAGE| |UIOP/PACKAGE|::|EXISTING|)
         |COMMON-LISP|::|PACKAGE|)
        |UIOP/PACKAGE|::|STATUS| |COMMON-LISP|::|INTERN|)
       (|COMMON-LISP|::|UNINTERN| |UIOP/PACKAGE|::|EXISTING|))
      (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|INTERN|
       (|UIOP/PACKAGE|::|INTERN*| |UIOP/PACKAGE|::|NAME|
        |COMMON-LISP|::|PACKAGE|))))))))
(|COMMON-LISP|::|DECLAIM|
 (|COMMON-LISP|::|FTYPE|
  (|COMMON-LISP|::|FUNCTION|
   (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|
    |COMMON-LISP|::|&OPTIONAL| |COMMON-LISP|::|T|)
   |COMMON-LISP|::|T|)
  |UIOP/PACKAGE|::|ENSURE-EXPORTED|))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|ENSURE-EXPORTED-TO-USER|
 (|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|TO-PACKAGE|
  |COMMON-LISP|::|&OPTIONAL| |UIOP/PACKAGE|::|RECYCLE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|STRING|)
 (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|TO-PACKAGE|
  |COMMON-LISP|::|PACKAGE|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PACKAGE|::|RECYCLE| |COMMON-LISP|::|LIST|)
 (|COMMON-LISP|::|ASSERT|
  (|COMMON-LISP|::|EQUAL| |UIOP/PACKAGE|::|NAME|
   (|COMMON-LISP|::|SYMBOL-NAME| |COMMON-LISP|::|SYMBOL|)))
 (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
  (|UIOP/PACKAGE|::|EXISTING| |UIOP/PACKAGE|::|STATUS|)
  (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
   |UIOP/PACKAGE|::|TO-PACKAGE|)
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|STATUS|
    (|COMMON-LISP|::|EQ| |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|EXISTING|))
   (|COMMON-LISP|::|LET|
    ((|UIOP/PACKAGE|::|ACCESSIBLE|
      (|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |UIOP/PACKAGE|::|STATUS|)
       (|COMMON-LISP|::|LET|
        ((|UIOP/PACKAGE|::|SHADOWING|
          (|UIOP/PACKAGE|::|SYMBOL-SHADOWING-P| |UIOP/PACKAGE|::|EXISTING|
           |UIOP/PACKAGE|::|TO-PACKAGE|))
         (|UIOP/PACKAGE|::|RECYCLED|
          (|UIOP/PACKAGE|::|SYMBOL-RECYCLED-P| |UIOP/PACKAGE|::|EXISTING|
           |UIOP/PACKAGE|::|RECYCLE|)))
        (|COMMON-LISP|::|UNLESS|
         (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|SHADOWING|
          (|COMMON-LISP|::|NOT| |UIOP/PACKAGE|::|RECYCLED|))
         (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|ENSURE-EXPORT|
          |UIOP/PACKAGE|::|NAME|
          (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |COMMON-LISP|::|SYMBOL|)
          (|COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|TO-PACKAGE|)
          (|COMMON-LISP|::|OR|
           (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |UIOP/PACKAGE|::|EXISTING|
            |UIOP/PACKAGE|::|TO-PACKAGE|)
           (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |UIOP/PACKAGE|::|EXISTING|))
          |UIOP/PACKAGE|::|STATUS| |UIOP/PACKAGE|::|SHADOWING|)
         (|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|OR|
           (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|STATUS| :|INHERITED|)
           |UIOP/PACKAGE|::|SHADOWING|)
          (|UIOP/PACKAGE|::|SHADOWING-IMPORT*| |COMMON-LISP|::|SYMBOL|
           |UIOP/PACKAGE|::|TO-PACKAGE|)
          (|COMMON-LISP|::|UNINTERN| |UIOP/PACKAGE|::|EXISTING|
           |UIOP/PACKAGE|::|TO-PACKAGE|))
         |COMMON-LISP|::|T|)))))
    (|COMMON-LISP|::|WHEN|
     (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|ACCESSIBLE|
      (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|STATUS| :|EXTERNAL|))
     (|UIOP/PACKAGE|::|ENSURE-EXPORTED| |UIOP/PACKAGE|::|NAME|
      |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|TO-PACKAGE|
      |UIOP/PACKAGE|::|RECYCLE|))))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|ENSURE-EXPORTED|
 (|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|FROM-PACKAGE|
  |COMMON-LISP|::|&OPTIONAL| |UIOP/PACKAGE|::|RECYCLE|)
 (|COMMON-LISP|::|DOLIST|
  (|UIOP/PACKAGE|::|TO-PACKAGE|
   (|COMMON-LISP|::|PACKAGE-USED-BY-LIST| |UIOP/PACKAGE|::|FROM-PACKAGE|))
  (|UIOP/PACKAGE|::|ENSURE-EXPORTED-TO-USER| |UIOP/PACKAGE|::|NAME|
   |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|TO-PACKAGE|
   |UIOP/PACKAGE|::|RECYCLE|))
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|FROM-PACKAGE|
   (|COMMON-LISP|::|SYMBOL-PACKAGE| |COMMON-LISP|::|SYMBOL|))
  (|UIOP/PACKAGE|::|ENSURE-IMPORTED| |COMMON-LISP|::|SYMBOL|
   |UIOP/PACKAGE|::|FROM-PACKAGE|))
 (|UIOP/PACKAGE|::|EXPORT*| |UIOP/PACKAGE|::|NAME|
  |UIOP/PACKAGE|::|FROM-PACKAGE|))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|ENSURE-EXPORT|
 (|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|FROM-PACKAGE|
  |COMMON-LISP|::|&OPTIONAL| |UIOP/PACKAGE|::|RECYCLE|)
 (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
  (|COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|STATUS|)
  (|UIOP/PACKAGE|::|FIND-SYMBOL*| |UIOP/PACKAGE|::|NAME|
   |UIOP/PACKAGE|::|FROM-PACKAGE|)
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|STATUS| :|EXTERNAL|)
   (|UIOP/PACKAGE|::|ENSURE-EXPORTED| |UIOP/PACKAGE|::|NAME|
    |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|FROM-PACKAGE|
    |UIOP/PACKAGE|::|RECYCLE|))))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|ENSURE-PACKAGE|
 (|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|&KEY| |UIOP/PACKAGE|::|NICKNAMES|
  |CLOS|::|DOCUMENTATION| |UIOP/PACKAGE|::|USE| |COMMON-LISP|::|SHADOW|
  |UIOP/PACKAGE|::|SHADOWING-IMPORT-FROM| |UIOP/PACKAGE|::|IMPORT-FROM|
  |COMMON-LISP|::|EXPORT| |COMMON-LISP|::|INTERN| |UIOP/PACKAGE|::|RECYCLE|
  |UIOP/PACKAGE|::|MIX| |UIOP/PACKAGE|::|REEXPORT| |COMMON-LISP|::|UNINTERN|)
 (|COMMON-LISP|::|LET*|
  ((|COMMON-LISP|::|PACKAGE-NAME|
    (|COMMON-LISP|::|STRING| |UIOP/PACKAGE|::|NAME|))
   (|UIOP/PACKAGE|::|NICKNAMES|
    (|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|STRING|
     |UIOP/PACKAGE|::|NICKNAMES|))
   (|UIOP/PACKAGE|::|NAMES|
    (|COMMON-LISP|::|CONS| |COMMON-LISP|::|PACKAGE-NAME|
     |UIOP/PACKAGE|::|NICKNAMES|))
   (|UIOP/PACKAGE|::|PREVIOUS|
    (|UIOP/PACKAGE|::|PACKAGES-FROM-NAMES| |UIOP/PACKAGE|::|NAMES|))
   (|UIOP/PACKAGE|::|DISCARDED|
    (|COMMON-LISP|::|CDR| |UIOP/PACKAGE|::|PREVIOUS|))
   (|UIOP/PACKAGE|::|TO-DELETE| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|PACKAGE|
    (|COMMON-LISP|::|OR| (|COMMON-LISP|::|FIRST| |UIOP/PACKAGE|::|PREVIOUS|)
     (|COMMON-LISP|::|MAKE-PACKAGE| |COMMON-LISP|::|PACKAGE-NAME| :|NICKNAMES|
      |UIOP/PACKAGE|::|NICKNAMES|)))
   (|UIOP/PACKAGE|::|RECYCLE|
    (|UIOP/PACKAGE|::|PACKAGES-FROM-NAMES| |UIOP/PACKAGE|::|RECYCLE|))
   (|UIOP/PACKAGE|::|USE|
    (|COMMON-LISP|::|MAPCAR| '|UIOP/PACKAGE|::|FIND-PACKAGE*|
     |UIOP/PACKAGE|::|USE|))
   (|UIOP/PACKAGE|::|MIX|
    (|COMMON-LISP|::|MAPCAR| '|UIOP/PACKAGE|::|FIND-PACKAGE*|
     |UIOP/PACKAGE|::|MIX|))
   (|UIOP/PACKAGE|::|REEXPORT|
    (|COMMON-LISP|::|MAPCAR| '|UIOP/PACKAGE|::|FIND-PACKAGE*|
     |UIOP/PACKAGE|::|REEXPORT|))
   (|COMMON-LISP|::|SHADOW|
    (|COMMON-LISP|::|MAPCAR| '|COMMON-LISP|::|STRING| |COMMON-LISP|::|SHADOW|))
   (|COMMON-LISP|::|EXPORT|
    (|COMMON-LISP|::|MAPCAR| '|COMMON-LISP|::|STRING| |COMMON-LISP|::|EXPORT|))
   (|COMMON-LISP|::|INTERN|
    (|COMMON-LISP|::|MAPCAR| '|COMMON-LISP|::|STRING| |COMMON-LISP|::|INTERN|))
   (|COMMON-LISP|::|UNINTERN|
    (|COMMON-LISP|::|MAPCAR| '|COMMON-LISP|::|STRING|
     |COMMON-LISP|::|UNINTERN|))
   (|UIOP/PACKAGE|::|SHADOWED|
    (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|))
   (|UIOP/PACKAGE|::|IMPORTED|
    (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|))
   (|UIOP/PACKAGE|::|EXPORTED|
    (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|))
   (|UIOP/PACKAGE|::|INHERITED|
    (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)))
  (|UIOP/PACKAGE|::|WHEN-PACKAGE-FISHINESS|
   (|UIOP/PACKAGE|::|RECORD-FISHY| |COMMON-LISP|::|PACKAGE-NAME|))
  (|COMMON-LISP|::|WHEN| |CLOS|::|DOCUMENTATION|
   (|COMMON-LISP|::|SETF|
    (|CLOS|::|DOCUMENTATION| |COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|T|)
    |CLOS|::|DOCUMENTATION|))
  (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/PACKAGE|::|P| :|IN|
   (|COMMON-LISP|::|SET-DIFFERENCE|
    (|COMMON-LISP|::|PACKAGE-USE-LIST| |COMMON-LISP|::|PACKAGE|)
    (|COMMON-LISP|::|APPEND| |UIOP/PACKAGE|::|MIX| |UIOP/PACKAGE|::|USE|))
   :|DO|
   (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|OVER-USE| |UIOP/PACKAGE|::|NAME|
    (|UIOP/PACKAGE|::|PACKAGE-NAMES| |UIOP/PACKAGE|::|P|))
   (|COMMON-LISP|::|UNUSE-PACKAGE| |UIOP/PACKAGE|::|P|
    |COMMON-LISP|::|PACKAGE|))
  (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/PACKAGE|::|P| :|IN|
   |UIOP/PACKAGE|::|DISCARDED| :|FOR| |UIOP/PACKAGE|::|N| |COMMON-LISP|::|=|
   (|COMMON-LISP|::|REMOVE-IF|
    #'(|COMMON-LISP|::|LAMBDA| (|UIOP/PACKAGE|::|X|)
       (|COMMON-LISP|::|MEMBER| |UIOP/PACKAGE|::|X| |UIOP/PACKAGE|::|NAMES|
        :|TEST| '|COMMON-LISP|::|EQUAL|))
    (|UIOP/PACKAGE|::|PACKAGE-NAMES| |UIOP/PACKAGE|::|P|))
   :|DO|
   (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|NICKNAME| |UIOP/PACKAGE|::|NAME|
    (|UIOP/PACKAGE|::|PACKAGE-NAMES| |UIOP/PACKAGE|::|P|))
   (|COMMON-LISP|::|COND|
    (|UIOP/PACKAGE|::|N|
     (|COMMON-LISP|::|RENAME-PACKAGE| |UIOP/PACKAGE|::|P|
      (|COMMON-LISP|::|FIRST| |UIOP/PACKAGE|::|N|)
      (|COMMON-LISP|::|REST| |UIOP/PACKAGE|::|N|)))
    (|COMMON-LISP|::|T|
     (|UIOP/PACKAGE|::|RENAME-PACKAGE-AWAY| |UIOP/PACKAGE|::|P|)
     (|COMMON-LISP|::|PUSH| |UIOP/PACKAGE|::|P| |UIOP/PACKAGE|::|TO-DELETE|))))
  (|COMMON-LISP|::|RENAME-PACKAGE| |COMMON-LISP|::|PACKAGE|
   |COMMON-LISP|::|PACKAGE-NAME| |UIOP/PACKAGE|::|NICKNAMES|)
  (|COMMON-LISP|::|DOLIST| (|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|UNINTERN|)
   (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
    (|UIOP/PACKAGE|::|EXISTING| |UIOP/PACKAGE|::|STATUS|)
    (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
     |COMMON-LISP|::|PACKAGE|)
    (|COMMON-LISP|::|WHEN| |UIOP/PACKAGE|::|STATUS|
     (|COMMON-LISP|::|UNLESS|
      (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|STATUS| :|INHERITED|)
      (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|UNINTERN|
       (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|PACKAGE|)
       |UIOP/PACKAGE|::|NAME|
       (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |UIOP/PACKAGE|::|EXISTING|)
       |UIOP/PACKAGE|::|STATUS|)
      (|UIOP/PACKAGE|::|UNINTERN*| |UIOP/PACKAGE|::|NAME|
       |COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|NIL|)))))
  (|COMMON-LISP|::|DOLIST| (|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|EXPORT|)
   (|COMMON-LISP|::|SETF|
    (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
     |UIOP/PACKAGE|::|EXPORTED|)
    |COMMON-LISP|::|T|))
  (|COMMON-LISP|::|DOLIST| (|UIOP/PACKAGE|::|P| |UIOP/PACKAGE|::|REEXPORT|)
   (|COMMON-LISP|::|DO-EXTERNAL-SYMBOLS|
    (|UIOP/PACKAGE|::|SYM| |UIOP/PACKAGE|::|P|)
    (|COMMON-LISP|::|SETF|
     (|COMMON-LISP|::|GETHASH| (|COMMON-LISP|::|STRING| |UIOP/PACKAGE|::|SYM|)
      |UIOP/PACKAGE|::|EXPORTED|)
     |COMMON-LISP|::|T|)))
  (|COMMON-LISP|::|DO-EXTERNAL-SYMBOLS|
   (|UIOP/PACKAGE|::|SYM| |COMMON-LISP|::|PACKAGE|)
   (|COMMON-LISP|::|LET|
    ((|UIOP/PACKAGE|::|NAME|
      (|COMMON-LISP|::|SYMBOL-NAME| |UIOP/PACKAGE|::|SYM|)))
    (|COMMON-LISP|::|UNLESS|
     (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
      |UIOP/PACKAGE|::|EXPORTED|)
     (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|OVER-EXPORT|
      (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|PACKAGE|)
      |UIOP/PACKAGE|::|NAME|
      (|COMMON-LISP|::|OR|
       (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |UIOP/PACKAGE|::|SYM|
        |COMMON-LISP|::|PACKAGE|)
       (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |UIOP/PACKAGE|::|SYM|)))
     (|COMMON-LISP|::|UNEXPORT| |UIOP/PACKAGE|::|SYM|
      |COMMON-LISP|::|PACKAGE|))))
  (|COMMON-LISP|::|DOLIST| (|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|SHADOW|)
   (|COMMON-LISP|::|SETF|
    (|COMMON-LISP|::|GETHASH| |UIOP/PACKAGE|::|NAME|
     |UIOP/PACKAGE|::|SHADOWED|)
    |COMMON-LISP|::|T|)
   (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
    (|UIOP/PACKAGE|::|EXISTING| |UIOP/PACKAGE|::|STATUS|)
    (|COMMON-LISP|::|FIND-SYMBOL| |UIOP/PACKAGE|::|NAME|
     |COMMON-LISP|::|PACKAGE|)
    (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
     (|UIOP/PACKAGE|::|RECYCLED| |UIOP/PACKAGE|::|PREVIOUS|)
     (|UIOP/PACKAGE|::|RECYCLE-SYMBOL| |UIOP/PACKAGE|::|NAME|
      |UIOP/PACKAGE|::|RECYCLE| |UIOP/PACKAGE|::|EXPORTED|)
     (|COMMON-LISP|::|LET|
      ((|UIOP/PACKAGE|::|SHADOWING|
        (|COMMON-LISP|::|AND| |UIOP/PACKAGE|::|STATUS|
         (|UIOP/PACKAGE|::|SYMBOL-SHADOWING-P| |UIOP/PACKAGE|::|EXISTING|
          |COMMON-LISP|::|PACKAGE|))))
      (|COMMON-LISP|::|COND|
       ((|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|PREVIOUS|
         |COMMON-LISP|::|PACKAGE|))
       (|UIOP/PACKAGE|::|PREVIOUS|
        (|UIOP/PACKAGE|::|REHOME-SYMBOL| |UIOP/PACKAGE|::|RECYCLED|
         |COMMON-LISP|::|PACKAGE|))
       ((|COMMON-LISP|::|OR|
         (|COMMON-LISP|::|MEMBER| |UIOP/PACKAGE|::|STATUS|
          '(|COMMON-LISP|::|NIL| :|INHERITED|))
         (|UIOP/PACKAGE|::|HOME-PACKAGE-P| |UIOP/PACKAGE|::|EXISTING|
          |COMMON-LISP|::|PACKAGE|)))
       (|COMMON-LISP|::|T|
        (|COMMON-LISP|::|LET|
         ((|UIOP/PACKAGE|::|DUMMY|
           (|COMMON-LISP|::|MAKE-SYMBOL| |UIOP/PACKAGE|::|NAME|)))
         (|UIOP/PACKAGE|::|NOTE-PACKAGE-FISHINESS| :|SHADOW-IMPORTED|
          (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|PACKAGE|)
          |UIOP/PACKAGE|::|NAME|
          (|UIOP/PACKAGE|::|SYMBOL-PACKAGE-NAME| |UIOP/PACKAGE|::|EXISTING|)
          |UIOP/PACKAGE|::|STATUS| |UIOP/PACKAGE|::|SHADOWING|)
         (|UIOP/PACKAGE|::|SHADOWING-IMPORT*| |UIOP/PACKAGE|::|DUMMY|
          |COMMON-LISP|::|PACKAGE|)
         (|UIOP/PACKAGE|::|IMPORT*| |UIOP/PACKAGE|::|DUMMY|
          |COMMON-LISP|::|PACKAGE|)))))))
   (|UIOP/PACKAGE|::|SHADOW*| |UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|PACKAGE|))
  (|COMMON-LISP|::|LOOP| :|FOR| (|UIOP/PACKAGE|::|P| . |UIOP/PACKAGE|::|SYMS|)
   :|IN| |UIOP/PACKAGE|::|SHADOWING-IMPORT-FROM| :|FOR| |UIOP/PACKAGE|::|PP|
   |COMMON-LISP|::|=| (|UIOP/PACKAGE|::|FIND-PACKAGE*| |UIOP/PACKAGE|::|P|)
   :|DO|
   (|COMMON-LISP|::|DOLIST| (|UIOP/PACKAGE|::|SYM| |UIOP/PACKAGE|::|SYMS|)
    (|UIOP/PACKAGE|::|ENSURE-SHADOWING-IMPORT|
     (|COMMON-LISP|::|STRING| |UIOP/PACKAGE|::|SYM|) |COMMON-LISP|::|PACKAGE|
     |UIOP/PACKAGE|::|PP| |UIOP/PACKAGE|::|SHADOWED|
     |UIOP/PACKAGE|::|IMPORTED|)))
  (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/PACKAGE|::|P| :|IN| |UIOP/PACKAGE|::|MIX|
   :|FOR| |UIOP/PACKAGE|::|PP| |COMMON-LISP|::|=|
   (|UIOP/PACKAGE|::|FIND-PACKAGE*| |UIOP/PACKAGE|::|P|) :|DO|
   (|COMMON-LISP|::|DO-EXTERNAL-SYMBOLS|
    (|UIOP/PACKAGE|::|SYM| |UIOP/PACKAGE|::|PP|)
    (|UIOP/PACKAGE|::|ENSURE-MIX|
     (|COMMON-LISP|::|SYMBOL-NAME| |UIOP/PACKAGE|::|SYM|) |UIOP/PACKAGE|::|SYM|
     |COMMON-LISP|::|PACKAGE| |UIOP/PACKAGE|::|PP| |UIOP/PACKAGE|::|SHADOWED|
     |UIOP/PACKAGE|::|IMPORTED| |UIOP/PACKAGE|::|INHERITED|)))
  (|COMMON-LISP|::|LOOP| :|FOR| (|UIOP/PACKAGE|::|P| . |UIOP/PACKAGE|::|SYMS|)
   :|IN| |UIOP/PACKAGE|::|IMPORT-FROM| :|FOR| |UIOP/PACKAGE|::|PP|
   |COMMON-LISP|::|=| (|COMMON-LISP|::|FIND-PACKAGE| |UIOP/PACKAGE|::|P|) :|DO|
   (|COMMON-LISP|::|DOLIST| (|UIOP/PACKAGE|::|SYM| |UIOP/PACKAGE|::|SYMS|)
    (|UIOP/PACKAGE|::|ENSURE-IMPORT|
     (|COMMON-LISP|::|SYMBOL-NAME| |UIOP/PACKAGE|::|SYM|)
     |COMMON-LISP|::|PACKAGE| |UIOP/PACKAGE|::|PP| |UIOP/PACKAGE|::|SHADOWED|
     |UIOP/PACKAGE|::|IMPORTED|)))
  (|COMMON-LISP|::|DOLIST|
   (|UIOP/PACKAGE|::|P|
    (|COMMON-LISP|::|APPEND| |UIOP/PACKAGE|::|USE| |UIOP/PACKAGE|::|MIX|))
   (|COMMON-LISP|::|DO-EXTERNAL-SYMBOLS|
    (|UIOP/PACKAGE|::|SYM| |UIOP/PACKAGE|::|P|)
    (|UIOP/PACKAGE|::|ENSURE-INHERITED|
     (|COMMON-LISP|::|STRING| |UIOP/PACKAGE|::|SYM|) |UIOP/PACKAGE|::|SYM|
     |COMMON-LISP|::|PACKAGE| |UIOP/PACKAGE|::|P| |COMMON-LISP|::|NIL|
     |UIOP/PACKAGE|::|SHADOWED| |UIOP/PACKAGE|::|IMPORTED|
     |UIOP/PACKAGE|::|INHERITED|))
   (|COMMON-LISP|::|USE-PACKAGE| |UIOP/PACKAGE|::|P| |COMMON-LISP|::|PACKAGE|))
  (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/PACKAGE|::|NAME| :|BEING| :|THE|
   :|HASH-KEYS| :|OF| |UIOP/PACKAGE|::|EXPORTED| :|DO|
   (|UIOP/PACKAGE|::|ENSURE-SYMBOL| |UIOP/PACKAGE|::|NAME|
    |COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|T| |UIOP/PACKAGE|::|RECYCLE|
    |UIOP/PACKAGE|::|SHADOWED| |UIOP/PACKAGE|::|IMPORTED|
    |UIOP/PACKAGE|::|INHERITED| |UIOP/PACKAGE|::|EXPORTED|)
   (|UIOP/PACKAGE|::|ENSURE-EXPORT| |UIOP/PACKAGE|::|NAME|
    |COMMON-LISP|::|PACKAGE| |UIOP/PACKAGE|::|RECYCLE|))
  (|COMMON-LISP|::|DOLIST| (|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|INTERN|)
   (|UIOP/PACKAGE|::|ENSURE-SYMBOL| |UIOP/PACKAGE|::|NAME|
    |COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|T| |UIOP/PACKAGE|::|RECYCLE|
    |UIOP/PACKAGE|::|SHADOWED| |UIOP/PACKAGE|::|IMPORTED|
    |UIOP/PACKAGE|::|INHERITED| |UIOP/PACKAGE|::|EXPORTED|))
  (|COMMON-LISP|::|DO-SYMBOLS| (|UIOP/PACKAGE|::|SYM| |COMMON-LISP|::|PACKAGE|)
   (|UIOP/PACKAGE|::|ENSURE-SYMBOL|
    (|COMMON-LISP|::|SYMBOL-NAME| |UIOP/PACKAGE|::|SYM|)
    |COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|NIL| |UIOP/PACKAGE|::|RECYCLE|
    |UIOP/PACKAGE|::|SHADOWED| |UIOP/PACKAGE|::|IMPORTED|
    |UIOP/PACKAGE|::|INHERITED| |UIOP/PACKAGE|::|EXPORTED|))
  (|COMMON-LISP|::|MAP| |COMMON-LISP|::|NIL| '|UIOP/PACKAGE|::|DELETE-PACKAGE*|
   |UIOP/PACKAGE|::|TO-DELETE|)
  |COMMON-LISP|::|PACKAGE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|ENSURE-SHADOWING-IMPORT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|TO-PACKAGE|
    |UIOP/PACKAGE|::|FROM-PACKAGE| |UIOP/PACKAGE|::|SHADOWED|
    |UIOP/PACKAGE|::|IMPORTED|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|ENSURE-IMPORTED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|IMPORT-ME| |UIOP/PACKAGE|::|INTO-PACKAGE|
    |COMMON-LISP|::|&OPTIONAL| |UIOP/PACKAGE|::|FROM-PACKAGE|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|ENSURE-IMPORT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|TO-PACKAGE|
    |UIOP/PACKAGE|::|FROM-PACKAGE| |UIOP/PACKAGE|::|SHADOWED|
    |UIOP/PACKAGE|::|IMPORTED|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|ENSURE-INHERITED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|TO-PACKAGE|
    |UIOP/PACKAGE|::|FROM-PACKAGE| |UIOP/PACKAGE|::|MIXP|
    |UIOP/PACKAGE|::|SHADOWED| |UIOP/PACKAGE|::|IMPORTED|
    |UIOP/PACKAGE|::|INHERITED|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|ENSURE-MIX|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|TO-PACKAGE|
    |UIOP/PACKAGE|::|FROM-PACKAGE| |UIOP/PACKAGE|::|SHADOWED|
    |UIOP/PACKAGE|::|IMPORTED| |UIOP/PACKAGE|::|INHERITED|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|RECYCLE-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|RECYCLE|
    |UIOP/PACKAGE|::|EXPORTED|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|SYMBOL-RECYCLED-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|SYM| |UIOP/PACKAGE|::|RECYCLE|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|ENSURE-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|INTERN|
    |UIOP/PACKAGE|::|RECYCLE| |UIOP/PACKAGE|::|SHADOWED|
    |UIOP/PACKAGE|::|IMPORTED| |UIOP/PACKAGE|::|INHERITED|
    |UIOP/PACKAGE|::|EXPORTED|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|FTYPE|
   (|COMMON-LISP|::|FUNCTION|
    (|COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|T|
     |COMMON-LISP|::|&OPTIONAL| |COMMON-LISP|::|T|)
    |COMMON-LISP|::|T|)
   |UIOP/PACKAGE|::|ENSURE-EXPORTED|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|ENSURE-EXPORTED-TO-USER|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|SYMBOL| |UIOP/PACKAGE|::|TO-PACKAGE|
    |COMMON-LISP|::|&OPTIONAL| |UIOP/PACKAGE|::|RECYCLE|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|ENSURE-EXPORTED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|SYMBOL|
    |UIOP/PACKAGE|::|FROM-PACKAGE| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/PACKAGE|::|RECYCLE|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|ENSURE-EXPORT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |UIOP/PACKAGE|::|FROM-PACKAGE|
    |COMMON-LISP|::|&OPTIONAL| |UIOP/PACKAGE|::|RECYCLE|)))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PACKAGE|::|NAME| |COMMON-LISP|::|&KEY| |UIOP/PACKAGE|::|NICKNAMES|
    |CLOS|::|DOCUMENTATION| |UIOP/PACKAGE|::|USE| |COMMON-LISP|::|SHADOW|
    |UIOP/PACKAGE|::|SHADOWING-IMPORT-FROM| |UIOP/PACKAGE|::|IMPORT-FROM|
    |COMMON-LISP|::|EXPORT| |COMMON-LISP|::|INTERN| |UIOP/PACKAGE|::|RECYCLE|
    |UIOP/PACKAGE|::|MIX| |UIOP/PACKAGE|::|REEXPORT|
    |COMMON-LISP|::|UNINTERN|)))
(|COMMON-LISP|::|DEFUN| |UIOP/PACKAGE|::|PARSE-DEFINE-PACKAGE-FORM|
 (|COMMON-LISP|::|PACKAGE| |UIOP/PACKAGE|::|CLAUSES|)
 (|COMMON-LISP|::|LOOP| :|WITH| |UIOP/PACKAGE|::|USE-P| |COMMON-LISP|::|=|
  |COMMON-LISP|::|NIL| :|WITH| |UIOP/PACKAGE|::|RECYCLE-P| |COMMON-LISP|::|=|
  |COMMON-LISP|::|NIL| :|WITH| |CLOS|::|DOCUMENTATION| |COMMON-LISP|::|=|
  |COMMON-LISP|::|NIL| :|FOR| (|UIOP/PACKAGE|::|KW| . |UIOP/PACKAGE|::|ARGS|)
  :|IN| |UIOP/PACKAGE|::|CLAUSES| :|WHEN|
  (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|NICKNAMES|) :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |UIOP/PACKAGE|::|NICKNAMES| :|ELSE| :|WHEN|
  (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|DOCUMENTATION|) :|DO|
  (|COMMON-LISP|::|COND|
   (|CLOS|::|DOCUMENTATION|
    (|COMMON-LISP|::|ERROR|
     "define-package: can't define documentation twice"))
   ((|COMMON-LISP|::|OR| (|COMMON-LISP|::|ATOM| |UIOP/PACKAGE|::|ARGS|)
     (|COMMON-LISP|::|CDR| |UIOP/PACKAGE|::|ARGS|))
    (|COMMON-LISP|::|ERROR| "define-package: bad documentation"))
   (|COMMON-LISP|::|T|
    (|COMMON-LISP|::|SETF| |CLOS|::|DOCUMENTATION|
     (|COMMON-LISP|::|CAR| |UIOP/PACKAGE|::|ARGS|))))
  :|ELSE| :|WHEN| (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|USE|) :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |UIOP/PACKAGE|::|USE| :|AND| :|DO|
  (|COMMON-LISP|::|SETF| |UIOP/PACKAGE|::|USE-P| |COMMON-LISP|::|T|) :|ELSE|
  :|WHEN| (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|SHADOW|) :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |COMMON-LISP|::|SHADOW| :|ELSE| :|WHEN|
  (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|SHADOWING-IMPORT-FROM|)
  :|COLLECT| |UIOP/PACKAGE|::|ARGS| :|INTO|
  |UIOP/PACKAGE|::|SHADOWING-IMPORT-FROM| :|ELSE| :|WHEN|
  (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|IMPORT-FROM|) :|COLLECT|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |UIOP/PACKAGE|::|IMPORT-FROM| :|ELSE| :|WHEN|
  (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|EXPORT|) :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |COMMON-LISP|::|EXPORT| :|ELSE| :|WHEN|
  (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|INTERN|) :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |COMMON-LISP|::|INTERN| :|ELSE| :|WHEN|
  (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|RECYCLE|) :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |UIOP/PACKAGE|::|RECYCLE| :|AND| :|DO|
  (|COMMON-LISP|::|SETF| |UIOP/PACKAGE|::|RECYCLE-P| |COMMON-LISP|::|T|)
  :|ELSE| :|WHEN| (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|MIX|) :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |UIOP/PACKAGE|::|MIX| :|ELSE| :|WHEN|
  (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|REEXPORT|) :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |UIOP/PACKAGE|::|REEXPORT| :|ELSE| :|WHEN|
  (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|USE-REEXPORT|) :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |UIOP/PACKAGE|::|USE| :|AND| :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |UIOP/PACKAGE|::|REEXPORT| :|AND| :|DO|
  (|COMMON-LISP|::|SETF| |UIOP/PACKAGE|::|USE-P| |COMMON-LISP|::|T|) :|ELSE|
  :|WHEN| (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|MIX-REEXPORT|) :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |UIOP/PACKAGE|::|MIX| :|AND| :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |UIOP/PACKAGE|::|REEXPORT| :|AND| :|DO|
  (|COMMON-LISP|::|SETF| |UIOP/PACKAGE|::|USE-P| |COMMON-LISP|::|T|) :|ELSE|
  :|WHEN| (|COMMON-LISP|::|EQ| |UIOP/PACKAGE|::|KW| :|UNINTERN|) :|APPEND|
  |UIOP/PACKAGE|::|ARGS| :|INTO| |COMMON-LISP|::|UNINTERN| :|ELSE| :|DO|
  (|COMMON-LISP|::|ERROR| "unrecognized define-package keyword ~S"
   |UIOP/PACKAGE|::|KW|)
  :|FINALLY|
  (|COMMON-LISP|::|RETURN|
   `(',|COMMON-LISP|::|PACKAGE| :|NICKNAMES| ',|UIOP/PACKAGE|::|NICKNAMES|
     :|DOCUMENTATION| ',|CLOS|::|DOCUMENTATION| :|USE|
     ',(|COMMON-LISP|::|IF| |UIOP/PACKAGE|::|USE-P| |UIOP/PACKAGE|::|USE|
        '(:|COMMON-LISP|))
     :|SHADOW| ',|COMMON-LISP|::|SHADOW| :|SHADOWING-IMPORT-FROM|
     ',|UIOP/PACKAGE|::|SHADOWING-IMPORT-FROM| :|IMPORT-FROM|
     ',|UIOP/PACKAGE|::|IMPORT-FROM| :|EXPORT| ',|COMMON-LISP|::|EXPORT|
     :|INTERN| ',|COMMON-LISP|::|INTERN| :|RECYCLE|
     ',(|COMMON-LISP|::|IF| |UIOP/PACKAGE|::|RECYCLE-P|
        |UIOP/PACKAGE|::|RECYCLE|
        (|COMMON-LISP|::|CONS| |COMMON-LISP|::|PACKAGE|
         |UIOP/PACKAGE|::|NICKNAMES|))
     :|MIX| ',|UIOP/PACKAGE|::|MIX| :|REEXPORT| ',|UIOP/PACKAGE|::|REEXPORT|
     :|UNINTERN| ',|COMMON-LISP|::|UNINTERN|))))
(|SYSTEM|::|C-DEFUN| '|UIOP/PACKAGE|::|PARSE-DEFINE-PACKAGE-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PACKAGE| |UIOP/PACKAGE|::|CLAUSES|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/PACKAGE|::|DEFINE-PACKAGE|)
(|SYSTEM|::|%PUTD| '|UIOP/PACKAGE|::|DEFINE-PACKAGE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/PACKAGE|::|DEFINE-PACKAGE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "DEFINE-PACKAGE takes a PACKAGE and a number of CLAUSES, of the form\n
(KEYWORD . ARGS).\n
DEFINE-PACKAGE supports the following keywords:\n
USE, SHADOW, SHADOWING-IMPORT-FROM, IMPORT-FROM, EXPORT, INTERN -- as per CL:DEFPACKAGE.\n
RECYCLE -- Recycle the package's exported symbols from the specified packages,\n
in order.  For every symbol scheduled to be exported by the DEFINE-PACKAGE,\n
either through an :EXPORT option or a :REEXPORT option, if the symbol exists in\n
one of the :RECYCLE packages, the first such symbol is re-homed to the package\n
being defined.\n
For the sake of idempotence, it is important that the package being defined\n
should appear in first position if it already exists, and even if it doesn't,\n
ahead of any package that is not going to be deleted afterwards and never\n
created again. In short, except for special cases, always make it the first\n
package on the list if the list is not empty.\n
MIX -- Takes a list of package designators.  MIX behaves like\n
(:USE PKG1 PKG2 ... PKGn) but additionally uses :SHADOWING-IMPORT-FROM to\n
resolve conflicts in favor of the first found symbol.  It may still yield\n
an error if there is a conflict with an explicitly :IMPORT-FROM symbol.\n
REEXPORT -- Takes a list of package designators.  For each package, p, in the list,\n
export symbols with the same name as those exported from p.  Note that in the case\n
of shadowing, etc. the symbols with the same name may not be the same symbols.\n
UNINTERN -- Remove symbols here from PACKAGE."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|PACKAGE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|UIOP/PACKAGE|::|CLAUSES| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/PACKAGE|::|DEFINE-PACKAGE|
       (|COMMON-LISP|::|LET|
        ((|UIOP/PACKAGE|::|ENSURE-FORM|
          `(|COMMON-LISP|::|PROG1|
            (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
             ,@(|UIOP/PACKAGE|::|PARSE-DEFINE-PACKAGE-FORM|
                |COMMON-LISP|::|PACKAGE| |UIOP/PACKAGE|::|CLAUSES|)))))
        `(|COMMON-LISP|::|PROGN|
          (|COMMON-LISP|::|EVAL-WHEN|
           (:|COMPILE-TOPLEVEL| :|LOAD-TOPLEVEL| :|EXECUTE|)
           ,|UIOP/PACKAGE|::|ENSURE-FORM|))))))))
  '(|COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|&REST|
    |UIOP/PACKAGE|::|CLAUSES|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|UIOP/COMMON-LISP| :|NICKNAMES| '#1=(:|UOIP/CL|) :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE| '(:|UIOP/PACKAGE| :|COMMON-LISP|) :|SHADOW|
  '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM| '|COMMON-LISP|::|NIL|
  :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT| '|COMMON-LISP|::|NIL|
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|UIOP/COMMON-LISP| . #1#)
  :|MIX| '|COMMON-LISP|::|NIL| :|REEXPORT| '(:|COMMON-LISP|) :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/COMMON-LISP"))
(|COMMON-LISP|::|WHEN|
 (|COMMON-LISP|::|AND|
  (|COMMON-LISP|::|MEMBER| :|UNICODE| |COMMON-LISP|::|*FEATURES*|))
 (|COMMON-LISP|::|PUSHNEW| :|ASDF-UNICODE| |COMMON-LISP|::|*FEATURES*|))
(|COMMON-LISP|::|DEFMACRO| |UIOP/COMMON-LISP|::|LOOP*|
 (|COMMON-LISP|::|&REST| |COMMON-LISP|::|REST|)
 `(|COMMON-LISP|::|LOOP| ,@|COMMON-LISP|::|REST|))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/COMMON-LISP|::|LOOP*|)
(|SYSTEM|::|%PUTD| '|UIOP/COMMON-LISP|::|LOOP*|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/COMMON-LISP|::|LOOP*|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|COMMON-LISP|::|REST| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |UIOP/COMMON-LISP|::|LOOP*|
      `(|COMMON-LISP|::|LOOP| ,@|COMMON-LISP|::|REST|)))))
  '(|COMMON-LISP|::|&REST| |COMMON-LISP|::|REST|)))
(|COMMON-LISP|::|DEFUN| |UIOP/COMMON-LISP|::|FROB-SUBSTRINGS|
 (|COMMON-LISP|::|STRING| |UIOP/COMMON-LISP|::|SUBSTRINGS|
  |COMMON-LISP|::|&OPTIONAL| |UIOP/COMMON-LISP|::|FROB|)
 "for each substring in SUBSTRINGS, find occurrences of it within STRING\n
that don't use parts of matched occurrences of previous strings, and\n
FROB them, that is to say, remove them if FROB is NIL,\n
replace by FROB if FROB is a STRING, or if FROB is a FUNCTION,\n
call FROB with the match and a function that emits a string in the output.\n
Return a string made of the parts not omitted or emitted by FROB."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|OPTIMIZE| (|COMMON-LISP|::|SPEED| 0.)
   (|COMMON-LISP|::|SAFETY| 3.) (|COMMON-LISP|::|DEBUG| 3.)))
 (|COMMON-LISP|::|LET|
  ((|COMMON-LISP|::|LENGTH| (|COMMON-LISP|::|LENGTH| |COMMON-LISP|::|STRING|))
   (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|NIL|))
  (|COMMON-LISP|::|LABELS|
   ((|UIOP/COMMON-LISP|::|EMIT-STRING|
     (|UIOP/COMMON-LISP|::|X| |COMMON-LISP|::|&OPTIONAL|
      (|UIOP/COMMON-LISP|::|START| 0.)
      (|UIOP/COMMON-LISP|::|END|
       (|COMMON-LISP|::|LENGTH| |UIOP/COMMON-LISP|::|X|)))
     (|COMMON-LISP|::|WHEN|
      (|COMMON-LISP|::|<| |UIOP/COMMON-LISP|::|START|
       |UIOP/COMMON-LISP|::|END|)
      (|COMMON-LISP|::|UNLESS| |COMMON-LISP|::|STREAM|
       (|COMMON-LISP|::|SETF| |COMMON-LISP|::|STREAM|
        (|COMMON-LISP|::|MAKE-STRING-OUTPUT-STREAM|)))
      (|COMMON-LISP|::|WRITE-STRING| |UIOP/COMMON-LISP|::|X|
       |COMMON-LISP|::|STREAM| :|START| |UIOP/COMMON-LISP|::|START| :|END|
       |UIOP/COMMON-LISP|::|END|)))
    (|UIOP/COMMON-LISP|::|EMIT-SUBSTRING|
     (|UIOP/COMMON-LISP|::|START| |UIOP/COMMON-LISP|::|END|)
     (|COMMON-LISP|::|WHEN|
      (|COMMON-LISP|::|AND|
       (|COMMON-LISP|::|ZEROP| |UIOP/COMMON-LISP|::|START|)
       (|COMMON-LISP|::|=| |UIOP/COMMON-LISP|::|END| |COMMON-LISP|::|LENGTH|))
      (|COMMON-LISP|::|RETURN-FROM| |UIOP/COMMON-LISP|::|FROB-SUBSTRINGS|
       |COMMON-LISP|::|STRING|))
     (|UIOP/COMMON-LISP|::|EMIT-STRING| |COMMON-LISP|::|STRING|
      |UIOP/COMMON-LISP|::|START| |UIOP/COMMON-LISP|::|END|))
    (|UIOP/COMMON-LISP|::|RECURSE|
     (|UIOP/COMMON-LISP|::|SUBSTRINGS| |UIOP/COMMON-LISP|::|START|
      |UIOP/COMMON-LISP|::|END|)
     (|COMMON-LISP|::|COND|
      ((|COMMON-LISP|::|>=| |UIOP/COMMON-LISP|::|START|
        |UIOP/COMMON-LISP|::|END|))
      ((|COMMON-LISP|::|NULL| |UIOP/COMMON-LISP|::|SUBSTRINGS|)
       (|UIOP/COMMON-LISP|::|EMIT-SUBSTRING| |UIOP/COMMON-LISP|::|START|
        |UIOP/COMMON-LISP|::|END|))
      (|COMMON-LISP|::|T|
       (|COMMON-LISP|::|LET*|
        ((|UIOP/COMMON-LISP|::|SUB-SPEC|
          (|COMMON-LISP|::|FIRST| |UIOP/COMMON-LISP|::|SUBSTRINGS|))
         (|UIOP/COMMON-LISP|::|SUB|
          (|COMMON-LISP|::|IF|
           (|COMMON-LISP|::|CONSP| |UIOP/COMMON-LISP|::|SUB-SPEC|)
           (|COMMON-LISP|::|CAR| |UIOP/COMMON-LISP|::|SUB-SPEC|)
           |UIOP/COMMON-LISP|::|SUB-SPEC|))
         (|UIOP/COMMON-LISP|::|FUN|
          (|COMMON-LISP|::|IF|
           (|COMMON-LISP|::|CONSP| |UIOP/COMMON-LISP|::|SUB-SPEC|)
           (|COMMON-LISP|::|CDR| |UIOP/COMMON-LISP|::|SUB-SPEC|)
           |UIOP/COMMON-LISP|::|FROB|))
         (|UIOP/COMMON-LISP|::|FOUND|
          (|COMMON-LISP|::|SEARCH| |UIOP/COMMON-LISP|::|SUB|
           |COMMON-LISP|::|STRING| :|START2| |UIOP/COMMON-LISP|::|START|
           :|END2| |UIOP/COMMON-LISP|::|END|))
         (|UIOP/COMMON-LISP|::|MORE|
          (|COMMON-LISP|::|REST| |UIOP/COMMON-LISP|::|SUBSTRINGS|)))
        (|COMMON-LISP|::|COND|
         (|UIOP/COMMON-LISP|::|FOUND|
          (|UIOP/COMMON-LISP|::|RECURSE| |UIOP/COMMON-LISP|::|MORE|
           |UIOP/COMMON-LISP|::|START| |UIOP/COMMON-LISP|::|FOUND|)
          (|COMMON-LISP|::|ETYPECASE| |UIOP/COMMON-LISP|::|FUN|
           (|COMMON-LISP|::|NULL|)
           (|COMMON-LISP|::|STRING|
            (|UIOP/COMMON-LISP|::|EMIT-STRING| |UIOP/COMMON-LISP|::|FUN|))
           #'(|COMMON-LISP|::|FUNCALL| |UIOP/COMMON-LISP|::|FUN|
              |UIOP/COMMON-LISP|::|SUB| #'|UIOP/COMMON-LISP|::|EMIT-STRING|))
          (|UIOP/COMMON-LISP|::|RECURSE| |UIOP/COMMON-LISP|::|SUBSTRINGS|
           (|COMMON-LISP|::|+| |UIOP/COMMON-LISP|::|FOUND|
            (|COMMON-LISP|::|LENGTH| |UIOP/COMMON-LISP|::|SUB|))
           |UIOP/COMMON-LISP|::|END|))
         (|COMMON-LISP|::|T|
          (|UIOP/COMMON-LISP|::|RECURSE| |UIOP/COMMON-LISP|::|MORE|
           |UIOP/COMMON-LISP|::|START| |UIOP/COMMON-LISP|::|END|))))))))
   (|UIOP/COMMON-LISP|::|RECURSE| |UIOP/COMMON-LISP|::|SUBSTRINGS| 0.
    |COMMON-LISP|::|LENGTH|))
  (|COMMON-LISP|::|IF| |COMMON-LISP|::|STREAM|
   (|COMMON-LISP|::|GET-OUTPUT-STREAM-STRING| |COMMON-LISP|::|STREAM|) "")))
(|COMMON-LISP|::|DEFMACRO| |UIOP/COMMON-LISP|::|COMPATFMT|
 (|COMMON-LISP|::|FORMAT|) |COMMON-LISP|::|FORMAT|)
(|SYSTEM|::|C-DEFUN| '|UIOP/COMMON-LISP|::|FROB-SUBSTRINGS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STRING| |UIOP/COMMON-LISP|::|SUBSTRINGS|
    |COMMON-LISP|::|&OPTIONAL| |UIOP/COMMON-LISP|::|FROB|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/COMMON-LISP|::|COMPATFMT|)
(|SYSTEM|::|%PUTD| '|UIOP/COMMON-LISP|::|COMPATFMT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/COMMON-LISP|::|COMPATFMT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|FORMAT|
        (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |UIOP/COMMON-LISP|::|COMPATFMT|
       |COMMON-LISP|::|FORMAT|)))))
  '(|COMMON-LISP|::|FORMAT|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|UIOP/UTILITY|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE| '(:|UIOP/COMMON-LISP| :|UIOP/PACKAGE|) :|SHADOW| '|COMMON-LISP|::|NIL|
  :|SHADOWING-IMPORT-FROM| '|COMMON-LISP|::|NIL| :|IMPORT-FROM|
  '((:|UIOP/COMMON-LISP| #:|COMPATFMT| #:|LOOP*| #:|FROB-SUBSTRINGS|))
  :|EXPORT|
  '(#:|COMPATFMT| #:|LOOP*| #:|FROB-SUBSTRINGS| #:|COMPATFMT| #:|UIOP-DEBUG|
    #:|LOAD-UIOP-DEBUG-UTILITY| #:|*UIOP-DEBUG-UTILITY*| #:|WITH-UPGRADABILITY|
    #:|DEFUN*| #:|DEFGENERIC*| #:|NEST| #:|IF-LET| #:|PARSE-BODY|
    #:|WHILE-COLLECTING| #:|APPENDF| #:|LENGTH=N-P| #:|ENSURE-LIST|
    #:|REMOVE-PLIST-KEYS| #:|REMOVE-PLIST-KEY| #:|EMPTYP|
    #:|+NON-BASE-CHARS-EXIST-P+| #:|+MAX-CHARACTER-TYPE-INDEX+|
    #:|CHARACTER-TYPE-INDEX| #:|+CHARACTER-TYPES+| #:|BASE-STRING-P|
    #:|STRINGS-COMMON-ELEMENT-TYPE| #:|REDUCE/STRCAT| #:|STRCAT| #:|FIRST-CHAR|
    #:|LAST-CHAR| #:|SPLIT-STRING| #:|STRIPLN| #:|+CR+| #:|+LF+| #:|+CRLF+|
    #:|STRING-PREFIX-P| #:|STRING-ENCLOSED-P| #:|STRING-SUFFIX-P|
    #:|STANDARD-CASE-SYMBOL-NAME| #:|FIND-STANDARD-CASE-SYMBOL|
    #:|COERCE-CLASS| #:|TIMESTAMP<| #:|TIMESTAMPS<| #:|TIMESTAMP*<|
    #:|TIMESTAMP<=| #:|EARLIER-TIMESTAMP| #:|TIMESTAMPS-EARLIEST|
    #:|EARLIEST-TIMESTAMP| #:|LATER-TIMESTAMP| #:|TIMESTAMPS-LATEST|
    #:|LATEST-TIMESTAMP| #:|LATEST-TIMESTAMP-F| #:|LIST-TO-HASH-SET|
    #:|ENSURE-GETHASH| #:|ENSURE-FUNCTION| #:|ACCESS-AT| #:|ACCESS-AT-COUNT|
    #:|CALL-FUNCTION| #:|CALL-FUNCTIONS| #:|REGISTER-HOOK-FUNCTION|
    #:|LEXICOGRAPHIC<| #:|LEXICOGRAPHIC<=| #:|SIMPLE-STYLE-WARNING|
    #:|STYLE-WARN| #:|MATCH-CONDITION-P| #:|MATCH-ANY-CONDITION-P|
    #:|CALL-WITH-MUFFLED-CONDITIONS| #:|WITH-MUFFLED-CONDITIONS|
    #:|NOT-IMPLEMENTED-ERROR| #:|PARAMETER-ERROR|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|UIOP/UTILITY|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/UTILITY"))
(|COMMON-LISP|::|MACROLET|
 ((|UIOP/UTILITY|::|DEFDEF| (|UIOP/UTILITY|::|DEF*| |UIOP/UTILITY|::|DEF|)
   `(|COMMON-LISP|::|DEFMACRO| ,|UIOP/UTILITY|::|DEF*|
     (|UIOP/UTILITY|::|NAME| |UIOP/UTILITY|::|FORMALS| |COMMON-LISP|::|&REST|
      |COMMON-LISP|::|REST|)
     (|COMMON-LISP|::|DESTRUCTURING-BIND|
      (|UIOP/UTILITY|::|NAME| |COMMON-LISP|::|&KEY|
       (|UIOP/UTILITY|::|SUPERSEDE| |COMMON-LISP|::|T|))
      (|COMMON-LISP|::|IF|
       (|COMMON-LISP|::|OR| (|COMMON-LISP|::|ATOM| |UIOP/UTILITY|::|NAME|)
        (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|CAR| |UIOP/UTILITY|::|NAME|)
         '|COMMON-LISP|::|SETF|))
       (|COMMON-LISP|::|LIST| |UIOP/UTILITY|::|NAME| :|SUPERSEDE|
        |COMMON-LISP|::|NIL|)
       |UIOP/UTILITY|::|NAME|)
      (|COMMON-LISP|::|DECLARE|
       (|COMMON-LISP|::|IGNORABLE| |UIOP/UTILITY|::|SUPERSEDE|))
      `(|COMMON-LISP|::|PROGN|
        ,@(|COMMON-LISP|::|WHEN| |UIOP/UTILITY|::|SUPERSEDE|
           `((|COMMON-LISP|::|FMAKUNBOUND| ',|UIOP/UTILITY|::|NAME|)))
        ,@(|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|AND|)
           `((|COMMON-LISP|::|DECLAIM|
              (|COMMON-LISP|::|NOTINLINE| ,|UIOP/UTILITY|::|NAME|))))
        (,',|UIOP/UTILITY|::|DEF| ,|UIOP/UTILITY|::|NAME|
         ,|UIOP/UTILITY|::|FORMALS| ,@|COMMON-LISP|::|REST|))))))
 (|UIOP/UTILITY|::|DEFDEF| |UIOP/UTILITY|::|DEFGENERIC*| |CLOS|::|DEFGENERIC|)
 (|UIOP/UTILITY|::|DEFDEF| |UIOP/UTILITY|::|DEFUN*| |COMMON-LISP|::|DEFUN|))
(|COMMON-LISP|::|DEFMACRO| |UIOP/UTILITY|::|WITH-UPGRADABILITY|
 ((|COMMON-LISP|::|&OPTIONAL|) |COMMON-LISP|::|&BODY| |UIOP/UTILITY|::|BODY|)
 "Evaluate BODY at compile- load- and run- times, with DEFUN and DEFGENERIC modified\n
to also declare the functions NOTINLINE and to accept a wrapping the function name\n
specification into a list with keyword argument SUPERSEDE (which defaults to T if the name\n
is not wrapped, and NIL if it is wrapped). If SUPERSEDE is true, call UNDEFINE-FUNCTION\n
to supersede any previous definition."
 `(|COMMON-LISP|::|EVAL-WHEN| (:|COMPILE-TOPLEVEL| :|LOAD-TOPLEVEL| :|EXECUTE|)
   ,@(|COMMON-LISP|::|LOOP| :|FOR| |UIOP/UTILITY|::|FORM| :|IN|
      |UIOP/UTILITY|::|BODY| :|COLLECT|
      (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CONSP| |UIOP/UTILITY|::|FORM|)
       (|COMMON-LISP|::|DESTRUCTURING-BIND|
        (|COMMON-LISP|::|CAR| . |COMMON-LISP|::|CDR|) |UIOP/UTILITY|::|FORM|
        (|COMMON-LISP|::|CASE| |COMMON-LISP|::|CAR|
         ((|COMMON-LISP|::|DEFUN|)
          `(|UIOP/UTILITY|::|DEFUN*| ,@|COMMON-LISP|::|CDR|))
         ((|CLOS|::|DEFGENERIC|)
          `(|UIOP/UTILITY|::|DEFGENERIC*| ,@|COMMON-LISP|::|CDR|))
         (|COMMON-LISP|::|OTHERWISE| |UIOP/UTILITY|::|FORM|)))
       |UIOP/UTILITY|::|FORM|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/UTILITY|::|DEFGENERIC*|)
(|SYSTEM|::|%PUTD| '|UIOP/UTILITY|::|DEFGENERIC*|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/UTILITY|::|DEFGENERIC*|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|UIOP/UTILITY|::|NAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|UIOP/UTILITY|::|FORMALS| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP|::|REST| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/UTILITY|::|DEFGENERIC*|
       (|COMMON-LISP|::|DESTRUCTURING-BIND|
        (|UIOP/UTILITY|::|NAME| |COMMON-LISP|::|&KEY|
         (|UIOP/UTILITY|::|SUPERSEDE| |COMMON-LISP|::|T|))
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|OR| (|COMMON-LISP|::|ATOM| |UIOP/UTILITY|::|NAME|)
          (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|CAR| |UIOP/UTILITY|::|NAME|)
           '|COMMON-LISP|::|SETF|))
         (|COMMON-LISP|::|LIST| |UIOP/UTILITY|::|NAME| :|SUPERSEDE|
          |COMMON-LISP|::|NIL|)
         |UIOP/UTILITY|::|NAME|)
        (|COMMON-LISP|::|DECLARE|
         (|COMMON-LISP|::|IGNORABLE| |UIOP/UTILITY|::|SUPERSEDE|))
        (|COMMON-LISP|::|CONS| '|COMMON-LISP|::|PROGN|
         (|COMMON-LISP|::|APPEND|
          (|COMMON-LISP|::|WHEN| |UIOP/UTILITY|::|SUPERSEDE|
           (|COMMON-LISP|::|LIST|
            (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|FMAKUNBOUND|
             (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|QUOTE|
              |UIOP/UTILITY|::|NAME|))))
          (|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|AND|)
           (|COMMON-LISP|::|LIST|
            (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|DECLAIM|
             (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|NOTINLINE|
              |UIOP/UTILITY|::|NAME|))))
          (|COMMON-LISP|::|LIST|
           (|COMMON-LISP|::|CONS| '|CLOS|::|DEFGENERIC|
            (|COMMON-LISP|::|CONS| |UIOP/UTILITY|::|NAME|
             (|COMMON-LISP|::|CONS| |UIOP/UTILITY|::|FORMALS|
              |COMMON-LISP|::|REST|))))))))))))
  '(|UIOP/UTILITY|::|NAME| |UIOP/UTILITY|::|FORMALS| |COMMON-LISP|::|&REST|
    |COMMON-LISP|::|REST|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/UTILITY|::|DEFUN*|)
(|SYSTEM|::|%PUTD| '|UIOP/UTILITY|::|DEFUN*|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/UTILITY|::|DEFUN*|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|UIOP/UTILITY|::|NAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|UIOP/UTILITY|::|FORMALS| (|COMMON-LISP|::|CADDR| . #1#))
       (|COMMON-LISP|::|REST| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/UTILITY|::|DEFUN*|
       (|COMMON-LISP|::|DESTRUCTURING-BIND|
        (|UIOP/UTILITY|::|NAME| |COMMON-LISP|::|&KEY|
         (|UIOP/UTILITY|::|SUPERSEDE| |COMMON-LISP|::|T|))
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|OR| (|COMMON-LISP|::|ATOM| |UIOP/UTILITY|::|NAME|)
          (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|CAR| |UIOP/UTILITY|::|NAME|)
           '|COMMON-LISP|::|SETF|))
         (|COMMON-LISP|::|LIST| |UIOP/UTILITY|::|NAME| :|SUPERSEDE|
          |COMMON-LISP|::|NIL|)
         |UIOP/UTILITY|::|NAME|)
        (|COMMON-LISP|::|DECLARE|
         (|COMMON-LISP|::|IGNORABLE| |UIOP/UTILITY|::|SUPERSEDE|))
        (|COMMON-LISP|::|CONS| '|COMMON-LISP|::|PROGN|
         (|COMMON-LISP|::|APPEND|
          (|COMMON-LISP|::|WHEN| |UIOP/UTILITY|::|SUPERSEDE|
           (|COMMON-LISP|::|LIST|
            (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|FMAKUNBOUND|
             (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|QUOTE|
              |UIOP/UTILITY|::|NAME|))))
          (|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|AND|)
           (|COMMON-LISP|::|LIST|
            (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|DECLAIM|
             (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|NOTINLINE|
              |UIOP/UTILITY|::|NAME|))))
          (|COMMON-LISP|::|LIST|
           (|COMMON-LISP|::|CONS| '|COMMON-LISP|::|DEFUN|
            (|COMMON-LISP|::|CONS| |UIOP/UTILITY|::|NAME|
             (|COMMON-LISP|::|CONS| |UIOP/UTILITY|::|FORMALS|
              |COMMON-LISP|::|REST|))))))))))))
  '(|UIOP/UTILITY|::|NAME| |UIOP/UTILITY|::|FORMALS| |COMMON-LISP|::|&REST|
    |COMMON-LISP|::|REST|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/UTILITY|::|WITH-UPGRADABILITY|)
(|SYSTEM|::|%PUTD| '|UIOP/UTILITY|::|WITH-UPGRADABILITY|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/UTILITY|::|WITH-UPGRADABILITY|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Evaluate BODY at compile- load- and run- times, with DEFUN and DEFGENERIC modified\n
to also declare the functions NOTINLINE and to accept a wrapping the function name\n
specification into a list with keyword argument SUPERSEDE (which defaults to T if the name\n
is not wrapped, and NIL if it is wrapped). If SUPERSEDE is true, call UNDEFINE-FUNCTION\n
to supersede any previous definition."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G12725| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#:|G12726|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 0. 0. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/UTILITY|::|WITH-UPGRADABILITY| #1#
          '#3=(|COMMON-LISP|::|&OPTIONAL|))
         #1#))
       (|UIOP/UTILITY|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/UTILITY|::|WITH-UPGRADABILITY|
       `(|COMMON-LISP|::|EVAL-WHEN|
         (:|COMPILE-TOPLEVEL| :|LOAD-TOPLEVEL| :|EXECUTE|)
         ,@(|COMMON-LISP|::|LOOP| :|FOR| |UIOP/UTILITY|::|FORM| :|IN|
            |UIOP/UTILITY|::|BODY| :|COLLECT|
            (|COMMON-LISP|::|IF|
             (|COMMON-LISP|::|CONSP| |UIOP/UTILITY|::|FORM|)
             (|COMMON-LISP|::|DESTRUCTURING-BIND|
              (|COMMON-LISP|::|CAR| . |COMMON-LISP|::|CDR|)
              |UIOP/UTILITY|::|FORM|
              (|COMMON-LISP|::|CASE| |COMMON-LISP|::|CAR|
               ((|COMMON-LISP|::|DEFUN|)
                `(|UIOP/UTILITY|::|DEFUN*| ,@|COMMON-LISP|::|CDR|))
               ((|CLOS|::|DEFGENERIC|)
                `(|UIOP/UTILITY|::|DEFGENERIC*| ,@|COMMON-LISP|::|CDR|))
               (|COMMON-LISP|::|OTHERWISE| |UIOP/UTILITY|::|FORM|)))
             |UIOP/UTILITY|::|FORM|))))))))
  '(#3# |COMMON-LISP|::|&BODY| |UIOP/UTILITY|::|BODY|)))
(|COMMON-LISP|::|DEFVAR| |UIOP/UTILITY|::|*UIOP-DEBUG-UTILITY*|
 '(|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|IGNORE-ERRORS|
    (|COMMON-LISP|::|PROBE-FILE|
     (|UIOP/PACKAGE|::|SYMBOL-CALL| :|ASDF| :|SYSTEM-RELATIVE-PATHNAME| :|UIOP|
      "contrib/debug.lisp")))
   (|COMMON-LISP|::|PROBE-FILE|
    (|UIOP/PACKAGE|::|SYMBOL-CALL| :|UIOP/PATHNAME| :|SUBPATHNAME|
     (|COMMON-LISP|::|USER-HOMEDIR-PATHNAME|)
     "common-lisp/asdf/uiop/contrib/debug.lisp")))
 "form that evaluates to the pathname to your favorite debugging utilities")
(|COMMON-LISP|::|DEFMACRO| |UIOP/UTILITY|::|UIOP-DEBUG|
 (|COMMON-LISP|::|&REST| |UIOP/UTILITY|::|KEYS|)
 `(|COMMON-LISP|::|EVAL-WHEN| (:|COMPILE-TOPLEVEL| :|LOAD-TOPLEVEL| :|EXECUTE|)
   (|UIOP/UTILITY|::|LOAD-UIOP-DEBUG-UTILITY| ,@|UIOP/UTILITY|::|KEYS|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|LOAD-UIOP-DEBUG-UTILITY|
 (|COMMON-LISP|::|&KEY| |COMMON-LISP|::|PACKAGE|
  |UIOP/UTILITY|::|UTILITY-FILE|)
 (|COMMON-LISP|::|LET*|
  ((|COMMON-LISP|::|*PACKAGE*|
    (|COMMON-LISP|::|IF| |COMMON-LISP|::|PACKAGE|
     (|COMMON-LISP|::|FIND-PACKAGE| |COMMON-LISP|::|PACKAGE|)
     |COMMON-LISP|::|*PACKAGE*|))
   (|COMMON-LISP|::|KEYWORD|
    (|COMMON-LISP|::|READ-FROM-STRING|
     (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| ":DBG-~:@(~A~)"
      (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|*PACKAGE*|)))))
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|MEMBER| |COMMON-LISP|::|KEYWORD|
    |COMMON-LISP|::|*FEATURES*|)
   (|COMMON-LISP|::|LET*|
    ((|UIOP/UTILITY|::|UTILITY-FILE|
      (|COMMON-LISP|::|OR| |UIOP/UTILITY|::|UTILITY-FILE|
       |UIOP/UTILITY|::|*UIOP-DEBUG-UTILITY*|))
     (|UIOP/UTILITY|::|FILE|
      (|COMMON-LISP|::|IGNORE-ERRORS|
       (|COMMON-LISP|::|PROBE-FILE|
        (|COMMON-LISP|::|EVAL| |UIOP/UTILITY|::|UTILITY-FILE|)))))
    (|COMMON-LISP|::|IF| |UIOP/UTILITY|::|FILE|
     (|COMMON-LISP|::|LOAD| |UIOP/UTILITY|::|FILE|)
     (|COMMON-LISP|::|ERROR| "Failed to locate debug utility file: ~S"
      |UIOP/UTILITY|::|UTILITY-FILE|))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/UTILITY|::|*UIOP-DEBUG-UTILITY*|))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/UTILITY|::|UIOP-DEBUG|)
(|SYSTEM|::|%PUTD| '|UIOP/UTILITY|::|UIOP-DEBUG|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/UTILITY|::|UIOP-DEBUG|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|UIOP/UTILITY|::|KEYS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |UIOP/UTILITY|::|UIOP-DEBUG|
      `(|COMMON-LISP|::|EVAL-WHEN|
        (:|COMPILE-TOPLEVEL| :|LOAD-TOPLEVEL| :|EXECUTE|)
        (|UIOP/UTILITY|::|LOAD-UIOP-DEBUG-UTILITY|
         ,@|UIOP/UTILITY|::|KEYS|))))))
  '(|COMMON-LISP|::|&REST| |UIOP/UTILITY|::|KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|LOAD-UIOP-DEBUG-UTILITY|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|LOAD-UIOP-DEBUG-UTILITY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| |COMMON-LISP|::|PACKAGE|
    |UIOP/UTILITY|::|UTILITY-FILE|)))
(|COMMON-LISP|::|DEFMACRO| |UIOP/UTILITY|::|NEST|
 (|COMMON-LISP|::|&REST| |UIOP/UTILITY|::|THINGS|)
 "Macro to keep code nesting and indentation under control."
 (|COMMON-LISP|::|REDUCE|
  #'(|COMMON-LISP|::|LAMBDA| (|UIOP/UTILITY|::|OUTER| |UIOP/UTILITY|::|INNER|)
     `(,@|UIOP/UTILITY|::|OUTER| ,|UIOP/UTILITY|::|INNER|))
  |UIOP/UTILITY|::|THINGS| :|FROM-END| |COMMON-LISP|::|T|))
(|COMMON-LISP|::|DEFMACRO| |UIOP/UTILITY|::|IF-LET|
 (|UIOP/UTILITY|::|BINDINGS| |COMMON-LISP|::|&BODY|
  (|UIOP/UTILITY|::|THEN-FORM| |COMMON-LISP|::|&OPTIONAL|
   |UIOP/UTILITY|::|ELSE-FORM|))
 (|COMMON-LISP|::|LET*|
  ((|UIOP/UTILITY|::|BINDING-LIST|
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |UIOP/UTILITY|::|BINDINGS|)
      (|COMMON-LISP|::|SYMBOLP|
       (|COMMON-LISP|::|CAR| |UIOP/UTILITY|::|BINDINGS|)))
     (|COMMON-LISP|::|LIST| |UIOP/UTILITY|::|BINDINGS|)
     |UIOP/UTILITY|::|BINDINGS|))
   (|UIOP/UTILITY|::|VARIABLES|
    (|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|CAR|
     |UIOP/UTILITY|::|BINDING-LIST|)))
  `(|COMMON-LISP|::|LET| ,|UIOP/UTILITY|::|BINDING-LIST|
    (|COMMON-LISP|::|IF| (|COMMON-LISP|::|AND| ,@|UIOP/UTILITY|::|VARIABLES|)
     ,|UIOP/UTILITY|::|THEN-FORM| ,|UIOP/UTILITY|::|ELSE-FORM|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/UTILITY|::|NEST|)
(|SYSTEM|::|%PUTD| '|UIOP/UTILITY|::|NEST|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/UTILITY|::|NEST|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Macro to keep code nesting and indentation under control."
    (|COMMON-LISP|::|LET*|
     ((|UIOP/UTILITY|::|THINGS|
       (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |UIOP/UTILITY|::|NEST|
      (|COMMON-LISP|::|REDUCE|
       #'(|COMMON-LISP|::|LAMBDA|
          (|UIOP/UTILITY|::|OUTER| |UIOP/UTILITY|::|INNER|)
          `(,@|UIOP/UTILITY|::|OUTER| ,|UIOP/UTILITY|::|INNER|))
       |UIOP/UTILITY|::|THINGS| :|FROM-END| |COMMON-LISP|::|T|)))))
  '(|COMMON-LISP|::|&REST| |UIOP/UTILITY|::|THINGS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/UTILITY|::|IF-LET|)
(|SYSTEM|::|%PUTD| '|UIOP/UTILITY|::|IF-LET|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/UTILITY|::|IF-LET|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|UIOP/UTILITY|::|BINDINGS|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|UIOP/UTILITY|::|THEN-FORM| (|COMMON-LISP|::|CADDR| . #1#))
       (|UIOP/UTILITY|::|ELSE-FORM| (|COMMON-LISP|::|CADDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/UTILITY|::|IF-LET|
       (|COMMON-LISP|::|LET*|
        ((|UIOP/UTILITY|::|BINDING-LIST|
          (|COMMON-LISP|::|IF|
           (|COMMON-LISP|::|AND|
            (|COMMON-LISP|::|CONSP| |UIOP/UTILITY|::|BINDINGS|)
            (|COMMON-LISP|::|SYMBOLP|
             (|COMMON-LISP|::|CAR| |UIOP/UTILITY|::|BINDINGS|)))
           (|COMMON-LISP|::|LIST| |UIOP/UTILITY|::|BINDINGS|)
           |UIOP/UTILITY|::|BINDINGS|))
         (|UIOP/UTILITY|::|VARIABLES|
          (|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|CAR|
           |UIOP/UTILITY|::|BINDING-LIST|)))
        `(|COMMON-LISP|::|LET| ,|UIOP/UTILITY|::|BINDING-LIST|
          (|COMMON-LISP|::|IF|
           (|COMMON-LISP|::|AND| ,@|UIOP/UTILITY|::|VARIABLES|)
           ,|UIOP/UTILITY|::|THEN-FORM| ,|UIOP/UTILITY|::|ELSE-FORM|))))))))
  '(|UIOP/UTILITY|::|BINDINGS| |COMMON-LISP|::|&BODY|
    (|UIOP/UTILITY|::|THEN-FORM| |COMMON-LISP|::|&OPTIONAL|
     |UIOP/UTILITY|::|ELSE-FORM|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|PARSE-BODY|
 (|UIOP/UTILITY|::|BODY| |COMMON-LISP|::|&KEY| |CLOS|::|DOCUMENTATION|
  |UIOP/UTILITY|::|WHOLE|)
 "Parses BODY into (values remaining-forms declarations doc-string).\n
Documentation strings are recognized only if DOCUMENTATION is true.\n
Syntax errors in body are signalled and WHOLE is used in the signal\n
arguments when given."
 (|COMMON-LISP|::|LET|
  ((|UIOP/UTILITY|::|DOC| |COMMON-LISP|::|NIL|)
   (|UIOP/UTILITY|::|DECLS| |COMMON-LISP|::|NIL|)
   (|UIOP/UTILITY|::|CURRENT| |COMMON-LISP|::|NIL|))
  (|COMMON-LISP|::|TAGBODY| :|DECLARATIONS|
   (|COMMON-LISP|::|SETF| |UIOP/UTILITY|::|CURRENT|
    (|COMMON-LISP|::|CAR| |UIOP/UTILITY|::|BODY|))
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|AND| |CLOS|::|DOCUMENTATION|
     (|COMMON-LISP|::|STRINGP| |UIOP/UTILITY|::|CURRENT|)
     (|COMMON-LISP|::|CDR| |UIOP/UTILITY|::|BODY|))
    (|COMMON-LISP|::|IF| |UIOP/UTILITY|::|DOC|
     (|COMMON-LISP|::|ERROR| "Too many documentation strings in ~S."
      (|COMMON-LISP|::|OR| |UIOP/UTILITY|::|WHOLE| |UIOP/UTILITY|::|BODY|))
     (|COMMON-LISP|::|SETF| |UIOP/UTILITY|::|DOC|
      (|COMMON-LISP|::|POP| |UIOP/UTILITY|::|BODY|)))
    (|COMMON-LISP|::|GO| :|DECLARATIONS|))
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|AND| (|COMMON-LISP|::|LISTP| |UIOP/UTILITY|::|CURRENT|)
     (|COMMON-LISP|::|EQL| (|COMMON-LISP|::|FIRST| |UIOP/UTILITY|::|CURRENT|)
      '|COMMON-LISP|::|DECLARE|))
    (|COMMON-LISP|::|PUSH| (|COMMON-LISP|::|POP| |UIOP/UTILITY|::|BODY|)
     |UIOP/UTILITY|::|DECLS|)
    (|COMMON-LISP|::|GO| :|DECLARATIONS|)))
  (|COMMON-LISP|::|VALUES| |UIOP/UTILITY|::|BODY|
   (|COMMON-LISP|::|NREVERSE| |UIOP/UTILITY|::|DECLS|) |UIOP/UTILITY|::|DOC|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|PARSE-BODY|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|PARSE-BODY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|BODY| |COMMON-LISP|::|&KEY| |CLOS|::|DOCUMENTATION|
    |UIOP/UTILITY|::|WHOLE|)))
(|COMMON-LISP|::|DEFMACRO| |UIOP/UTILITY|::|WHILE-COLLECTING|
 ((|COMMON-LISP|::|&REST| |UIOP/UTILITY|::|COLLECTORS|) |COMMON-LISP|::|&BODY|
  |UIOP/UTILITY|::|BODY|)
 "COLLECTORS should be a list of names for collections.  A collector\n
defines a function that, when applied to an argument inside BODY, will\n
add its argument to the corresponding collection.  Returns multiple values,\n
a list for each collection, in order.\n
   E.g.,\n
(while-collecting (foo bar)\n
           (dolist (x '((a 1) (b 2) (c 3)))\n
             (foo (first x))\n
             (bar (second x))))\n
Returns two values: (A B C) and (1 2 3)."
 (|COMMON-LISP|::|LET|
  ((|UIOP/UTILITY|::|VARS|
    (|COMMON-LISP|::|MAPCAR|
     #'(|COMMON-LISP|::|LAMBDA| (|UIOP/UTILITY|::|X|)
        (|COMMON-LISP|::|GENSYM|
         (|COMMON-LISP|::|SYMBOL-NAME| |UIOP/UTILITY|::|X|)))
     |UIOP/UTILITY|::|COLLECTORS|))
   (|UIOP/UTILITY|::|INITIAL-VALUES|
    (|COMMON-LISP|::|MAPCAR| (|COMMON-LISP|::|CONSTANTLY| |COMMON-LISP|::|NIL|)
     |UIOP/UTILITY|::|COLLECTORS|)))
  `(|COMMON-LISP|::|LET|
    ,(|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|LIST| |UIOP/UTILITY|::|VARS|
      |UIOP/UTILITY|::|INITIAL-VALUES|)
    (|COMMON-LISP|::|FLET|
     ,(|COMMON-LISP|::|MAPCAR|
       #'(|COMMON-LISP|::|LAMBDA| (|UIOP/UTILITY|::|C| |UIOP/UTILITY|::|V|)
          `(,|UIOP/UTILITY|::|C| (|UIOP/UTILITY|::|X|)
            (|COMMON-LISP|::|PUSH| |UIOP/UTILITY|::|X| ,|UIOP/UTILITY|::|V|)
            (|COMMON-LISP|::|VALUES|)))
       |UIOP/UTILITY|::|COLLECTORS| |UIOP/UTILITY|::|VARS|)
     ,@|UIOP/UTILITY|::|BODY|
     (|COMMON-LISP|::|VALUES|
      ,@(|COMMON-LISP|::|MAPCAR|
         #'(|COMMON-LISP|::|LAMBDA| (|UIOP/UTILITY|::|V|)
            `(|COMMON-LISP|::|REVERSE| ,|UIOP/UTILITY|::|V|))
         |UIOP/UTILITY|::|VARS|))))))
(|COMMON-LISP|::|DEFINE-MODIFY-MACRO| |UIOP/UTILITY|::|APPENDF|
 (|COMMON-LISP|::|&REST| |UIOP/UTILITY|::|ARGS|) |COMMON-LISP|::|APPEND|
 "Append onto list")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|LENGTH=N-P|
 (|UIOP/UTILITY|::|X| |UIOP/UTILITY|::|N|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/UTILITY|::|N|
  (|COMMON-LISP|::|INTEGER| 0. |COMMON-LISP|::|*|))
 (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/UTILITY|::|L| |COMMON-LISP|::|=|
  |UIOP/UTILITY|::|X| :|THEN| (|COMMON-LISP|::|CDR| |UIOP/UTILITY|::|L|) :|FOR|
  |UIOP/UTILITY|::|I| :|DOWNFROM| |UIOP/UTILITY|::|N| :|DO|
  (|COMMON-LISP|::|COND|
   ((|COMMON-LISP|::|ZEROP| |UIOP/UTILITY|::|I|)
    (|COMMON-LISP|::|RETURN| (|COMMON-LISP|::|NULL| |UIOP/UTILITY|::|L|)))
   ((|COMMON-LISP|::|NOT| (|COMMON-LISP|::|CONSP| |UIOP/UTILITY|::|L|))
    (|COMMON-LISP|::|RETURN| |COMMON-LISP|::|NIL|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|ENSURE-LIST| (|UIOP/UTILITY|::|X|)
 (|COMMON-LISP|::|IF| (|COMMON-LISP|::|LISTP| |UIOP/UTILITY|::|X|)
  |UIOP/UTILITY|::|X| (|COMMON-LISP|::|LIST| |UIOP/UTILITY|::|X|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/UTILITY|::|WHILE-COLLECTING|)
(|SYSTEM|::|%PUTD| '|UIOP/UTILITY|::|WHILE-COLLECTING|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/UTILITY|::|WHILE-COLLECTING|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "COLLECTORS should be a list of names for collections.  A collector\n
defines a function that, when applied to an argument inside BODY, will\n
add its argument to the corresponding collection.  Returns multiple values,\n
a list for each collection, in order.\n
   E.g.,\n
(while-collecting (foo bar)\n
           (dolist (x '((a 1) (b 2) (c 3)))\n
             (foo (first x))\n
             (bar (second x))))\n
Returns two values: (A B C) and (1 2 3)."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G12882| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G12883| #1#) (|UIOP/UTILITY|::|COLLECTORS| #3#)
       (|UIOP/UTILITY|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/UTILITY|::|WHILE-COLLECTING|
       (|COMMON-LISP|::|LET|
        ((|UIOP/UTILITY|::|VARS|
          (|COMMON-LISP|::|MAPCAR|
           #'(|COMMON-LISP|::|LAMBDA| (|UIOP/UTILITY|::|X|)
              (|COMMON-LISP|::|GENSYM|
               (|COMMON-LISP|::|SYMBOL-NAME| |UIOP/UTILITY|::|X|)))
           |UIOP/UTILITY|::|COLLECTORS|))
         (|UIOP/UTILITY|::|INITIAL-VALUES|
          (|COMMON-LISP|::|MAPCAR|
           (|COMMON-LISP|::|CONSTANTLY| |COMMON-LISP|::|NIL|)
           |UIOP/UTILITY|::|COLLECTORS|)))
        `(|COMMON-LISP|::|LET|
          ,(|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|LIST|
            |UIOP/UTILITY|::|VARS| |UIOP/UTILITY|::|INITIAL-VALUES|)
          (|COMMON-LISP|::|FLET|
           ,(|COMMON-LISP|::|MAPCAR|
             #'(|COMMON-LISP|::|LAMBDA|
                (|UIOP/UTILITY|::|C| |UIOP/UTILITY|::|V|)
                `(,|UIOP/UTILITY|::|C| (|UIOP/UTILITY|::|X|)
                  (|COMMON-LISP|::|PUSH| |UIOP/UTILITY|::|X|
                   ,|UIOP/UTILITY|::|V|)
                  (|COMMON-LISP|::|VALUES|)))
             |UIOP/UTILITY|::|COLLECTORS| |UIOP/UTILITY|::|VARS|)
           ,@|UIOP/UTILITY|::|BODY|
           (|COMMON-LISP|::|VALUES|
            ,@(|COMMON-LISP|::|MAPCAR|
               #'(|COMMON-LISP|::|LAMBDA| (|UIOP/UTILITY|::|V|)
                  `(|COMMON-LISP|::|REVERSE| ,|UIOP/UTILITY|::|V|))
               |UIOP/UTILITY|::|VARS|))))))))))
  '((|COMMON-LISP|::|&REST| |UIOP/UTILITY|::|COLLECTORS|)
    |COMMON-LISP|::|&BODY| |UIOP/UTILITY|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/UTILITY|::|APPENDF|)
(|SYSTEM|::|%PUTD| '|UIOP/UTILITY|::|APPENDF|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/UTILITY|::|APPENDF|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|ENV|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    "Append onto list"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|SYSTEM|::|PLACE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|UIOP/UTILITY|::|ARGS| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/UTILITY|::|APPENDF|
       (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
        (|SYSTEM|::|TEMPS| |SYSTEM|::|SUBFORMS| |SYSTEM|::|STORES|
         |SYSTEM|::|SETTERFORM| |SYSTEM|::|GETTERFORM|)
        (|EXT|::|GET-SETF-METHOD| |SYSTEM|::|PLACE| |SYSTEM|::|ENV|)
        (|COMMON-LISP|::|LET|
         ((|SYSTEM|::|LET-LIST|
           (|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|LIST| |SYSTEM|::|TEMPS|
            |SYSTEM|::|SUBFORMS|)))
         (|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|AND|
           (|COMMON-LISP|::|EVERY| #'|COMMON-LISP|::|CONSTANTP|
            |UIOP/UTILITY|::|ARGS|))
          (|COMMON-LISP|::|LET|
           ((|SYSTEM|::|FUNCTION-APPLICATION|
             (|COMMON-LISP|::|LIST*| '|COMMON-LISP|::|APPEND|
              |SYSTEM|::|GETTERFORM| |UIOP/UTILITY|::|ARGS|)))
           (|SYSTEM|::|OPTIMIZED-WRAP-LET*| |SYSTEM|::|ENV|
            (|COMMON-LISP|::|NCONC| |SYSTEM|::|LET-LIST|
             (|COMMON-LISP|::|LIST|
              (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|CAR| |SYSTEM|::|STORES|)
               |SYSTEM|::|FUNCTION-APPLICATION|)))
            |SYSTEM|::|SETTERFORM|))
          (|COMMON-LISP|::|LET*|
           ((|SYSTEM|::|ARGVARS|
             (|COMMON-LISP|::|MAPCAR|
              #'(|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|VAR|)
                 (|COMMON-LISP|::|DECLARE|
                  (|COMMON-LISP|::|IGNORE| |SYSTEM|::|VAR|))
                 (|COMMON-LISP|::|GENSYM|))
              (|COMMON-LISP|::|LIST*| |UIOP/UTILITY|::|ARGS|)))
            (|SYSTEM|::|FUNCTION-APPLICATION|
             (|COMMON-LISP|::|LIST*| '|COMMON-LISP|::|APPEND|
              |SYSTEM|::|GETTERFORM| |SYSTEM|::|ARGVARS|)))
           (|SYSTEM|::|OPTIMIZED-WRAP-LET*| |SYSTEM|::|ENV|
            (|COMMON-LISP|::|NCONC| |SYSTEM|::|LET-LIST|
             (|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|LIST|
              |SYSTEM|::|ARGVARS|
              (|COMMON-LISP|::|LIST*| |UIOP/UTILITY|::|ARGS|))
             (|COMMON-LISP|::|LIST|
              (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|CAR| |SYSTEM|::|STORES|)
               |SYSTEM|::|FUNCTION-APPLICATION|)))
            |SYSTEM|::|SETTERFORM|))))))))))
  '(|SYSTEM|::|PLACE| |COMMON-LISP|::|&REST| |UIOP/UTILITY|::|ARGS|
    |COMMON-LISP|::|&ENVIRONMENT| |SYSTEM|::|ENV|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|LENGTH=N-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|LENGTH=N-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|X| |UIOP/UTILITY|::|N|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|ENSURE-LIST|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|ENSURE-LIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/UTILITY|::|X|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|REMOVE-PLIST-KEY|
 (|UIOP/UTILITY|::|KEY| |UIOP/UTILITY|::|PLIST|)
 "Remove a single key from a plist"
 (|UIOP/COMMON-LISP|::|LOOP*| :|FOR| (|UIOP/UTILITY|::|K| |UIOP/UTILITY|::|V|)
  :|ON| |UIOP/UTILITY|::|PLIST| :|BY| #'|COMMON-LISP|::|CDDR| :|UNLESS|
  (|COMMON-LISP|::|EQ| |UIOP/UTILITY|::|K| |UIOP/UTILITY|::|KEY|) :|APPEND|
  (|COMMON-LISP|::|LIST| |UIOP/UTILITY|::|K| |UIOP/UTILITY|::|V|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|REMOVE-PLIST-KEYS|
 (|UIOP/UTILITY|::|KEYS| |UIOP/UTILITY|::|PLIST|)
 "Remove a list of keys from a plist"
 (|UIOP/COMMON-LISP|::|LOOP*| :|FOR| (|UIOP/UTILITY|::|K| |UIOP/UTILITY|::|V|)
  :|ON| |UIOP/UTILITY|::|PLIST| :|BY| #'|COMMON-LISP|::|CDDR| :|UNLESS|
  (|COMMON-LISP|::|MEMBER| |UIOP/UTILITY|::|K| |UIOP/UTILITY|::|KEYS|)
  :|APPEND| (|COMMON-LISP|::|LIST| |UIOP/UTILITY|::|K| |UIOP/UTILITY|::|V|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|REMOVE-PLIST-KEY|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|REMOVE-PLIST-KEY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|KEY| |UIOP/UTILITY|::|PLIST|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|REMOVE-PLIST-KEYS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|REMOVE-PLIST-KEYS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|KEYS| |UIOP/UTILITY|::|PLIST|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|EMPTYP| (|UIOP/UTILITY|::|X|)
 "Predicate that is true for an empty sequence"
 (|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |UIOP/UTILITY|::|X|)
  (|COMMON-LISP|::|AND| (|COMMON-LISP|::|VECTORP| |UIOP/UTILITY|::|X|)
   (|COMMON-LISP|::|ZEROP| (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|X|)))))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|EMPTYP|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|EMPTYP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/UTILITY|::|X|)))
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/UTILITY|::|+CHARACTER-TYPES+|
 #(|COMMON-LISP|::|CHARACTER|))
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/UTILITY|::|+MAX-CHARACTER-TYPE-INDEX+|
 (|COMMON-LISP|::|1-|
  (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|+CHARACTER-TYPES+|)))
(|COMMON-LISP|::|DEFCONSTANT| |UIOP/UTILITY|::|+NON-BASE-CHARS-EXIST-P+|
 (|COMMON-LISP|::|PLUSP| |UIOP/UTILITY|::|+MAX-CHARACTER-TYPE-INDEX+|))
(|COMMON-LISP|::|WHEN| |UIOP/UTILITY|::|+NON-BASE-CHARS-EXIST-P+|
 (|COMMON-LISP|::|PUSHNEW| :|NON-BASE-CHARS-EXIST-P|
  |COMMON-LISP|::|*FEATURES*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/UTILITY|::|+CHARACTER-TYPES+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/UTILITY|::|+MAX-CHARACTER-TYPE-INDEX+|))
(|SYSTEM|::|C-PROCLAIM-CONSTANT| '|UIOP/UTILITY|::|+NON-BASE-CHARS-EXIST-P+|
 '(|COMMON-LISP|::|PLUSP| |UIOP/UTILITY|::|+MAX-CHARACTER-TYPE-INDEX+|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|CHARACTER-TYPE-INDEX|
 (|UIOP/UTILITY|::|X|)
 (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORABLE| |UIOP/UTILITY|::|X|))
 0.)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|CHARACTER-TYPE-INDEX|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|CHARACTER-TYPE-INDEX|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/UTILITY|::|X|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|BASE-STRING-P|
 (|COMMON-LISP|::|STRING|) "Does the STRING only contain BASE-CHARs?"
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |COMMON-LISP|::|STRING|))
 (|COMMON-LISP|::|AND|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|STRINGS-COMMON-ELEMENT-TYPE|
 (|UIOP/UTILITY|::|STRINGS|)
 "What least subtype of CHARACTER can contain all the elements of all the STRINGS?"
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/UTILITY|::|STRINGS|))
 '|COMMON-LISP|::|CHARACTER|)
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|REDUCE/STRCAT|
 (|UIOP/UTILITY|::|STRINGS| |COMMON-LISP|::|&KEY| |UIOP/UTILITY|::|KEY|
  |UIOP/UTILITY|::|START| |UIOP/UTILITY|::|END|)
 "Reduce a list as if by STRCAT, accepting KEY START and END keywords like REDUCE.\n
NIL is interpreted as an empty string. A character is interpreted as a string of length one."
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|OR| |UIOP/UTILITY|::|START| |UIOP/UTILITY|::|END|)
  (|COMMON-LISP|::|SETF| |UIOP/UTILITY|::|STRINGS|
   (|COMMON-LISP|::|SUBSEQ| |UIOP/UTILITY|::|STRINGS| |UIOP/UTILITY|::|START|
    |UIOP/UTILITY|::|END|)))
 (|COMMON-LISP|::|WHEN| |UIOP/UTILITY|::|KEY|
  (|COMMON-LISP|::|SETF| |UIOP/UTILITY|::|STRINGS|
   (|COMMON-LISP|::|MAPCAR| |UIOP/UTILITY|::|KEY| |UIOP/UTILITY|::|STRINGS|)))
 (|COMMON-LISP|::|LOOP| :|WITH| |UIOP/UTILITY|::|OUTPUT| |COMMON-LISP|::|=|
  (|COMMON-LISP|::|MAKE-STRING|
   (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/UTILITY|::|S| :|IN|
    |UIOP/UTILITY|::|STRINGS| :|SUM|
    (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CHARACTERP| |UIOP/UTILITY|::|S|) 1.
     (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|S|)))
   :|ELEMENT-TYPE|
   (|UIOP/UTILITY|::|STRINGS-COMMON-ELEMENT-TYPE| |UIOP/UTILITY|::|STRINGS|))
  :|WITH| |UIOP/UTILITY|::|POS| |COMMON-LISP|::|=| 0. :|FOR|
  |UIOP/UTILITY|::|INPUT| :|IN| |UIOP/UTILITY|::|STRINGS| :|DO|
  (|COMMON-LISP|::|ETYPECASE| |UIOP/UTILITY|::|INPUT| (|COMMON-LISP|::|NULL|)
   (|COMMON-LISP|::|CHARACTER|
    (|COMMON-LISP|::|SETF|
     (|COMMON-LISP|::|CHAR| |UIOP/UTILITY|::|OUTPUT| |UIOP/UTILITY|::|POS|)
     |UIOP/UTILITY|::|INPUT|)
    (|COMMON-LISP|::|INCF| |UIOP/UTILITY|::|POS|))
   (|COMMON-LISP|::|STRING|
    (|COMMON-LISP|::|REPLACE| |UIOP/UTILITY|::|OUTPUT| |UIOP/UTILITY|::|INPUT|
     :|START1| |UIOP/UTILITY|::|POS|)
    (|COMMON-LISP|::|INCF| |UIOP/UTILITY|::|POS|
     (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|INPUT|))))
  :|FINALLY| (|COMMON-LISP|::|RETURN| |UIOP/UTILITY|::|OUTPUT|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|STRCAT|
 (|COMMON-LISP|::|&REST| |UIOP/UTILITY|::|STRINGS|)
 "Concatenate strings.\n
NIL is interpreted as an empty string, a character as a string of length one."
 (|UIOP/UTILITY|::|REDUCE/STRCAT| |UIOP/UTILITY|::|STRINGS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|FIRST-CHAR| (|UIOP/UTILITY|::|S|)
 "Return the first character of a non-empty string S, or NIL"
 (|COMMON-LISP|::|AND| (|COMMON-LISP|::|STRINGP| |UIOP/UTILITY|::|S|)
  (|COMMON-LISP|::|PLUSP| (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|S|))
  (|COMMON-LISP|::|CHAR| |UIOP/UTILITY|::|S| 0.)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|LAST-CHAR| (|UIOP/UTILITY|::|S|)
 "Return the last character of a non-empty string S, or NIL"
 (|COMMON-LISP|::|AND| (|COMMON-LISP|::|STRINGP| |UIOP/UTILITY|::|S|)
  (|COMMON-LISP|::|PLUSP| (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|S|))
  (|COMMON-LISP|::|CHAR| |UIOP/UTILITY|::|S|
   (|COMMON-LISP|::|1-| (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|S|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|SPLIT-STRING|
 (|COMMON-LISP|::|STRING| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|MAX|
  (|UIOP/UTILITY|::|SEPARATOR| '(#\Space #\Tab)))
 "Split STRING into a list of components separated by\n
any of the characters in the sequence SEPARATOR.\n
If MAX is specified, then no more than max(1,MAX) components will be returned,\n
starting the separation from the end, e.g. when called with arguments\n
 \"a.b.c.d.e\" :max 3 :separator \".\" it will return (\"a.b.c\" \"d\" \"e\")."
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|LIST| |COMMON-LISP|::|NIL|) (|UIOP/UTILITY|::|WORDS| 0.)
    (|UIOP/UTILITY|::|END| (|COMMON-LISP|::|LENGTH| |COMMON-LISP|::|STRING|)))
   (|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|ZEROP| |UIOP/UTILITY|::|END|)
    (|COMMON-LISP|::|RETURN| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|FLET|
    ((|UIOP/UTILITY|::|SEPARATORP| (|COMMON-LISP|::|CHAR|)
      (|COMMON-LISP|::|FIND| |COMMON-LISP|::|CHAR|
       |UIOP/UTILITY|::|SEPARATOR|))
     (|UIOP/UTILITY|::|DONE| |COMMON-LISP|::|NIL|
      (|COMMON-LISP|::|RETURN|
       (|COMMON-LISP|::|CONS|
        (|COMMON-LISP|::|SUBSEQ| |COMMON-LISP|::|STRING| 0.
         |UIOP/UTILITY|::|END|)
        |COMMON-LISP|::|LIST|))))
    (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/UTILITY|::|START| |COMMON-LISP|::|=|
     (|COMMON-LISP|::|IF|
      (|COMMON-LISP|::|AND| |COMMON-LISP|::|MAX|
       (|COMMON-LISP|::|>=| |UIOP/UTILITY|::|WORDS|
        (|COMMON-LISP|::|1-| |COMMON-LISP|::|MAX|)))
      (|UIOP/UTILITY|::|DONE|)
      (|COMMON-LISP|::|POSITION-IF| #'|UIOP/UTILITY|::|SEPARATORP|
       |COMMON-LISP|::|STRING| :|END| |UIOP/UTILITY|::|END| :|FROM-END|
       |COMMON-LISP|::|T|))
     :|DO|
     (|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|NULL| |UIOP/UTILITY|::|START|)
      (|UIOP/UTILITY|::|DONE|))
     (|COMMON-LISP|::|PUSH|
      (|COMMON-LISP|::|SUBSEQ| |COMMON-LISP|::|STRING|
       (|COMMON-LISP|::|1+| |UIOP/UTILITY|::|START|) |UIOP/UTILITY|::|END|)
      |COMMON-LISP|::|LIST|)
     (|COMMON-LISP|::|INCF| |UIOP/UTILITY|::|WORDS|)
     (|COMMON-LISP|::|SETF| |UIOP/UTILITY|::|END| |UIOP/UTILITY|::|START|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|STRING-PREFIX-P|
 (|UIOP/UTILITY|::|PREFIX| |COMMON-LISP|::|STRING|)
 "Does STRING begin with PREFIX?"
 (|COMMON-LISP|::|LET*|
  ((|UIOP/UTILITY|::|X| (|COMMON-LISP|::|STRING| |UIOP/UTILITY|::|PREFIX|))
   (|UIOP/UTILITY|::|Y| (|COMMON-LISP|::|STRING| |COMMON-LISP|::|STRING|))
   (|UIOP/UTILITY|::|LX| (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|X|))
   (|UIOP/UTILITY|::|LY| (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|Y|)))
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|<=| |UIOP/UTILITY|::|LX| |UIOP/UTILITY|::|LY|)
   (|COMMON-LISP|::|STRING=| |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y| :|END2|
    |UIOP/UTILITY|::|LX|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|STRING-SUFFIX-P|
 (|COMMON-LISP|::|STRING| |UIOP/UTILITY|::|SUFFIX|)
 "Does STRING end with SUFFIX?"
 (|COMMON-LISP|::|LET*|
  ((|UIOP/UTILITY|::|X| (|COMMON-LISP|::|STRING| |COMMON-LISP|::|STRING|))
   (|UIOP/UTILITY|::|Y| (|COMMON-LISP|::|STRING| |UIOP/UTILITY|::|SUFFIX|))
   (|UIOP/UTILITY|::|LX| (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|X|))
   (|UIOP/UTILITY|::|LY| (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|Y|)))
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|<=| |UIOP/UTILITY|::|LY| |UIOP/UTILITY|::|LX|)
   (|COMMON-LISP|::|STRING=| |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y| :|START1|
    (|COMMON-LISP|::|-| |UIOP/UTILITY|::|LX| |UIOP/UTILITY|::|LY|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|STRING-ENCLOSED-P|
 (|UIOP/UTILITY|::|PREFIX| |COMMON-LISP|::|STRING| |UIOP/UTILITY|::|SUFFIX|)
 "Does STRING begin with PREFIX and end with SUFFIX?"
 (|COMMON-LISP|::|AND|
  (|UIOP/UTILITY|::|STRING-PREFIX-P| |UIOP/UTILITY|::|PREFIX|
   |COMMON-LISP|::|STRING|)
  (|UIOP/UTILITY|::|STRING-SUFFIX-P| |COMMON-LISP|::|STRING|
   |UIOP/UTILITY|::|SUFFIX|)))
(|COMMON-LISP|::|DEFVAR| |UIOP/UTILITY|::|+CR+|
 (|COMMON-LISP|::|COERCE| #(#\Return) '|COMMON-LISP|::|STRING|))
(|COMMON-LISP|::|DEFVAR| |UIOP/UTILITY|::|+LF+|
 (|COMMON-LISP|::|COERCE| #(#\Newline) '|COMMON-LISP|::|STRING|))
(|COMMON-LISP|::|DEFVAR| |UIOP/UTILITY|::|+CRLF+|
 (|COMMON-LISP|::|COERCE| #(#\Return #\Newline) '|COMMON-LISP|::|STRING|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|STRIPLN| (|UIOP/UTILITY|::|X|)
 "Strip a string X from any ending CR, LF or CRLF.\n
Return two values, the stripped string and the ending that was stripped,\n
or the original value and NIL if no stripping took place.\n
Since our STRCAT accepts NIL as empty string designator,\n
the two results passed to STRCAT always reconstitute the original string"
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/UTILITY|::|X| |COMMON-LISP|::|STRING|)
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|FLET|
   ((|UIOP/UTILITY|::|C| (|UIOP/UTILITY|::|END|)
     (|COMMON-LISP|::|WHEN|
      (|UIOP/UTILITY|::|STRING-SUFFIX-P| |UIOP/UTILITY|::|X|
       |UIOP/UTILITY|::|END|)
      (|COMMON-LISP|::|RETURN|
       (|COMMON-LISP|::|VALUES|
        (|COMMON-LISP|::|SUBSEQ| |UIOP/UTILITY|::|X| 0.
         (|COMMON-LISP|::|-| (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|X|)
          (|COMMON-LISP|::|LENGTH| |UIOP/UTILITY|::|END|)))
        |UIOP/UTILITY|::|END|)))))
   (|COMMON-LISP|::|WHEN| |UIOP/UTILITY|::|X|
    (|UIOP/UTILITY|::|C| |UIOP/UTILITY|::|+CRLF+|)
    (|UIOP/UTILITY|::|C| |UIOP/UTILITY|::|+LF+|)
    (|UIOP/UTILITY|::|C| |UIOP/UTILITY|::|+CR+|)
    (|COMMON-LISP|::|VALUES| |UIOP/UTILITY|::|X| |COMMON-LISP|::|NIL|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|STANDARD-CASE-SYMBOL-NAME|
 (|UIOP/UTILITY|::|NAME-DESIGNATOR|)
 "Given a NAME-DESIGNATOR for a symbol, if it is a symbol, convert it to a string using STRING;\n
if it is a string, use STRING-UPCASE on an ANSI CL platform, or STRING on a so-called \"modern\"\n
platform such as Allegro with modern syntax."
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/UTILITY|::|NAME-DESIGNATOR|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|STRING| |COMMON-LISP|::|SYMBOL|))
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|OR|
    (|COMMON-LISP|::|SYMBOLP| |UIOP/UTILITY|::|NAME-DESIGNATOR|))
   (|COMMON-LISP|::|STRING| |UIOP/UTILITY|::|NAME-DESIGNATOR|))
  (|COMMON-LISP|::|T|
   (|COMMON-LISP|::|STRING-UPCASE| |UIOP/UTILITY|::|NAME-DESIGNATOR|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|FIND-STANDARD-CASE-SYMBOL|
 (|UIOP/UTILITY|::|NAME-DESIGNATOR| |UIOP/UTILITY|::|PACKAGE-DESIGNATOR|
  |COMMON-LISP|::|&OPTIONAL| (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|T|))
 "Find a symbol designated by NAME-DESIGNATOR in a package designated by PACKAGE-DESIGNATOR,\n
where STANDARD-CASE-SYMBOL-NAME is used to transform them if these designators are strings.\n
If optional ERROR argument is NIL, return NIL instead of an error when the symbol is not found."
 (|UIOP/PACKAGE|::|FIND-SYMBOL*|
  (|UIOP/UTILITY|::|STANDARD-CASE-SYMBOL-NAME|
   |UIOP/UTILITY|::|NAME-DESIGNATOR|)
  (|COMMON-LISP|::|ETYPECASE| |UIOP/UTILITY|::|PACKAGE-DESIGNATOR|
   ((|COMMON-LISP|::|OR| |COMMON-LISP|::|PACKAGE| |COMMON-LISP|::|SYMBOL|)
    |UIOP/UTILITY|::|PACKAGE-DESIGNATOR|)
   (|COMMON-LISP|::|STRING|
    (|UIOP/UTILITY|::|STANDARD-CASE-SYMBOL-NAME|
     |UIOP/UTILITY|::|PACKAGE-DESIGNATOR|)))
  |COMMON-LISP|::|ERROR|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|BASE-STRING-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|BASE-STRING-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|STRING|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|STRINGS-COMMON-ELEMENT-TYPE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|STRINGS-COMMON-ELEMENT-TYPE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/UTILITY|::|STRINGS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|REDUCE/STRCAT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|REDUCE/STRCAT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|STRINGS| |COMMON-LISP|::|&KEY| |UIOP/UTILITY|::|KEY|
    |UIOP/UTILITY|::|START| |UIOP/UTILITY|::|END|)))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|STRCAT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|STRCAT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/UTILITY|::|STRINGS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|FIRST-CHAR|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|FIRST-CHAR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/UTILITY|::|S|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|LAST-CHAR|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|LAST-CHAR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/UTILITY|::|S|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|SPLIT-STRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|SPLIT-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STRING| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|MAX|
    (|UIOP/UTILITY|::|SEPARATOR| '(#\Space #\Tab)))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|STRING-PREFIX-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|STRING-PREFIX-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|PREFIX| |COMMON-LISP|::|STRING|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|STRING-SUFFIX-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|STRING-SUFFIX-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STRING| |UIOP/UTILITY|::|SUFFIX|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|STRING-ENCLOSED-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|STRING-ENCLOSED-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|PREFIX| |COMMON-LISP|::|STRING|
    |UIOP/UTILITY|::|SUFFIX|)))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |UIOP/UTILITY|::|+CR+|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |UIOP/UTILITY|::|+LF+|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |UIOP/UTILITY|::|+CRLF+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|STRIPLN|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|STRIPLN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/UTILITY|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|STANDARD-CASE-SYMBOL-NAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|STANDARD-CASE-SYMBOL-NAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/UTILITY|::|NAME-DESIGNATOR|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|FIND-STANDARD-CASE-SYMBOL|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|FIND-STANDARD-CASE-SYMBOL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|NAME-DESIGNATOR| |UIOP/UTILITY|::|PACKAGE-DESIGNATOR|
    |COMMON-LISP|::|&OPTIONAL| (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|T|))))
(|COMMON-LISP|::|DEFTYPE| |UIOP/UTILITY|::|TIMESTAMP| |COMMON-LISP|::|NIL|
 '(|COMMON-LISP|::|OR| |COMMON-LISP|::|REAL| |COMMON-LISP|::|BOOLEAN|))
(|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
 (|SYSTEM|::|%PUT| '|UIOP/UTILITY|::|TIMESTAMP| '|SYSTEM|::|DEFTYPE-EXPANDER|
  (|COMMON-LISP|::|FUNCTION| #:|DEFTYPE-TIMESTAMP|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<DEFTYPE-FORM>|)
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<DEFTYPE-FORM>| 1.
       1.))
     (|SYSTEM|::|TYPE-CALL-ERROR| |SYSTEM|::|<DEFTYPE-FORM>|)
     (|COMMON-LISP|::|LET*| |COMMON-LISP|::|NIL|
      (|COMMON-LISP|::|BLOCK| |UIOP/UTILITY|::|TIMESTAMP|
       '(|COMMON-LISP|::|OR| |COMMON-LISP|::|REAL|
         |COMMON-LISP|::|BOOLEAN|)))))))
 (|SYSTEM|::|%SET-DOCUMENTATION| '|UIOP/UTILITY|::|TIMESTAMP|
  '|COMMON-LISP|::|TYPE| '|COMMON-LISP|::|NIL|)
 '|UIOP/UTILITY|::|TIMESTAMP|)
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|TIMESTAMP<|
 (|UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)
 (|COMMON-LISP|::|ETYPECASE| |UIOP/UTILITY|::|X|
  ((|COMMON-LISP|::|EQL| |COMMON-LISP|::|T|)
   (|COMMON-LISP|::|NOT|
    (|COMMON-LISP|::|EQL| |UIOP/UTILITY|::|Y| |COMMON-LISP|::|T|)))
  (|COMMON-LISP|::|REAL|
   (|COMMON-LISP|::|ETYPECASE| |UIOP/UTILITY|::|Y|
    ((|COMMON-LISP|::|EQL| |COMMON-LISP|::|T|) |COMMON-LISP|::|NIL|)
    (|COMMON-LISP|::|REAL|
     (|COMMON-LISP|::|<| |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|))
    (|COMMON-LISP|::|NULL| |COMMON-LISP|::|T|)))
  (|COMMON-LISP|::|NULL| |COMMON-LISP|::|NIL|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|TIMESTAMPS<| (|COMMON-LISP|::|LIST|)
 (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/UTILITY|::|Y| :|IN| |COMMON-LISP|::|LIST|
  :|FOR| |UIOP/UTILITY|::|X| |COMMON-LISP|::|=| |COMMON-LISP|::|NIL| :|THEN|
  |UIOP/UTILITY|::|Y| :|ALWAYS|
  (|UIOP/UTILITY|::|TIMESTAMP<| |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|TIMESTAMP*<|
 (|COMMON-LISP|::|&REST| |COMMON-LISP|::|LIST|)
 (|UIOP/UTILITY|::|TIMESTAMPS<| |COMMON-LISP|::|LIST|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|TIMESTAMP<=|
 (|UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)
 (|COMMON-LISP|::|NOT|
  (|UIOP/UTILITY|::|TIMESTAMP<| |UIOP/UTILITY|::|Y| |UIOP/UTILITY|::|X|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|EARLIER-TIMESTAMP|
 (|UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)
 (|COMMON-LISP|::|IF|
  (|UIOP/UTILITY|::|TIMESTAMP<| |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)
  |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|TIMESTAMPS-EARLIEST|
 (|COMMON-LISP|::|LIST|)
 (|COMMON-LISP|::|REDUCE| '|UIOP/UTILITY|::|EARLIER-TIMESTAMP|
  |COMMON-LISP|::|LIST| :|INITIAL-VALUE| |COMMON-LISP|::|NIL|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|EARLIEST-TIMESTAMP|
 (|COMMON-LISP|::|&REST| |COMMON-LISP|::|LIST|)
 (|UIOP/UTILITY|::|TIMESTAMPS-EARLIEST| |COMMON-LISP|::|LIST|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|LATER-TIMESTAMP|
 (|UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)
 (|COMMON-LISP|::|IF|
  (|UIOP/UTILITY|::|TIMESTAMP<| |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)
  |UIOP/UTILITY|::|Y| |UIOP/UTILITY|::|X|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|TIMESTAMPS-LATEST|
 (|COMMON-LISP|::|LIST|)
 (|COMMON-LISP|::|REDUCE| '|UIOP/UTILITY|::|LATER-TIMESTAMP|
  |COMMON-LISP|::|LIST| :|INITIAL-VALUE| |COMMON-LISP|::|T|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|LATEST-TIMESTAMP|
 (|COMMON-LISP|::|&REST| |COMMON-LISP|::|LIST|)
 (|UIOP/UTILITY|::|TIMESTAMPS-LATEST| |COMMON-LISP|::|LIST|))
(|COMMON-LISP|::|DEFINE-MODIFY-MACRO| |UIOP/UTILITY|::|LATEST-TIMESTAMP-F|
 (|COMMON-LISP|::|&REST| |UIOP/UTILITY|::|TIMESTAMPS|)
 |UIOP/UTILITY|::|LATEST-TIMESTAMP|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|TIMESTAMP<|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|TIMESTAMP<|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|TIMESTAMPS<|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|TIMESTAMPS<|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|LIST|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|TIMESTAMP*<|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|TIMESTAMP*<|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |COMMON-LISP|::|LIST|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|TIMESTAMP<=|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|TIMESTAMP<=|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|EARLIER-TIMESTAMP|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|EARLIER-TIMESTAMP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|TIMESTAMPS-EARLIEST|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|TIMESTAMPS-EARLIEST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|LIST|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|EARLIEST-TIMESTAMP|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|EARLIEST-TIMESTAMP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |COMMON-LISP|::|LIST|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|LATER-TIMESTAMP|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|LATER-TIMESTAMP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|TIMESTAMPS-LATEST|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|TIMESTAMPS-LATEST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|LIST|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|LATEST-TIMESTAMP|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|LATEST-TIMESTAMP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |COMMON-LISP|::|LIST|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/UTILITY|::|LATEST-TIMESTAMP-F|)
(|SYSTEM|::|%PUTD| '|UIOP/UTILITY|::|LATEST-TIMESTAMP-F|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/UTILITY|::|LATEST-TIMESTAMP-F|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|ENV|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|SYSTEM|::|PLACE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|UIOP/UTILITY|::|TIMESTAMPS| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/UTILITY|::|LATEST-TIMESTAMP-F|
       |COMMON-LISP|::|NIL|
       (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
        (|SYSTEM|::|TEMPS| |SYSTEM|::|SUBFORMS| |SYSTEM|::|STORES|
         |SYSTEM|::|SETTERFORM| |SYSTEM|::|GETTERFORM|)
        (|EXT|::|GET-SETF-METHOD| |SYSTEM|::|PLACE| |SYSTEM|::|ENV|)
        (|COMMON-LISP|::|LET|
         ((|SYSTEM|::|LET-LIST|
           (|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|LIST| |SYSTEM|::|TEMPS|
            |SYSTEM|::|SUBFORMS|)))
         (|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|AND|
           (|COMMON-LISP|::|EVERY| #'|COMMON-LISP|::|CONSTANTP|
            |UIOP/UTILITY|::|TIMESTAMPS|))
          (|COMMON-LISP|::|LET|
           ((|SYSTEM|::|FUNCTION-APPLICATION|
             (|COMMON-LISP|::|LIST*| '|UIOP/UTILITY|::|LATEST-TIMESTAMP|
              |SYSTEM|::|GETTERFORM| |UIOP/UTILITY|::|TIMESTAMPS|)))
           (|SYSTEM|::|OPTIMIZED-WRAP-LET*| |SYSTEM|::|ENV|
            (|COMMON-LISP|::|NCONC| |SYSTEM|::|LET-LIST|
             (|COMMON-LISP|::|LIST|
              (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|CAR| |SYSTEM|::|STORES|)
               |SYSTEM|::|FUNCTION-APPLICATION|)))
            |SYSTEM|::|SETTERFORM|))
          (|COMMON-LISP|::|LET*|
           ((|SYSTEM|::|ARGVARS|
             (|COMMON-LISP|::|MAPCAR|
              #'(|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|VAR|)
                 (|COMMON-LISP|::|DECLARE|
                  (|COMMON-LISP|::|IGNORE| |SYSTEM|::|VAR|))
                 (|COMMON-LISP|::|GENSYM|))
              (|COMMON-LISP|::|LIST*| |UIOP/UTILITY|::|TIMESTAMPS|)))
            (|SYSTEM|::|FUNCTION-APPLICATION|
             (|COMMON-LISP|::|LIST*| '|UIOP/UTILITY|::|LATEST-TIMESTAMP|
              |SYSTEM|::|GETTERFORM| |SYSTEM|::|ARGVARS|)))
           (|SYSTEM|::|OPTIMIZED-WRAP-LET*| |SYSTEM|::|ENV|
            (|COMMON-LISP|::|NCONC| |SYSTEM|::|LET-LIST|
             (|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|LIST|
              |SYSTEM|::|ARGVARS|
              (|COMMON-LISP|::|LIST*| |UIOP/UTILITY|::|TIMESTAMPS|))
             (|COMMON-LISP|::|LIST|
              (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|CAR| |SYSTEM|::|STORES|)
               |SYSTEM|::|FUNCTION-APPLICATION|)))
            |SYSTEM|::|SETTERFORM|))))))))))
  '(|SYSTEM|::|PLACE| |COMMON-LISP|::|&REST| |UIOP/UTILITY|::|TIMESTAMPS|
    |COMMON-LISP|::|&ENVIRONMENT| |SYSTEM|::|ENV|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|ENSURE-FUNCTION|
 (|UIOP/UTILITY|::|FUN| |COMMON-LISP|::|&KEY| (|COMMON-LISP|::|PACKAGE| :|CL|))
 "Coerce the object FUN into a function.\n\n
If FUN is a FUNCTION, return it.\n
If the FUN is a non-sequence literal constant, return constantly that,\n
i.e. for a boolean keyword character number or pathname.\n
Otherwise if FUN is a non-literally constant symbol, return its FDEFINITION.\n
If FUN is a CONS, return the function that applies its CAR\n
to the appended list of the rest of its CDR and the arguments,\n
unless the CAR is LAMBDA, in which case the expression is evaluated.\n
If FUN is a string, READ a form from it in the specified PACKAGE (default: CL)\n
and EVAL that in a (FUNCTION ...) context."
 (|COMMON-LISP|::|ETYPECASE| |UIOP/UTILITY|::|FUN| #'|UIOP/UTILITY|::|FUN|
  ((|COMMON-LISP|::|OR| |COMMON-LISP|::|BOOLEAN| |COMMON-LISP|::|KEYWORD|
    |COMMON-LISP|::|CHARACTER| |COMMON-LISP|::|NUMBER|
    |COMMON-LISP|::|PATHNAME|)
   (|COMMON-LISP|::|CONSTANTLY| |UIOP/UTILITY|::|FUN|))
  (|COMMON-LISP|::|HASH-TABLE|
   #'(|COMMON-LISP|::|LAMBDA| (|UIOP/UTILITY|::|X|)
      (|COMMON-LISP|::|GETHASH| |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|FUN|)))
  (|COMMON-LISP|::|SYMBOL|
   (|COMMON-LISP|::|FDEFINITION| |UIOP/UTILITY|::|FUN|))
  (|COMMON-LISP|::|CONS|
   (|COMMON-LISP|::|IF|
    (|COMMON-LISP|::|EQ| '|COMMON-LISP|::|LAMBDA|
     (|COMMON-LISP|::|CAR| |UIOP/UTILITY|::|FUN|))
    (|COMMON-LISP|::|EVAL| |UIOP/UTILITY|::|FUN|)
    #'(|COMMON-LISP|::|LAMBDA| (|COMMON-LISP|::|&REST| |UIOP/UTILITY|::|ARGS|)
       (|COMMON-LISP|::|APPLY| (|COMMON-LISP|::|CAR| |UIOP/UTILITY|::|FUN|)
        (|COMMON-LISP|::|APPEND| (|COMMON-LISP|::|CDR| |UIOP/UTILITY|::|FUN|)
         |UIOP/UTILITY|::|ARGS|)))))
  (|COMMON-LISP|::|STRING|
   (|COMMON-LISP|::|EVAL|
    `#',(|COMMON-LISP|::|WITH-STANDARD-IO-SYNTAX|
         (|COMMON-LISP|::|LET|
          ((|COMMON-LISP|::|*PACKAGE*|
            (|COMMON-LISP|::|FIND-PACKAGE| |COMMON-LISP|::|PACKAGE|)))
          (|COMMON-LISP|::|READ-FROM-STRING| |UIOP/UTILITY|::|FUN|)))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|ACCESS-AT|
 (|UIOP/UTILITY|::|OBJECT| |UIOP/UTILITY|::|AT|)
 "Given an OBJECT and an AT specifier, list of successive accessors,\n
call each accessor on the result of the previous calls.\n
An accessor may be an integer, meaning a call to ELT,\n
a keyword, meaning a call to GETF,\n
NIL, meaning identity,\n
a function or other symbol, meaning itself,\n
or a list of a function designator and arguments, interpreted as per ENSURE-FUNCTION.\n
As a degenerate case, the AT specifier may be an atom of a single such accessor\n
instead of a list."
 (|COMMON-LISP|::|FLET|
  ((|UIOP/UTILITY|::|ACCESS|
    (|UIOP/UTILITY|::|OBJECT| |UIOP/UTILITY|::|ACCESSOR|)
    (|COMMON-LISP|::|ETYPECASE| |UIOP/UTILITY|::|ACCESSOR|
     #'(|COMMON-LISP|::|FUNCALL| |UIOP/UTILITY|::|ACCESSOR|
        |UIOP/UTILITY|::|OBJECT|)
     (|COMMON-LISP|::|INTEGER|
      (|COMMON-LISP|::|ELT| |UIOP/UTILITY|::|OBJECT|
       |UIOP/UTILITY|::|ACCESSOR|))
     (|COMMON-LISP|::|KEYWORD|
      (|COMMON-LISP|::|GETF| |UIOP/UTILITY|::|OBJECT|
       |UIOP/UTILITY|::|ACCESSOR|))
     (|COMMON-LISP|::|NULL| |UIOP/UTILITY|::|OBJECT|)
     (|COMMON-LISP|::|SYMBOL|
      (|COMMON-LISP|::|FUNCALL| |UIOP/UTILITY|::|ACCESSOR|
       |UIOP/UTILITY|::|OBJECT|))
     (|COMMON-LISP|::|CONS|
      (|COMMON-LISP|::|FUNCALL|
       (|UIOP/UTILITY|::|ENSURE-FUNCTION| |UIOP/UTILITY|::|ACCESSOR|)
       |UIOP/UTILITY|::|OBJECT|)))))
  (|COMMON-LISP|::|IF| (|COMMON-LISP|::|LISTP| |UIOP/UTILITY|::|AT|)
   (|COMMON-LISP|::|DOLIST|
    (|UIOP/UTILITY|::|ACCESSOR| |UIOP/UTILITY|::|AT| |UIOP/UTILITY|::|OBJECT|)
    (|COMMON-LISP|::|SETF| |UIOP/UTILITY|::|OBJECT|
     (|UIOP/UTILITY|::|ACCESS| |UIOP/UTILITY|::|OBJECT|
      |UIOP/UTILITY|::|ACCESSOR|)))
   (|UIOP/UTILITY|::|ACCESS| |UIOP/UTILITY|::|OBJECT| |UIOP/UTILITY|::|AT|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|ACCESS-AT-COUNT|
 (|UIOP/UTILITY|::|AT|)
 "From an AT specification, extract a COUNT of maximum number\n
of sub-objects to read as per ACCESS-AT"
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|INTEGERP| |UIOP/UTILITY|::|AT|)
   (|COMMON-LISP|::|1+| |UIOP/UTILITY|::|AT|))
  ((|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |UIOP/UTILITY|::|AT|)
    (|COMMON-LISP|::|INTEGERP| (|COMMON-LISP|::|FIRST| |UIOP/UTILITY|::|AT|)))
   (|COMMON-LISP|::|1+| (|COMMON-LISP|::|FIRST| |UIOP/UTILITY|::|AT|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|CALL-FUNCTION|
 (|UIOP/UTILITY|::|FUNCTION-SPEC| |COMMON-LISP|::|&REST|
  |UIOP/UTILITY|::|ARGUMENTS|)
 "Call the function designated by FUNCTION-SPEC as per ENSURE-FUNCTION,\n
with the given ARGUMENTS"
 (|COMMON-LISP|::|APPLY|
  (|UIOP/UTILITY|::|ENSURE-FUNCTION| |UIOP/UTILITY|::|FUNCTION-SPEC|)
  |UIOP/UTILITY|::|ARGUMENTS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|CALL-FUNCTIONS|
 (|UIOP/UTILITY|::|FUNCTION-SPECS|)
 "For each function in the list FUNCTION-SPECS, in order, call the function as per CALL-FUNCTION"
 (|COMMON-LISP|::|MAP| |COMMON-LISP|::|NIL| '|UIOP/UTILITY|::|CALL-FUNCTION|
  |UIOP/UTILITY|::|FUNCTION-SPECS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|REGISTER-HOOK-FUNCTION|
 (|COMMON-LISP|::|VARIABLE| |UIOP/UTILITY|::|HOOK| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/UTILITY|::|CALL-NOW-P|)
 "Push the HOOK function (a designator as per ENSURE-FUNCTION) onto the hook VARIABLE.\n
When CALL-NOW-P is true, also call the function immediately."
 (|COMMON-LISP|::|PUSHNEW| |UIOP/UTILITY|::|HOOK|
  (|COMMON-LISP|::|SYMBOL-VALUE| |COMMON-LISP|::|VARIABLE|) :|TEST|
  '|COMMON-LISP|::|EQUAL|)
 (|COMMON-LISP|::|WHEN| |UIOP/UTILITY|::|CALL-NOW-P|
  (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/UTILITY|::|HOOK|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|ENSURE-FUNCTION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|ENSURE-FUNCTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|FUN| |COMMON-LISP|::|&KEY|
    (|COMMON-LISP|::|PACKAGE| :|CL|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|ACCESS-AT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|ACCESS-AT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|OBJECT| |UIOP/UTILITY|::|AT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|ACCESS-AT-COUNT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|ACCESS-AT-COUNT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/UTILITY|::|AT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|CALL-FUNCTION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|CALL-FUNCTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|FUNCTION-SPEC| |COMMON-LISP|::|&REST|
    |UIOP/UTILITY|::|ARGUMENTS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|CALL-FUNCTIONS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|CALL-FUNCTIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/UTILITY|::|FUNCTION-SPECS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|REGISTER-HOOK-FUNCTION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|REGISTER-HOOK-FUNCTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|VARIABLE| |UIOP/UTILITY|::|HOOK| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/UTILITY|::|CALL-NOW-P|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|COERCE-CLASS|
 (|CLOS|::|CLASS| |COMMON-LISP|::|&KEY| (|COMMON-LISP|::|PACKAGE| :|CL|)
  (|UIOP/UTILITY|::|SUPER| |COMMON-LISP|::|T|)
  (|COMMON-LISP|::|ERROR| '|COMMON-LISP|::|ERROR|))
 "Coerce CLASS to a class that is subclass of SUPER if specified,\n
or invoke ERROR handler as per CALL-FUNCTION.\n\n
A keyword designates the name a symbol, which when found in either PACKAGE, designates a class.\n
-- for backward compatibility, *PACKAGE* is also accepted for now, but this may go in the future.\n
A string is read as a symbol while in PACKAGE, the symbol designates a class.\n\n
A class object designates itself.\n
NIL designates itself (no class).\n
A symbol otherwise designates a class by name."
 (|COMMON-LISP|::|LET*|
  ((|UIOP/UTILITY|::|NORMALIZED|
    (|COMMON-LISP|::|TYPECASE| |CLOS|::|CLASS|
     (|COMMON-LISP|::|KEYWORD|
      (|COMMON-LISP|::|OR|
       (|UIOP/PACKAGE|::|FIND-SYMBOL*| |CLOS|::|CLASS| |COMMON-LISP|::|PACKAGE|
        |COMMON-LISP|::|NIL|)
       (|UIOP/PACKAGE|::|FIND-SYMBOL*| |CLOS|::|CLASS|
        |COMMON-LISP|::|*PACKAGE*| |COMMON-LISP|::|NIL|)))
     (|COMMON-LISP|::|STRING|
      (|UIOP/PACKAGE|::|SYMBOL-CALL| :|UIOP| :|SAFE-READ-FROM-STRING|
       |CLOS|::|CLASS| :|PACKAGE| |COMMON-LISP|::|PACKAGE|))
     (|COMMON-LISP|::|T| |CLOS|::|CLASS|)))
   (|UIOP/UTILITY|::|FOUND|
    (|COMMON-LISP|::|ETYPECASE| |UIOP/UTILITY|::|NORMALIZED|
     ((|COMMON-LISP|::|OR| |CLOS|::|STANDARD-CLASS| |CLOS|::|BUILT-IN-CLASS|)
      |UIOP/UTILITY|::|NORMALIZED|)
     ((|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|KEYWORD|)
      |COMMON-LISP|::|NIL|)
     (|COMMON-LISP|::|SYMBOL|
      (|CLOS|::|FIND-CLASS| |UIOP/UTILITY|::|NORMALIZED| |COMMON-LISP|::|NIL|
       |COMMON-LISP|::|NIL|))))
   (|UIOP/UTILITY|::|SUPER-CLASS|
    (|COMMON-LISP|::|ETYPECASE| |UIOP/UTILITY|::|SUPER|
     ((|COMMON-LISP|::|OR| |CLOS|::|STANDARD-CLASS| |CLOS|::|BUILT-IN-CLASS|)
      |UIOP/UTILITY|::|SUPER|)
     ((|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|KEYWORD|)
      |COMMON-LISP|::|NIL|)
     (|COMMON-LISP|::|SYMBOL|
      (|CLOS|::|FIND-CLASS| |UIOP/UTILITY|::|SUPER| |COMMON-LISP|::|NIL|
       |COMMON-LISP|::|NIL|)))))
  (|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|AND| |UIOP/UTILITY|::|FOUND|
    (|COMMON-LISP|::|OR|
     (|COMMON-LISP|::|EQ| |UIOP/UTILITY|::|SUPER| |COMMON-LISP|::|T|)
     (|COMMON-LISP|::|SUBTYPEP| |UIOP/UTILITY|::|FOUND|
      |UIOP/UTILITY|::|SUPER-CLASS|))
    |UIOP/UTILITY|::|FOUND|)
   (|UIOP/UTILITY|::|CALL-FUNCTION| |COMMON-LISP|::|ERROR|
    "Can't coerce ~S to a ~:[class~;subclass of ~:*~S~]" |CLOS|::|CLASS|
    |UIOP/UTILITY|::|SUPER|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|COERCE-CLASS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|COERCE-CLASS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|CLASS| |COMMON-LISP|::|&KEY| (|COMMON-LISP|::|PACKAGE| :|CL|)
    (|UIOP/UTILITY|::|SUPER| |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|ERROR| '|COMMON-LISP|::|ERROR|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|ENSURE-GETHASH|
 (|UIOP/UTILITY|::|KEY| |UIOP/UTILITY|::|TABLE| |UIOP/UTILITY|::|DEFAULT|)
 "Lookup the TABLE for a KEY as by GETHASH, but if not present,\n
call the (possibly constant) function designated by DEFAULT as per CALL-FUNCTION,\n
set the corresponding entry to the result in the table.\n
Return two values: the entry after its optional computation, and whether it was found"
 (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
  (|UIOP/UTILITY|::|VALUE| |UIOP/UTILITY|::|FOUNDP|)
  (|COMMON-LISP|::|GETHASH| |UIOP/UTILITY|::|KEY| |UIOP/UTILITY|::|TABLE|)
  (|COMMON-LISP|::|VALUES|
   (|COMMON-LISP|::|IF| |UIOP/UTILITY|::|FOUNDP| |UIOP/UTILITY|::|VALUE|
    (|COMMON-LISP|::|SETF|
     (|COMMON-LISP|::|GETHASH| |UIOP/UTILITY|::|KEY| |UIOP/UTILITY|::|TABLE|)
     (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/UTILITY|::|DEFAULT|)))
   |UIOP/UTILITY|::|FOUNDP|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|LIST-TO-HASH-SET|
 (|COMMON-LISP|::|LIST| |COMMON-LISP|::|&AUX|
  (|UIOP/UTILITY|::|H|
   (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)))
 "Convert a LIST into hash-table that has the same elements when viewed as a set,\n
up to the given equality TEST"
 (|COMMON-LISP|::|DOLIST|
  (|UIOP/UTILITY|::|X| |COMMON-LISP|::|LIST| |UIOP/UTILITY|::|H|)
  (|COMMON-LISP|::|SETF|
   (|COMMON-LISP|::|GETHASH| |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|H|)
   |COMMON-LISP|::|T|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|ENSURE-GETHASH|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|ENSURE-GETHASH|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|KEY| |UIOP/UTILITY|::|TABLE| |UIOP/UTILITY|::|DEFAULT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|LIST-TO-HASH-SET|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|LIST-TO-HASH-SET|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|LIST| |COMMON-LISP|::|&AUX|
    (|UIOP/UTILITY|::|H|
     (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|LEXICOGRAPHIC<|
 (|UIOP/UTILITY|::|ELEMENT<| |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)
 "Lexicographically compare two lists of using the function element< to compare elements.\n
element< is a strict total order; the resulting order on X and Y will also be strict."
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|NULL| |UIOP/UTILITY|::|Y|) |COMMON-LISP|::|NIL|)
  ((|COMMON-LISP|::|NULL| |UIOP/UTILITY|::|X|) |COMMON-LISP|::|T|)
  ((|COMMON-LISP|::|FUNCALL| |UIOP/UTILITY|::|ELEMENT<|
    (|COMMON-LISP|::|CAR| |UIOP/UTILITY|::|X|)
    (|COMMON-LISP|::|CAR| |UIOP/UTILITY|::|Y|))
   |COMMON-LISP|::|T|)
  ((|COMMON-LISP|::|FUNCALL| |UIOP/UTILITY|::|ELEMENT<|
    (|COMMON-LISP|::|CAR| |UIOP/UTILITY|::|Y|)
    (|COMMON-LISP|::|CAR| |UIOP/UTILITY|::|X|))
   |COMMON-LISP|::|NIL|)
  (|COMMON-LISP|::|T|
   (|UIOP/UTILITY|::|LEXICOGRAPHIC<| |UIOP/UTILITY|::|ELEMENT<|
    (|COMMON-LISP|::|CDR| |UIOP/UTILITY|::|X|)
    (|COMMON-LISP|::|CDR| |UIOP/UTILITY|::|Y|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|LEXICOGRAPHIC<=|
 (|UIOP/UTILITY|::|ELEMENT<| |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)
 "Lexicographically compare two lists of using the function element< to compare elements.\n
element< is a strict total order; the resulting order on X and Y will be a non-strict total order."
 (|COMMON-LISP|::|NOT|
  (|UIOP/UTILITY|::|LEXICOGRAPHIC<| |UIOP/UTILITY|::|ELEMENT<|
   |UIOP/UTILITY|::|Y| |UIOP/UTILITY|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|LEXICOGRAPHIC<|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|LEXICOGRAPHIC<|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|ELEMENT<| |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|LEXICOGRAPHIC<=|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|LEXICOGRAPHIC<=|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|ELEMENT<| |UIOP/UTILITY|::|X| |UIOP/UTILITY|::|Y|)))
(|COMMON-LISP|::|DEFINE-CONDITION| |UIOP/UTILITY|::|SIMPLE-STYLE-WARNING|
 (|COMMON-LISP|::|SIMPLE-CONDITION| |COMMON-LISP|::|STYLE-WARNING|)
 |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|STYLE-WARN|
 (|UIOP/UTILITY|::|DATUM| |COMMON-LISP|::|&REST| |UIOP/UTILITY|::|ARGUMENTS|)
 (|COMMON-LISP|::|ETYPECASE| |UIOP/UTILITY|::|DATUM|
  (|COMMON-LISP|::|STRING|
   (|COMMON-LISP|::|WARN|
    (|COMMON-LISP|::|MAKE-CONDITION| '|UIOP/UTILITY|::|SIMPLE-STYLE-WARNING|
     :|FORMAT-CONTROL| |UIOP/UTILITY|::|DATUM| :|FORMAT-ARGUMENTS|
     |UIOP/UTILITY|::|ARGUMENTS|)))
  (|COMMON-LISP|::|SYMBOL|
   (|COMMON-LISP|::|ASSERT|
    (|COMMON-LISP|::|SUBTYPEP| |UIOP/UTILITY|::|DATUM|
     '|COMMON-LISP|::|STYLE-WARNING|))
   (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|WARN| |UIOP/UTILITY|::|DATUM|
    |UIOP/UTILITY|::|ARGUMENTS|))
  (|COMMON-LISP|::|STYLE-WARNING|
   (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|WARN| |UIOP/UTILITY|::|DATUM|
    |UIOP/UTILITY|::|ARGUMENTS|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G13841| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/UTILITY|::|SIMPLE-STYLE-WARNING| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|SIMPLE-CONDITION|
   '|COMMON-LISP|::|STYLE-WARNING|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|STYLE-WARN|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|STYLE-WARN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|DATUM| |COMMON-LISP|::|&REST|
    |UIOP/UTILITY|::|ARGUMENTS|)))
(|COMMON-LISP|::|DEFPARAMETER|
 |UIOP/UTILITY|::|+SIMPLE-CONDITION-FORMAT-CONTROL-SLOT+|
 '|SYSTEM|::|$FORMAT-CONTROL|
 "Name of the slot for FORMAT-CONTROL in simple-condition")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|MATCH-CONDITION-P|
 (|UIOP/UTILITY|::|X| |COMMON-LISP|::|CONDITION|)
 "Compare received CONDITION to some pattern X:\n
a symbol naming a condition class,\n
a simple vector of length 2, arguments to find-symbol* with result as above,\n
or a string describing the format-control of a simple-condition."
 (|COMMON-LISP|::|ETYPECASE| |UIOP/UTILITY|::|X|
  (|COMMON-LISP|::|SYMBOL|
   (|COMMON-LISP|::|TYPEP| |COMMON-LISP|::|CONDITION| |UIOP/UTILITY|::|X|))
  ((|COMMON-LISP|::|SIMPLE-VECTOR| 2.)
   (|COMMON-LISP|::|IGNORE-ERRORS|
    (|COMMON-LISP|::|TYPEP| |COMMON-LISP|::|CONDITION|
     (|UIOP/PACKAGE|::|FIND-SYMBOL*|
      (|COMMON-LISP|::|SVREF| |UIOP/UTILITY|::|X| 0.)
      (|COMMON-LISP|::|SVREF| |UIOP/UTILITY|::|X| 1.) |COMMON-LISP|::|NIL|))))
  #'(|COMMON-LISP|::|FUNCALL| |UIOP/UTILITY|::|X| |COMMON-LISP|::|CONDITION|)
  (|COMMON-LISP|::|STRING|
   (|COMMON-LISP|::|AND|
    (|COMMON-LISP|::|TYPEP| |COMMON-LISP|::|CONDITION|
     '|COMMON-LISP|::|SIMPLE-CONDITION|)
    (|COMMON-LISP|::|IGNORE-ERRORS|
     (|COMMON-LISP|::|EQUAL|
      (|COMMON-LISP|::|SIMPLE-CONDITION-FORMAT-CONTROL|
       |COMMON-LISP|::|CONDITION|)
      |UIOP/UTILITY|::|X|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|MATCH-ANY-CONDITION-P|
 (|COMMON-LISP|::|CONDITION| |UIOP/UTILITY|::|CONDITIONS|)
 "match CONDITION against any of the patterns of CONDITIONS supplied"
 (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/UTILITY|::|X| :|IN|
  |UIOP/UTILITY|::|CONDITIONS| :|THEREIS|
  (|UIOP/UTILITY|::|MATCH-CONDITION-P| |UIOP/UTILITY|::|X|
   |COMMON-LISP|::|CONDITION|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|CALL-WITH-MUFFLED-CONDITIONS|
 (|UIOP/UTILITY|::|THUNK| |UIOP/UTILITY|::|CONDITIONS|)
 "calls the THUNK in a context where the CONDITIONS are muffled"
 (|COMMON-LISP|::|HANDLER-BIND|
  ((|COMMON-LISP|::|T|
    #'(|COMMON-LISP|::|LAMBDA| (|UIOP/UTILITY|::|C|)
       (|COMMON-LISP|::|WHEN|
        (|UIOP/UTILITY|::|MATCH-ANY-CONDITION-P| |UIOP/UTILITY|::|C|
         |UIOP/UTILITY|::|CONDITIONS|)
        (|COMMON-LISP|::|MUFFLE-WARNING| |UIOP/UTILITY|::|C|)))))
  (|COMMON-LISP|::|FUNCALL| |UIOP/UTILITY|::|THUNK|)))
(|COMMON-LISP|::|DEFMACRO| |UIOP/UTILITY|::|WITH-MUFFLED-CONDITIONS|
 ((|UIOP/UTILITY|::|CONDITIONS|) |COMMON-LISP|::|&BODY| |UIOP/UTILITY|::|BODY|)
 "Shorthand syntax for CALL-WITH-MUFFLED-CONDITIONS"
 `(|UIOP/UTILITY|::|CALL-WITH-MUFFLED-CONDITIONS|
   #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| ,@|UIOP/UTILITY|::|BODY|)
   ,|UIOP/UTILITY|::|CONDITIONS|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/UTILITY|::|+SIMPLE-CONDITION-FORMAT-CONTROL-SLOT+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|MATCH-CONDITION-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|MATCH-CONDITION-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|X| |COMMON-LISP|::|CONDITION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|MATCH-ANY-CONDITION-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|MATCH-ANY-CONDITION-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|CONDITION| |UIOP/UTILITY|::|CONDITIONS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|CALL-WITH-MUFFLED-CONDITIONS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|CALL-WITH-MUFFLED-CONDITIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|THUNK| |UIOP/UTILITY|::|CONDITIONS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/UTILITY|::|WITH-MUFFLED-CONDITIONS|)
(|SYSTEM|::|%PUTD| '|UIOP/UTILITY|::|WITH-MUFFLED-CONDITIONS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/UTILITY|::|WITH-MUFFLED-CONDITIONS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Shorthand syntax for CALL-WITH-MUFFLED-CONDITIONS"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G13982| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G13983|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 1. 1. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/UTILITY|::|WITH-MUFFLED-CONDITIONS| #1#
          '#4=(|UIOP/UTILITY|::|CONDITIONS|))
         #1#))
       (|UIOP/UTILITY|::|CONDITIONS| (|COMMON-LISP|::|CAR| #3#))
       (|UIOP/UTILITY|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/UTILITY|::|WITH-MUFFLED-CONDITIONS|
       `(|UIOP/UTILITY|::|CALL-WITH-MUFFLED-CONDITIONS|
         #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
            ,@|UIOP/UTILITY|::|BODY|)
         ,|UIOP/UTILITY|::|CONDITIONS|))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/UTILITY|::|BODY|)))
(|COMMON-LISP|::|DEFINE-CONDITION| |UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR|
 (|COMMON-LISP|::|ERROR|)
 ((|UIOP/UTILITY|::|FUNCTIONALITY| :|INITARG| :|FUNCTIONALITY|)
  (|UIOP/UTILITY|::|FORMAT-CONTROL| :|INITARG| :|FORMAT-CONTROL|)
  (|UIOP/UTILITY|::|FORMAT-ARGUMENTS| :|INITARG| :|FORMAT-ARGUMENTS|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA| (|COMMON-LISP|::|CONDITION| |COMMON-LISP|::|STREAM|)
   (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|STREAM|
    "Not (currently) implemented on ~A: ~S~@[ ~?~]"
    (|COMMON-LISP|::|NTH-VALUE| 1.
     (|UIOP/PACKAGE|::|SYMBOL-CALL| :|UIOP| :|IMPLEMENTATION-TYPE|))
    (|CLOS|::|SLOT-VALUE| |COMMON-LISP|::|CONDITION|
     '|UIOP/UTILITY|::|FUNCTIONALITY|)
    (|CLOS|::|SLOT-VALUE| |COMMON-LISP|::|CONDITION|
     '|UIOP/UTILITY|::|FORMAT-CONTROL|)
    (|CLOS|::|SLOT-VALUE| |COMMON-LISP|::|CONDITION|
     '|UIOP/UTILITY|::|FORMAT-ARGUMENTS|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR|
 (|UIOP/UTILITY|::|FUNCTIONALITY| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/UTILITY|::|FORMAT-CONTROL| |COMMON-LISP|::|&REST|
  |UIOP/UTILITY|::|FORMAT-ARGUMENTS|)
 "Signal an error because some FUNCTIONALITY is not implemented in the current version\n
of the software on the current platform; it may or may not be implemented in different combinations\n
of version of the software and of the underlying platform. Optionally, report a formatted error\n
message."
 (|COMMON-LISP|::|ERROR| '|UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR|
  :|FUNCTIONALITY| |UIOP/UTILITY|::|FUNCTIONALITY| :|FORMAT-CONTROL|
  |UIOP/UTILITY|::|FORMAT-CONTROL| :|FORMAT-ARGUMENTS|
  |UIOP/UTILITY|::|FORMAT-ARGUMENTS|))
(|COMMON-LISP|::|DEFINE-CONDITION| |UIOP/UTILITY|::|PARAMETER-ERROR|
 (|COMMON-LISP|::|ERROR|)
 ((|UIOP/UTILITY|::|FUNCTIONALITY| :|INITARG| :|FUNCTIONALITY|)
  (|UIOP/UTILITY|::|FORMAT-CONTROL| :|INITARG| :|FORMAT-CONTROL|)
  (|UIOP/UTILITY|::|FORMAT-ARGUMENTS| :|INITARG| :|FORMAT-ARGUMENTS|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA| (|COMMON-LISP|::|CONDITION| |COMMON-LISP|::|STREAM|)
   (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|STREAM|
    (|CLOS|::|SLOT-VALUE| |COMMON-LISP|::|CONDITION|
     '|UIOP/UTILITY|::|FORMAT-CONTROL|)
    (|CLOS|::|SLOT-VALUE| |COMMON-LISP|::|CONDITION|
     '|UIOP/UTILITY|::|FUNCTIONALITY|)
    (|CLOS|::|SLOT-VALUE| |COMMON-LISP|::|CONDITION|
     '|UIOP/UTILITY|::|FORMAT-ARGUMENTS|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/UTILITY|::|PARAMETER-ERROR|
 (|UIOP/UTILITY|::|FORMAT-CONTROL| |UIOP/UTILITY|::|FUNCTIONALITY|
  |COMMON-LISP|::|&REST| |UIOP/UTILITY|::|FORMAT-ARGUMENTS|)
 "Signal an error because some FUNCTIONALITY or its specific implementation on a given underlying\n
platform does not accept a given parameter or combination of parameters. Report a formatted error\n
message, that takes the functionality as its first argument (that can be skipped with ~*)."
 (|COMMON-LISP|::|ERROR| '|UIOP/UTILITY|::|PARAMETER-ERROR| :|FUNCTIONALITY|
  |UIOP/UTILITY|::|FUNCTIONALITY| :|FORMAT-CONTROL|
  |UIOP/UTILITY|::|FORMAT-CONTROL| :|FORMAT-ARGUMENTS|
  |UIOP/UTILITY|::|FORMAT-ARGUMENTS|))
(|COMMON-LISP|::|LET*| ((#1=#:|G14010| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|ERROR|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/UTILITY|::|FUNCTIONALITY| :|INITARGS|
    '(:|FUNCTIONALITY|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/UTILITY|::|FORMAT-CONTROL| :|INITARGS|
    '(:|FORMAT-CONTROL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/UTILITY|::|FORMAT-ARGUMENTS|
    :|INITARGS| '(:|FORMAT-ARGUMENTS|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|FUNCTIONALITY| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/UTILITY|::|FORMAT-CONTROL| |COMMON-LISP|::|&REST|
    |UIOP/UTILITY|::|FORMAT-ARGUMENTS|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G14103| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/UTILITY|::|PARAMETER-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|ERROR|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/UTILITY|::|FUNCTIONALITY| :|INITARGS|
    '(:|FUNCTIONALITY|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/UTILITY|::|FORMAT-CONTROL| :|INITARGS|
    '(:|FORMAT-CONTROL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/UTILITY|::|FORMAT-ARGUMENTS|
    :|INITARGS| '(:|FORMAT-ARGUMENTS|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/UTILITY|::|PARAMETER-ERROR|))
(|SYSTEM|::|C-DEFUN| '|UIOP/UTILITY|::|PARAMETER-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/UTILITY|::|FORMAT-CONTROL| |UIOP/UTILITY|::|FUNCTIONALITY|
    |COMMON-LISP|::|&REST| |UIOP/UTILITY|::|FORMAT-ARGUMENTS|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|UIOP/VERSION|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE| '(:|UIOP/COMMON-LISP| :|UIOP/PACKAGE| :|UIOP/UTILITY|) :|SHADOW|
  '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM| '|COMMON-LISP|::|NIL|
  :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|*UIOP-VERSION*| #:|PARSE-VERSION| #:|UNPARSE-VERSION| #:|VERSION<|
    #:|VERSION<=| #:|NEXT-VERSION| #:|DEPRECATED-FUNCTION-CONDITION|
    #:|DEPRECATED-FUNCTION-NAME| #:|DEPRECATED-FUNCTION-STYLE-WARNING|
    #:|DEPRECATED-FUNCTION-WARNING| #:|DEPRECATED-FUNCTION-ERROR|
    #:|DEPRECATED-FUNCTION-SHOULD-BE-DELETED| #:|VERSION-DEPRECATION|
    #:|WITH-DEPRECATION|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|UIOP/VERSION| :|UIOP/UTILITY| :|ASDF|) :|MIX| '|COMMON-LISP|::|NIL|
  :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/VERSION"))
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/VERSION|::|*UIOP-VERSION*| "3.3.2")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/VERSION|::|UNPARSE-VERSION|
 (|UIOP/VERSION|::|VERSION-LIST|)
 "From a parsed version (a list of natural numbers), compute the version string"
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "~{~D~^.~}"
  |UIOP/VERSION|::|VERSION-LIST|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/VERSION|::|PARSE-VERSION|
 (|UIOP/VERSION|::|VERSION-STRING| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/VERSION|::|ON-ERROR|)
 "Parse a VERSION-STRING as a series of natural numbers separated by dots.\n
Return a (non-null) list of integers if the string is valid;\n
otherwise return NIL.\n\n
When invalid, ON-ERROR is called as per CALL-FUNCTION before to return NIL,\n
with format arguments explaining why the version is invalid.\n
ON-ERROR is also called if the version is not canonical\n
in that it doesn't print back to itself, but the list is returned anyway."
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|STRINGP| |UIOP/VERSION|::|VERSION-STRING|)
   (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/VERSION|::|ON-ERROR|
    "~S: ~S is not a string" '|UIOP/VERSION|::|PARSE-VERSION|
    |UIOP/VERSION|::|VERSION-STRING|)
   (|COMMON-LISP|::|RETURN|))
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/VERSION|::|PREV| |COMMON-LISP|::|=|
    |COMMON-LISP|::|NIL| :|THEN| |UIOP/VERSION|::|C| :|FOR| |UIOP/VERSION|::|C|
    :|ACROSS| |UIOP/VERSION|::|VERSION-STRING| :|ALWAYS|
    (|COMMON-LISP|::|OR| (|COMMON-LISP|::|DIGIT-CHAR-P| |UIOP/VERSION|::|C|)
     (|COMMON-LISP|::|AND| (|COMMON-LISP|::|EQL| |UIOP/VERSION|::|C| #\.)
      |UIOP/VERSION|::|PREV|
      (|COMMON-LISP|::|NOT|
       (|COMMON-LISP|::|EQL| |UIOP/VERSION|::|PREV| #\.))))
    :|FINALLY|
    (|COMMON-LISP|::|RETURN|
     (|COMMON-LISP|::|AND| |UIOP/VERSION|::|C|
      (|COMMON-LISP|::|DIGIT-CHAR-P| |UIOP/VERSION|::|C|))))
   (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/VERSION|::|ON-ERROR|
    "~S: ~S doesn't follow asdf version numbering convention"
    '|UIOP/VERSION|::|PARSE-VERSION| |UIOP/VERSION|::|VERSION-STRING|)
   (|COMMON-LISP|::|RETURN|))
  (|COMMON-LISP|::|LET*|
   ((|UIOP/VERSION|::|VERSION-LIST|
     (|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|PARSE-INTEGER|
      (|UIOP/UTILITY|::|SPLIT-STRING| |UIOP/VERSION|::|VERSION-STRING|
       :|SEPARATOR| ".")))
    (|UIOP/VERSION|::|NORMALIZED-VERSION|
     (|UIOP/VERSION|::|UNPARSE-VERSION| |UIOP/VERSION|::|VERSION-LIST|)))
   (|COMMON-LISP|::|UNLESS|
    (|COMMON-LISP|::|EQUAL| |UIOP/VERSION|::|VERSION-STRING|
     |UIOP/VERSION|::|NORMALIZED-VERSION|)
    (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/VERSION|::|ON-ERROR|
     "~S: ~S contains leading zeros" '|UIOP/VERSION|::|PARSE-VERSION|
     |UIOP/VERSION|::|VERSION-STRING|))
   |UIOP/VERSION|::|VERSION-LIST|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/VERSION|::|NEXT-VERSION|
 (|UIOP/VERSION|::|VERSION|)
 "When VERSION is not nil, it is a string, then parse it as a version, compute the next version\n
and return it as a string."
 (|COMMON-LISP|::|WHEN| |UIOP/VERSION|::|VERSION|
  (|COMMON-LISP|::|LET|
   ((|UIOP/VERSION|::|VERSION-LIST|
     (|UIOP/VERSION|::|PARSE-VERSION| |UIOP/VERSION|::|VERSION|)))
   (|COMMON-LISP|::|INCF|
    (|COMMON-LISP|::|CAR|
     (|COMMON-LISP|::|LAST| |UIOP/VERSION|::|VERSION-LIST|)))
   (|UIOP/VERSION|::|UNPARSE-VERSION| |UIOP/VERSION|::|VERSION-LIST|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/VERSION|::|VERSION<|
 (|UIOP/VERSION|::|VERSION1| |UIOP/VERSION|::|VERSION2|)
 "Given two version strings, return T if the second is strictly newer"
 (|COMMON-LISP|::|LET|
  ((|UIOP/VERSION|::|V1|
    (|UIOP/VERSION|::|PARSE-VERSION| |UIOP/VERSION|::|VERSION1|
     |COMMON-LISP|::|NIL|))
   (|UIOP/VERSION|::|V2|
    (|UIOP/VERSION|::|PARSE-VERSION| |UIOP/VERSION|::|VERSION2|
     |COMMON-LISP|::|NIL|)))
  (|UIOP/UTILITY|::|LEXICOGRAPHIC<| '|COMMON-LISP|::|<| |UIOP/VERSION|::|V1|
   |UIOP/VERSION|::|V2|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/VERSION|::|VERSION<=|
 (|UIOP/VERSION|::|VERSION1| |UIOP/VERSION|::|VERSION2|)
 "Given two version strings, return T if the second is newer or the same"
 (|COMMON-LISP|::|NOT|
  (|UIOP/VERSION|::|VERSION<| |UIOP/VERSION|::|VERSION2|
   |UIOP/VERSION|::|VERSION1|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/VERSION|::|*UIOP-VERSION*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/VERSION|::|UNPARSE-VERSION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/VERSION|::|UNPARSE-VERSION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/VERSION|::|VERSION-LIST|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/VERSION|::|PARSE-VERSION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/VERSION|::|PARSE-VERSION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/VERSION|::|VERSION-STRING| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/VERSION|::|ON-ERROR|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/VERSION|::|NEXT-VERSION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/VERSION|::|NEXT-VERSION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/VERSION|::|VERSION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/VERSION|::|VERSION<|))
(|SYSTEM|::|C-DEFUN| '|UIOP/VERSION|::|VERSION<|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/VERSION|::|VERSION1| |UIOP/VERSION|::|VERSION2|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/VERSION|::|VERSION<=|))
(|SYSTEM|::|C-DEFUN| '|UIOP/VERSION|::|VERSION<=|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/VERSION|::|VERSION1| |UIOP/VERSION|::|VERSION2|)))
(|COMMON-LISP|::|DEFINE-CONDITION|
 |UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION| (|COMMON-LISP|::|CONDITION|)
 ((|UIOP/VERSION|::|NAME| :|INITARG| :|NAME| :|READER|
   |UIOP/VERSION|::|DEPRECATED-FUNCTION-NAME|)))
(|COMMON-LISP|::|DEFINE-CONDITION|
 |UIOP/VERSION|::|DEPRECATED-FUNCTION-STYLE-WARNING|
 (|UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION|
  |COMMON-LISP|::|STYLE-WARNING|)
 |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|DEFINE-CONDITION|
 |UIOP/VERSION|::|DEPRECATED-FUNCTION-WARNING|
 (|UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION| |COMMON-LISP|::|WARNING|)
 |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|DEFINE-CONDITION| |UIOP/VERSION|::|DEPRECATED-FUNCTION-ERROR|
 (|UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION| |COMMON-LISP|::|ERROR|)
 |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|DEFINE-CONDITION|
 |UIOP/VERSION|::|DEPRECATED-FUNCTION-SHOULD-BE-DELETED|
 (|UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION| |COMMON-LISP|::|ERROR|)
 |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*| |UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION-KIND|
 (|COMMON-LISP|::|TYPE|)
 (|COMMON-LISP|::|ECASE| |COMMON-LISP|::|TYPE|
  ((|UIOP/VERSION|::|DEPRECATED-FUNCTION-STYLE-WARNING|) :|STYLE-WARNING|)
  ((|UIOP/VERSION|::|DEPRECATED-FUNCTION-WARNING|) :|WARNING|)
  ((|UIOP/VERSION|::|DEPRECATED-FUNCTION-ERROR|) :|ERROR|)
  ((|UIOP/VERSION|::|DEPRECATED-FUNCTION-SHOULD-BE-DELETED|) :|DELETE|)))
(|CLOS|::|DEFMETHOD| |CLOS|::|PRINT-OBJECT|
 ((|UIOP/VERSION|::|C| |UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION|)
  |COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|LET|
  ((|UIOP/VERSION|::|NAME|
    (|UIOP/VERSION|::|DEPRECATED-FUNCTION-NAME| |UIOP/VERSION|::|C|)))
  (|COMMON-LISP|::|COND|
   (|COMMON-LISP|::|*PRINT-READABLY*|
    (|COMMON-LISP|::|LET|
     ((|UIOP/VERSION|::|FMT| "#.(make-condition '~S :name ~S)")
      (|UIOP/VERSION|::|ARGS|
       (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|TYPE-OF| |UIOP/VERSION|::|C|)
        |UIOP/VERSION|::|NAME|)))
     (|COMMON-LISP|::|IF| |COMMON-LISP|::|*READ-EVAL*|
      (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|STREAM|
       |UIOP/VERSION|::|FMT| |UIOP/VERSION|::|ARGS|)
      (|COMMON-LISP|::|ERROR| "Can't print ~?" |UIOP/VERSION|::|FMT|
       |UIOP/VERSION|::|ARGS|))))
   (|COMMON-LISP|::|*PRINT-ESCAPE*|
    (|COMMON-LISP|::|PRINT-UNREADABLE-OBJECT|
     (|UIOP/VERSION|::|C| |COMMON-LISP|::|STREAM| :|TYPE| |COMMON-LISP|::|T|)
     (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|STREAM| ":name ~S"
      |UIOP/VERSION|::|NAME|)))
   (|COMMON-LISP|::|T|
    (|COMMON-LISP|::|LET|
     ((|COMMON-LISP|::|*PACKAGE*| (|COMMON-LISP|::|FIND-PACKAGE| :|CL|))
      (|COMMON-LISP|::|TYPE| (|COMMON-LISP|::|TYPE-OF| |UIOP/VERSION|::|C|)))
     (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|STREAM|
      (|COMMON-LISP|::|IF|
       (|COMMON-LISP|::|EQ| |COMMON-LISP|::|TYPE|
        '|UIOP/VERSION|::|DEPRECATED-FUNCTION-SHOULD-BE-DELETED|)
       "~A: Still defining deprecated function~:P ~{~S~^ ~} that promised to delete"
       "~A: Using deprecated function ~S -- please update your code to use a newer API.~\n
~@[~%The docstring for this function says:~%~A~%~]")
      |COMMON-LISP|::|TYPE| |UIOP/VERSION|::|NAME|
      (|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|SYMBOLP| |UIOP/VERSION|::|NAME|)
       (|CLOS|::|DOCUMENTATION| |UIOP/VERSION|::|NAME|
        '|COMMON-LISP|::|FUNCTION|))))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION|
 (|UIOP/VERSION|::|STATUS| |UIOP/VERSION|::|NAME|)
 (|COMMON-LISP|::|ECASE| |UIOP/VERSION|::|STATUS|
  ((|COMMON-LISP|::|NIL|) |COMMON-LISP|::|NIL|)
  ((:|STYLE-WARNING|)
   (|UIOP/UTILITY|::|STYLE-WARN|
    '|UIOP/VERSION|::|DEPRECATED-FUNCTION-STYLE-WARNING| :|NAME|
    |UIOP/VERSION|::|NAME|))
  ((:|WARNING|)
   (|COMMON-LISP|::|WARN| '|UIOP/VERSION|::|DEPRECATED-FUNCTION-WARNING|
    :|NAME| |UIOP/VERSION|::|NAME|))
  ((:|ERROR|)
   (|COMMON-LISP|::|CERROR| "USE FUNCTION ANYWAY"
    '|UIOP/VERSION|::|DEPRECATED-FUNCTION-ERROR| :|NAME|
    |UIOP/VERSION|::|NAME|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/VERSION|::|VERSION-DEPRECATION|
 (|UIOP/VERSION|::|VERSION| |COMMON-LISP|::|&KEY|
  (|COMMON-LISP|::|STYLE-WARNING| |COMMON-LISP|::|NIL|)
  (|COMMON-LISP|::|WARNING|
   (|UIOP/VERSION|::|NEXT-VERSION| |COMMON-LISP|::|STYLE-WARNING|))
  (|COMMON-LISP|::|ERROR|
   (|UIOP/VERSION|::|NEXT-VERSION| |COMMON-LISP|::|WARNING|))
  (|COMMON-LISP|::|DELETE|
   (|UIOP/VERSION|::|NEXT-VERSION| |COMMON-LISP|::|ERROR|)))
 "Given a VERSION string, and the starting versions for notifying the programmer of\n
various levels of deprecation, return the current level of deprecation as per WITH-DEPRECATION\n
that is the highest level that has a declared version older than the specified version.\n
Each start version for a level of deprecation can be specified by a keyword argument, or\n
if left unspecified, will be the NEXT-VERSION of the immediate lower level of deprecation."
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|AND| |COMMON-LISP|::|DELETE|
    (|UIOP/VERSION|::|VERSION<=| |COMMON-LISP|::|DELETE|
     |UIOP/VERSION|::|VERSION|))
   :|DELETE|)
  ((|COMMON-LISP|::|AND| |COMMON-LISP|::|ERROR|
    (|UIOP/VERSION|::|VERSION<=| |COMMON-LISP|::|ERROR|
     |UIOP/VERSION|::|VERSION|))
   :|ERROR|)
  ((|COMMON-LISP|::|AND| |COMMON-LISP|::|WARNING|
    (|UIOP/VERSION|::|VERSION<=| |COMMON-LISP|::|WARNING|
     |UIOP/VERSION|::|VERSION|))
   :|WARNING|)
  ((|COMMON-LISP|::|AND| |COMMON-LISP|::|STYLE-WARNING|
    (|UIOP/VERSION|::|VERSION<=| |COMMON-LISP|::|STYLE-WARNING|
     |UIOP/VERSION|::|VERSION|))
   :|STYLE-WARNING|)))
(|COMMON-LISP|::|DEFMACRO| |UIOP/VERSION|::|WITH-DEPRECATION|
 ((|UIOP/VERSION|::|LEVEL|) |COMMON-LISP|::|&BODY|
  |UIOP/VERSION|::|DEFINITIONS|)
 "Given a deprecation LEVEL (a form to be EVAL'ed at macro-expansion time), instrument the\n
DEFUN and DEFMETHOD forms in DEFINITIONS to notify the programmer of the deprecation of the function\n
when it is compiled or called.\n\n
Increasing levels (as result from evaluating LEVEL) are: NIL (not deprecated yet),\n
:STYLE-WARNING (a style warning is issued when used), :WARNING (a full warning is issued when used),\n
:ERROR (a continuable error instead), and :DELETE (it's an error if the code is still there while\n
at that level).\n\n
Forms other than DEFUN and DEFMETHOD are not instrumented, and you can protect a DEFUN or DEFMETHOD\n
from instrumentation by enclosing it in a PROGN."
 (|COMMON-LISP|::|LET|
  ((|UIOP/VERSION|::|LEVEL| (|COMMON-LISP|::|EVAL| |UIOP/VERSION|::|LEVEL|)))
  (|COMMON-LISP|::|CHECK-TYPE| |UIOP/VERSION|::|LEVEL|
   (|COMMON-LISP|::|MEMBER| |COMMON-LISP|::|NIL| :|STYLE-WARNING| :|WARNING|
    :|ERROR| :|DELETE|))
  (|COMMON-LISP|::|WHEN|
   (|COMMON-LISP|::|EQ| |UIOP/VERSION|::|LEVEL| :|DELETE|)
   (|COMMON-LISP|::|ERROR|
    '|UIOP/VERSION|::|DEPRECATED-FUNCTION-SHOULD-BE-DELETED| :|NAME|
    (|COMMON-LISP|::|MAPCAR| '|COMMON-LISP|::|SECOND|
     (|COMMON-LISP|::|REMOVE-IF-NOT|
      #'(|COMMON-LISP|::|LAMBDA| (|UIOP/VERSION|::|X|)
         (|COMMON-LISP|::|MEMBER| |UIOP/VERSION|::|X|
          '(|COMMON-LISP|::|DEFUN| |CLOS|::|DEFMETHOD|)))
      |UIOP/VERSION|::|DEFINITIONS| :|KEY| '|COMMON-LISP|::|FIRST|))))
  (|COMMON-LISP|::|LABELS|
   ((|UIOP/VERSION|::|INSTRUMENT|
     (|UIOP/VERSION|::|NAME| |UIOP/VERSION|::|HEAD| |UIOP/VERSION|::|BODY|
      |UIOP/VERSION|::|WHOLE|)
     (|COMMON-LISP|::|IF| |UIOP/VERSION|::|LEVEL|
      (|COMMON-LISP|::|LET|
       ((|UIOP/VERSION|::|NOTIFIEDP|
         (|COMMON-LISP|::|INTERN|
          (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "*~A-~A-~A-~A*"
           :|DEPRECATED-FUNCTION| |UIOP/VERSION|::|LEVEL|
           |UIOP/VERSION|::|NAME| :|NOTIFIED-P|))))
       (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
        (|UIOP/VERSION|::|REMAINING-FORMS| |UIOP/VERSION|::|DECLARATIONS|
         |UIOP/VERSION|::|DOC-STRING|)
        (|UIOP/UTILITY|::|PARSE-BODY| |UIOP/VERSION|::|BODY| :|DOCUMENTATION|
         |COMMON-LISP|::|T| :|WHOLE| |UIOP/VERSION|::|WHOLE|)
        `(|COMMON-LISP|::|PROGN|
          (|COMMON-LISP|::|DEFPARAMETER| ,|UIOP/VERSION|::|NOTIFIEDP|
           |COMMON-LISP|::|NIL|)
          (|COMMON-LISP|::|DECLAIM|
           (|COMMON-LISP|::|INLINE| ,|UIOP/VERSION|::|NAME|))
          (|COMMON-LISP|::|DEFINE-COMPILER-MACRO| ,|UIOP/VERSION|::|NAME|
           (|COMMON-LISP|::|&WHOLE| |UIOP/VERSION|::|FORM|
            |COMMON-LISP|::|&REST| |UIOP/VERSION|::|ARGS|)
           (|COMMON-LISP|::|DECLARE|
            (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
           (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION|
            ,|UIOP/VERSION|::|LEVEL| ',|UIOP/VERSION|::|NAME|)
           |UIOP/VERSION|::|FORM|)
          (,@|UIOP/VERSION|::|HEAD|
           ,@(|COMMON-LISP|::|WHEN| |UIOP/VERSION|::|DOC-STRING|
              (|COMMON-LISP|::|LIST| |UIOP/VERSION|::|DOC-STRING|))
           ,@|UIOP/VERSION|::|DECLARATIONS|
           (|COMMON-LISP|::|UNLESS| ,|UIOP/VERSION|::|NOTIFIEDP|
            (|COMMON-LISP|::|SETF| ,|UIOP/VERSION|::|NOTIFIEDP|
             |COMMON-LISP|::|T|)
            (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION|
             ,|UIOP/VERSION|::|LEVEL| ',|UIOP/VERSION|::|NAME|))
           ,@|UIOP/VERSION|::|REMAINING-FORMS|))))
      `(|COMMON-LISP|::|PROGN|
        (|COMMON-LISP|::|EVAL-WHEN|
         (:|COMPILE-TOPLEVEL| :|LOAD-TOPLEVEL| :|EXECUTE|)
         (|COMMON-LISP|::|SETF|
          (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION| ',|UIOP/VERSION|::|NAME|)
          |COMMON-LISP|::|NIL|))
        (|COMMON-LISP|::|DECLAIM|
         (|COMMON-LISP|::|NOTINLINE| ,|UIOP/VERSION|::|NAME|))
        (,@|UIOP/VERSION|::|HEAD| ,@|UIOP/VERSION|::|BODY|)))))
   `(|COMMON-LISP|::|PROGN|
     ,@(|COMMON-LISP|::|LOOP| :|FOR| |UIOP/VERSION|::|FORM| :|IN|
        |UIOP/VERSION|::|DEFINITIONS| :|COLLECT|
        (|COMMON-LISP|::|COND|
         ((|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |UIOP/VERSION|::|FORM|)
           (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|CAR| |UIOP/VERSION|::|FORM|)
            '|COMMON-LISP|::|DEFUN|))
          (|UIOP/VERSION|::|INSTRUMENT|
           (|COMMON-LISP|::|SECOND| |UIOP/VERSION|::|FORM|)
           (|COMMON-LISP|::|SUBSEQ| |UIOP/VERSION|::|FORM| 0. 3.)
           (|COMMON-LISP|::|SUBSEQ| |UIOP/VERSION|::|FORM| 3.)
           |UIOP/VERSION|::|FORM|))
         ((|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |UIOP/VERSION|::|FORM|)
           (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|CAR| |UIOP/VERSION|::|FORM|)
            '|CLOS|::|DEFMETHOD|))
          (|COMMON-LISP|::|LET|
           ((|UIOP/VERSION|::|BODY-START|
             (|COMMON-LISP|::|IF|
              (|COMMON-LISP|::|LISTP|
               (|COMMON-LISP|::|THIRD| |UIOP/VERSION|::|FORM|))
              3. 4.)))
           (|UIOP/VERSION|::|INSTRUMENT|
            (|COMMON-LISP|::|SECOND| |UIOP/VERSION|::|FORM|)
            (|COMMON-LISP|::|SUBSEQ| |UIOP/VERSION|::|FORM| 0.
             |UIOP/VERSION|::|BODY-START|)
            (|COMMON-LISP|::|SUBSEQ| |UIOP/VERSION|::|FORM|
             |UIOP/VERSION|::|BODY-START|)
            |UIOP/VERSION|::|FORM|)))
         (|COMMON-LISP|::|T| |UIOP/VERSION|::|FORM|)))))))
(|COMMON-LISP|::|LET*| ((#1=#:|G14275| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|CONDITION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/VERSION|::|NAME| :|READERS|
    '(|UIOP/VERSION|::|DEPRECATED-FUNCTION-NAME|) :|INITARGS| '(:|NAME|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|UIOP/VERSION|::|DEPRECATED-FUNCTION-NAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G14281| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/VERSION|::|DEPRECATED-FUNCTION-STYLE-WARNING| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION|
   '|COMMON-LISP|::|STYLE-WARNING|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G14284| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/VERSION|::|DEPRECATED-FUNCTION-WARNING| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION|
   '|COMMON-LISP|::|WARNING|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G14287| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/VERSION|::|DEPRECATED-FUNCTION-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION|
   '|COMMON-LISP|::|ERROR|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G14290| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/VERSION|::|DEPRECATED-FUNCTION-SHOULD-BE-DELETED|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION|
   '|COMMON-LISP|::|ERROR|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION-KIND|))
(|SYSTEM|::|C-DEFUN| '|UIOP/VERSION|::|DEPRECATED-FUNCTION-CONDITION-KIND|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/VERSION|::|STATUS| |UIOP/VERSION|::|NAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/VERSION|::|VERSION-DEPRECATION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/VERSION|::|VERSION-DEPRECATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/VERSION|::|VERSION| |COMMON-LISP|::|&KEY|
    (|COMMON-LISP|::|STYLE-WARNING| |COMMON-LISP|::|NIL|)
    (|COMMON-LISP|::|WARNING|
     (|UIOP/VERSION|::|NEXT-VERSION| |COMMON-LISP|::|STYLE-WARNING|))
    (|COMMON-LISP|::|ERROR|
     (|UIOP/VERSION|::|NEXT-VERSION| |COMMON-LISP|::|WARNING|))
    (|COMMON-LISP|::|DELETE|
     (|UIOP/VERSION|::|NEXT-VERSION| |COMMON-LISP|::|ERROR|)))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/VERSION|::|WITH-DEPRECATION|)
(|SYSTEM|::|%PUTD| '|UIOP/VERSION|::|WITH-DEPRECATION|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/VERSION|::|WITH-DEPRECATION|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Given a deprecation LEVEL (a form to be EVAL'ed at macro-expansion time), instrument the\n
DEFUN and DEFMETHOD forms in DEFINITIONS to notify the programmer of the deprecation of the function\n
when it is compiled or called.\n\n
Increasing levels (as result from evaluating LEVEL) are: NIL (not deprecated yet),\n
:STYLE-WARNING (a style warning is issued when used), :WARNING (a full warning is issued when used),\n
:ERROR (a continuable error instead), and :DELETE (it's an error if the code is still there while\n
at that level).\n\n
Forms other than DEFUN and DEFMETHOD are not instrumented, and you can protect a DEFUN or DEFMETHOD\n
from instrumentation by enclosing it in a PROGN."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G14404| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G14405|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 1. 1. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/VERSION|::|WITH-DEPRECATION| #1#
          '#4=(|UIOP/VERSION|::|LEVEL|))
         #1#))
       (|UIOP/VERSION|::|LEVEL| (|COMMON-LISP|::|CAR| #3#))
       (|UIOP/VERSION|::|DEFINITIONS| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/VERSION|::|WITH-DEPRECATION|
       (|COMMON-LISP|::|LET|
        ((|UIOP/VERSION|::|LEVEL|
          (|COMMON-LISP|::|EVAL| |UIOP/VERSION|::|LEVEL|)))
        (|COMMON-LISP|::|CHECK-TYPE| |UIOP/VERSION|::|LEVEL|
         (|COMMON-LISP|::|MEMBER| |COMMON-LISP|::|NIL| :|STYLE-WARNING|
          :|WARNING| :|ERROR| :|DELETE|))
        (|COMMON-LISP|::|WHEN|
         (|COMMON-LISP|::|EQ| |UIOP/VERSION|::|LEVEL| :|DELETE|)
         (|COMMON-LISP|::|ERROR|
          '|UIOP/VERSION|::|DEPRECATED-FUNCTION-SHOULD-BE-DELETED| :|NAME|
          (|COMMON-LISP|::|MAPCAR| '|COMMON-LISP|::|SECOND|
           (|COMMON-LISP|::|REMOVE-IF-NOT|
            #'(|COMMON-LISP|::|LAMBDA| (|UIOP/VERSION|::|X|)
               (|COMMON-LISP|::|MEMBER| |UIOP/VERSION|::|X|
                '(|COMMON-LISP|::|DEFUN| |CLOS|::|DEFMETHOD|)))
            |UIOP/VERSION|::|DEFINITIONS| :|KEY| '|COMMON-LISP|::|FIRST|))))
        (|COMMON-LISP|::|LABELS|
         ((|UIOP/VERSION|::|INSTRUMENT|
           (|UIOP/VERSION|::|NAME| |UIOP/VERSION|::|HEAD|
            |UIOP/VERSION|::|BODY| |UIOP/VERSION|::|WHOLE|)
           (|COMMON-LISP|::|IF| |UIOP/VERSION|::|LEVEL|
            (|COMMON-LISP|::|LET|
             ((|UIOP/VERSION|::|NOTIFIEDP|
               (|COMMON-LISP|::|INTERN|
                (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "*~A-~A-~A-~A*"
                 :|DEPRECATED-FUNCTION| |UIOP/VERSION|::|LEVEL|
                 |UIOP/VERSION|::|NAME| :|NOTIFIED-P|))))
             (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
              (|UIOP/VERSION|::|REMAINING-FORMS| |UIOP/VERSION|::|DECLARATIONS|
               |UIOP/VERSION|::|DOC-STRING|)
              (|UIOP/UTILITY|::|PARSE-BODY| |UIOP/VERSION|::|BODY|
               :|DOCUMENTATION| |COMMON-LISP|::|T| :|WHOLE|
               |UIOP/VERSION|::|WHOLE|)
              `(|COMMON-LISP|::|PROGN|
                (|COMMON-LISP|::|DEFPARAMETER| ,|UIOP/VERSION|::|NOTIFIEDP|
                 |COMMON-LISP|::|NIL|)
                (|COMMON-LISP|::|DECLAIM|
                 (|COMMON-LISP|::|INLINE| ,|UIOP/VERSION|::|NAME|))
                (|COMMON-LISP|::|DEFINE-COMPILER-MACRO| ,|UIOP/VERSION|::|NAME|
                 (|COMMON-LISP|::|&WHOLE| |UIOP/VERSION|::|FORM|
                  |COMMON-LISP|::|&REST| |UIOP/VERSION|::|ARGS|)
                 (|COMMON-LISP|::|DECLARE|
                  (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
                 (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION|
                  ,|UIOP/VERSION|::|LEVEL| ',|UIOP/VERSION|::|NAME|)
                 |UIOP/VERSION|::|FORM|)
                (,@|UIOP/VERSION|::|HEAD|
                 ,@(|COMMON-LISP|::|WHEN| |UIOP/VERSION|::|DOC-STRING|
                    (|COMMON-LISP|::|LIST| |UIOP/VERSION|::|DOC-STRING|))
                 ,@|UIOP/VERSION|::|DECLARATIONS|
                 (|COMMON-LISP|::|UNLESS| ,|UIOP/VERSION|::|NOTIFIEDP|
                  (|COMMON-LISP|::|SETF| ,|UIOP/VERSION|::|NOTIFIEDP|
                   |COMMON-LISP|::|T|)
                  (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION|
                   ,|UIOP/VERSION|::|LEVEL| ',|UIOP/VERSION|::|NAME|))
                 ,@|UIOP/VERSION|::|REMAINING-FORMS|))))
            `(|COMMON-LISP|::|PROGN|
              (|COMMON-LISP|::|EVAL-WHEN|
               (:|COMPILE-TOPLEVEL| :|LOAD-TOPLEVEL| :|EXECUTE|)
               (|COMMON-LISP|::|SETF|
                (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
                 ',|UIOP/VERSION|::|NAME|)
                |COMMON-LISP|::|NIL|))
              (|COMMON-LISP|::|DECLAIM|
               (|COMMON-LISP|::|NOTINLINE| ,|UIOP/VERSION|::|NAME|))
              (,@|UIOP/VERSION|::|HEAD| ,@|UIOP/VERSION|::|BODY|)))))
         `(|COMMON-LISP|::|PROGN|
           ,@(|COMMON-LISP|::|LOOP| :|FOR| |UIOP/VERSION|::|FORM| :|IN|
              |UIOP/VERSION|::|DEFINITIONS| :|COLLECT|
              (|COMMON-LISP|::|COND|
               ((|COMMON-LISP|::|AND|
                 (|COMMON-LISP|::|CONSP| |UIOP/VERSION|::|FORM|)
                 (|COMMON-LISP|::|EQ|
                  (|COMMON-LISP|::|CAR| |UIOP/VERSION|::|FORM|)
                  '|COMMON-LISP|::|DEFUN|))
                (|UIOP/VERSION|::|INSTRUMENT|
                 (|COMMON-LISP|::|SECOND| |UIOP/VERSION|::|FORM|)
                 (|COMMON-LISP|::|SUBSEQ| |UIOP/VERSION|::|FORM| 0. 3.)
                 (|COMMON-LISP|::|SUBSEQ| |UIOP/VERSION|::|FORM| 3.)
                 |UIOP/VERSION|::|FORM|))
               ((|COMMON-LISP|::|AND|
                 (|COMMON-LISP|::|CONSP| |UIOP/VERSION|::|FORM|)
                 (|COMMON-LISP|::|EQ|
                  (|COMMON-LISP|::|CAR| |UIOP/VERSION|::|FORM|)
                  '|CLOS|::|DEFMETHOD|))
                (|COMMON-LISP|::|LET|
                 ((|UIOP/VERSION|::|BODY-START|
                   (|COMMON-LISP|::|IF|
                    (|COMMON-LISP|::|LISTP|
                     (|COMMON-LISP|::|THIRD| |UIOP/VERSION|::|FORM|))
                    3. 4.)))
                 (|UIOP/VERSION|::|INSTRUMENT|
                  (|COMMON-LISP|::|SECOND| |UIOP/VERSION|::|FORM|)
                  (|COMMON-LISP|::|SUBSEQ| |UIOP/VERSION|::|FORM| 0.
                   |UIOP/VERSION|::|BODY-START|)
                  (|COMMON-LISP|::|SUBSEQ| |UIOP/VERSION|::|FORM|
                   |UIOP/VERSION|::|BODY-START|)
                  |UIOP/VERSION|::|FORM|)))
               (|COMMON-LISP|::|T| |UIOP/VERSION|::|FORM|)))))))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/VERSION|::|DEFINITIONS|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|UIOP/OS|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE| '(:|UIOP/COMMON-LISP| :|UIOP/PACKAGE| :|UIOP/UTILITY|) :|SHADOW|
  '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM| '|COMMON-LISP|::|NIL|
  :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|FEATUREP| #:|OS-UNIX-P| #:|OS-MACOSX-P| #:|OS-WINDOWS-P| #:|OS-GENERA-P|
    #:|DETECT-OS| #:|OS-COND| #:|GETENV| #:|GETENVP|
    #:|IMPLEMENTATION-IDENTIFIER| #:|IMPLEMENTATION-TYPE|
    #:|*IMPLEMENTATION-TYPE*| #:|OPERATING-SYSTEM| #:|ARCHITECTURE|
    #:|LISP-VERSION-STRING| #:|HOSTNAME| #:|GETCWD| #:|CHDIR|
    #:|READ-NULL-TERMINATED-STRING| #:|READ-LITTLE-ENDIAN|
    #:|PARSE-FILE-LOCATION-INFO| #:|PARSE-WINDOWS-SHORTCUT|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|UIOP/OS|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/OS"))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|FEATUREP|
 (|UIOP/OS|::|X| |COMMON-LISP|::|&OPTIONAL|
  (|COMMON-LISP|::|*FEATURES*| |COMMON-LISP|::|*FEATURES*|))
 "Checks whether a feature expression X is true with respect to the *FEATURES* set,\n
as per the CLHS standard for #+ and #-. Beware that just like the CLHS,\n
we assume symbols from the KEYWORD package are used, but that unless you're using #+/#-\n
your reader will not have magically used the KEYWORD package, so you need specify\n
keywords explicitly."
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|ATOM| |UIOP/OS|::|X|)
   (|COMMON-LISP|::|AND|
    (|COMMON-LISP|::|MEMBER| |UIOP/OS|::|X| |COMMON-LISP|::|*FEATURES*|)
    |COMMON-LISP|::|T|))
  ((|COMMON-LISP|::|EQ| :|NOT| (|COMMON-LISP|::|CAR| |UIOP/OS|::|X|))
   (|COMMON-LISP|::|ASSERT|
    (|COMMON-LISP|::|NULL| (|COMMON-LISP|::|CDDR| |UIOP/OS|::|X|)))
   (|COMMON-LISP|::|NOT|
    (|UIOP/OS|::|FEATUREP| (|COMMON-LISP|::|CADR| |UIOP/OS|::|X|))))
  ((|COMMON-LISP|::|EQ| :|OR| (|COMMON-LISP|::|CAR| |UIOP/OS|::|X|))
   (|COMMON-LISP|::|SOME| #'|UIOP/OS|::|FEATUREP|
    (|COMMON-LISP|::|CDR| |UIOP/OS|::|X|)))
  ((|COMMON-LISP|::|EQ| :|AND| (|COMMON-LISP|::|CAR| |UIOP/OS|::|X|))
   (|COMMON-LISP|::|EVERY| #'|UIOP/OS|::|FEATUREP|
    (|COMMON-LISP|::|CDR| |UIOP/OS|::|X|)))
  (|COMMON-LISP|::|T|
   (|UIOP/UTILITY|::|PARAMETER-ERROR| "~S: malformed feature specification ~S"
    '|UIOP/OS|::|FEATUREP| |UIOP/OS|::|X|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|OS-MACOSX-P| |COMMON-LISP|::|NIL|
 "Is the underlying operating system MacOS X?"
 (|UIOP/OS|::|FEATUREP|
  '(:|OR| :|DARWIN| (:|AND| :|ALLEGRO| :|MACOSX|) (:|AND| :|CLISP| :|MACOS|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|OS-UNIX-P| |COMMON-LISP|::|NIL|
 "Is the underlying operating system some Unix variant?"
 (|COMMON-LISP|::|OR| (|UIOP/OS|::|FEATUREP| '(:|OR| :|UNIX| :|CYGWIN|))
  (|UIOP/OS|::|OS-MACOSX-P|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|OS-WINDOWS-P| |COMMON-LISP|::|NIL|
 "Is the underlying operating system Microsoft Windows?"
 (|COMMON-LISP|::|AND| (|COMMON-LISP|::|NOT| (|UIOP/OS|::|OS-UNIX-P|))
  (|UIOP/OS|::|FEATUREP|
   '(:|OR| :|WIN32| :|WINDOWS| :|MSWINDOWS| :|MINGW32| :|MINGW64|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|OS-GENERA-P| |COMMON-LISP|::|NIL|
 "Is the underlying operating system Genera (running on a Symbolics Lisp Machine)?"
 (|UIOP/OS|::|FEATUREP| :|GENERA|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|OS-OLDMAC-P| |COMMON-LISP|::|NIL|
 "Is the underlying operating system an (emulated?) MacOS 9 or earlier?"
 (|UIOP/OS|::|FEATUREP| :|MCL|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|OS-HAIKU-P| |COMMON-LISP|::|NIL|
 "Is the underlying operating system Haiku?" (|UIOP/OS|::|FEATUREP| :|HAIKU|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|OS-MEZZANO-P| |COMMON-LISP|::|NIL|
 "Is the underlying operating system Mezzano?"
 (|UIOP/OS|::|FEATUREP| :|MEZZANO|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|DETECT-OS| |COMMON-LISP|::|NIL|
 "Detects the current operating system. Only needs be run at compile-time,\n
except on ABCL where it might change between FASL compilation and runtime."
 (|UIOP/COMMON-LISP|::|LOOP*| :|WITH| |UIOP/OS|::|O| :|FOR|
  (|UIOP/OS|::|FEATURE| . |UIOP/OS|::|DETECT|) :|IN|
  '((:|OS-UNIX| . |UIOP/OS|::|OS-UNIX-P|)
    (:|OS-MACOSX| . |UIOP/OS|::|OS-MACOSX-P|)
    (:|OS-WINDOWS| . |UIOP/OS|::|OS-WINDOWS-P|)
    (:|GENERA| . |UIOP/OS|::|OS-GENERA-P|)
    (:|OS-OLDMAC| . |UIOP/OS|::|OS-OLDMAC-P|)
    (:|HAIKU| . |UIOP/OS|::|OS-HAIKU-P|)
    (:|MEZZANO| . |UIOP/OS|::|OS-MEZZANO-P|))
  :|WHEN|
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|OR| (|COMMON-LISP|::|NOT| |UIOP/OS|::|O|)
    (|COMMON-LISP|::|EQ| |UIOP/OS|::|FEATURE| :|OS-MACOSX|))
   (|COMMON-LISP|::|FUNCALL| |UIOP/OS|::|DETECT|))
  :|DO| (|COMMON-LISP|::|SETF| |UIOP/OS|::|O| |UIOP/OS|::|FEATURE|)
  (|COMMON-LISP|::|PUSHNEW| |UIOP/OS|::|FEATURE| |COMMON-LISP|::|*FEATURES*|)
  :|ELSE| :|DO|
  (|COMMON-LISP|::|SETF| |COMMON-LISP|::|*FEATURES*|
   (|COMMON-LISP|::|REMOVE| |UIOP/OS|::|FEATURE| |COMMON-LISP|::|*FEATURES*|))
  :|FINALLY|
  (|COMMON-LISP|::|RETURN|
   (|COMMON-LISP|::|OR| |UIOP/OS|::|O|
    (|COMMON-LISP|::|ERROR|
     "Congratulations for trying ASDF on an operating system~%~\n
that is neither Unix, nor Windows, nor Genera, nor even old MacOS.~%Now you port it.")))))
(|COMMON-LISP|::|DEFMACRO| |UIOP/OS|::|OS-COND|
 (|COMMON-LISP|::|&REST| |UIOP/OS|::|CLAUSES|)
 (|UIOP/COMMON-LISP|::|LOOP*| :|FOR| (|UIOP/OS|::|TEST| . |UIOP/OS|::|BODY|)
  :|IN| |UIOP/OS|::|CLAUSES| :|WHEN| (|COMMON-LISP|::|EVAL| |UIOP/OS|::|TEST|)
  :|RETURN| `(|COMMON-LISP|::|PROGN| ,@|UIOP/OS|::|BODY|)))
(|UIOP/OS|::|DETECT-OS|)
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|FEATUREP|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|FEATUREP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/OS|::|X| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP|::|*FEATURES*| |COMMON-LISP|::|*FEATURES*|))))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|OS-MACOSX-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|OS-MACOSX-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|OS-UNIX-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|OS-UNIX-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|OS-WINDOWS-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|OS-WINDOWS-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|OS-GENERA-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|OS-GENERA-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|OS-OLDMAC-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|OS-OLDMAC-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|OS-HAIKU-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|OS-HAIKU-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|OS-MEZZANO-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|OS-MEZZANO-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|DETECT-OS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|DETECT-OS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/OS|::|OS-COND|)
(|SYSTEM|::|%PUTD| '|UIOP/OS|::|OS-COND|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/OS|::|OS-COND|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|LET*|
     ((|UIOP/OS|::|CLAUSES| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
     (|COMMON-LISP|::|BLOCK| |UIOP/OS|::|OS-COND|
      (|UIOP/COMMON-LISP|::|LOOP*| :|FOR|
       (|UIOP/OS|::|TEST| . |UIOP/OS|::|BODY|) :|IN| |UIOP/OS|::|CLAUSES|
       :|WHEN| (|COMMON-LISP|::|EVAL| |UIOP/OS|::|TEST|) :|RETURN|
       `(|COMMON-LISP|::|PROGN| ,@|UIOP/OS|::|BODY|))))))
  '(|COMMON-LISP|::|&REST| |UIOP/OS|::|CLAUSES|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|GETENV| (|UIOP/OS|::|X|)
 "Query the environment, as in C getenv.\n
Beware: may return empty string if a variable is present but empty;\n
use getenvp to return NIL in such a case."
 (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORABLE| |UIOP/OS|::|X|))
 (|EXT|::|GETENV| |UIOP/OS|::|X|))
(|COMMON-LISP|::|DEFSETF| |UIOP/OS|::|GETENV| (|UIOP/OS|::|X|)
 (|UIOP/OS|::|VAL|) "Set an environment variable."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/OS|::|X| |UIOP/OS|::|VAL|))
 `(|SYSTEM|::|SETENV| ,|UIOP/OS|::|X| ,|UIOP/OS|::|VAL|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|GETENVP| (|UIOP/OS|::|X|)
 "Predicate that is true if the named variable is present in the libc environment,\n
then returning the non-empty string value of the variable"
 (|COMMON-LISP|::|LET| ((|UIOP/OS|::|G| (|UIOP/OS|::|GETENV| |UIOP/OS|::|X|)))
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|NOT| (|UIOP/UTILITY|::|EMPTYP| |UIOP/OS|::|G|))
   |UIOP/OS|::|G|)))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|GETENV|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|GETENV|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/OS|::|X|)))
(|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|REMPROP| '|UIOP/OS|::|GETENV| '|SYSTEM|::|DEFSTRUCT-WRITER|)
 (|SYSTEM|::|CHECK-REDEFINITION| '|UIOP/OS|::|GETENV| '|COMMON-LISP|::|DEFSETF|
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|GET| '|UIOP/OS|::|GETENV| '|SYSTEM|::|SETF-EXPANDER|)
   (|SYSTEM|::|TEXT| "SETF expander")))
 (|SYSTEM|::|%PUT| '|UIOP/OS|::|GETENV| '|SYSTEM|::|SETF-EXPANDER|
  (|COMMON-LISP|::|LIST*| -1. 1.
   (|COMMON-LISP|::|FUNCTION| |UIOP/OS|::|SETF-GETENV|
    (|COMMON-LISP|::|LAMBDA| (#1=#:|IG14625| |UIOP/OS|::|VAL| |UIOP/OS|::|X|)
     (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| #1#)
      (|COMMON-LISP|::|IGNORABLE| |UIOP/OS|::|X| |UIOP/OS|::|VAL|))
     (|COMMON-LISP|::|BLOCK| |UIOP/OS|::|GETENV|
      `(|SYSTEM|::|SETENV| ,|UIOP/OS|::|X| ,|UIOP/OS|::|VAL|))))))
 (|SYSTEM|::|%SET-DOCUMENTATION| '|UIOP/OS|::|GETENV| '|COMMON-LISP|::|SETF|
  "Set an environment variable.")
 '|UIOP/OS|::|GETENV|)
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|GETENVP|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|GETENVP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/OS|::|X|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|FIRST-FEATURE|
 (|UIOP/OS|::|FEATURE-SETS|) "A helper for various feature detection functions"
 (|COMMON-LISP|::|DOLIST| (|UIOP/OS|::|X| |UIOP/OS|::|FEATURE-SETS|)
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|UIOP/OS|::|SHORT| |UIOP/OS|::|LONG| |UIOP/OS|::|FEATURE-EXPR|)
   (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CONSP| |UIOP/OS|::|X|)
    (|COMMON-LISP|::|VALUES| (|COMMON-LISP|::|FIRST| |UIOP/OS|::|X|)
     (|COMMON-LISP|::|SECOND| |UIOP/OS|::|X|)
     (|COMMON-LISP|::|CONS| :|OR| (|COMMON-LISP|::|REST| |UIOP/OS|::|X|)))
    (|COMMON-LISP|::|VALUES| |UIOP/OS|::|X| |UIOP/OS|::|X| |UIOP/OS|::|X|))
   (|COMMON-LISP|::|WHEN| (|UIOP/OS|::|FEATUREP| |UIOP/OS|::|FEATURE-EXPR|)
    (|COMMON-LISP|::|RETURN|
     (|COMMON-LISP|::|VALUES| |UIOP/OS|::|SHORT| |UIOP/OS|::|LONG|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|IMPLEMENTATION-TYPE| |COMMON-LISP|::|NIL|
 "The type of Lisp implementation used, as a short UIOP-standardized keyword"
 (|UIOP/OS|::|FIRST-FEATURE|
  '(:|ABCL| (:|ACL| :|ALLEGRO|) (:|CCL| :|CLOZURE|) :|CLISP|
    (:|CORMAN| :|CORMANLISP|) (:|CMU| :|CMUCL| :|CMU|) :|CLASP| :|ECL| :|GCL|
    (:|LWPE| :|LISPWORKS-PERSONAL-EDITION|) (:|LW| :|LISPWORKS|) :|MCL|
    :|MEZZANO| :|MKCL| :|SBCL| :|SCL| (:|SMBX| :|SYMBOLICS|) :|XCL|)))
(|COMMON-LISP|::|DEFVAR| |UIOP/OS|::|*IMPLEMENTATION-TYPE*|
 (|UIOP/OS|::|IMPLEMENTATION-TYPE|)
 "The type of Lisp implementation used, as a short UIOP-standardized keyword")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|OPERATING-SYSTEM| |COMMON-LISP|::|NIL|
 "The operating system of the current host"
 (|UIOP/OS|::|FIRST-FEATURE|
  '(:|CYGWIN| (:|WIN| :|WINDOWS| :|MSWINDOWS| :|WIN32| :|MINGW32|)
    (:|LINUX| :|LINUX| :|LINUX-TARGET|)
    (:|MACOSX| :|MACOSX| :|DARWIN| :|DARWIN-TARGET| :|APPLE|)
    (:|SOLARIS| :|SOLARIS| :|SUNOS|)
    (:|BSD| :|BSD| :|FREEBSD| :|NETBSD| :|OPENBSD| :|DRAGONFLY|) :|UNIX|
    :|GENERA| :|MEZZANO|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|ARCHITECTURE| |COMMON-LISP|::|NIL|
 "The CPU architecture of the current host"
 (|UIOP/OS|::|FIRST-FEATURE|
  '((:|X64| :|X86-64| :|X86_64| :|X8664-TARGET| :|AMD64|
     (:|AND| :|WORD-SIZE=64| :|PC386|))
    (:|X86| :|X86| :|I386| :|I486| :|I586| :|I686| :|PENTIUM3| :|PENTIUM4|
     :|PC386| :|IAPX386| :|X8632-TARGET|)
    (:|PPC64| :|PPC64| :|PPC64-TARGET|)
    (:|PPC32| :|PPC32| :|PPC32-TARGET| :|PPC| :|POWERPC|) :|HPPA64| :|HPPA|
    :|SPARC64| (:|SPARC32| :|SPARC32| :|SPARC|) :|MIPSEL| :|MIPSEB| :|MIPS|
    :|ALPHA| (:|ARM| :|ARM| :|ARM-TARGET|) :|IMACH|
    (:|JAVA| :|JAVA| :|JAVA-1.4| :|JAVA-1.5| :|JAVA-1.6| :|JAVA-1.7|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|LISP-VERSION-STRING| |COMMON-LISP|::|NIL|
 "return a string that identifies the current Lisp implementation version"
 (|COMMON-LISP|::|LET|
  ((|UIOP/OS|::|S| (|COMMON-LISP|::|LISP-IMPLEMENTATION-VERSION|)))
  (|COMMON-LISP|::|CAR|
   (|COMMON-LISP|::|LIST|
    (|COMMON-LISP|::|SUBSEQ| |UIOP/OS|::|S| 0.
     (|COMMON-LISP|::|POSITION| #\Space |UIOP/OS|::|S|))
    |UIOP/OS|::|S|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|IMPLEMENTATION-IDENTIFIER|
 |COMMON-LISP|::|NIL|
 "Return a string that identifies the ABI of the current implementation,\n
suitable for use as a directory name to segregate Lisp FASLs, C dynamic libraries, etc."
 (|COMMON-LISP|::|SUBSTITUTE-IF| #\_
  #'(|COMMON-LISP|::|LAMBDA| (|UIOP/OS|::|X|)
     (|COMMON-LISP|::|FIND| |UIOP/OS|::|X| " /:;&^\\|?<>(){}[]$#`'\""))
  (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "~(~a~@{~@[-~a~]~}~)"
   (|COMMON-LISP|::|OR| (|UIOP/OS|::|IMPLEMENTATION-TYPE|)
    (|COMMON-LISP|::|LISP-IMPLEMENTATION-TYPE|))
   (|UIOP/OS|::|LISP-VERSION-STRING|)
   (|COMMON-LISP|::|OR| (|UIOP/OS|::|OPERATING-SYSTEM|)
    (|COMMON-LISP|::|SOFTWARE-TYPE|))
   (|COMMON-LISP|::|OR| (|UIOP/OS|::|ARCHITECTURE|)
    (|COMMON-LISP|::|MACHINE-TYPE|)))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|FIRST-FEATURE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|FIRST-FEATURE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/OS|::|FEATURE-SETS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|IMPLEMENTATION-TYPE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|IMPLEMENTATION-TYPE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/OS|::|*IMPLEMENTATION-TYPE*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|OPERATING-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|OPERATING-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|ARCHITECTURE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|ARCHITECTURE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|LISP-VERSION-STRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|LISP-VERSION-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|IMPLEMENTATION-IDENTIFIER|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|IMPLEMENTATION-IDENTIFIER|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|HOSTNAME| |COMMON-LISP|::|NIL|
 "return the hostname of the current host"
 (|COMMON-LISP|::|FIRST|
  (|UIOP/UTILITY|::|SPLIT-STRING| (|COMMON-LISP|::|MACHINE-INSTANCE|)
   :|SEPARATOR| " ")))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|HOSTNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|HOSTNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|GETCWD| |COMMON-LISP|::|NIL|
 "Get the current working directory as per POSIX getcwd(3), as a pathname object"
 (|COMMON-LISP|::|OR| (|EXT|::|DEFAULT-DIRECTORY|)
  (|UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR| '|UIOP/OS|::|GETCWD|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/OS|::|CHDIR| (|UIOP/OS|::|X|)
 "Change current directory, as per POSIX chdir(2), to a given pathname object"
 (|UIOP/UTILITY|::|IF-LET|
  (|UIOP/OS|::|X| (|COMMON-LISP|::|PATHNAME| |UIOP/OS|::|X|))
  (|EXT|::|CD| |UIOP/OS|::|X|)))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|GETCWD|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|GETCWD|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/OS|::|CHDIR|))
(|SYSTEM|::|C-DEFUN| '|UIOP/OS|::|CHDIR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/OS|::|X|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|UIOP/PATHNAME|
  :|NICKNAMES| '#1=(:|ASDF/PATHNAME|) :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE| '(:|UIOP/COMMON-LISP| :|UIOP/PACKAGE| :|UIOP/UTILITY| :|UIOP/OS|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
    #:|DENORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
    #:|MERGE-PATHNAME-DIRECTORY-COMPONENTS| #:|*UNSPECIFIC-PATHNAME-TYPE*|
    #:|MAKE-PATHNAME*| #:|MAKE-PATHNAME-COMPONENT-LOGICAL|
    #:|MAKE-PATHNAME-LOGICAL| #:|MERGE-PATHNAMES*| #:|NIL-PATHNAME|
    #:|*NIL-PATHNAME*| #:|WITH-PATHNAME-DEFAULTS| #:|PATHNAME-EQUAL|
    #:|LOGICAL-PATHNAME-P| #:|PHYSICAL-PATHNAME-P| #:|PHYSICALIZE-PATHNAME|
    #:|ABSOLUTE-PATHNAME-P| #:|RELATIVE-PATHNAME-P| #:|HIDDEN-PATHNAME-P|
    #:|FILE-PATHNAME-P| #:|PATHNAME-DIRECTORY-PATHNAME|
    #:|PATHNAME-PARENT-DIRECTORY-PATHNAME| #:|DIRECTORY-PATHNAME-P|
    #:|ENSURE-DIRECTORY-PATHNAME| #:|SPLIT-NAME-TYPE| #:|PARSE-UNIX-NAMESTRING|
    #:|UNIX-NAMESTRING| #:|SPLIT-UNIX-NAMESTRING-DIRECTORY-COMPONENTS|
    #:|SUBPATHNAME| #:|SUBPATHNAME*| #:|ENSURE-ABSOLUTE-PATHNAME|
    #:|PATHNAME-ROOT| #:|PATHNAME-HOST-PATHNAME| #:|SUBPATHP|
    #:|ENOUGH-PATHNAME| #:|WITH-ENOUGH-PATHNAME| #:|CALL-WITH-ENOUGH-PATHNAME|
    #:|ENSURE-PATHNAME| #:|*WILD*| #:|*WILD-FILE*|
    #:|*WILD-FILE-FOR-DIRECTORY*| #:|*WILD-DIRECTORY*| #:|*WILD-INFERIORS*|
    #:|*WILD-PATH*| #:|WILDEN| #:|RELATIVIZE-DIRECTORY-COMPONENT|
    #:|RELATIVIZE-PATHNAME-DIRECTORY| #:|DIRECTORY-SEPARATOR-FOR-HOST|
    #:|DIRECTORIZE-PATHNAME-HOST-DEVICE| #:|TRANSLATE-PATHNAME*|
    #:|*OUTPUT-TRANSLATION-FUNCTION*|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|UIOP/PATHNAME| . #1#) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/PATHNAME"))
(|UIOP/UTILITY|::|DEFUN*|
 |UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
 (|COMMON-LISP|::|DIRECTORY|)
 "Convert the DIRECTORY component from a format usable by the underlying\n
implementation's MAKE-PATHNAME and other primitives to a CLHS-standard format\n
that is a list and not a string."
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|STRINGP| |COMMON-LISP|::|DIRECTORY|)
   `(:|ABSOLUTE| ,|COMMON-LISP|::|DIRECTORY|))
  ((|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |COMMON-LISP|::|DIRECTORY|)
    (|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |COMMON-LISP|::|DIRECTORY|)
     (|COMMON-LISP|::|MEMBER|
      (|COMMON-LISP|::|FIRST| |COMMON-LISP|::|DIRECTORY|)
      '(:|ABSOLUTE| :|RELATIVE|))))
   |COMMON-LISP|::|DIRECTORY|)
  (|COMMON-LISP|::|T|
   (|UIOP/UTILITY|::|PARAMETER-ERROR|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<~S: Unrecognized pathname directory component ~S~@:>")
    '|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
    |COMMON-LISP|::|DIRECTORY|))))
(|UIOP/UTILITY|::|DEFUN*|
 |UIOP/PATHNAME|::|DENORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
 (|UIOP/PATHNAME|::|DIRECTORY-COMPONENT|)
 "Convert the DIRECTORY-COMPONENT from a CLHS-standard format to a format usable\n
by the underlying implementation's MAKE-PATHNAME and other primitives"
 |UIOP/PATHNAME|::|DIRECTORY-COMPONENT|)
(|UIOP/UTILITY|::|DEFUN*|
 |UIOP/PATHNAME|::|MERGE-PATHNAME-DIRECTORY-COMPONENTS|
 (|UIOP/PATHNAME|::|SPECIFIED| |UIOP/PATHNAME|::|DEFAULTS|)
 "Helper for MERGE-PATHNAMES* that handles directory components"
 (|COMMON-LISP|::|LET|
  ((|COMMON-LISP|::|DIRECTORY|
    (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
     |UIOP/PATHNAME|::|SPECIFIED|)))
  (|COMMON-LISP|::|ECASE| (|COMMON-LISP|::|FIRST| |COMMON-LISP|::|DIRECTORY|)
   ((|COMMON-LISP|::|NIL|) |UIOP/PATHNAME|::|DEFAULTS|)
   (:|ABSOLUTE| |UIOP/PATHNAME|::|SPECIFIED|)
   (:|RELATIVE|
    (|COMMON-LISP|::|LET|
     ((|UIOP/PATHNAME|::|DEFDIR|
       (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
        |UIOP/PATHNAME|::|DEFAULTS|))
      (|UIOP/PATHNAME|::|RELDIR|
       (|COMMON-LISP|::|CDR| |COMMON-LISP|::|DIRECTORY|)))
     (|COMMON-LISP|::|COND|
      ((|COMMON-LISP|::|NULL| |UIOP/PATHNAME|::|DEFDIR|)
       |COMMON-LISP|::|DIRECTORY|)
      ((|COMMON-LISP|::|NOT|
        (|COMMON-LISP|::|EQ| :|BACK|
         (|COMMON-LISP|::|FIRST| |UIOP/PATHNAME|::|RELDIR|)))
       (|COMMON-LISP|::|APPEND| |UIOP/PATHNAME|::|DEFDIR|
        |UIOP/PATHNAME|::|RELDIR|))
      (|COMMON-LISP|::|T|
       (|COMMON-LISP|::|LOOP| :|WITH| |UIOP/PATHNAME|::|DEFABS|
        |COMMON-LISP|::|=| (|COMMON-LISP|::|FIRST| |UIOP/PATHNAME|::|DEFDIR|)
        :|WITH| |UIOP/PATHNAME|::|DEFREV| |COMMON-LISP|::|=|
        (|COMMON-LISP|::|REVERSE|
         (|COMMON-LISP|::|REST| |UIOP/PATHNAME|::|DEFDIR|))
        :|WHILE|
        (|COMMON-LISP|::|AND|
         (|COMMON-LISP|::|EQ| :|BACK|
          (|COMMON-LISP|::|CAR| |UIOP/PATHNAME|::|RELDIR|))
         (|COMMON-LISP|::|OR|
          (|COMMON-LISP|::|AND|
           (|COMMON-LISP|::|EQ| :|ABSOLUTE| |UIOP/PATHNAME|::|DEFABS|)
           (|COMMON-LISP|::|NULL| |UIOP/PATHNAME|::|DEFREV|))
          (|COMMON-LISP|::|STRINGP|
           (|COMMON-LISP|::|CAR| |UIOP/PATHNAME|::|DEFREV|))))
        :|DO| (|COMMON-LISP|::|POP| |UIOP/PATHNAME|::|RELDIR|)
        (|COMMON-LISP|::|POP| |UIOP/PATHNAME|::|DEFREV|) :|FINALLY|
        (|COMMON-LISP|::|RETURN|
         (|COMMON-LISP|::|CONS| |UIOP/PATHNAME|::|DEFABS|
          (|COMMON-LISP|::|APPEND|
           (|COMMON-LISP|::|REVERSE| |UIOP/PATHNAME|::|DEFREV|)
           |UIOP/PATHNAME|::|RELDIR|)))))))))))
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/PATHNAME|::|*UNSPECIFIC-PATHNAME-TYPE*|
 |COMMON-LISP|::|NIL|
 "Unspecific type component to use with the underlying implementation's MAKE-PATHNAME")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|MAKE-PATHNAME*|
 (|COMMON-LISP|::|&REST| |UIOP/PATHNAME|::|KEYS| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|DIRECTORY| |UIOP/PATHNAME|::|HOST| |UIOP/PATHNAME|::|DEVICE|
  |UIOP/PATHNAME|::|NAME| |COMMON-LISP|::|TYPE| |UIOP/PATHNAME|::|VERSION|
  |UIOP/PATHNAME|::|DEFAULTS|)
 "Takes arguments like CL:MAKE-PATHNAME in the CLHS, and\n
   tries hard to make a pathname that will actually behave as documented,\n
   despite the peculiarities of each implementation. DEPRECATED: just use MAKE-PATHNAME."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORE| |UIOP/PATHNAME|::|HOST| |UIOP/PATHNAME|::|DEVICE|
   |COMMON-LISP|::|DIRECTORY| |UIOP/PATHNAME|::|NAME| |COMMON-LISP|::|TYPE|
   |UIOP/PATHNAME|::|VERSION| |UIOP/PATHNAME|::|DEFAULTS|))
 (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|MAKE-PATHNAME|
  |UIOP/PATHNAME|::|KEYS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|
 (|UIOP/PATHNAME|::|X|)
 "Make a pathname component suitable for use in a logical-pathname"
 (|COMMON-LISP|::|TYPECASE| |UIOP/PATHNAME|::|X|
  ((|COMMON-LISP|::|EQL| :|UNSPECIFIC|) |COMMON-LISP|::|NIL|)
  (|COMMON-LISP|::|STRING|
   (|COMMON-LISP|::|STRING-UPCASE| |UIOP/PATHNAME|::|X|))
  (|COMMON-LISP|::|CONS|
   (|COMMON-LISP|::|MAPCAR| '|UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|
    |UIOP/PATHNAME|::|X|))
  (|COMMON-LISP|::|T| |UIOP/PATHNAME|::|X|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|MAKE-PATHNAME-LOGICAL|
 (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|HOST|)
 "Take a PATHNAME's directory, name, type and version components,\n
and make a new pathname with corresponding components and specified logical HOST"
 (|COMMON-LISP|::|MAKE-PATHNAME| :|HOST| |UIOP/PATHNAME|::|HOST| :|DIRECTORY|
  (|UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|
   (|COMMON-LISP|::|PATHNAME-DIRECTORY| |COMMON-LISP|::|PATHNAME|))
  :|NAME|
  (|UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|
   (|COMMON-LISP|::|PATHNAME-NAME| |COMMON-LISP|::|PATHNAME|))
  :|TYPE|
  (|UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|
   (|COMMON-LISP|::|PATHNAME-TYPE| |COMMON-LISP|::|PATHNAME|))
  :|VERSION|
  (|UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|
   (|COMMON-LISP|::|PATHNAME-VERSION| |COMMON-LISP|::|PATHNAME|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|MERGE-PATHNAMES*|
 (|UIOP/PATHNAME|::|SPECIFIED| |COMMON-LISP|::|&OPTIONAL|
  (|UIOP/PATHNAME|::|DEFAULTS| |COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|))
 "MERGE-PATHNAMES* is like MERGE-PATHNAMES except that\n
if the SPECIFIED pathname does not have an absolute directory,\n
then the HOST and DEVICE both come from the DEFAULTS, whereas\n
if the SPECIFIED pathname does have an absolute directory,\n
then the HOST and DEVICE both come from the SPECIFIED pathname.\n
This is what users want on a modern Unix or Windows operating system,\n
unlike the MERGE-PATHNAMES behavior.\n
Also, if either argument is NIL, then the other argument is returned unmodified;\n
this is unlike MERGE-PATHNAMES which always merges with a pathname,\n
by default *DEFAULT-PATHNAME-DEFAULTS*, which cannot be NIL."
 (|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|NULL| |UIOP/PATHNAME|::|SPECIFIED|)
  (|COMMON-LISP|::|RETURN-FROM| |UIOP/PATHNAME|::|MERGE-PATHNAMES*|
   |UIOP/PATHNAME|::|DEFAULTS|))
 (|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|NULL| |UIOP/PATHNAME|::|DEFAULTS|)
  (|COMMON-LISP|::|RETURN-FROM| |UIOP/PATHNAME|::|MERGE-PATHNAMES*|
   |UIOP/PATHNAME|::|SPECIFIED|))
 (|COMMON-LISP|::|LET*|
  ((|UIOP/PATHNAME|::|SPECIFIED|
    (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|SPECIFIED|))
   (|UIOP/PATHNAME|::|DEFAULTS|
    (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|DEFAULTS|))
   (|COMMON-LISP|::|DIRECTORY|
    (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
     (|COMMON-LISP|::|PATHNAME-DIRECTORY| |UIOP/PATHNAME|::|SPECIFIED|)))
   (|UIOP/PATHNAME|::|NAME|
    (|COMMON-LISP|::|OR|
     (|COMMON-LISP|::|PATHNAME-NAME| |UIOP/PATHNAME|::|SPECIFIED|)
     (|COMMON-LISP|::|PATHNAME-NAME| |UIOP/PATHNAME|::|DEFAULTS|)))
   (|COMMON-LISP|::|TYPE|
    (|COMMON-LISP|::|OR|
     (|COMMON-LISP|::|PATHNAME-TYPE| |UIOP/PATHNAME|::|SPECIFIED|)
     (|COMMON-LISP|::|PATHNAME-TYPE| |UIOP/PATHNAME|::|DEFAULTS|)))
   (|UIOP/PATHNAME|::|VERSION|
    (|COMMON-LISP|::|OR|
     (|COMMON-LISP|::|PATHNAME-VERSION| |UIOP/PATHNAME|::|SPECIFIED|)
     (|COMMON-LISP|::|PATHNAME-VERSION| |UIOP/PATHNAME|::|DEFAULTS|))))
  (|COMMON-LISP|::|LABELS|
   ((|UIOP/PATHNAME|::|UNSPECIFIC-HANDLER| (|UIOP/PATHNAME|::|P|)
     (|COMMON-LISP|::|IF|
      (|COMMON-LISP|::|TYPEP| |UIOP/PATHNAME|::|P|
       '|COMMON-LISP|::|LOGICAL-PATHNAME|)
      #'|UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|
      #'|COMMON-LISP|::|IDENTITY|)))
   (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
    (|UIOP/PATHNAME|::|HOST| |UIOP/PATHNAME|::|DEVICE|
     |COMMON-LISP|::|DIRECTORY| |UIOP/PATHNAME|::|UNSPECIFIC-HANDLER|)
    (|COMMON-LISP|::|ECASE| (|COMMON-LISP|::|FIRST| |COMMON-LISP|::|DIRECTORY|)
     ((:|ABSOLUTE|)
      (|COMMON-LISP|::|VALUES|
       (|COMMON-LISP|::|PATHNAME-HOST| |UIOP/PATHNAME|::|SPECIFIED|)
       (|COMMON-LISP|::|PATHNAME-DEVICE| |UIOP/PATHNAME|::|SPECIFIED|)
       |COMMON-LISP|::|DIRECTORY|
       (|UIOP/PATHNAME|::|UNSPECIFIC-HANDLER| |UIOP/PATHNAME|::|SPECIFIED|)))
     ((|COMMON-LISP|::|NIL| :|RELATIVE|)
      (|COMMON-LISP|::|VALUES|
       (|COMMON-LISP|::|PATHNAME-HOST| |UIOP/PATHNAME|::|DEFAULTS|)
       (|COMMON-LISP|::|PATHNAME-DEVICE| |UIOP/PATHNAME|::|DEFAULTS|)
       (|UIOP/PATHNAME|::|MERGE-PATHNAME-DIRECTORY-COMPONENTS|
        |COMMON-LISP|::|DIRECTORY|
        (|COMMON-LISP|::|PATHNAME-DIRECTORY| |UIOP/PATHNAME|::|DEFAULTS|))
       (|UIOP/PATHNAME|::|UNSPECIFIC-HANDLER| |UIOP/PATHNAME|::|DEFAULTS|))))
    (|COMMON-LISP|::|MAKE-PATHNAME| :|HOST| |UIOP/PATHNAME|::|HOST| :|DEVICE|
     |UIOP/PATHNAME|::|DEVICE| :|DIRECTORY| |COMMON-LISP|::|DIRECTORY| :|NAME|
     (|COMMON-LISP|::|FUNCALL| |UIOP/PATHNAME|::|UNSPECIFIC-HANDLER|
      |UIOP/PATHNAME|::|NAME|)
     :|TYPE|
     (|COMMON-LISP|::|FUNCALL| |UIOP/PATHNAME|::|UNSPECIFIC-HANDLER|
      |COMMON-LISP|::|TYPE|)
     :|VERSION|
     (|COMMON-LISP|::|FUNCALL| |UIOP/PATHNAME|::|UNSPECIFIC-HANDLER|
      |UIOP/PATHNAME|::|VERSION|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|LOGICAL-PATHNAME-P|
 (|UIOP/PATHNAME|::|X|) "is X a logical-pathname?"
 (|COMMON-LISP|::|TYPEP| |UIOP/PATHNAME|::|X|
  '|COMMON-LISP|::|LOGICAL-PATHNAME|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|PHYSICAL-PATHNAME-P|
 (|UIOP/PATHNAME|::|X|) "is X a pathname that is not a logical-pathname?"
 (|COMMON-LISP|::|AND| (|COMMON-LISP|::|PATHNAMEP| |UIOP/PATHNAME|::|X|)
  (|COMMON-LISP|::|NOT|
   (|UIOP/PATHNAME|::|LOGICAL-PATHNAME-P| |UIOP/PATHNAME|::|X|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME|
 (|UIOP/PATHNAME|::|X|)
 "if X is a logical pathname, use translate-logical-pathname on it."
 (|COMMON-LISP|::|LET|
  ((|UIOP/PATHNAME|::|P|
    (|COMMON-LISP|::|WHEN| |UIOP/PATHNAME|::|X|
     (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|X|))))
  (|COMMON-LISP|::|IF|
   (|UIOP/PATHNAME|::|LOGICAL-PATHNAME-P| |UIOP/PATHNAME|::|P|)
   (|COMMON-LISP|::|TRANSLATE-LOGICAL-PATHNAME| |UIOP/PATHNAME|::|P|)
   |UIOP/PATHNAME|::|P|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|NIL-PATHNAME|
 (|COMMON-LISP|::|&OPTIONAL|
  (|UIOP/PATHNAME|::|DEFAULTS| |COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|))
 "A pathname that is as neutral as possible for use as defaults\n
when merging, making or parsing pathnames"
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/PATHNAME|::|DEFAULTS|))
 (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY| |COMMON-LISP|::|NIL| :|NAME|
  |COMMON-LISP|::|NIL| :|TYPE| |COMMON-LISP|::|NIL| :|VERSION|
  |COMMON-LISP|::|NIL| :|DEVICE| (|COMMON-LISP|::|OR|) :|HOST|
  (|COMMON-LISP|::|OR|) :|DEFAULTS| |UIOP/PATHNAME|::|DEFAULTS|))
(|COMMON-LISP|::|DEFVAR| |UIOP/PATHNAME|::|*NIL-PATHNAME*|
 (|UIOP/PATHNAME|::|NIL-PATHNAME|
  (|UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME|
   (|COMMON-LISP|::|USER-HOMEDIR-PATHNAME|)))
 "A pathname that is as neutral as possible for use as defaults\n
when merging, making or parsing pathnames")
(|COMMON-LISP|::|DEFMACRO| |UIOP/PATHNAME|::|WITH-PATHNAME-DEFAULTS|
 ((|COMMON-LISP|::|&OPTIONAL| |UIOP/PATHNAME|::|DEFAULTS|)
  |COMMON-LISP|::|&BODY| |UIOP/PATHNAME|::|BODY|)
 "Execute BODY in a context where the *DEFAULT-PATHNAME-DEFAULTS* is as specified,\n
where leaving the defaults NIL or unspecified means a (NIL-PATHNAME), except\n
on ABCL, Genera and XCL, where it remains unchanged for it doubles as current-directory."
 `(|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|
     ,(|COMMON-LISP|::|OR| |UIOP/PATHNAME|::|DEFAULTS|
       '|UIOP/PATHNAME|::|*NIL-PATHNAME*|)))
   ,@|UIOP/PATHNAME|::|BODY|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|DIRECTORY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/PATHNAME|::|DENORMALIZE-PATHNAME-DIRECTORY-COMPONENT|))
(|SYSTEM|::|C-DEFUN|
 '|UIOP/PATHNAME|::|DENORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|DIRECTORY-COMPONENT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/PATHNAME|::|MERGE-PATHNAME-DIRECTORY-COMPONENTS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|MERGE-PATHNAME-DIRECTORY-COMPONENTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|SPECIFIED| |UIOP/PATHNAME|::|DEFAULTS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/PATHNAME|::|*UNSPECIFIC-PATHNAME-TYPE*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|MAKE-PATHNAME*|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|MAKE-PATHNAME*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/PATHNAME|::|KEYS| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|DIRECTORY| |UIOP/PATHNAME|::|HOST|
    |UIOP/PATHNAME|::|DEVICE| |UIOP/PATHNAME|::|NAME| |COMMON-LISP|::|TYPE|
    |UIOP/PATHNAME|::|VERSION| |UIOP/PATHNAME|::|DEFAULTS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/PATHNAME|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|MAKE-PATHNAME-LOGICAL|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|MAKE-PATHNAME-LOGICAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|HOST|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|MERGE-PATHNAMES*|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|MERGE-PATHNAMES*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|SPECIFIED| |COMMON-LISP|::|&OPTIONAL|
    (|UIOP/PATHNAME|::|DEFAULTS|
     |COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|LOGICAL-PATHNAME-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|LOGICAL-PATHNAME-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/PATHNAME|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|PHYSICAL-PATHNAME-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|PHYSICAL-PATHNAME-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/PATHNAME|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/PATHNAME|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|NIL-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|NIL-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL|
    (|UIOP/PATHNAME|::|DEFAULTS|
     |COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/PATHNAME|::|*NIL-PATHNAME*|))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/PATHNAME|::|WITH-PATHNAME-DEFAULTS|)
(|SYSTEM|::|%PUTD| '|UIOP/PATHNAME|::|WITH-PATHNAME-DEFAULTS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/PATHNAME|::|WITH-PATHNAME-DEFAULTS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Execute BODY in a context where the *DEFAULT-PATHNAME-DEFAULTS* is as specified,\n
where leaving the defaults NIL or unspecified means a (NIL-PATHNAME), except\n
on ABCL, Genera and XCL, where it remains unchanged for it doubles as current-directory."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G14933| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G14934|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 0. 1. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/PATHNAME|::|WITH-PATHNAME-DEFAULTS| #1#
          '#4=(|COMMON-LISP|::|&OPTIONAL| |UIOP/PATHNAME|::|DEFAULTS|))
         #1#))
       (|UIOP/PATHNAME|::|DEFAULTS| (|COMMON-LISP|::|CAR| #3#))
       (|UIOP/PATHNAME|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/PATHNAME|::|WITH-PATHNAME-DEFAULTS|
       `(|COMMON-LISP|::|LET|
         ((|COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|
           ,(|COMMON-LISP|::|OR| |UIOP/PATHNAME|::|DEFAULTS|
             '|UIOP/PATHNAME|::|*NIL-PATHNAME*|)))
         ,@|UIOP/PATHNAME|::|BODY|))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/PATHNAME|::|BODY|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|PATHNAME-EQUAL|
 (|UIOP/PATHNAME|::|P1| |UIOP/PATHNAME|::|P2|)
 "Are the two pathnames P1 and P2 reasonably equal in the paths they denote?"
 (|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|STRINGP| |UIOP/PATHNAME|::|P1|)
  (|COMMON-LISP|::|SETF| |UIOP/PATHNAME|::|P1|
   (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|P1|)))
 (|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|STRINGP| |UIOP/PATHNAME|::|P2|)
  (|COMMON-LISP|::|SETF| |UIOP/PATHNAME|::|P2|
   (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|P2|)))
 (|COMMON-LISP|::|FLET|
  ((|UIOP/PATHNAME|::|NORMALIZE-COMPONENT| (|UIOP/PATHNAME|::|X|)
    (|COMMON-LISP|::|UNLESS|
     (|COMMON-LISP|::|MEMBER| |UIOP/PATHNAME|::|X|
      '(|COMMON-LISP|::|NIL| :|UNSPECIFIC| :|NEWEST| (:|RELATIVE|)) :|TEST|
      '|COMMON-LISP|::|EQUAL|)
     |UIOP/PATHNAME|::|X|)))
  (|COMMON-LISP|::|MACROLET|
   ((|UIOP/PATHNAME|::|=?|
     (|COMMON-LISP|::|&REST| |UIOP/PATHNAME|::|ACCESSORS|)
     (|COMMON-LISP|::|FLET|
      ((|UIOP/PATHNAME|::|FROB| (|UIOP/PATHNAME|::|X|)
        (|COMMON-LISP|::|REDUCE| '|COMMON-LISP|::|LIST|
         (|COMMON-LISP|::|CONS| '|UIOP/PATHNAME|::|NORMALIZE-COMPONENT|
          |UIOP/PATHNAME|::|ACCESSORS|)
         :|INITIAL-VALUE| |UIOP/PATHNAME|::|X| :|FROM-END|
         |COMMON-LISP|::|T|)))
      `(|COMMON-LISP|::|EQUAL|
        ,(|UIOP/PATHNAME|::|FROB| '|UIOP/PATHNAME|::|P1|)
        ,(|UIOP/PATHNAME|::|FROB| '|UIOP/PATHNAME|::|P2|)))))
   (|COMMON-LISP|::|OR|
    (|COMMON-LISP|::|AND| (|COMMON-LISP|::|NULL| |UIOP/PATHNAME|::|P1|)
     (|COMMON-LISP|::|NULL| |UIOP/PATHNAME|::|P2|))
    (|COMMON-LISP|::|AND| (|COMMON-LISP|::|PATHNAMEP| |UIOP/PATHNAME|::|P1|)
     (|COMMON-LISP|::|PATHNAMEP| |UIOP/PATHNAME|::|P2|)
     (|COMMON-LISP|::|AND|
      (|UIOP/PATHNAME|::|=?| |COMMON-LISP|::|PATHNAME-HOST|)
      (|UIOP/PATHNAME|::|=?| |COMMON-LISP|::|PATHNAME-DEVICE|)
      (|UIOP/PATHNAME|::|=?|
       |UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
       |COMMON-LISP|::|PATHNAME-DIRECTORY|)
      (|UIOP/PATHNAME|::|=?| |COMMON-LISP|::|PATHNAME-NAME|)
      (|UIOP/PATHNAME|::|=?| |COMMON-LISP|::|PATHNAME-TYPE|)
      (|UIOP/PATHNAME|::|=?| |COMMON-LISP|::|PATHNAME-VERSION|)))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P|
 (|UIOP/PATHNAME|::|PATHSPEC|)
 "If PATHSPEC is a pathname or namestring object that parses as a pathname\n
possessing an :ABSOLUTE directory component, return the (parsed) pathname.\n
Otherwise return NIL"
 (|COMMON-LISP|::|AND| |UIOP/PATHNAME|::|PATHSPEC|
  (|COMMON-LISP|::|TYPEP| |UIOP/PATHNAME|::|PATHSPEC|
   '(|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|PATHNAME|
     |COMMON-LISP|::|STRING|))
  (|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|PATHNAME|
     (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|PATHSPEC|)))
   (|COMMON-LISP|::|AND|
    (|COMMON-LISP|::|EQ| :|ABSOLUTE|
     (|COMMON-LISP|::|CAR|
      (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
       (|COMMON-LISP|::|PATHNAME-DIRECTORY| |COMMON-LISP|::|PATHNAME|))))
    |COMMON-LISP|::|PATHNAME|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|RELATIVE-PATHNAME-P|
 (|UIOP/PATHNAME|::|PATHSPEC|)
 "If PATHSPEC is a pathname or namestring object that parses as a pathname\n
possessing a :RELATIVE or NIL directory component, return the (parsed) pathname.\n
Otherwise return NIL"
 (|COMMON-LISP|::|AND| |UIOP/PATHNAME|::|PATHSPEC|
  (|COMMON-LISP|::|TYPEP| |UIOP/PATHNAME|::|PATHSPEC|
   '(|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|PATHNAME|
     |COMMON-LISP|::|STRING|))
  (|COMMON-LISP|::|LET*|
   ((|COMMON-LISP|::|PATHNAME|
     (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|PATHSPEC|))
    (|COMMON-LISP|::|DIRECTORY|
     (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
      (|COMMON-LISP|::|PATHNAME-DIRECTORY| |COMMON-LISP|::|PATHNAME|))))
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |COMMON-LISP|::|DIRECTORY|)
     (|COMMON-LISP|::|EQ| :|RELATIVE|
      (|COMMON-LISP|::|CAR| |COMMON-LISP|::|DIRECTORY|)))
    |COMMON-LISP|::|PATHNAME|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|HIDDEN-PATHNAME-P|
 (|COMMON-LISP|::|PATHNAME|)
 "Return a boolean that is true if the pathname is hidden as per Unix style,\n
i.e. its name starts with a dot."
 (|COMMON-LISP|::|AND| |COMMON-LISP|::|PATHNAME|
  (|COMMON-LISP|::|EQUAL|
   (|UIOP/UTILITY|::|FIRST-CHAR|
    (|COMMON-LISP|::|PATHNAME-NAME| |COMMON-LISP|::|PATHNAME|))
   #\.)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|FILE-PATHNAME-P|
 (|COMMON-LISP|::|PATHNAME|)
 "Does PATHNAME represent a file, i.e. has a non-null NAME component?\n\n
Accepts NIL, a string (converted through PARSE-NAMESTRING) or a PATHNAME.\n\n
Note that this does _not_ check to see that PATHNAME points to an\n
actually-existing file.\n\n
Returns the (parsed) PATHNAME when true"
 (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PATHNAME|
  (|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|PATHNAME|
     (|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|PATHNAME|)))
   (|COMMON-LISP|::|UNLESS|
    (|COMMON-LISP|::|AND|
     (|COMMON-LISP|::|MEMBER|
      (|COMMON-LISP|::|PATHNAME-NAME| |COMMON-LISP|::|PATHNAME|)
      '(|COMMON-LISP|::|NIL| :|UNSPECIFIC| "") :|TEST| '|COMMON-LISP|::|EQUAL|)
     (|COMMON-LISP|::|MEMBER|
      (|COMMON-LISP|::|PATHNAME-TYPE| |COMMON-LISP|::|PATHNAME|)
      '(|COMMON-LISP|::|NIL| :|UNSPECIFIC| "") :|TEST|
      '|COMMON-LISP|::|EQUAL|))
    |COMMON-LISP|::|PATHNAME|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|PATHNAME-EQUAL|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|PATHNAME-EQUAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|P1| |UIOP/PATHNAME|::|P2|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/PATHNAME|::|PATHSPEC|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|RELATIVE-PATHNAME-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|RELATIVE-PATHNAME-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/PATHNAME|::|PATHSPEC|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|HIDDEN-PATHNAME-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|HIDDEN-PATHNAME-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|FILE-PATHNAME-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|FILE-PATHNAME-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME|
 (|COMMON-LISP|::|PATHNAME|)
 "Returns a new pathname with same HOST, DEVICE, DIRECTORY as PATHNAME,\n
and NIL NAME, TYPE and VERSION components"
 (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PATHNAME|
  (|COMMON-LISP|::|MAKE-PATHNAME| :|NAME| |COMMON-LISP|::|NIL| :|TYPE|
   |COMMON-LISP|::|NIL| :|VERSION| |COMMON-LISP|::|NIL| :|DEFAULTS|
   |COMMON-LISP|::|PATHNAME|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|PATHNAME-PARENT-DIRECTORY-PATHNAME|
 (|COMMON-LISP|::|PATHNAME|)
 "Returns a new pathname that corresponds to the parent of the current pathname's directory,\n
i.e. removing one level of depth in the DIRECTORY component. e.g. if pathname is\n
Unix pathname /foo/bar/baz/file.type then return /foo/bar/"
 (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PATHNAME|
  (|COMMON-LISP|::|MAKE-PATHNAME| :|NAME| |COMMON-LISP|::|NIL| :|TYPE|
   |COMMON-LISP|::|NIL| :|VERSION| |COMMON-LISP|::|NIL| :|DIRECTORY|
   (|UIOP/PATHNAME|::|MERGE-PATHNAME-DIRECTORY-COMPONENTS|
    '(:|RELATIVE| :|BACK|)
    (|COMMON-LISP|::|PATHNAME-DIRECTORY| |COMMON-LISP|::|PATHNAME|))
   :|DEFAULTS| |COMMON-LISP|::|PATHNAME|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P|
 (|COMMON-LISP|::|PATHNAME|)
 "Does PATHNAME represent a directory?\n\n
A directory-pathname is a pathname _without_ a filename. The three\n
ways that the filename components can be missing are for it to be NIL,\n
:UNSPECIFIC or the empty string.\n\n
Note that this does _not_ check to see that PATHNAME points to an\n
actually-existing directory."
 (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PATHNAME|
  (|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|PATHNAME|
     (|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|PATHNAME|)))
   (|COMMON-LISP|::|FLET|
    ((|UIOP/PATHNAME|::|CHECK-ONE| (|UIOP/PATHNAME|::|X|)
      (|COMMON-LISP|::|MEMBER| |UIOP/PATHNAME|::|X|
       '(|COMMON-LISP|::|NIL| :|UNSPECIFIC|) :|TEST| '|COMMON-LISP|::|EQUAL|)))
    (|COMMON-LISP|::|AND|
     (|COMMON-LISP|::|NOT|
      (|COMMON-LISP|::|WILD-PATHNAME-P| |COMMON-LISP|::|PATHNAME|))
     (|UIOP/PATHNAME|::|CHECK-ONE|
      (|COMMON-LISP|::|PATHNAME-NAME| |COMMON-LISP|::|PATHNAME|))
     (|UIOP/PATHNAME|::|CHECK-ONE|
      (|COMMON-LISP|::|PATHNAME-TYPE| |COMMON-LISP|::|PATHNAME|))
     |COMMON-LISP|::|T|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME|
 (|UIOP/PATHNAME|::|PATHSPEC| |COMMON-LISP|::|&OPTIONAL|
  (|UIOP/PATHNAME|::|ON-ERROR| '|COMMON-LISP|::|ERROR|))
 "Converts the non-wild pathname designator PATHSPEC to directory form."
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|STRINGP| |UIOP/PATHNAME|::|PATHSPEC|)
   (|UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME|
    (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|PATHSPEC|)))
  ((|COMMON-LISP|::|NOT|
    (|COMMON-LISP|::|PATHNAMEP| |UIOP/PATHNAME|::|PATHSPEC|))
   (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/PATHNAME|::|ON-ERROR|
    (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<Invalid pathname designator ~S~@:>")
    |UIOP/PATHNAME|::|PATHSPEC|))
  ((|COMMON-LISP|::|WILD-PATHNAME-P| |UIOP/PATHNAME|::|PATHSPEC|)
   (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/PATHNAME|::|ON-ERROR|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<Can't reliably convert wild pathname ~3i~_~S~@:>")
    |UIOP/PATHNAME|::|PATHSPEC|))
  ((|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P| |UIOP/PATHNAME|::|PATHSPEC|)
   |UIOP/PATHNAME|::|PATHSPEC|)
  (|COMMON-LISP|::|T|
   (|COMMON-LISP|::|HANDLER-CASE|
    (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY|
     (|COMMON-LISP|::|APPEND|
      (|COMMON-LISP|::|OR|
       (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
        (|COMMON-LISP|::|PATHNAME-DIRECTORY| |UIOP/PATHNAME|::|PATHSPEC|))
       (|COMMON-LISP|::|LIST| :|RELATIVE|))
      (|COMMON-LISP|::|LIST|
       (|COMMON-LISP|::|FILE-NAMESTRING| |UIOP/PATHNAME|::|PATHSPEC|)))
     :|NAME| |COMMON-LISP|::|NIL| :|TYPE| |COMMON-LISP|::|NIL| :|VERSION|
     |COMMON-LISP|::|NIL| :|DEFAULTS| |UIOP/PATHNAME|::|PATHSPEC|)
    (|COMMON-LISP|::|ERROR| (|UIOP/PATHNAME|::|C|)
     (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/PATHNAME|::|ON-ERROR|
      (|UIOP/COMMON-LISP|::|COMPATFMT|
       "~@<error while trying to create a directory pathname for ~S: ~A~@:>")
      |UIOP/PATHNAME|::|PATHSPEC| |UIOP/PATHNAME|::|C|))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/PATHNAME|::|PATHNAME-PARENT-DIRECTORY-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|PATHNAME-PARENT-DIRECTORY-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|PATHSPEC| |COMMON-LISP|::|&OPTIONAL|
    (|UIOP/PATHNAME|::|ON-ERROR| '|COMMON-LISP|::|ERROR|))))
(|COMMON-LISP|::|DECLAIM|
 (|COMMON-LISP|::|FTYPE| |COMMON-LISP|::|FUNCTION|
  |UIOP/PATHNAME|::|ENSURE-PATHNAME|))
(|UIOP/UTILITY|::|DEFUN*|
 |UIOP/PATHNAME|::|SPLIT-UNIX-NAMESTRING-DIRECTORY-COMPONENTS|
 (|UIOP/PATHNAME|::|UNIX-NAMESTRING| |COMMON-LISP|::|&KEY|
  |UIOP/PATHNAME|::|ENSURE-DIRECTORY| |UIOP/PATHNAME|::|DOT-DOT|)
 "Splits the path string UNIX-NAMESTRING, returning four values:\n
A flag that is either :absolute or :relative, indicating\n
   how the rest of the values are to be interpreted.\n
A directory path --- a list of strings and keywords, suitable for\n
   use with MAKE-PATHNAME when prepended with the flag value.\n
   Directory components with an empty name or the name . are removed.\n
   Any directory named .. is read as DOT-DOT, or :BACK if it's NIL (not :UP).\n
A last-component, either a file-namestring including type extension,\n
   or NIL in the case of a directory pathname.\n
A flag that is true iff the unix-style-pathname was just\n
   a file-namestring without / path specification.\n
ENSURE-DIRECTORY forces the namestring to be interpreted as a directory pathname:\n
the third return value will be NIL, and final component of the namestring\n
will be treated as part of the directory path.\n\n
An empty string is thus read as meaning a pathname object with all fields nil.\n\n
Note that colon characters #: will NOT be interpreted as host specification.\n
Absolute pathnames are only appropriate on Unix-style systems.\n\n
The intention of this function is to support structured component names,\n
e.g., (:file \"foo/bar\"), which will be unpacked to relative pathnames."
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PATHNAME|::|UNIX-NAMESTRING|
  |COMMON-LISP|::|STRING|)
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PATHNAME|::|DOT-DOT|
  (|COMMON-LISP|::|MEMBER| |COMMON-LISP|::|NIL| :|BACK| :|UP|))
 (|COMMON-LISP|::|IF|
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|NOT|
    (|COMMON-LISP|::|FIND| #\/ |UIOP/PATHNAME|::|UNIX-NAMESTRING|))
   (|COMMON-LISP|::|NOT| |UIOP/PATHNAME|::|ENSURE-DIRECTORY|)
   (|COMMON-LISP|::|PLUSP|
    (|COMMON-LISP|::|LENGTH| |UIOP/PATHNAME|::|UNIX-NAMESTRING|)))
  (|COMMON-LISP|::|VALUES| :|RELATIVE| |COMMON-LISP|::|NIL|
   |UIOP/PATHNAME|::|UNIX-NAMESTRING| |COMMON-LISP|::|T|)
  (|COMMON-LISP|::|LET*|
   ((|UIOP/PATHNAME|::|COMPONENTS|
     (|UIOP/UTILITY|::|SPLIT-STRING| |UIOP/PATHNAME|::|UNIX-NAMESTRING|
      :|SEPARATOR| "/"))
    (|UIOP/PATHNAME|::|LAST-COMP|
     (|COMMON-LISP|::|CAR|
      (|COMMON-LISP|::|LAST| |UIOP/PATHNAME|::|COMPONENTS|))))
   (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
    (|UIOP/PATHNAME|::|RELATIVE| |UIOP/PATHNAME|::|COMPONENTS|)
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|EQUAL|
      (|COMMON-LISP|::|FIRST| |UIOP/PATHNAME|::|COMPONENTS|) "")
     (|COMMON-LISP|::|IF|
      (|COMMON-LISP|::|EQUAL|
       (|UIOP/UTILITY|::|FIRST-CHAR| |UIOP/PATHNAME|::|UNIX-NAMESTRING|) #\/)
      (|COMMON-LISP|::|VALUES| :|ABSOLUTE|
       (|COMMON-LISP|::|CDR| |UIOP/PATHNAME|::|COMPONENTS|))
      (|COMMON-LISP|::|VALUES| :|RELATIVE| |COMMON-LISP|::|NIL|))
     (|COMMON-LISP|::|VALUES| :|RELATIVE| |UIOP/PATHNAME|::|COMPONENTS|))
    (|COMMON-LISP|::|SETF| |UIOP/PATHNAME|::|COMPONENTS|
     (|COMMON-LISP|::|REMOVE-IF|
      #'(|COMMON-LISP|::|LAMBDA| (|UIOP/PATHNAME|::|X|)
         (|COMMON-LISP|::|MEMBER| |UIOP/PATHNAME|::|X| '("" ".") :|TEST|
          #'|COMMON-LISP|::|EQUAL|))
      |UIOP/PATHNAME|::|COMPONENTS|))
    (|COMMON-LISP|::|SETF| |UIOP/PATHNAME|::|COMPONENTS|
     (|COMMON-LISP|::|SUBSTITUTE|
      (|COMMON-LISP|::|OR| |UIOP/PATHNAME|::|DOT-DOT| :|BACK|) ".."
      |UIOP/PATHNAME|::|COMPONENTS| :|TEST| #'|COMMON-LISP|::|EQUAL|))
    (|COMMON-LISP|::|COND|
     ((|COMMON-LISP|::|EQUAL| |UIOP/PATHNAME|::|LAST-COMP| "")
      (|COMMON-LISP|::|VALUES| |UIOP/PATHNAME|::|RELATIVE|
       |UIOP/PATHNAME|::|COMPONENTS| |COMMON-LISP|::|NIL|
       |COMMON-LISP|::|NIL|))
     (|UIOP/PATHNAME|::|ENSURE-DIRECTORY|
      (|COMMON-LISP|::|VALUES| |UIOP/PATHNAME|::|RELATIVE|
       |UIOP/PATHNAME|::|COMPONENTS| |COMMON-LISP|::|NIL|
       |COMMON-LISP|::|NIL|))
     (|COMMON-LISP|::|T|
      (|COMMON-LISP|::|VALUES| |UIOP/PATHNAME|::|RELATIVE|
       (|COMMON-LISP|::|BUTLAST| |UIOP/PATHNAME|::|COMPONENTS|)
       |UIOP/PATHNAME|::|LAST-COMP| |COMMON-LISP|::|NIL|)))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|SPLIT-NAME-TYPE|
 (|UIOP/PATHNAME|::|FILENAME|)
 "Split a filename into two values NAME and TYPE that are returned.\n
We assume filename has no directory component.\n
The last . if any separates name and type from from type,\n
except that if there is only one . and it is in first position,\n
the whole filename is the NAME with an empty type.\n
NAME is always a string.\n
For an empty type, *UNSPECIFIC-PATHNAME-TYPE* is returned."
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/PATHNAME|::|FILENAME|
  |COMMON-LISP|::|STRING|)
 (|COMMON-LISP|::|ASSERT|
  (|COMMON-LISP|::|PLUSP|
   (|COMMON-LISP|::|LENGTH| |UIOP/PATHNAME|::|FILENAME|)))
 (|COMMON-LISP|::|DESTRUCTURING-BIND|
  (|UIOP/PATHNAME|::|NAME| |COMMON-LISP|::|&OPTIONAL|
   (|COMMON-LISP|::|TYPE| |UIOP/PATHNAME|::|*UNSPECIFIC-PATHNAME-TYPE*|))
  (|UIOP/UTILITY|::|SPLIT-STRING| |UIOP/PATHNAME|::|FILENAME| :|MAX| 2.
   :|SEPARATOR| ".")
  (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQUAL| |UIOP/PATHNAME|::|NAME| "")
   (|COMMON-LISP|::|VALUES| |UIOP/PATHNAME|::|FILENAME|
    |UIOP/PATHNAME|::|*UNSPECIFIC-PATHNAME-TYPE*|)
   (|COMMON-LISP|::|VALUES| |UIOP/PATHNAME|::|NAME| |COMMON-LISP|::|TYPE|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING|
 (|UIOP/PATHNAME|::|NAME| |COMMON-LISP|::|&REST| |UIOP/PATHNAME|::|KEYS|
  |COMMON-LISP|::|&KEY| |COMMON-LISP|::|TYPE| |UIOP/PATHNAME|::|DEFAULTS|
  |UIOP/PATHNAME|::|DOT-DOT| |UIOP/PATHNAME|::|ENSURE-DIRECTORY|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Coerce NAME into a PATHNAME using standard Unix syntax.\n\n
Unix syntax is used whether or not the underlying system is Unix;\n
on such non-Unix systems it is reliably usable only for relative pathnames.\n
This function is especially useful to manipulate relative pathnames portably,\n
where it is of crucial to possess a portable pathname syntax independent of the underlying OS.\n
This is what PARSE-UNIX-NAMESTRING provides, and why we use it in ASDF.\n\n
When given a PATHNAME object, just return it untouched.\n
When given NIL, just return NIL.\n
When given a non-null SYMBOL, first downcase its name and treat it as a string.\n
When given a STRING, portably decompose it into a pathname as below.\n\n
#\\/ separates directory components.\n\n
The last #\\/-separated substring is interpreted as follows:\n
1- If TYPE is :DIRECTORY or ENSURE-DIRECTORY is true,\n
 the string is made the last directory component, and NAME and TYPE are NIL.\n
 if the string is empty, it's the empty pathname with all slots NIL.\n
2- If TYPE is NIL, the substring is a file-namestring, and its NAME and TYPE\n
 are separated by SPLIT-NAME-TYPE.\n
3- If TYPE is a string, it is the given TYPE, and the whole string is the NAME.\n\n
Directory components with an empty name or the name \".\" are removed.\n
Any directory named \"..\" is read as DOT-DOT,\n
which must be one of :BACK or :UP and defaults to :BACK.\n\n
HOST, DEVICE and VERSION components are taken from DEFAULTS,\n
which itself defaults to *NIL-PATHNAME*, also used if DEFAULTS is NIL.\n
No host or device can be specified in the string itself,\n
which makes it unsuitable for absolute pathnames outside Unix.\n\n
For relative pathnames, these components (and hence the defaults) won't matter\n
if you use MERGE-PATHNAMES* but will matter if you use MERGE-PATHNAMES,\n
which is an important reason to always use MERGE-PATHNAMES*.\n\n
Arbitrary keys are accepted, and the parse result is passed to ENSURE-PATHNAME\n
with those keys, removing TYPE DEFAULTS and DOT-DOT.\n
When you're manipulating pathnames that are supposed to make sense portably\n
even though the OS may not be Unixish, we recommend you use :WANT-RELATIVE T\n
to throw an error if the pathname is absolute"
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|TYPE|
   (|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|STRING|
    (|COMMON-LISP|::|EQL| :|DIRECTORY|)))
  (|COMMON-LISP|::|WHEN| |UIOP/PATHNAME|::|ENSURE-DIRECTORY|
   (|COMMON-LISP|::|SETF| |COMMON-LISP|::|TYPE| :|DIRECTORY|))
  (|COMMON-LISP|::|ETYPECASE| |UIOP/PATHNAME|::|NAME|
   ((|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|PATHNAME|)
    (|COMMON-LISP|::|RETURN| |UIOP/PATHNAME|::|NAME|))
   (|COMMON-LISP|::|SYMBOL|
    (|COMMON-LISP|::|SETF| |UIOP/PATHNAME|::|NAME|
     (|COMMON-LISP|::|STRING-DOWNCASE| |UIOP/PATHNAME|::|NAME|)))
   (|COMMON-LISP|::|STRING|))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|UIOP/PATHNAME|::|RELATIVE| |UIOP/PATHNAME|::|PATH|
    |UIOP/PATHNAME|::|FILENAME| |UIOP/PATHNAME|::|FILE-ONLY|)
   (|UIOP/PATHNAME|::|SPLIT-UNIX-NAMESTRING-DIRECTORY-COMPONENTS|
    |UIOP/PATHNAME|::|NAME| :|DOT-DOT| |UIOP/PATHNAME|::|DOT-DOT|
    :|ENSURE-DIRECTORY|
    (|COMMON-LISP|::|EQ| |COMMON-LISP|::|TYPE| :|DIRECTORY|))
   (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
    (|UIOP/PATHNAME|::|NAME| |COMMON-LISP|::|TYPE|)
    (|COMMON-LISP|::|COND|
     ((|COMMON-LISP|::|OR|
       (|COMMON-LISP|::|EQ| |COMMON-LISP|::|TYPE| :|DIRECTORY|)
       (|COMMON-LISP|::|NULL| |UIOP/PATHNAME|::|FILENAME|))
      (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))
     (|COMMON-LISP|::|TYPE|
      (|COMMON-LISP|::|VALUES| |UIOP/PATHNAME|::|FILENAME|
       |COMMON-LISP|::|TYPE|))
     (|COMMON-LISP|::|T|
      (|UIOP/PATHNAME|::|SPLIT-NAME-TYPE| |UIOP/PATHNAME|::|FILENAME|)))
    (|COMMON-LISP|::|APPLY| '|UIOP/PATHNAME|::|ENSURE-PATHNAME|
     (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY|
      (|COMMON-LISP|::|UNLESS| |UIOP/PATHNAME|::|FILE-ONLY|
       (|COMMON-LISP|::|CONS| |UIOP/PATHNAME|::|RELATIVE|
        |UIOP/PATHNAME|::|PATH|))
      :|NAME| |UIOP/PATHNAME|::|NAME| :|TYPE| |COMMON-LISP|::|TYPE| :|DEFAULTS|
      (|COMMON-LISP|::|OR| |UIOP/PATHNAME|::|DEFAULTS|
       |UIOP/PATHNAME|::|*NIL-PATHNAME*|))
     (|UIOP/UTILITY|::|REMOVE-PLIST-KEYS| '(:|TYPE| :|DOT-DOT| :|DEFAULTS|)
      |UIOP/PATHNAME|::|KEYS|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|UNIX-NAMESTRING|
 (|COMMON-LISP|::|PATHNAME|)
 "Given a non-wild PATHNAME, return a Unix-style namestring for it.\n
If the PATHNAME is NIL or a STRING, return it unchanged.\n\n
This only considers the DIRECTORY, NAME and TYPE components of the pathname.\n
This is a portable solution for representing relative pathnames,\n
But unless you are running on a Unix system, it is not a general solution\n
to representing native pathnames.\n\n
An error is signaled if the argument is not NULL, a STRING or a PATHNAME,\n
or if it is a PATHNAME but some of its components are not recognized."
 (|COMMON-LISP|::|ETYPECASE| |COMMON-LISP|::|PATHNAME|
  ((|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|STRING|)
   |COMMON-LISP|::|PATHNAME|)
  (|COMMON-LISP|::|PATHNAME|
   (|COMMON-LISP|::|WITH-OUTPUT-TO-STRING| (|UIOP/PATHNAME|::|S|)
    (|COMMON-LISP|::|FLET|
     ((|UIOP/PATHNAME|::|ERR| |COMMON-LISP|::|NIL|
       (|UIOP/UTILITY|::|PARAMETER-ERROR| "~S: invalid unix-namestring ~S"
        '|UIOP/PATHNAME|::|UNIX-NAMESTRING| |COMMON-LISP|::|PATHNAME|)))
     (|COMMON-LISP|::|LET*|
      ((|UIOP/PATHNAME|::|DIR|
        (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
         (|COMMON-LISP|::|PATHNAME-DIRECTORY| |COMMON-LISP|::|PATHNAME|)))
       (|UIOP/PATHNAME|::|NAME|
        (|COMMON-LISP|::|PATHNAME-NAME| |COMMON-LISP|::|PATHNAME|))
       (|UIOP/PATHNAME|::|NAME|
        (|COMMON-LISP|::|AND|
         (|COMMON-LISP|::|NOT|
          (|COMMON-LISP|::|EQ| |UIOP/PATHNAME|::|NAME| :|UNSPECIFIC|))
         |UIOP/PATHNAME|::|NAME|))
       (|COMMON-LISP|::|TYPE|
        (|COMMON-LISP|::|PATHNAME-TYPE| |COMMON-LISP|::|PATHNAME|))
       (|COMMON-LISP|::|TYPE|
        (|COMMON-LISP|::|AND|
         (|COMMON-LISP|::|NOT|
          (|COMMON-LISP|::|EQ| |COMMON-LISP|::|TYPE| :|UNSPECIFIC|))
         |COMMON-LISP|::|TYPE|)))
      (|COMMON-LISP|::|COND|
       ((|COMMON-LISP|::|MEMBER| |UIOP/PATHNAME|::|DIR|
         '(|COMMON-LISP|::|NIL| :|UNSPECIFIC|)))
       ((|COMMON-LISP|::|EQ| |UIOP/PATHNAME|::|DIR| '(:|RELATIVE|))
        (|COMMON-LISP|::|PRINC| "./" |UIOP/PATHNAME|::|S|))
       ((|COMMON-LISP|::|CONSP| |UIOP/PATHNAME|::|DIR|)
        (|COMMON-LISP|::|DESTRUCTURING-BIND|
         (|UIOP/PATHNAME|::|RELABS| |COMMON-LISP|::|&REST|
          |UIOP/PATHNAME|::|DIRS|)
         |UIOP/PATHNAME|::|DIR|
         (|COMMON-LISP|::|OR|
          (|COMMON-LISP|::|MEMBER| |UIOP/PATHNAME|::|RELABS|
           '(:|RELATIVE| :|ABSOLUTE|))
          (|UIOP/PATHNAME|::|ERR|))
         (|COMMON-LISP|::|WHEN|
          (|COMMON-LISP|::|EQ| |UIOP/PATHNAME|::|RELABS| :|ABSOLUTE|)
          (|COMMON-LISP|::|PRINC| #\/ |UIOP/PATHNAME|::|S|))
         (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/PATHNAME|::|X| :|IN|
          |UIOP/PATHNAME|::|DIRS| :|DO|
          (|COMMON-LISP|::|COND|
           ((|COMMON-LISP|::|MEMBER| |UIOP/PATHNAME|::|X| '(:|BACK| :|UP|))
            (|COMMON-LISP|::|PRINC| "../" |UIOP/PATHNAME|::|S|))
           ((|COMMON-LISP|::|EQUAL| |UIOP/PATHNAME|::|X| "")
            (|UIOP/PATHNAME|::|ERR|))
           ((|COMMON-LISP|::|STRINGP| |UIOP/PATHNAME|::|X|)
            (|COMMON-LISP|::|FORMAT| |UIOP/PATHNAME|::|S| "~A/"
             |UIOP/PATHNAME|::|X|))
           (|COMMON-LISP|::|T| (|UIOP/PATHNAME|::|ERR|))))))
       (|COMMON-LISP|::|T| (|UIOP/PATHNAME|::|ERR|)))
      (|COMMON-LISP|::|COND|
       (|UIOP/PATHNAME|::|NAME|
        (|COMMON-LISP|::|UNLESS|
         (|COMMON-LISP|::|AND|
          (|COMMON-LISP|::|STRINGP| |UIOP/PATHNAME|::|NAME|)
          (|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |COMMON-LISP|::|TYPE|)
           (|COMMON-LISP|::|STRINGP| |COMMON-LISP|::|TYPE|)))
         (|UIOP/PATHNAME|::|ERR|))
        (|COMMON-LISP|::|FORMAT| |UIOP/PATHNAME|::|S| "~A~@[.~A~]"
         |UIOP/PATHNAME|::|NAME| |COMMON-LISP|::|TYPE|))
       (|COMMON-LISP|::|T|
        (|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |COMMON-LISP|::|TYPE|)
         (|UIOP/PATHNAME|::|ERR|))))))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|FTYPE| |COMMON-LISP|::|FUNCTION|
   |UIOP/PATHNAME|::|ENSURE-PATHNAME|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/PATHNAME|::|SPLIT-UNIX-NAMESTRING-DIRECTORY-COMPONENTS|))
(|SYSTEM|::|C-DEFUN|
 '|UIOP/PATHNAME|::|SPLIT-UNIX-NAMESTRING-DIRECTORY-COMPONENTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|UNIX-NAMESTRING| |COMMON-LISP|::|&KEY|
    |UIOP/PATHNAME|::|ENSURE-DIRECTORY| |UIOP/PATHNAME|::|DOT-DOT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|SPLIT-NAME-TYPE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|SPLIT-NAME-TYPE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/PATHNAME|::|FILENAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|NAME| |COMMON-LISP|::|&REST| |UIOP/PATHNAME|::|KEYS|
    |COMMON-LISP|::|&KEY| |COMMON-LISP|::|TYPE| |UIOP/PATHNAME|::|DEFAULTS|
    |UIOP/PATHNAME|::|DOT-DOT| |UIOP/PATHNAME|::|ENSURE-DIRECTORY|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|UNIX-NAMESTRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|UNIX-NAMESTRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|SUBPATHNAME|
 (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|SUBPATH| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|TYPE|)
 "This function takes a PATHNAME and a SUBPATH and a TYPE.\n
If SUBPATH is already a PATHNAME object (not namestring),\n
and is an absolute pathname at that, it is returned unchanged;\n
otherwise, SUBPATH is turned into a relative pathname with given TYPE\n
as per PARSE-UNIX-NAMESTRING with :WANT-RELATIVE T :TYPE TYPE,\n
then it is merged with the PATHNAME-DIRECTORY-PATHNAME of PATHNAME."
 (|COMMON-LISP|::|OR|
  (|COMMON-LISP|::|AND| (|COMMON-LISP|::|PATHNAMEP| |UIOP/PATHNAME|::|SUBPATH|)
   (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/PATHNAME|::|SUBPATH|))
  (|UIOP/PATHNAME|::|MERGE-PATHNAMES*|
   (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING| |UIOP/PATHNAME|::|SUBPATH| :|TYPE|
    |COMMON-LISP|::|TYPE| :|WANT-RELATIVE| |COMMON-LISP|::|T|)
   (|UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME|
    |COMMON-LISP|::|PATHNAME|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|SUBPATHNAME*|
 (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|SUBPATH| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|TYPE|)
 "returns NIL if the base pathname is NIL, otherwise like SUBPATHNAME."
 (|COMMON-LISP|::|AND| |COMMON-LISP|::|PATHNAME|
  (|UIOP/PATHNAME|::|SUBPATHNAME|
   (|UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME| |COMMON-LISP|::|PATHNAME|)
   |UIOP/PATHNAME|::|SUBPATH| :|TYPE| |COMMON-LISP|::|TYPE|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|PATHNAME-ROOT|
 (|COMMON-LISP|::|PATHNAME|)
 "return the root directory for the host and device of given PATHNAME"
 (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY| '(:|ABSOLUTE|) :|NAME|
  |COMMON-LISP|::|NIL| :|TYPE| |COMMON-LISP|::|NIL| :|VERSION|
  |COMMON-LISP|::|NIL| :|DEFAULTS| |COMMON-LISP|::|PATHNAME|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|PATHNAME-HOST-PATHNAME|
 (|COMMON-LISP|::|PATHNAME|)
 "return a pathname with the same host as given PATHNAME, and all other fields NIL"
 (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY| |COMMON-LISP|::|NIL| :|NAME|
  |COMMON-LISP|::|NIL| :|TYPE| |COMMON-LISP|::|NIL| :|VERSION|
  |COMMON-LISP|::|NIL| :|DEVICE| |COMMON-LISP|::|NIL| :|DEFAULTS|
  |COMMON-LISP|::|PATHNAME|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME|
 (|UIOP/PATHNAME|::|PATH| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/PATHNAME|::|DEFAULTS|
  (|UIOP/PATHNAME|::|ON-ERROR| '|COMMON-LISP|::|ERROR|))
 "Given a pathname designator PATH, return an absolute pathname as specified by PATH\n
considering the DEFAULTS, or, if not possible, use CALL-FUNCTION on the specified ON-ERROR behavior,\n
with a format control-string and other arguments as arguments"
 (|COMMON-LISP|::|COND|
  ((|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/PATHNAME|::|PATH|))
  ((|COMMON-LISP|::|STRINGP| |UIOP/PATHNAME|::|PATH|)
   (|UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME|
    (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|PATH|)
    |UIOP/PATHNAME|::|DEFAULTS| |UIOP/PATHNAME|::|ON-ERROR|))
  ((|COMMON-LISP|::|NOT| (|COMMON-LISP|::|PATHNAMEP| |UIOP/PATHNAME|::|PATH|))
   (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/PATHNAME|::|ON-ERROR|
    "not a valid pathname designator ~S" |UIOP/PATHNAME|::|PATH|))
  ((|COMMON-LISP|::|LET|
    ((|UIOP/PATHNAME|::|DEFAULT-PATHNAME|
      (|COMMON-LISP|::|IF|
       (|COMMON-LISP|::|PATHNAMEP| |UIOP/PATHNAME|::|DEFAULTS|)
       |UIOP/PATHNAME|::|DEFAULTS|
       (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/PATHNAME|::|DEFAULTS|))))
    (|COMMON-LISP|::|OR|
     (|COMMON-LISP|::|IF|
      (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P|
       |UIOP/PATHNAME|::|DEFAULT-PATHNAME|)
      (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P|
       (|UIOP/PATHNAME|::|MERGE-PATHNAMES*| |UIOP/PATHNAME|::|PATH|
        |UIOP/PATHNAME|::|DEFAULT-PATHNAME|))
      (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/PATHNAME|::|ON-ERROR|
       "Default pathname ~S is not an absolute pathname"
       |UIOP/PATHNAME|::|DEFAULT-PATHNAME|))
     (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/PATHNAME|::|ON-ERROR|
      "Failed to merge ~S with ~S into an absolute pathname"
      |UIOP/PATHNAME|::|PATH| |UIOP/PATHNAME|::|DEFAULT-PATHNAME|))))
  (|COMMON-LISP|::|T|
   (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/PATHNAME|::|ON-ERROR|
    "Cannot ensure ~S is evaluated as an absolute pathname with defaults ~S"
    |UIOP/PATHNAME|::|PATH| |UIOP/PATHNAME|::|DEFAULTS|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|SUBPATHP|
 (|UIOP/PATHNAME|::|MAYBE-SUBPATH| |UIOP/PATHNAME|::|BASE-PATHNAME|)
 "if MAYBE-SUBPATH is a pathname that is under BASE-PATHNAME, return a pathname object that\n
when used with MERGE-PATHNAMES* with defaults BASE-PATHNAME, returns MAYBE-SUBPATH."
 (|COMMON-LISP|::|AND|
  (|COMMON-LISP|::|PATHNAMEP| |UIOP/PATHNAME|::|MAYBE-SUBPATH|)
  (|COMMON-LISP|::|PATHNAMEP| |UIOP/PATHNAME|::|BASE-PATHNAME|)
  (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/PATHNAME|::|MAYBE-SUBPATH|)
  (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/PATHNAME|::|BASE-PATHNAME|)
  (|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P| |UIOP/PATHNAME|::|BASE-PATHNAME|)
  (|COMMON-LISP|::|NOT|
   (|COMMON-LISP|::|WILD-PATHNAME-P| |UIOP/PATHNAME|::|BASE-PATHNAME|))
  (|UIOP/PATHNAME|::|PATHNAME-EQUAL|
   (|UIOP/PATHNAME|::|PATHNAME-ROOT| |UIOP/PATHNAME|::|MAYBE-SUBPATH|)
   (|UIOP/PATHNAME|::|PATHNAME-ROOT| |UIOP/PATHNAME|::|BASE-PATHNAME|))
  (|UIOP/PATHNAME|::|WITH-PATHNAME-DEFAULTS|
   (|UIOP/PATHNAME|::|*NIL-PATHNAME*|)
   (|COMMON-LISP|::|LET|
    ((|UIOP/PATHNAME|::|ENOUGH|
      (|COMMON-LISP|::|ENOUGH-NAMESTRING| |UIOP/PATHNAME|::|MAYBE-SUBPATH|
       |UIOP/PATHNAME|::|BASE-PATHNAME|)))
    (|COMMON-LISP|::|AND|
     (|UIOP/PATHNAME|::|RELATIVE-PATHNAME-P| |UIOP/PATHNAME|::|ENOUGH|)
     (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|ENOUGH|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|ENOUGH-PATHNAME|
 (|UIOP/PATHNAME|::|MAYBE-SUBPATH| |UIOP/PATHNAME|::|BASE-PATHNAME|)
 "if MAYBE-SUBPATH is a pathname that is under BASE-PATHNAME, return a pathname object that\n
when used with MERGE-PATHNAMES* with defaults BASE-PATHNAME, returns MAYBE-SUBPATH."
 (|COMMON-LISP|::|LET|
  ((|UIOP/PATHNAME|::|SUB|
    (|COMMON-LISP|::|WHEN| |UIOP/PATHNAME|::|MAYBE-SUBPATH|
     (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|MAYBE-SUBPATH|)))
   (|UIOP/PATHNAME|::|BASE|
    (|COMMON-LISP|::|WHEN| |UIOP/PATHNAME|::|BASE-PATHNAME|
     (|UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME|
      (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|BASE-PATHNAME|)))))
  (|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|AND| |UIOP/PATHNAME|::|BASE|
    (|UIOP/PATHNAME|::|SUBPATHP| |UIOP/PATHNAME|::|SUB|
     |UIOP/PATHNAME|::|BASE|))
   |UIOP/PATHNAME|::|SUB|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|CALL-WITH-ENOUGH-PATHNAME|
 (|UIOP/PATHNAME|::|MAYBE-SUBPATH| |UIOP/PATHNAME|::|DEFAULTS-PATHNAME|
  |UIOP/PATHNAME|::|THUNK|)
 "In a context where *DEFAULT-PATHNAME-DEFAULTS* is bound to DEFAULTS-PATHNAME (if not null,\n
or else to its current value), call THUNK with ENOUGH-PATHNAME for MAYBE-SUBPATH\n
given DEFAULTS-PATHNAME as a base pathname."
 (|COMMON-LISP|::|LET|
  ((|UIOP/PATHNAME|::|ENOUGH|
    (|UIOP/PATHNAME|::|ENOUGH-PATHNAME| |UIOP/PATHNAME|::|MAYBE-SUBPATH|
     |UIOP/PATHNAME|::|DEFAULTS-PATHNAME|))
   (|COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|
    (|COMMON-LISP|::|OR| |UIOP/PATHNAME|::|DEFAULTS-PATHNAME|
     |COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|)))
  (|COMMON-LISP|::|FUNCALL| |UIOP/PATHNAME|::|THUNK|
   |UIOP/PATHNAME|::|ENOUGH|)))
(|COMMON-LISP|::|DEFMACRO| |UIOP/PATHNAME|::|WITH-ENOUGH-PATHNAME|
 ((|UIOP/PATHNAME|::|PATHNAME-VAR| |COMMON-LISP|::|&KEY|
   (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|PATHNAME-VAR|)
   (|UIOP/PATHNAME|::|DEFAULTS| |COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|))
  |COMMON-LISP|::|&BODY| |UIOP/PATHNAME|::|BODY|)
 "Shorthand syntax for CALL-WITH-ENOUGH-PATHNAME"
 `(|UIOP/PATHNAME|::|CALL-WITH-ENOUGH-PATHNAME| ,|COMMON-LISP|::|PATHNAME|
   ,|UIOP/PATHNAME|::|DEFAULTS|
   #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/PATHNAME|::|PATHNAME-VAR|)
      ,@|UIOP/PATHNAME|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|SUBPATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|SUBPATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|SUBPATH| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|SUBPATHNAME*|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|SUBPATHNAME*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|SUBPATH| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|PATHNAME-ROOT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|PATHNAME-ROOT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|PATHNAME-HOST-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|PATHNAME-HOST-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|PATH| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/PATHNAME|::|DEFAULTS|
    (|UIOP/PATHNAME|::|ON-ERROR| '|COMMON-LISP|::|ERROR|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|SUBPATHP|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|SUBPATHP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|MAYBE-SUBPATH| |UIOP/PATHNAME|::|BASE-PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|ENOUGH-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|ENOUGH-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|MAYBE-SUBPATH| |UIOP/PATHNAME|::|BASE-PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|CALL-WITH-ENOUGH-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|CALL-WITH-ENOUGH-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|MAYBE-SUBPATH| |UIOP/PATHNAME|::|DEFAULTS-PATHNAME|
    |UIOP/PATHNAME|::|THUNK|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/PATHNAME|::|WITH-ENOUGH-PATHNAME|)
(|SYSTEM|::|%PUTD| '|UIOP/PATHNAME|::|WITH-ENOUGH-PATHNAME|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/PATHNAME|::|WITH-ENOUGH-PATHNAME|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Shorthand syntax for CALL-WITH-ENOUGH-PATHNAME"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G15501| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G15502|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 1. 1. |COMMON-LISP|::|T|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/PATHNAME|::|WITH-ENOUGH-PATHNAME| #1#
          '#4=(|UIOP/PATHNAME|::|PATHNAME-VAR| |COMMON-LISP|::|&KEY|
               (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|PATHNAME-VAR|)
               (|UIOP/PATHNAME|::|DEFAULTS|
                |COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|)))
         #1#))
       (|UIOP/PATHNAME|::|PATHNAME-VAR| (|COMMON-LISP|::|CAR| #3#))
       (#5=#:|G15503| (|COMMON-LISP|::|CDR| #3#))
       (|COMMON-LISP|::|PATHNAME|
        (|COMMON-LISP|::|LET|
         ((#6=#:|KWD-ARG-15504|
           (|COMMON-LISP|::|GETF| #5# ':|PATHNAME|
            '#7=(|COMMON-LISP|::|NIL|))))
         (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQ| #6# '#7#)
          (|COMMON-LISP|::|PROGN| |UIOP/PATHNAME|::|PATHNAME-VAR|) #6#)))
       (|UIOP/PATHNAME|::|DEFAULTS|
        (|COMMON-LISP|::|LET|
         ((#8=#:|KWD-ARG-15505| (|COMMON-LISP|::|GETF| #5# ':|DEFAULTS| '#7#)))
         (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQ| #8# '#7#)
          (|COMMON-LISP|::|PROGN| |COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|)
          #8#)))
       (|UIOP/PATHNAME|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|SYSTEM|::|KEYWORD-TEST| #5# '(:|DEFAULTS| :|PATHNAME|))
      (|COMMON-LISP|::|BLOCK| |UIOP/PATHNAME|::|WITH-ENOUGH-PATHNAME|
       `(|UIOP/PATHNAME|::|CALL-WITH-ENOUGH-PATHNAME|
         ,|COMMON-LISP|::|PATHNAME| ,|UIOP/PATHNAME|::|DEFAULTS|
         #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/PATHNAME|::|PATHNAME-VAR|)
            ,@|UIOP/PATHNAME|::|BODY|)))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/PATHNAME|::|BODY|)))
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/PATHNAME|::|*WILD*|
 (|COMMON-LISP|::|OR| :|WILD|) "Wild component for use with MAKE-PATHNAME")
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/PATHNAME|::|*WILD-DIRECTORY-COMPONENT*|
 (|COMMON-LISP|::|OR| :|WILD|)
 "Wild directory component for use with MAKE-PATHNAME")
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/PATHNAME|::|*WILD-INFERIORS-COMPONENT*|
 (|COMMON-LISP|::|OR| :|WILD-INFERIORS|)
 "Wild-inferiors directory component for use with MAKE-PATHNAME")
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/PATHNAME|::|*WILD-FILE*|
 (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY| |COMMON-LISP|::|NIL| :|NAME|
  |UIOP/PATHNAME|::|*WILD*| :|TYPE| |UIOP/PATHNAME|::|*WILD*| :|VERSION|
  (|COMMON-LISP|::|OR| |UIOP/PATHNAME|::|*WILD*|))
 "A pathname object with wildcards for matching any file with TRANSLATE-PATHNAME")
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/PATHNAME|::|*WILD-FILE-FOR-DIRECTORY*|
 (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY| |COMMON-LISP|::|NIL| :|NAME|
  |UIOP/PATHNAME|::|*WILD*| :|TYPE| (|COMMON-LISP|::|OR|) :|VERSION|
  (|COMMON-LISP|::|OR|))
 "A pathname object with wildcards for matching any file with DIRECTORY")
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/PATHNAME|::|*WILD-DIRECTORY*|
 (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY|
  `(:|RELATIVE| ,|UIOP/PATHNAME|::|*WILD-DIRECTORY-COMPONENT*|) :|NAME|
  |COMMON-LISP|::|NIL| :|TYPE| |COMMON-LISP|::|NIL| :|VERSION|
  |COMMON-LISP|::|NIL|)
 "A pathname object with wildcards for matching any subdirectory")
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/PATHNAME|::|*WILD-INFERIORS*|
 (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY|
  `(:|RELATIVE| ,|UIOP/PATHNAME|::|*WILD-INFERIORS-COMPONENT*|) :|NAME|
  |COMMON-LISP|::|NIL| :|TYPE| |COMMON-LISP|::|NIL| :|VERSION|
  |COMMON-LISP|::|NIL|)
 "A pathname object with wildcards for matching any recursive subdirectory")
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/PATHNAME|::|*WILD-PATH*|
 (|UIOP/PATHNAME|::|MERGE-PATHNAMES*| |UIOP/PATHNAME|::|*WILD-FILE*|
  |UIOP/PATHNAME|::|*WILD-INFERIORS*|)
 "A pathname object with wildcards for matching any file in any recursive subdirectory")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|WILDEN| (|UIOP/PATHNAME|::|PATH|)
 "From a pathname, return a wildcard pathname matching any file in any subdirectory of given pathname's directory"
 (|UIOP/PATHNAME|::|MERGE-PATHNAMES*| |UIOP/PATHNAME|::|*WILD-PATH*|
  |UIOP/PATHNAME|::|PATH|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |UIOP/PATHNAME|::|*WILD*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/PATHNAME|::|*WILD-DIRECTORY-COMPONENT*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/PATHNAME|::|*WILD-INFERIORS-COMPONENT*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/PATHNAME|::|*WILD-FILE*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/PATHNAME|::|*WILD-FILE-FOR-DIRECTORY*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/PATHNAME|::|*WILD-DIRECTORY*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/PATHNAME|::|*WILD-INFERIORS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/PATHNAME|::|*WILD-PATH*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|WILDEN|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|WILDEN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/PATHNAME|::|PATH|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|RELATIVIZE-DIRECTORY-COMPONENT|
 (|UIOP/PATHNAME|::|DIRECTORY-COMPONENT|)
 "Given the DIRECTORY-COMPONENT of a pathname, return an otherwise similar relative directory component"
 (|COMMON-LISP|::|LET|
  ((|COMMON-LISP|::|DIRECTORY|
    (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
     |UIOP/PATHNAME|::|DIRECTORY-COMPONENT|)))
  (|COMMON-LISP|::|COND|
   ((|COMMON-LISP|::|STRINGP| |COMMON-LISP|::|DIRECTORY|)
    (|COMMON-LISP|::|LIST| :|RELATIVE| |COMMON-LISP|::|DIRECTORY|))
   ((|COMMON-LISP|::|EQ| (|COMMON-LISP|::|CAR| |COMMON-LISP|::|DIRECTORY|)
     :|ABSOLUTE|)
    (|COMMON-LISP|::|CONS| :|RELATIVE|
     (|COMMON-LISP|::|CDR| |COMMON-LISP|::|DIRECTORY|)))
   (|COMMON-LISP|::|T| |COMMON-LISP|::|DIRECTORY|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|RELATIVIZE-PATHNAME-DIRECTORY|
 (|UIOP/PATHNAME|::|PATHSPEC|)
 "Given a PATHNAME, return a relative pathname with otherwise the same components"
 (|COMMON-LISP|::|LET|
  ((|UIOP/PATHNAME|::|P|
    (|COMMON-LISP|::|PATHNAME| |UIOP/PATHNAME|::|PATHSPEC|)))
  (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY|
   (|UIOP/PATHNAME|::|RELATIVIZE-DIRECTORY-COMPONENT|
    (|COMMON-LISP|::|PATHNAME-DIRECTORY| |UIOP/PATHNAME|::|P|))
   :|DEFAULTS| |UIOP/PATHNAME|::|P|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|DIRECTORY-SEPARATOR-FOR-HOST|
 (|COMMON-LISP|::|&OPTIONAL|
  (|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|))
 "Given a PATHNAME, return the character used to delimit directory names on this host and device."
 (|COMMON-LISP|::|LET|
  ((|UIOP/PATHNAME|::|FOO|
    (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY| '(:|ABSOLUTE| "FOO")
     :|DEFAULTS| |COMMON-LISP|::|PATHNAME|)))
  (|UIOP/UTILITY|::|LAST-CHAR|
   (|COMMON-LISP|::|NAMESTRING| |UIOP/PATHNAME|::|FOO|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|DIRECTORIZE-PATHNAME-HOST-DEVICE|
 (|COMMON-LISP|::|PATHNAME|)
 "Given a PATHNAME, return a pathname that has representations of its HOST and DEVICE components\n
added to its DIRECTORY component. This is useful for output translations."
 (|UIOP/OS|::|OS-COND|
  ((|UIOP/OS|::|OS-UNIX-P|)
   (|COMMON-LISP|::|WHEN|
    (|UIOP/PATHNAME|::|PHYSICAL-PATHNAME-P| |COMMON-LISP|::|PATHNAME|)
    (|COMMON-LISP|::|RETURN-FROM|
     |UIOP/PATHNAME|::|DIRECTORIZE-PATHNAME-HOST-DEVICE|
     |COMMON-LISP|::|PATHNAME|))))
 (|COMMON-LISP|::|LET*|
  ((|UIOP/PATHNAME|::|ROOT|
    (|UIOP/PATHNAME|::|PATHNAME-ROOT| |COMMON-LISP|::|PATHNAME|))
   (|UIOP/PATHNAME|::|WILD-ROOT|
    (|UIOP/PATHNAME|::|WILDEN| |UIOP/PATHNAME|::|ROOT|))
   (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME|
    (|UIOP/PATHNAME|::|MERGE-PATHNAMES*| |COMMON-LISP|::|PATHNAME|
     |UIOP/PATHNAME|::|ROOT|))
   (|UIOP/PATHNAME|::|SEPARATOR|
    (|UIOP/PATHNAME|::|DIRECTORY-SEPARATOR-FOR-HOST| |UIOP/PATHNAME|::|ROOT|))
   (|UIOP/PATHNAME|::|ROOT-NAMESTRING|
    (|COMMON-LISP|::|NAMESTRING| |UIOP/PATHNAME|::|ROOT|))
   (|UIOP/PATHNAME|::|ROOT-STRING|
    (|COMMON-LISP|::|SUBSTITUTE-IF| #\/
     #'(|COMMON-LISP|::|LAMBDA| (|UIOP/PATHNAME|::|X|)
        (|COMMON-LISP|::|OR| (|COMMON-LISP|::|EQL| |UIOP/PATHNAME|::|X| #\:)
         (|COMMON-LISP|::|EQL| |UIOP/PATHNAME|::|X|
          |UIOP/PATHNAME|::|SEPARATOR|)))
     |UIOP/PATHNAME|::|ROOT-NAMESTRING|)))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|UIOP/PATHNAME|::|RELATIVE| |UIOP/PATHNAME|::|PATH|
    |UIOP/PATHNAME|::|FILENAME|)
   (|UIOP/PATHNAME|::|SPLIT-UNIX-NAMESTRING-DIRECTORY-COMPONENTS|
    |UIOP/PATHNAME|::|ROOT-STRING| :|ENSURE-DIRECTORY| |COMMON-LISP|::|T|)
   (|COMMON-LISP|::|DECLARE|
    (|COMMON-LISP|::|IGNORE| |UIOP/PATHNAME|::|RELATIVE|
     |UIOP/PATHNAME|::|FILENAME|))
   (|COMMON-LISP|::|LET|
    ((|UIOP/PATHNAME|::|NEW-BASE|
      (|COMMON-LISP|::|MAKE-PATHNAME| :|DEFAULTS| |UIOP/PATHNAME|::|ROOT|
       :|DIRECTORY| `(:|ABSOLUTE| ,@|UIOP/PATHNAME|::|PATH|))))
    (|COMMON-LISP|::|TRANSLATE-PATHNAME| |UIOP/PATHNAME|::|ABSOLUTE-PATHNAME|
     |UIOP/PATHNAME|::|WILD-ROOT|
     (|UIOP/PATHNAME|::|WILDEN| |UIOP/PATHNAME|::|NEW-BASE|))))))
(|UIOP/UTILITY|::|DEFUN*| (|UIOP/PATHNAME|::|TRANSLATE-PATHNAME*|)
 (|UIOP/PATHNAME|::|PATH| |UIOP/PATHNAME|::|ABSOLUTE-SOURCE|
  |UIOP/PATHNAME|::|DESTINATION| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/PATHNAME|::|ROOT| |UIOP/PATHNAME|::|SOURCE|)
 "A wrapper around TRANSLATE-PATHNAME to be used by the ASDF output-translations facility.\n
PATH is the pathname to be translated.\n
ABSOLUTE-SOURCE is an absolute pathname to use as source for translate-pathname,\n
DESTINATION is either a function, to be called with PATH and ABSOLUTE-SOURCE,\n
or a relative pathname, to be merged with ROOT and used as destination for translate-pathname\n
or an absolute pathname, to be used as destination for translate-pathname.\n
In that last case, if ROOT is non-NIL, PATH is first transformated by DIRECTORIZE-PATHNAME-HOST-DEVICE."
 (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/PATHNAME|::|SOURCE|))
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|FUNCTIONP| |UIOP/PATHNAME|::|DESTINATION|)
   (|COMMON-LISP|::|FUNCALL| |UIOP/PATHNAME|::|DESTINATION|
    |UIOP/PATHNAME|::|PATH| |UIOP/PATHNAME|::|ABSOLUTE-SOURCE|))
  ((|COMMON-LISP|::|EQ| |UIOP/PATHNAME|::|DESTINATION| |COMMON-LISP|::|T|)
   |UIOP/PATHNAME|::|PATH|)
  ((|COMMON-LISP|::|NOT|
    (|COMMON-LISP|::|PATHNAMEP| |UIOP/PATHNAME|::|DESTINATION|))
   (|UIOP/UTILITY|::|PARAMETER-ERROR| "~S: Invalid destination"
    '|UIOP/PATHNAME|::|TRANSLATE-PATHNAME*|))
  ((|COMMON-LISP|::|NOT|
    (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/PATHNAME|::|DESTINATION|))
   (|COMMON-LISP|::|TRANSLATE-PATHNAME| |UIOP/PATHNAME|::|PATH|
    |UIOP/PATHNAME|::|ABSOLUTE-SOURCE|
    (|UIOP/PATHNAME|::|MERGE-PATHNAMES*| |UIOP/PATHNAME|::|DESTINATION|
     |UIOP/PATHNAME|::|ROOT|)))
  (|UIOP/PATHNAME|::|ROOT|
   (|COMMON-LISP|::|TRANSLATE-PATHNAME|
    (|UIOP/PATHNAME|::|DIRECTORIZE-PATHNAME-HOST-DEVICE|
     |UIOP/PATHNAME|::|PATH|)
    |UIOP/PATHNAME|::|ABSOLUTE-SOURCE| |UIOP/PATHNAME|::|DESTINATION|))
  (|COMMON-LISP|::|T|
   (|COMMON-LISP|::|TRANSLATE-PATHNAME| |UIOP/PATHNAME|::|PATH|
    |UIOP/PATHNAME|::|ABSOLUTE-SOURCE| |UIOP/PATHNAME|::|DESTINATION|))))
(|COMMON-LISP|::|DEFVAR| |UIOP/PATHNAME|::|*OUTPUT-TRANSLATION-FUNCTION*|
 '|COMMON-LISP|::|IDENTITY|
 "Hook for output translations.\n\n
This function needs to be idempotent, so that actions can work\n
whether their inputs were translated or not,\n
which they will be if we are composing operations. e.g. if some\n
create-lisp-op creates a lisp file from some higher-level input,\n
you need to still be able to use compile-op on that lisp file.")
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/PATHNAME|::|RELATIVIZE-DIRECTORY-COMPONENT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|RELATIVIZE-DIRECTORY-COMPONENT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|DIRECTORY-COMPONENT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/PATHNAME|::|RELATIVIZE-PATHNAME-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|RELATIVIZE-PATHNAME-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/PATHNAME|::|PATHSPEC|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|DIRECTORY-SEPARATOR-FOR-HOST|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|DIRECTORY-SEPARATOR-FOR-HOST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/PATHNAME|::|DIRECTORIZE-PATHNAME-HOST-DEVICE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|DIRECTORIZE-PATHNAME-HOST-DEVICE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|TRANSLATE-PATHNAME*|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|TRANSLATE-PATHNAME*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/PATHNAME|::|PATH| |UIOP/PATHNAME|::|ABSOLUTE-SOURCE|
    |UIOP/PATHNAME|::|DESTINATION| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/PATHNAME|::|ROOT| |UIOP/PATHNAME|::|SOURCE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/PATHNAME|::|*OUTPUT-TRANSLATION-FUNCTION*|))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|UIOP/FILESYSTEM| :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP/PACKAGE| :|UIOP/UTILITY| :|UIOP/OS|
    :|UIOP/PATHNAME|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|NATIVE-NAMESTRING| #:|PARSE-NATIVE-NAMESTRING| #:|TRUENAME*|
    #:|SAFE-FILE-WRITE-DATE| #:|PROBE-FILE*| #:|DIRECTORY-EXISTS-P|
    #:|FILE-EXISTS-P| #:|DIRECTORY*| #:|FILTER-LOGICAL-DIRECTORY-RESULTS|
    #:|DIRECTORY-FILES| #:|SUBDIRECTORIES| #:|COLLECT-SUB*DIRECTORIES|
    #:|TRUENAMIZE| #:|RESOLVE-SYMLINKS| #:|*RESOLVE-SYMLINKS*|
    #:|RESOLVE-SYMLINKS*| #:|GET-PATHNAME-DEFAULTS|
    #:|CALL-WITH-CURRENT-DIRECTORY| #:|WITH-CURRENT-DIRECTORY|
    #:|INTER-DIRECTORY-SEPARATOR| #:|SPLIT-NATIVE-PATHNAMES-STRING|
    #:|GETENV-PATHNAME| #:|GETENV-PATHNAMES| #:|GETENV-ABSOLUTE-DIRECTORY|
    #:|GETENV-ABSOLUTE-DIRECTORIES| #:|LISP-IMPLEMENTATION-DIRECTORY|
    #:|LISP-IMPLEMENTATION-PATHNAME-P| #:|ENSURE-ALL-DIRECTORIES-EXIST|
    #:|RENAME-FILE-OVERWRITING-TARGET| #:|DELETE-FILE-IF-EXISTS|
    #:|DELETE-EMPTY-DIRECTORY| #:|DELETE-DIRECTORY-TREE|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|UIOP/FILESYSTEM|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/FILESYSTEM"))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|NATIVE-NAMESTRING|
 (|UIOP/FILESYSTEM|::|X|)
 "From a non-wildcard CL pathname, a return namestring suitable for passing to the operating system"
 (|COMMON-LISP|::|WHEN| |UIOP/FILESYSTEM|::|X|
  (|COMMON-LISP|::|LET|
   ((|UIOP/FILESYSTEM|::|P|
     (|COMMON-LISP|::|PATHNAME| |UIOP/FILESYSTEM|::|X|)))
   (|UIOP/OS|::|OS-COND|
    ((|UIOP/OS|::|OS-UNIX-P|)
     (|UIOP/PATHNAME|::|UNIX-NAMESTRING| |UIOP/FILESYSTEM|::|P|))
    (|COMMON-LISP|::|T|
     (|COMMON-LISP|::|NAMESTRING| |UIOP/FILESYSTEM|::|P|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|PARSE-NATIVE-NAMESTRING|
 (|COMMON-LISP|::|STRING| |COMMON-LISP|::|&REST|
  |UIOP/FILESYSTEM|::|CONSTRAINTS| |COMMON-LISP|::|&KEY|
  |UIOP/FILESYSTEM|::|ENSURE-DIRECTORY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "From a native namestring suitable for use by the operating system, return\n
a CL pathname satisfying all the specified constraints as per ENSURE-PATHNAME"
 (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|STRING|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|STRING| |COMMON-LISP|::|NULL|))
 (|COMMON-LISP|::|LET*|
  ((|COMMON-LISP|::|PATHNAME|
    (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|STRING|
     (|UIOP/PATHNAME|::|WITH-PATHNAME-DEFAULTS| |COMMON-LISP|::|NIL|
      (|UIOP/OS|::|OS-COND|
       ((|UIOP/OS|::|OS-UNIX-P|)
        (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING| |COMMON-LISP|::|STRING|
         :|ENSURE-DIRECTORY| |UIOP/FILESYSTEM|::|ENSURE-DIRECTORY|))
       (|COMMON-LISP|::|T|
        (|COMMON-LISP|::|PARSE-NAMESTRING| |COMMON-LISP|::|STRING|))))))
   (|COMMON-LISP|::|PATHNAME|
    (|COMMON-LISP|::|IF| |UIOP/FILESYSTEM|::|ENSURE-DIRECTORY|
     (|COMMON-LISP|::|AND| |COMMON-LISP|::|PATHNAME|
      (|UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME| |COMMON-LISP|::|PATHNAME|))
     |COMMON-LISP|::|PATHNAME|)))
  (|COMMON-LISP|::|APPLY| '|UIOP/PATHNAME|::|ENSURE-PATHNAME|
   |COMMON-LISP|::|PATHNAME| |UIOP/FILESYSTEM|::|CONSTRAINTS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|NATIVE-NAMESTRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|NATIVE-NAMESTRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/FILESYSTEM|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|PARSE-NATIVE-NAMESTRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|PARSE-NATIVE-NAMESTRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STRING| |COMMON-LISP|::|&REST|
    |UIOP/FILESYSTEM|::|CONSTRAINTS| |COMMON-LISP|::|&KEY|
    |UIOP/FILESYSTEM|::|ENSURE-DIRECTORY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|TRUENAME*|
 (|UIOP/FILESYSTEM|::|P|)
 "Nicer variant of TRUENAME that plays well with NIL, avoids logical pathname contexts, and tries both files and directories"
 (|COMMON-LISP|::|WHEN| |UIOP/FILESYSTEM|::|P|
  (|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|STRINGP| |UIOP/FILESYSTEM|::|P|)
   (|COMMON-LISP|::|SETF| |UIOP/FILESYSTEM|::|P|
    (|UIOP/PATHNAME|::|WITH-PATHNAME-DEFAULTS| |COMMON-LISP|::|NIL|
     (|COMMON-LISP|::|PARSE-NAMESTRING| |UIOP/FILESYSTEM|::|P|))))
  (|COMMON-LISP|::|VALUES|
   (|COMMON-LISP|::|OR|
    (|COMMON-LISP|::|IGNORE-ERRORS|
     (|COMMON-LISP|::|TRUENAME| |UIOP/FILESYSTEM|::|P|))
    (|UIOP/UTILITY|::|IF-LET|
     (|UIOP/FILESYSTEM|::|D|
      (|UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME| |UIOP/FILESYSTEM|::|P|
       |COMMON-LISP|::|NIL|))
     (|COMMON-LISP|::|IGNORE-ERRORS|
      (|COMMON-LISP|::|TRUENAME| |UIOP/FILESYSTEM|::|D|)))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|SAFE-FILE-WRITE-DATE|
 (|COMMON-LISP|::|PATHNAME|)
 "Safe variant of FILE-WRITE-DATE that may return NIL rather than raise an error."
 (|COMMON-LISP|::|AND| |COMMON-LISP|::|PATHNAME|
  (|COMMON-LISP|::|HANDLER-CASE|
   (|COMMON-LISP|::|FILE-WRITE-DATE|
    (|UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME| |COMMON-LISP|::|PATHNAME|))
   (|COMMON-LISP|::|FILE-ERROR| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|PROBE-FILE*|
 (|UIOP/FILESYSTEM|::|P| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|TRUENAME|)
 "when given a pathname P (designated by a string as per PARSE-NAMESTRING),\n
probes the filesystem for a file or directory with given pathname.\n
If it exists, return its truename if TRUENAME is true,\n
or the original (parsed) pathname if it is false (the default)."
 (|COMMON-LISP|::|VALUES|
  (|COMMON-LISP|::|IGNORE-ERRORS|
   (|COMMON-LISP|::|SETF| |UIOP/FILESYSTEM|::|P|
    (|COMMON-LISP|::|FUNCALL| '|UIOP/PATHNAME|::|ENSURE-PATHNAME|
     |UIOP/FILESYSTEM|::|P| :|NAMESTRING| :|LISP| :|ENSURE-PHYSICAL|
     |COMMON-LISP|::|T| :|ENSURE-ABSOLUTE| |COMMON-LISP|::|T| :|DEFAULTS|
     '|UIOP/FILESYSTEM|::|GET-PATHNAME-DEFAULTS| :|WANT-NON-WILD|
     |COMMON-LISP|::|T| :|ON-ERROR| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|WHEN| |UIOP/FILESYSTEM|::|P|
    (|COMMON-LISP|::|IF| |COMMON-LISP|::|TRUENAME|
     (|COMMON-LISP|::|VALUES| (|EXT|::|PROBE-PATHNAME| |UIOP/FILESYSTEM|::|P|))
     (|COMMON-LISP|::|NTH-VALUE| 1.
      (|EXT|::|PROBE-PATHNAME| |UIOP/FILESYSTEM|::|P|)))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|DIRECTORY-EXISTS-P|
 (|UIOP/FILESYSTEM|::|X|)
 "Is X the name of a directory that exists on the filesystem?"
 (|COMMON-LISP|::|HANDLER-CASE|
  (|EXT|::|PROBE-DIRECTORY| |UIOP/FILESYSTEM|::|X|)
  (|SYSTEM|::|SIMPLE-FILE-ERROR| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|FILE-EXISTS-P|
 (|UIOP/FILESYSTEM|::|X|)
 "Is X the name of a file that exists on the filesystem?"
 (|COMMON-LISP|::|LET|
  ((|UIOP/FILESYSTEM|::|P|
    (|UIOP/FILESYSTEM|::|PROBE-FILE*| |UIOP/FILESYSTEM|::|X| :|TRUENAME|
     |COMMON-LISP|::|T|)))
  (|COMMON-LISP|::|AND|
   (|UIOP/PATHNAME|::|FILE-PATHNAME-P| |UIOP/FILESYSTEM|::|P|)
   |UIOP/FILESYSTEM|::|P|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|DIRECTORY*|
 (|UIOP/FILESYSTEM|::|PATHNAME-SPEC| |COMMON-LISP|::|&REST|
  |UIOP/FILESYSTEM|::|KEYS| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Return a list of the entries in a directory by calling DIRECTORY.\n
Try to override the defaults to not resolving symlinks, if implementation allows."
 (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|DIRECTORY|
  |UIOP/FILESYSTEM|::|PATHNAME-SPEC|
  (|COMMON-LISP|::|APPEND| |UIOP/FILESYSTEM|::|KEYS|
   '(:|CIRCLE| |COMMON-LISP|::|T| :|IF-DOES-NOT-EXIST| :|IGNORE|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|FILTER-LOGICAL-DIRECTORY-RESULTS|
 (|COMMON-LISP|::|DIRECTORY| |UIOP/FILESYSTEM|::|ENTRIES|
  |UIOP/FILESYSTEM|::|MERGER|)
 "If DIRECTORY isn't a logical pathname, return ENTRIES. If it is,\n
given ENTRIES in the DIRECTORY, remove the entries which are physical yet\n
when transformed by MERGER have a different TRUENAME.\n
Also remove duplicates as may appear with some translation rules.\n
This function is used as a helper to DIRECTORY-FILES to avoid invalid entries\n
when using logical-pathnames."
 (|COMMON-LISP|::|IF|
  (|UIOP/PATHNAME|::|LOGICAL-PATHNAME-P| |COMMON-LISP|::|DIRECTORY|)
  (|COMMON-LISP|::|REMOVE-DUPLICATES|
   (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/FILESYSTEM|::|F| :|IN|
    |UIOP/FILESYSTEM|::|ENTRIES| :|FOR| |UIOP/FILESYSTEM|::|P|
    |COMMON-LISP|::|=|
    (|COMMON-LISP|::|OR|
     (|COMMON-LISP|::|AND|
      (|UIOP/PATHNAME|::|LOGICAL-PATHNAME-P| |UIOP/FILESYSTEM|::|F|)
      |UIOP/FILESYSTEM|::|F|)
     (|COMMON-LISP|::|LET*|
      ((|UIOP/FILESYSTEM|::|U|
        (|COMMON-LISP|::|IGNORE-ERRORS|
         (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/FILESYSTEM|::|MERGER|
          |UIOP/FILESYSTEM|::|F|))))
      (|COMMON-LISP|::|AND| |UIOP/FILESYSTEM|::|U|
       (|COMMON-LISP|::|EQUAL|
        (|UIOP/FILESYSTEM|::|TRUENAME*| |UIOP/FILESYSTEM|::|U|)
        (|UIOP/FILESYSTEM|::|TRUENAME*| |UIOP/FILESYSTEM|::|F|))
       |UIOP/FILESYSTEM|::|U|)))
    :|WHEN| |UIOP/FILESYSTEM|::|P| :|COLLECT| |UIOP/FILESYSTEM|::|P|)
   :|TEST| '|UIOP/PATHNAME|::|PATHNAME-EQUAL|)
  |UIOP/FILESYSTEM|::|ENTRIES|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|DIRECTORY-FILES|
 (|COMMON-LISP|::|DIRECTORY| |COMMON-LISP|::|&OPTIONAL|
  (|UIOP/FILESYSTEM|::|PATTERN| |UIOP/PATHNAME|::|*WILD-FILE-FOR-DIRECTORY*|))
 "Return a list of the files in a directory according to the PATTERN.\n
Subdirectories should NOT be returned.\n
  PATTERN defaults to a pattern carefully chosen based on the implementation;\n
override the default at your own risk.\n
  DIRECTORY-FILES tries NOT to resolve symlinks if the implementation permits this,\n
but the behavior in presence of symlinks is not portable. Use IOlib to handle such situations."
 (|COMMON-LISP|::|LET|
  ((|UIOP/FILESYSTEM|::|DIR|
    (|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|DIRECTORY|)))
  (|COMMON-LISP|::|WHEN|
   (|UIOP/PATHNAME|::|LOGICAL-PATHNAME-P| |UIOP/FILESYSTEM|::|DIR|)
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|WILD-PATHNAME-P| |UIOP/FILESYSTEM|::|DIR|)
    (|UIOP/UTILITY|::|PARAMETER-ERROR|
     "~S: Invalid wild pattern in logical directory ~S"
     '|UIOP/FILESYSTEM|::|DIRECTORY-FILES| |COMMON-LISP|::|DIRECTORY|))
   (|COMMON-LISP|::|UNLESS|
    (|COMMON-LISP|::|MEMBER|
     (|COMMON-LISP|::|PATHNAME-DIRECTORY| |UIOP/FILESYSTEM|::|PATTERN|)
     '(|COMMON-LISP|::|NIL| (:|RELATIVE|)) :|TEST| '|COMMON-LISP|::|EQUAL|)
    (|UIOP/UTILITY|::|PARAMETER-ERROR|
     "~S: Invalid file pattern ~S for logical directory ~S"
     '|UIOP/FILESYSTEM|::|DIRECTORY-FILES| |UIOP/FILESYSTEM|::|PATTERN|
     |COMMON-LISP|::|DIRECTORY|))
   (|COMMON-LISP|::|SETF| |UIOP/FILESYSTEM|::|PATTERN|
    (|UIOP/PATHNAME|::|MAKE-PATHNAME-LOGICAL| |UIOP/FILESYSTEM|::|PATTERN|
     (|COMMON-LISP|::|PATHNAME-HOST| |UIOP/FILESYSTEM|::|DIR|))))
  (|COMMON-LISP|::|LET*|
   ((|UIOP/FILESYSTEM|::|PAT|
     (|UIOP/PATHNAME|::|MERGE-PATHNAMES*| |UIOP/FILESYSTEM|::|PATTERN|
      |UIOP/FILESYSTEM|::|DIR|))
    (|UIOP/FILESYSTEM|::|ENTRIES|
     (|COMMON-LISP|::|IGNORE-ERRORS|
      (|UIOP/FILESYSTEM|::|DIRECTORY*| |UIOP/FILESYSTEM|::|PAT|))))
   (|COMMON-LISP|::|REMOVE-IF| '|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P|
    (|UIOP/FILESYSTEM|::|FILTER-LOGICAL-DIRECTORY-RESULTS|
     |COMMON-LISP|::|DIRECTORY| |UIOP/FILESYSTEM|::|ENTRIES|
     #'(|COMMON-LISP|::|LAMBDA| (|UIOP/FILESYSTEM|::|F|)
        (|COMMON-LISP|::|MAKE-PATHNAME| :|DEFAULTS| |UIOP/FILESYSTEM|::|DIR|
         :|NAME|
         (|UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|
          (|COMMON-LISP|::|PATHNAME-NAME| |UIOP/FILESYSTEM|::|F|))
         :|TYPE|
         (|UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|
          (|COMMON-LISP|::|PATHNAME-TYPE| |UIOP/FILESYSTEM|::|F|))
         :|VERSION|
         (|UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|
          (|COMMON-LISP|::|PATHNAME-VERSION| |UIOP/FILESYSTEM|::|F|)))))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|SUBDIRECTORIES|
 (|COMMON-LISP|::|DIRECTORY|)
 "Given a DIRECTORY pathname designator, return a list of the subdirectories under it.\n
The behavior in presence of symlinks is not portable. Use IOlib to handle such situations."
 (|COMMON-LISP|::|LET*|
  ((|COMMON-LISP|::|DIRECTORY|
    (|UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME| |COMMON-LISP|::|DIRECTORY|))
   (|UIOP/FILESYSTEM|::|WILD|
    (|UIOP/PATHNAME|::|MERGE-PATHNAMES*| |UIOP/PATHNAME|::|*WILD-DIRECTORY*|
     |COMMON-LISP|::|DIRECTORY|))
   (|UIOP/FILESYSTEM|::|DIRS|
    (|COMMON-LISP|::|IGNORE-ERRORS|
     (|UIOP/FILESYSTEM|::|DIRECTORY*| |UIOP/FILESYSTEM|::|WILD|))))
  (|UIOP/FILESYSTEM|::|FILTER-LOGICAL-DIRECTORY-RESULTS|
   |COMMON-LISP|::|DIRECTORY| |UIOP/FILESYSTEM|::|DIRS|
   (|COMMON-LISP|::|LET|
    ((|UIOP/FILESYSTEM|::|PREFIX|
      (|COMMON-LISP|::|OR|
       (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
        (|COMMON-LISP|::|PATHNAME-DIRECTORY| |COMMON-LISP|::|DIRECTORY|))
       '(:|ABSOLUTE|))))
    #'(|COMMON-LISP|::|LAMBDA| (|UIOP/FILESYSTEM|::|D|)
       (|COMMON-LISP|::|LET|
        ((|UIOP/FILESYSTEM|::|DIR|
          (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
           (|COMMON-LISP|::|PATHNAME-DIRECTORY| |UIOP/FILESYSTEM|::|D|))))
        (|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |UIOP/FILESYSTEM|::|DIR|)
         (|COMMON-LISP|::|CONSP|
          (|COMMON-LISP|::|CDR| |UIOP/FILESYSTEM|::|DIR|))
         (|COMMON-LISP|::|MAKE-PATHNAME| :|DEFAULTS| |COMMON-LISP|::|DIRECTORY|
          :|NAME| |COMMON-LISP|::|NIL| :|TYPE| |COMMON-LISP|::|NIL| :|VERSION|
          |COMMON-LISP|::|NIL| :|DIRECTORY|
          (|COMMON-LISP|::|APPEND| |UIOP/FILESYSTEM|::|PREFIX|
           (|UIOP/PATHNAME|::|MAKE-PATHNAME-COMPONENT-LOGICAL|
            (|COMMON-LISP|::|LAST| |UIOP/FILESYSTEM|::|DIR|)))))))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|COLLECT-SUB*DIRECTORIES|
 (|COMMON-LISP|::|DIRECTORY| |UIOP/FILESYSTEM|::|COLLECTP|
  |UIOP/FILESYSTEM|::|RECURSEP| |UIOP/FILESYSTEM|::|COLLECTOR|)
 "Given a DIRECTORY, when COLLECTP returns true when CALL-FUNCTION'ed with the directory,\n
call-function the COLLECTOR function designator on the directory,\n
and recurse each of its subdirectories on which the RECURSEP returns true when CALL-FUNCTION'ed with them.\n
This function will thus let you traverse a filesystem hierarchy,\n
superseding the functionality of CL-FAD:WALK-DIRECTORY.\n
The behavior in presence of symlinks is not portable. Use IOlib to handle such situations."
 (|COMMON-LISP|::|WHEN|
  (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/FILESYSTEM|::|COLLECTP|
   |COMMON-LISP|::|DIRECTORY|)
  (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/FILESYSTEM|::|COLLECTOR|
   |COMMON-LISP|::|DIRECTORY|)
  (|COMMON-LISP|::|DOLIST|
   (|UIOP/FILESYSTEM|::|SUBDIR|
    (|UIOP/FILESYSTEM|::|SUBDIRECTORIES| |COMMON-LISP|::|DIRECTORY|))
   (|COMMON-LISP|::|WHEN|
    (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/FILESYSTEM|::|RECURSEP|
     |UIOP/FILESYSTEM|::|SUBDIR|)
    (|UIOP/FILESYSTEM|::|COLLECT-SUB*DIRECTORIES| |UIOP/FILESYSTEM|::|SUBDIR|
     |UIOP/FILESYSTEM|::|COLLECTP| |UIOP/FILESYSTEM|::|RECURSEP|
     |UIOP/FILESYSTEM|::|COLLECTOR|)))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|TRUENAME*|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|TRUENAME*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/FILESYSTEM|::|P|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|SAFE-FILE-WRITE-DATE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|SAFE-FILE-WRITE-DATE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|PROBE-FILE*|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|PROBE-FILE*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/FILESYSTEM|::|P| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|TRUENAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|DIRECTORY-EXISTS-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|DIRECTORY-EXISTS-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/FILESYSTEM|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|FILE-EXISTS-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|FILE-EXISTS-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/FILESYSTEM|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|DIRECTORY*|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|DIRECTORY*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/FILESYSTEM|::|PATHNAME-SPEC| |COMMON-LISP|::|&REST|
    |UIOP/FILESYSTEM|::|KEYS| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/FILESYSTEM|::|FILTER-LOGICAL-DIRECTORY-RESULTS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|FILTER-LOGICAL-DIRECTORY-RESULTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|DIRECTORY| |UIOP/FILESYSTEM|::|ENTRIES|
    |UIOP/FILESYSTEM|::|MERGER|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|DIRECTORY-FILES|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|DIRECTORY-FILES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|DIRECTORY| |COMMON-LISP|::|&OPTIONAL|
    (|UIOP/FILESYSTEM|::|PATTERN|
     |UIOP/PATHNAME|::|*WILD-FILE-FOR-DIRECTORY*|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|SUBDIRECTORIES|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|SUBDIRECTORIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|DIRECTORY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|COLLECT-SUB*DIRECTORIES|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|COLLECT-SUB*DIRECTORIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|DIRECTORY| |UIOP/FILESYSTEM|::|COLLECTP|
    |UIOP/FILESYSTEM|::|RECURSEP| |UIOP/FILESYSTEM|::|COLLECTOR|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|TRUENAMIZE|
 (|COMMON-LISP|::|PATHNAME|) "Resolve as much of a pathname as possible"
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|WHEN|
   (|COMMON-LISP|::|TYPEP| |COMMON-LISP|::|PATHNAME|
    '(|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL|
      |COMMON-LISP|::|LOGICAL-PATHNAME|))
   (|COMMON-LISP|::|RETURN| |COMMON-LISP|::|PATHNAME|))
  (|COMMON-LISP|::|LET| ((|UIOP/FILESYSTEM|::|P| |COMMON-LISP|::|PATHNAME|))
   (|COMMON-LISP|::|UNLESS|
    (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/FILESYSTEM|::|P|)
    (|COMMON-LISP|::|SETF| |UIOP/FILESYSTEM|::|P|
     (|COMMON-LISP|::|OR|
      (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P|
       (|UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME| |UIOP/FILESYSTEM|::|P|
        '|UIOP/FILESYSTEM|::|GET-PATHNAME-DEFAULTS| |COMMON-LISP|::|NIL|))
      (|COMMON-LISP|::|RETURN| |UIOP/FILESYSTEM|::|P|))))
   (|COMMON-LISP|::|WHEN|
    (|UIOP/PATHNAME|::|LOGICAL-PATHNAME-P| |UIOP/FILESYSTEM|::|P|)
    (|COMMON-LISP|::|RETURN| |UIOP/FILESYSTEM|::|P|))
   (|COMMON-LISP|::|LET|
    ((|UIOP/FILESYSTEM|::|FOUND|
      (|UIOP/FILESYSTEM|::|PROBE-FILE*| |UIOP/FILESYSTEM|::|P| :|TRUENAME|
       |COMMON-LISP|::|T|)))
    (|COMMON-LISP|::|WHEN| |UIOP/FILESYSTEM|::|FOUND|
     (|COMMON-LISP|::|RETURN| |UIOP/FILESYSTEM|::|FOUND|)))
   (|COMMON-LISP|::|LET*|
    ((|COMMON-LISP|::|DIRECTORY|
      (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
       (|COMMON-LISP|::|PATHNAME-DIRECTORY| |UIOP/FILESYSTEM|::|P|)))
     (|UIOP/FILESYSTEM|::|UP-COMPONENTS|
      (|COMMON-LISP|::|REVERSE|
       (|COMMON-LISP|::|REST| |COMMON-LISP|::|DIRECTORY|)))
     (|UIOP/FILESYSTEM|::|DOWN-COMPONENTS| |COMMON-LISP|::|NIL|))
    (|COMMON-LISP|::|ASSERT|
     (|COMMON-LISP|::|EQ| :|ABSOLUTE|
      (|COMMON-LISP|::|FIRST| |COMMON-LISP|::|DIRECTORY|)))
    (|COMMON-LISP|::|LOOP| :|WHILE| |UIOP/FILESYSTEM|::|UP-COMPONENTS| :|DO|
     (|UIOP/UTILITY|::|IF-LET|
      (|UIOP/FILESYSTEM|::|PARENT|
       (|COMMON-LISP|::|IGNORE-ERRORS|
        (|UIOP/FILESYSTEM|::|PROBE-FILE*|
         (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY|
          `(:|ABSOLUTE|
            ,@(|COMMON-LISP|::|REVERSE| |UIOP/FILESYSTEM|::|UP-COMPONENTS|))
          :|NAME| |COMMON-LISP|::|NIL| :|TYPE| |COMMON-LISP|::|NIL| :|VERSION|
          |COMMON-LISP|::|NIL| :|DEFAULTS| |UIOP/FILESYSTEM|::|P|))))
      (|UIOP/UTILITY|::|IF-LET|
       (|UIOP/FILESYSTEM|::|SIMPLIFIED|
        (|COMMON-LISP|::|IGNORE-ERRORS|
         (|UIOP/PATHNAME|::|MERGE-PATHNAMES*|
          (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY|
           `(:|RELATIVE| ,@|UIOP/FILESYSTEM|::|DOWN-COMPONENTS|) :|DEFAULTS|
           |UIOP/FILESYSTEM|::|P|)
          (|UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME|
           |UIOP/FILESYSTEM|::|PARENT|))))
       (|COMMON-LISP|::|RETURN| |UIOP/FILESYSTEM|::|SIMPLIFIED|)))
     (|COMMON-LISP|::|PUSH|
      (|COMMON-LISP|::|POP| |UIOP/FILESYSTEM|::|UP-COMPONENTS|)
      |UIOP/FILESYSTEM|::|DOWN-COMPONENTS|)
     :|FINALLY| (|COMMON-LISP|::|RETURN| |UIOP/FILESYSTEM|::|P|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS|
 (|UIOP/FILESYSTEM|::|PATH|)
 "Do a best effort at resolving symlinks in PATH, returning a partially or totally resolved PATH."
 (|UIOP/FILESYSTEM|::|TRUENAMIZE| |UIOP/FILESYSTEM|::|PATH|))
(|COMMON-LISP|::|DEFVAR| |UIOP/FILESYSTEM|::|*RESOLVE-SYMLINKS*|
 |COMMON-LISP|::|T|
 "Determine whether or not ASDF resolves symlinks when defining systems.\n
Defaults to T.")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS*|
 (|UIOP/FILESYSTEM|::|PATH|)
 "RESOLVE-SYMLINKS in PATH iff *RESOLVE-SYMLINKS* is T (the default)."
 (|COMMON-LISP|::|IF| |UIOP/FILESYSTEM|::|*RESOLVE-SYMLINKS*|
  (|COMMON-LISP|::|AND| |UIOP/FILESYSTEM|::|PATH|
   (|UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS| |UIOP/FILESYSTEM|::|PATH|))
  |UIOP/FILESYSTEM|::|PATH|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|TRUENAMIZE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|TRUENAMIZE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/FILESYSTEM|::|PATH|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/FILESYSTEM|::|*RESOLVE-SYMLINKS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS*|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/FILESYSTEM|::|PATH|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/PATHNAME|::|ENSURE-PATHNAME|
 (|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|&KEY| |UIOP/FILESYSTEM|::|ON-ERROR|
  |UIOP/FILESYSTEM|::|DEFAULTS| |COMMON-LISP|::|TYPE|
  |UIOP/FILESYSTEM|::|DOT-DOT| |COMMON-LISP|::|NAMESTRING|
  |UIOP/FILESYSTEM|::|EMPTY-IS-NIL| |UIOP/FILESYSTEM|::|WANT-PATHNAME|
  |UIOP/FILESYSTEM|::|WANT-LOGICAL| |UIOP/FILESYSTEM|::|WANT-PHYSICAL|
  |UIOP/FILESYSTEM|::|ENSURE-PHYSICAL| |UIOP/FILESYSTEM|::|WANT-RELATIVE|
  |UIOP/FILESYSTEM|::|WANT-ABSOLUTE| |UIOP/FILESYSTEM|::|ENSURE-ABSOLUTE|
  |UIOP/FILESYSTEM|::|ENSURE-SUBPATH| |UIOP/FILESYSTEM|::|WANT-NON-WILD|
  |UIOP/FILESYSTEM|::|WANT-WILD| |UIOP/PATHNAME|::|WILDEN|
  |UIOP/FILESYSTEM|::|WANT-FILE| |UIOP/FILESYSTEM|::|WANT-DIRECTORY|
  |UIOP/FILESYSTEM|::|ENSURE-DIRECTORY| |UIOP/FILESYSTEM|::|WANT-EXISTING|
  |COMMON-LISP|::|ENSURE-DIRECTORIES-EXIST| |COMMON-LISP|::|TRUENAME|
  |UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS| |UIOP/FILESYSTEM|::|TRUENAMIZE|
  |COMMON-LISP|::|&AUX| (|UIOP/FILESYSTEM|::|P| |COMMON-LISP|::|PATHNAME|))
 "Coerces its argument into a PATHNAME,\n
optionally doing some transformations and checking specified constraints.\n\n
If the argument is NIL, then NIL is returned unless the WANT-PATHNAME constraint is specified.\n\n
If the argument is a STRING, it is first converted to a pathname via\n
PARSE-UNIX-NAMESTRING, PARSE-NAMESTRING or PARSE-NATIVE-NAMESTRING respectively\n
depending on the NAMESTRING argument being :UNIX, :LISP or :NATIVE respectively,\n
or else by using CALL-FUNCTION on the NAMESTRING argument;\n
if :UNIX is specified (or NIL, the default, which specifies the same thing),\n
then PARSE-UNIX-NAMESTRING it is called with the keywords\n
DEFAULTS TYPE DOT-DOT ENSURE-DIRECTORY WANT-RELATIVE, and\n
the result is optionally merged into the DEFAULTS if ENSURE-ABSOLUTE is true.\n\n
The pathname passed or resulting from parsing the string\n
is then subjected to all the checks and transformations below are run.\n\n
Each non-nil constraint argument can be one of the symbols T, ERROR, CERROR or IGNORE.\n
The boolean T is an alias for ERROR.\n
ERROR means that an error will be raised if the constraint is not satisfied.\n
CERROR means that an continuable error will be raised if the constraint is not satisfied.\n
IGNORE means just return NIL instead of the pathname.\n\n
The ON-ERROR argument, if not NIL, is a function designator (as per CALL-FUNCTION)\n
that will be called with the the following arguments:\n
a generic format string for ensure pathname, the pathname,\n
the keyword argument corresponding to the failed check or transformation,\n
a format string for the reason ENSURE-PATHNAME failed,\n
and a list with arguments to that format string.\n
If ON-ERROR is NIL, ERROR is used instead, which does the right thing.\n
You could also pass (CERROR \"CONTINUE DESPITE FAILED CHECK\").\n\n
The transformations and constraint checks are done in this order,\n
which is also the order in the lambda-list:\n\n
EMPTY-IS-NIL returns NIL if the argument is an empty string.\n
WANT-PATHNAME checks that pathname (after parsing if needed) is not null.\n
Otherwise, if the pathname is NIL, ensure-pathname returns NIL.\n
WANT-LOGICAL checks that pathname is a LOGICAL-PATHNAME\n
WANT-PHYSICAL checks that pathname is not a LOGICAL-PATHNAME\n
ENSURE-PHYSICAL ensures that pathname is physical via TRANSLATE-LOGICAL-PATHNAME\n
WANT-RELATIVE checks that pathname has a relative directory component\n
WANT-ABSOLUTE checks that pathname does have an absolute directory component\n
ENSURE-ABSOLUTE merges with the DEFAULTS, then checks again\n
that the result absolute is an absolute pathname indeed.\n
ENSURE-SUBPATH checks that the pathname is a subpath of the DEFAULTS.\n
WANT-FILE checks that pathname has a non-nil FILE component\n
WANT-DIRECTORY checks that pathname has nil FILE and TYPE components\n
ENSURE-DIRECTORY uses ENSURE-DIRECTORY-PATHNAME to interpret\n
any file and type components as being actually a last directory component.\n
WANT-NON-WILD checks that pathname is not a wild pathname\n
WANT-WILD checks that pathname is a wild pathname\n
WILDEN merges the pathname with **/*.*.* if it is not wild\n
WANT-EXISTING checks that a file (or directory) exists with that pathname.\n
ENSURE-DIRECTORIES-EXIST creates any parent directory with ENSURE-DIRECTORIES-EXIST.\n
TRUENAME replaces the pathname by its truename, or errors if not possible.\n
RESOLVE-SYMLINKS replaces the pathname by a variant with symlinks resolved by RESOLVE-SYMLINKS.\n
TRUENAMIZE uses TRUENAMIZE to resolve as many symlinks as possible."
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|FLET|
   ((|UIOP/FILESYSTEM|::|REPORT-ERROR|
     (|COMMON-LISP|::|KEYWORD| |UIOP/FILESYSTEM|::|DESCRIPTION|
      |COMMON-LISP|::|&REST| |UIOP/FILESYSTEM|::|ARGUMENTS|)
     (|UIOP/UTILITY|::|CALL-FUNCTION|
      (|COMMON-LISP|::|OR| |UIOP/FILESYSTEM|::|ON-ERROR|
       '|COMMON-LISP|::|ERROR|)
      "Invalid pathname ~S: ~*~?" |COMMON-LISP|::|PATHNAME|
      |COMMON-LISP|::|KEYWORD| |UIOP/FILESYSTEM|::|DESCRIPTION|
      |UIOP/FILESYSTEM|::|ARGUMENTS|)))
   (|COMMON-LISP|::|MACROLET|
    ((|UIOP/FILESYSTEM|::|ERR|
      (|UIOP/FILESYSTEM|::|CONSTRAINT| |COMMON-LISP|::|&REST|
       |UIOP/FILESYSTEM|::|ARGUMENTS|)
      `(|UIOP/FILESYSTEM|::|REPORT-ERROR|
        ',(|UIOP/PACKAGE|::|INTERN*| |UIOP/FILESYSTEM|::|CONSTRAINT|
           :|KEYWORD|)
        ,@|UIOP/FILESYSTEM|::|ARGUMENTS|))
     (|UIOP/FILESYSTEM|::|CHECK|
      (|UIOP/FILESYSTEM|::|CONSTRAINT| |COMMON-LISP|::|CONDITION|
       |COMMON-LISP|::|&REST| |UIOP/FILESYSTEM|::|ARGUMENTS|)
      `(|COMMON-LISP|::|WHEN| ,|UIOP/FILESYSTEM|::|CONSTRAINT|
        (|COMMON-LISP|::|UNLESS| ,|COMMON-LISP|::|CONDITION|
         (|UIOP/FILESYSTEM|::|ERR| ,|UIOP/FILESYSTEM|::|CONSTRAINT|
          ,@|UIOP/FILESYSTEM|::|ARGUMENTS|))))
     (|UIOP/FILESYSTEM|::|TRANSFORM|
      (|UIOP/FILESYSTEM|::|TRANSFORM| |COMMON-LISP|::|CONDITION|
       |UIOP/FILESYSTEM|::|EXPR|)
      `(|COMMON-LISP|::|WHEN| ,|UIOP/FILESYSTEM|::|TRANSFORM|
        (,@(|COMMON-LISP|::|IF| |COMMON-LISP|::|CONDITION|
            `(|COMMON-LISP|::|WHEN| ,|COMMON-LISP|::|CONDITION|)
            '(|COMMON-LISP|::|PROGN|))
         (|COMMON-LISP|::|SETF| |UIOP/FILESYSTEM|::|P|
          ,|UIOP/FILESYSTEM|::|EXPR|)))))
    (|COMMON-LISP|::|ETYPECASE| |UIOP/FILESYSTEM|::|P|
     ((|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|PATHNAME|))
     (|COMMON-LISP|::|STRING|
      (|COMMON-LISP|::|WHEN|
       (|COMMON-LISP|::|AND| (|UIOP/UTILITY|::|EMPTYP| |UIOP/FILESYSTEM|::|P|)
        |UIOP/FILESYSTEM|::|EMPTY-IS-NIL|)
       (|COMMON-LISP|::|RETURN-FROM| |UIOP/PATHNAME|::|ENSURE-PATHNAME|
        |COMMON-LISP|::|NIL|))
      (|COMMON-LISP|::|SETF| |UIOP/FILESYSTEM|::|P|
       (|COMMON-LISP|::|CASE| |COMMON-LISP|::|NAMESTRING|
        ((:|UNIX| |COMMON-LISP|::|NIL|)
         (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING| |UIOP/FILESYSTEM|::|P|
          :|DEFAULTS| |UIOP/FILESYSTEM|::|DEFAULTS| :|TYPE|
          |COMMON-LISP|::|TYPE| :|DOT-DOT| |UIOP/FILESYSTEM|::|DOT-DOT|
          :|ENSURE-DIRECTORY| |UIOP/FILESYSTEM|::|ENSURE-DIRECTORY|
          :|WANT-RELATIVE| |UIOP/FILESYSTEM|::|WANT-RELATIVE|))
        ((:|NATIVE|)
         (|UIOP/FILESYSTEM|::|PARSE-NATIVE-NAMESTRING| |UIOP/FILESYSTEM|::|P|))
        ((:|LISP|) (|COMMON-LISP|::|PARSE-NAMESTRING| |UIOP/FILESYSTEM|::|P|))
        (|COMMON-LISP|::|T|
         (|UIOP/UTILITY|::|CALL-FUNCTION| |COMMON-LISP|::|NAMESTRING|
          |UIOP/FILESYSTEM|::|P|))))))
    (|COMMON-LISP|::|ETYPECASE| |UIOP/FILESYSTEM|::|P|
     (|COMMON-LISP|::|PATHNAME|)
     (|COMMON-LISP|::|NULL|
      (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|WANT-PATHNAME|
       (|COMMON-LISP|::|PATHNAMEP| |UIOP/FILESYSTEM|::|P|)
       "Expected a pathname, not NIL")
      (|COMMON-LISP|::|RETURN| |COMMON-LISP|::|NIL|)))
    (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|WANT-LOGICAL|
     (|UIOP/PATHNAME|::|LOGICAL-PATHNAME-P| |UIOP/FILESYSTEM|::|P|)
     "Expected a logical pathname")
    (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|WANT-PHYSICAL|
     (|UIOP/PATHNAME|::|PHYSICAL-PATHNAME-P| |UIOP/FILESYSTEM|::|P|)
     "Expected a physical pathname")
    (|UIOP/FILESYSTEM|::|TRANSFORM| |UIOP/FILESYSTEM|::|ENSURE-PHYSICAL|
     |COMMON-LISP|::|NIL|
     (|UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME| |UIOP/FILESYSTEM|::|P|))
    (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|ENSURE-PHYSICAL|
     (|UIOP/PATHNAME|::|PHYSICAL-PATHNAME-P| |UIOP/FILESYSTEM|::|P|)
     "Could not translate to a physical pathname")
    (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|WANT-RELATIVE|
     (|UIOP/PATHNAME|::|RELATIVE-PATHNAME-P| |UIOP/FILESYSTEM|::|P|)
     "Expected a relative pathname")
    (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|WANT-ABSOLUTE|
     (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/FILESYSTEM|::|P|)
     "Expected an absolute pathname")
    (|UIOP/FILESYSTEM|::|TRANSFORM| |UIOP/FILESYSTEM|::|ENSURE-ABSOLUTE|
     (|COMMON-LISP|::|NOT|
      (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/FILESYSTEM|::|P|))
     (|UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME| |UIOP/FILESYSTEM|::|P|
      |UIOP/FILESYSTEM|::|DEFAULTS|
      (|COMMON-LISP|::|LIST| #'|UIOP/FILESYSTEM|::|REPORT-ERROR|
       :|ENSURE-ABSOLUTE| "~@?")))
    (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|ENSURE-ABSOLUTE|
     (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/FILESYSTEM|::|P|)
     "Could not make into an absolute pathname even after merging with ~S"
     |UIOP/FILESYSTEM|::|DEFAULTS|)
    (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|ENSURE-SUBPATH|
     (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/FILESYSTEM|::|DEFAULTS|)
     "cannot be checked to be a subpath of non-absolute pathname ~S"
     |UIOP/FILESYSTEM|::|DEFAULTS|)
    (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|ENSURE-SUBPATH|
     (|UIOP/PATHNAME|::|SUBPATHP| |UIOP/FILESYSTEM|::|P|
      |UIOP/FILESYSTEM|::|DEFAULTS|)
     "is not a sub pathname of ~S" |UIOP/FILESYSTEM|::|DEFAULTS|)
    (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|WANT-FILE|
     (|UIOP/PATHNAME|::|FILE-PATHNAME-P| |UIOP/FILESYSTEM|::|P|)
     "Expected a file pathname")
    (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|WANT-DIRECTORY|
     (|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P| |UIOP/FILESYSTEM|::|P|)
     "Expected a directory pathname")
    (|UIOP/FILESYSTEM|::|TRANSFORM| |UIOP/FILESYSTEM|::|ENSURE-DIRECTORY|
     (|COMMON-LISP|::|NOT|
      (|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P| |UIOP/FILESYSTEM|::|P|))
     (|UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME| |UIOP/FILESYSTEM|::|P|))
    (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|WANT-NON-WILD|
     (|COMMON-LISP|::|NOT|
      (|COMMON-LISP|::|WILD-PATHNAME-P| |UIOP/FILESYSTEM|::|P|))
     "Expected a non-wildcard pathname")
    (|UIOP/FILESYSTEM|::|CHECK| |UIOP/FILESYSTEM|::|WANT-WILD|
     (|COMMON-LISP|::|WILD-PATHNAME-P| |UIOP/FILESYSTEM|::|P|)
     "Expected a wildcard pathname")
    (|UIOP/FILESYSTEM|::|TRANSFORM| |UIOP/PATHNAME|::|WILDEN|
     (|COMMON-LISP|::|NOT|
      (|COMMON-LISP|::|WILD-PATHNAME-P| |UIOP/FILESYSTEM|::|P|))
     (|UIOP/PATHNAME|::|WILDEN| |UIOP/FILESYSTEM|::|P|))
    (|COMMON-LISP|::|WHEN| |UIOP/FILESYSTEM|::|WANT-EXISTING|
     (|COMMON-LISP|::|LET|
      ((|UIOP/FILESYSTEM|::|EXISTING|
        (|UIOP/FILESYSTEM|::|PROBE-FILE*| |UIOP/FILESYSTEM|::|P| :|TRUENAME|
         |COMMON-LISP|::|TRUENAME|)))
      (|COMMON-LISP|::|IF| |UIOP/FILESYSTEM|::|EXISTING|
       (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|TRUENAME|
        (|COMMON-LISP|::|RETURN| |UIOP/FILESYSTEM|::|EXISTING|))
       (|UIOP/FILESYSTEM|::|ERR| |UIOP/FILESYSTEM|::|WANT-EXISTING|
        "Expected an existing pathname"))))
    (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|ENSURE-DIRECTORIES-EXIST|
     (|COMMON-LISP|::|ENSURE-DIRECTORIES-EXIST| |UIOP/FILESYSTEM|::|P|))
    (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|TRUENAME|
     (|COMMON-LISP|::|LET|
      ((|COMMON-LISP|::|TRUENAME|
        (|UIOP/FILESYSTEM|::|TRUENAME*| |UIOP/FILESYSTEM|::|P|)))
      (|COMMON-LISP|::|IF| |COMMON-LISP|::|TRUENAME|
       (|COMMON-LISP|::|RETURN| |COMMON-LISP|::|TRUENAME|)
       (|UIOP/FILESYSTEM|::|ERR| |COMMON-LISP|::|TRUENAME|
        "Can't get a truename for pathname"))))
    (|UIOP/FILESYSTEM|::|TRANSFORM| |UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS|
     |COMMON-LISP|::|NIL|
     (|UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS| |UIOP/FILESYSTEM|::|P|))
    (|UIOP/FILESYSTEM|::|TRANSFORM| |UIOP/FILESYSTEM|::|TRUENAMIZE|
     |COMMON-LISP|::|NIL|
     (|UIOP/FILESYSTEM|::|TRUENAMIZE| |UIOP/FILESYSTEM|::|P|))
    |UIOP/FILESYSTEM|::|P|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/PATHNAME|::|ENSURE-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/PATHNAME|::|ENSURE-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|&KEY|
    |UIOP/FILESYSTEM|::|ON-ERROR| |UIOP/FILESYSTEM|::|DEFAULTS|
    |COMMON-LISP|::|TYPE| |UIOP/FILESYSTEM|::|DOT-DOT|
    |COMMON-LISP|::|NAMESTRING| |UIOP/FILESYSTEM|::|EMPTY-IS-NIL|
    |UIOP/FILESYSTEM|::|WANT-PATHNAME| |UIOP/FILESYSTEM|::|WANT-LOGICAL|
    |UIOP/FILESYSTEM|::|WANT-PHYSICAL| |UIOP/FILESYSTEM|::|ENSURE-PHYSICAL|
    |UIOP/FILESYSTEM|::|WANT-RELATIVE| |UIOP/FILESYSTEM|::|WANT-ABSOLUTE|
    |UIOP/FILESYSTEM|::|ENSURE-ABSOLUTE| |UIOP/FILESYSTEM|::|ENSURE-SUBPATH|
    |UIOP/FILESYSTEM|::|WANT-NON-WILD| |UIOP/FILESYSTEM|::|WANT-WILD|
    |UIOP/PATHNAME|::|WILDEN| |UIOP/FILESYSTEM|::|WANT-FILE|
    |UIOP/FILESYSTEM|::|WANT-DIRECTORY| |UIOP/FILESYSTEM|::|ENSURE-DIRECTORY|
    |UIOP/FILESYSTEM|::|WANT-EXISTING|
    |COMMON-LISP|::|ENSURE-DIRECTORIES-EXIST| |COMMON-LISP|::|TRUENAME|
    |UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS| |UIOP/FILESYSTEM|::|TRUENAMIZE|
    |COMMON-LISP|::|&AUX| (|UIOP/FILESYSTEM|::|P| |COMMON-LISP|::|PATHNAME|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|GET-PATHNAME-DEFAULTS|
 (|COMMON-LISP|::|&OPTIONAL|
  (|UIOP/FILESYSTEM|::|DEFAULTS| |COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|))
 "Find the actual DEFAULTS to use for pathnames, including\n
resolving them with respect to GETCWD if the DEFAULTS were relative"
 (|COMMON-LISP|::|OR|
  (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/FILESYSTEM|::|DEFAULTS|)
  (|UIOP/PATHNAME|::|MERGE-PATHNAMES*| |UIOP/FILESYSTEM|::|DEFAULTS|
   (|UIOP/OS|::|GETCWD|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|CALL-WITH-CURRENT-DIRECTORY|
 (|UIOP/FILESYSTEM|::|DIR| |UIOP/FILESYSTEM|::|THUNK|)
 "call the THUNK in a context where the current directory was changed to DIR, if not NIL.\n
Note that this operation is usually NOT thread-safe."
 (|COMMON-LISP|::|IF| |UIOP/FILESYSTEM|::|DIR|
  (|COMMON-LISP|::|LET*|
   ((|UIOP/FILESYSTEM|::|DIR|
     (|UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS*|
      (|UIOP/FILESYSTEM|::|GET-PATHNAME-DEFAULTS|
       (|UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME|
        |UIOP/FILESYSTEM|::|DIR|))))
    (|UIOP/FILESYSTEM|::|CWD| (|UIOP/OS|::|GETCWD|))
    (|COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*| |UIOP/FILESYSTEM|::|DIR|))
   (|UIOP/OS|::|CHDIR| |UIOP/FILESYSTEM|::|DIR|)
   (|COMMON-LISP|::|UNWIND-PROTECT|
    (|COMMON-LISP|::|FUNCALL| |UIOP/FILESYSTEM|::|THUNK|)
    (|UIOP/OS|::|CHDIR| |UIOP/FILESYSTEM|::|CWD|)))
  (|COMMON-LISP|::|FUNCALL| |UIOP/FILESYSTEM|::|THUNK|)))
(|COMMON-LISP|::|DEFMACRO| |UIOP/FILESYSTEM|::|WITH-CURRENT-DIRECTORY|
 ((|COMMON-LISP|::|&OPTIONAL| |UIOP/FILESYSTEM|::|DIR|) |COMMON-LISP|::|&BODY|
  |UIOP/FILESYSTEM|::|BODY|)
 "Call BODY while the POSIX current working directory is set to DIR"
 `(|UIOP/FILESYSTEM|::|CALL-WITH-CURRENT-DIRECTORY| ,|UIOP/FILESYSTEM|::|DIR|
   #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
      ,@|UIOP/FILESYSTEM|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|GET-PATHNAME-DEFAULTS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|GET-PATHNAME-DEFAULTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL|
    (|UIOP/FILESYSTEM|::|DEFAULTS|
     |COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/FILESYSTEM|::|CALL-WITH-CURRENT-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|CALL-WITH-CURRENT-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/FILESYSTEM|::|DIR| |UIOP/FILESYSTEM|::|THUNK|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|UIOP/FILESYSTEM|::|WITH-CURRENT-DIRECTORY|)
(|SYSTEM|::|%PUTD| '|UIOP/FILESYSTEM|::|WITH-CURRENT-DIRECTORY|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/FILESYSTEM|::|WITH-CURRENT-DIRECTORY|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Call BODY while the POSIX current working directory is set to DIR"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16268| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G16269|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 0. 1. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/FILESYSTEM|::|WITH-CURRENT-DIRECTORY| #1#
          '#4=(|COMMON-LISP|::|&OPTIONAL| |UIOP/FILESYSTEM|::|DIR|))
         #1#))
       (|UIOP/FILESYSTEM|::|DIR| (|COMMON-LISP|::|CAR| #3#))
       (|UIOP/FILESYSTEM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/FILESYSTEM|::|WITH-CURRENT-DIRECTORY|
       `(|UIOP/FILESYSTEM|::|CALL-WITH-CURRENT-DIRECTORY|
         ,|UIOP/FILESYSTEM|::|DIR|
         #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
            ,@|UIOP/FILESYSTEM|::|BODY|)))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/FILESYSTEM|::|BODY|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|INTER-DIRECTORY-SEPARATOR|
 |COMMON-LISP|::|NIL|
 "What character does the current OS conventionally uses to separate directories?"
 (|UIOP/OS|::|OS-COND| ((|UIOP/OS|::|OS-UNIX-P|) #\:)
  (|COMMON-LISP|::|T| #\;)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|SPLIT-NATIVE-PATHNAMES-STRING|
 (|COMMON-LISP|::|STRING| |COMMON-LISP|::|&REST|
  |UIOP/FILESYSTEM|::|CONSTRAINTS| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Given a string of pathnames specified in native OS syntax, separate them in a list,\n
check constraints and normalize each one as per ENSURE-PATHNAME,\n
where an empty string denotes NIL."
 (|COMMON-LISP|::|LOOP| :|FOR| |COMMON-LISP|::|NAMESTRING| :|IN|
  (|UIOP/UTILITY|::|SPLIT-STRING| |COMMON-LISP|::|STRING| :|SEPARATOR|
   (|COMMON-LISP|::|STRING| (|UIOP/FILESYSTEM|::|INTER-DIRECTORY-SEPARATOR|)))
  :|COLLECT|
  (|COMMON-LISP|::|UNLESS|
   (|UIOP/UTILITY|::|EMPTYP| |COMMON-LISP|::|NAMESTRING|)
   (|COMMON-LISP|::|APPLY| '|UIOP/FILESYSTEM|::|PARSE-NATIVE-NAMESTRING|
    |COMMON-LISP|::|NAMESTRING| |UIOP/FILESYSTEM|::|CONSTRAINTS|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|GETENV-PATHNAME|
 (|UIOP/FILESYSTEM|::|X| |COMMON-LISP|::|&REST|
  |UIOP/FILESYSTEM|::|CONSTRAINTS| |COMMON-LISP|::|&KEY|
  |UIOP/FILESYSTEM|::|ENSURE-DIRECTORY| |UIOP/FILESYSTEM|::|WANT-DIRECTORY|
  |UIOP/FILESYSTEM|::|ON-ERROR| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Extract a pathname from a user-configured environment variable, as per native OS,\n
check constraints and normalize as per ENSURE-PATHNAME."
 (|COMMON-LISP|::|APPLY| '|UIOP/FILESYSTEM|::|PARSE-NATIVE-NAMESTRING|
  (|UIOP/OS|::|GETENVP| |UIOP/FILESYSTEM|::|X|) :|ENSURE-DIRECTORY|
  (|COMMON-LISP|::|OR| |UIOP/FILESYSTEM|::|ENSURE-DIRECTORY|
   |UIOP/FILESYSTEM|::|WANT-DIRECTORY|)
  :|ON-ERROR|
  (|COMMON-LISP|::|OR| |UIOP/FILESYSTEM|::|ON-ERROR|
   `(|COMMON-LISP|::|ERROR| "In (~S ~S), invalid pathname ~*~S: ~*~?"
     |UIOP/FILESYSTEM|::|GETENV-PATHNAME| ,|UIOP/FILESYSTEM|::|X|))
  |UIOP/FILESYSTEM|::|CONSTRAINTS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|GETENV-PATHNAMES|
 (|UIOP/FILESYSTEM|::|X| |COMMON-LISP|::|&REST|
  |UIOP/FILESYSTEM|::|CONSTRAINTS| |COMMON-LISP|::|&KEY|
  |UIOP/FILESYSTEM|::|ON-ERROR| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Extract a list of pathname from a user-configured environment variable, as per native OS,\n
check constraints and normalize each one as per ENSURE-PATHNAME.\n
       Any empty entries in the environment variable X will be returned as NILs."
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|GETF| |UIOP/FILESYSTEM|::|CONSTRAINTS| :|EMPTY-IS-NIL|
   |COMMON-LISP|::|T|)
  (|UIOP/UTILITY|::|PARAMETER-ERROR| "Cannot have EMPTY-IS-NIL false for ~S"
   '|UIOP/FILESYSTEM|::|GETENV-PATHNAMES|))
 (|COMMON-LISP|::|APPLY| '|UIOP/FILESYSTEM|::|SPLIT-NATIVE-PATHNAMES-STRING|
  (|UIOP/OS|::|GETENVP| |UIOP/FILESYSTEM|::|X|) :|ON-ERROR|
  (|COMMON-LISP|::|OR| |UIOP/FILESYSTEM|::|ON-ERROR|
   `(|COMMON-LISP|::|ERROR| "In (~S ~S), invalid pathname ~*~S: ~*~?"
     |UIOP/FILESYSTEM|::|GETENV-PATHNAMES| ,|UIOP/FILESYSTEM|::|X|))
  :|EMPTY-IS-NIL| |COMMON-LISP|::|T| |UIOP/FILESYSTEM|::|CONSTRAINTS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORY|
 (|UIOP/FILESYSTEM|::|X|)
 "Extract an absolute directory pathname from a user-configured environment variable,\n
as per native OS"
 (|UIOP/FILESYSTEM|::|GETENV-PATHNAME| |UIOP/FILESYSTEM|::|X| :|WANT-ABSOLUTE|
  |COMMON-LISP|::|T| :|ENSURE-DIRECTORY| |COMMON-LISP|::|T|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORIES|
 (|UIOP/FILESYSTEM|::|X|)
 "Extract a list of absolute directories from a user-configured environment variable,\n
as per native OS.  Any empty entries in the environment variable X will be returned as\n
NILs."
 (|UIOP/FILESYSTEM|::|GETENV-PATHNAMES| |UIOP/FILESYSTEM|::|X| :|WANT-ABSOLUTE|
  |COMMON-LISP|::|T| :|ENSURE-DIRECTORY| |COMMON-LISP|::|T|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|LISP-IMPLEMENTATION-DIRECTORY|
 (|COMMON-LISP|::|&KEY| |COMMON-LISP|::|TRUENAME|)
 "Where are the system files of the current installation of the CL implementation?"
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |COMMON-LISP|::|TRUENAME|))
 (|COMMON-LISP|::|LET| ((|UIOP/FILESYSTEM|::|DIR| |CUSTOM|::|*LIB-DIRECTORY*|))
  (|COMMON-LISP|::|IF|
   (|COMMON-LISP|::|AND| |UIOP/FILESYSTEM|::|DIR| |COMMON-LISP|::|TRUENAME|)
   (|UIOP/FILESYSTEM|::|TRUENAME*| |UIOP/FILESYSTEM|::|DIR|)
   |UIOP/FILESYSTEM|::|DIR|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|LISP-IMPLEMENTATION-PATHNAME-P|
 (|COMMON-LISP|::|PATHNAME|)
 "Is the PATHNAME under the current installation of the CL implementation?"
 (|COMMON-LISP|::|AND|
  (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PATHNAME|
   (|UIOP/UTILITY|::|IF-LET|
    (|UIOP/FILESYSTEM|::|IMPDIR|
     (|UIOP/FILESYSTEM|::|LISP-IMPLEMENTATION-DIRECTORY|))
    (|COMMON-LISP|::|OR|
     (|UIOP/PATHNAME|::|SUBPATHP| |COMMON-LISP|::|PATHNAME|
      |UIOP/FILESYSTEM|::|IMPDIR|)
     (|COMMON-LISP|::|WHEN| |UIOP/FILESYSTEM|::|*RESOLVE-SYMLINKS*|
      (|UIOP/UTILITY|::|IF-LET|
       (|COMMON-LISP|::|TRUENAME|
        (|UIOP/FILESYSTEM|::|TRUENAME*| |COMMON-LISP|::|PATHNAME|))
       (|UIOP/UTILITY|::|IF-LET|
        (|UIOP/FILESYSTEM|::|TRUEIMPDIR|
         (|UIOP/FILESYSTEM|::|TRUENAME*| |UIOP/FILESYSTEM|::|IMPDIR|))
        (|UIOP/PATHNAME|::|SUBPATHP| |COMMON-LISP|::|TRUENAME|
         |UIOP/FILESYSTEM|::|TRUEIMPDIR|)))))))
  |COMMON-LISP|::|T|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|INTER-DIRECTORY-SEPARATOR|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|INTER-DIRECTORY-SEPARATOR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/FILESYSTEM|::|SPLIT-NATIVE-PATHNAMES-STRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|SPLIT-NATIVE-PATHNAMES-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STRING| |COMMON-LISP|::|&REST|
    |UIOP/FILESYSTEM|::|CONSTRAINTS| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|GETENV-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|GETENV-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/FILESYSTEM|::|X| |COMMON-LISP|::|&REST|
    |UIOP/FILESYSTEM|::|CONSTRAINTS| |COMMON-LISP|::|&KEY|
    |UIOP/FILESYSTEM|::|ENSURE-DIRECTORY| |UIOP/FILESYSTEM|::|WANT-DIRECTORY|
    |UIOP/FILESYSTEM|::|ON-ERROR| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|GETENV-PATHNAMES|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|GETENV-PATHNAMES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/FILESYSTEM|::|X| |COMMON-LISP|::|&REST|
    |UIOP/FILESYSTEM|::|CONSTRAINTS| |COMMON-LISP|::|&KEY|
    |UIOP/FILESYSTEM|::|ON-ERROR| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/FILESYSTEM|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORIES|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/FILESYSTEM|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/FILESYSTEM|::|LISP-IMPLEMENTATION-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|LISP-IMPLEMENTATION-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| |COMMON-LISP|::|TRUENAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/FILESYSTEM|::|LISP-IMPLEMENTATION-PATHNAME-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|LISP-IMPLEMENTATION-PATHNAME-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|ENSURE-ALL-DIRECTORIES-EXIST|
 (|UIOP/FILESYSTEM|::|PATHNAMES|)
 "Ensure that for every pathname in PATHNAMES, we ensure its directories exist"
 (|COMMON-LISP|::|DOLIST|
  (|COMMON-LISP|::|PATHNAME| |UIOP/FILESYSTEM|::|PATHNAMES|)
  (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PATHNAME|
   (|COMMON-LISP|::|ENSURE-DIRECTORIES-EXIST|
    (|UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME| |COMMON-LISP|::|PATHNAME|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|DELETE-FILE-IF-EXISTS|
 (|UIOP/FILESYSTEM|::|X|) "Delete a file X if it already exists"
 (|COMMON-LISP|::|WHEN| |UIOP/FILESYSTEM|::|X|
  (|COMMON-LISP|::|HANDLER-CASE|
   (|COMMON-LISP|::|DELETE-FILE| |UIOP/FILESYSTEM|::|X|)
   (|COMMON-LISP|::|FILE-ERROR| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|RENAME-FILE-OVERWRITING-TARGET|
 (|UIOP/FILESYSTEM|::|SOURCE| |UIOP/FILESYSTEM|::|TARGET|)
 "Rename a file, overwriting any previous file with the TARGET name,\n
in an atomic way if the implementation allows."
 (|COMMON-LISP|::|LET|
  ((|UIOP/FILESYSTEM|::|SOURCE|
    (|UIOP/PATHNAME|::|ENSURE-PATHNAME| |UIOP/FILESYSTEM|::|SOURCE|
     :|NAMESTRING| :|LISP| :|ENSURE-PHYSICAL| |COMMON-LISP|::|T| :|WANT-FILE|
     |COMMON-LISP|::|T|))
   (|UIOP/FILESYSTEM|::|TARGET|
    (|UIOP/PATHNAME|::|ENSURE-PATHNAME| |UIOP/FILESYSTEM|::|TARGET|
     :|NAMESTRING| :|LISP| :|ENSURE-PHYSICAL| |COMMON-LISP|::|T| :|WANT-FILE|
     |COMMON-LISP|::|T|)))
  (|COMMON-LISP|::|PROGN|
   (|COMMON-LISP|::|FUNCALL| '|COMMON-LISP|::|REQUIRE| "syscalls")
   (|UIOP/PACKAGE|::|SYMBOL-CALL| :|POSIX| :|COPY-FILE|
    |UIOP/FILESYSTEM|::|SOURCE| |UIOP/FILESYSTEM|::|TARGET| :|METHOD|
    :|RENAME|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|DELETE-EMPTY-DIRECTORY|
 (|UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|) "Delete an empty directory"
 (|EXT|::|DELETE-DIRECTORY| |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/FILESYSTEM|::|DELETE-DIRECTORY-TREE|
 (|UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME| |COMMON-LISP|::|&KEY|
  (|UIOP/FILESYSTEM|::|VALIDATE| |COMMON-LISP|::|NIL|
   |UIOP/FILESYSTEM|::|VALIDATEP|)
  (|UIOP/FILESYSTEM|::|IF-DOES-NOT-EXIST| :|ERROR|))
 "Delete a directory including all its recursive contents, aka rm -rf.\n\n
To reduce the risk of infortunate mistakes, DIRECTORY-PATHNAME must be\n
a physical non-wildcard directory pathname (not namestring).\n\n
If the directory does not exist, the IF-DOES-NOT-EXIST argument specifies what happens:\n
if it is :ERROR (the default), an error is signaled, whereas if it is :IGNORE, nothing is done.\n\n
Furthermore, before any deletion is attempted, the DIRECTORY-PATHNAME must pass\n
the validation function designated (as per ENSURE-FUNCTION) by the VALIDATE keyword argument\n
which in practice is thus compulsory, and validates by returning a non-NIL result.\n
If you're suicidal or extremely confident, just use :VALIDATE T."
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/FILESYSTEM|::|IF-DOES-NOT-EXIST|
  (|COMMON-LISP|::|MEMBER| :|ERROR| :|IGNORE|))
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|NOT|
    (|COMMON-LISP|::|AND|
     (|COMMON-LISP|::|PATHNAMEP| |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|)
     (|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P|
      |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|)
     (|UIOP/PATHNAME|::|PHYSICAL-PATHNAME-P|
      |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|)
     (|COMMON-LISP|::|NOT|
      (|COMMON-LISP|::|WILD-PATHNAME-P|
       |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|))))
   (|UIOP/UTILITY|::|PARAMETER-ERROR|
    "~S was asked to delete ~S but it is not a physical non-wildcard directory pathname"
    '|UIOP/FILESYSTEM|::|DELETE-DIRECTORY-TREE|
    |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|))
  ((|COMMON-LISP|::|NOT| |UIOP/FILESYSTEM|::|VALIDATEP|)
   (|UIOP/UTILITY|::|PARAMETER-ERROR|
    "~S was asked to delete ~S but was not provided a validation predicate"
    '|UIOP/FILESYSTEM|::|DELETE-DIRECTORY-TREE|
    |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|))
  ((|COMMON-LISP|::|NOT|
    (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/FILESYSTEM|::|VALIDATE|
     |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|))
   (|UIOP/UTILITY|::|PARAMETER-ERROR|
    "~S was asked to delete ~S but it is not valid ~@[according to ~S~]"
    '|UIOP/FILESYSTEM|::|DELETE-DIRECTORY-TREE|
    |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME| |UIOP/FILESYSTEM|::|VALIDATE|))
  ((|COMMON-LISP|::|NOT|
    (|UIOP/FILESYSTEM|::|DIRECTORY-EXISTS-P|
     |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|))
   (|COMMON-LISP|::|ECASE| |UIOP/FILESYSTEM|::|IF-DOES-NOT-EXIST|
    (:|ERROR|
     (|COMMON-LISP|::|ERROR|
      "~S was asked to delete ~S but the directory does not exist"
      '|UIOP/FILESYSTEM|::|DELETE-DIRECTORY-TREE|
      |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|))
    (:|IGNORE| |COMMON-LISP|::|NIL|)))
  ((|UIOP/OS|::|OS-UNIX-P|)
   (|UIOP/PACKAGE|::|SYMBOL-CALL| :|UIOP| :|RUN-PROGRAM|
    `("rm" "-rf"
      ,(|UIOP/FILESYSTEM|::|NATIVE-NAMESTRING|
        |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|))))
  (|COMMON-LISP|::|T|
   (|COMMON-LISP|::|LET|
    ((|UIOP/FILESYSTEM|::|SUB*DIRECTORIES|
      (|UIOP/UTILITY|::|WHILE-COLLECTING| (|UIOP/FILESYSTEM|::|C|)
       (|UIOP/FILESYSTEM|::|COLLECT-SUB*DIRECTORIES|
        |UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME| |COMMON-LISP|::|T|
        |COMMON-LISP|::|T| #'|UIOP/FILESYSTEM|::|C|))))
    (|COMMON-LISP|::|DOLIST|
     (|UIOP/FILESYSTEM|::|D|
      (|COMMON-LISP|::|NREVERSE| |UIOP/FILESYSTEM|::|SUB*DIRECTORIES|))
     (|COMMON-LISP|::|MAP| |COMMON-LISP|::|NIL| '|COMMON-LISP|::|DELETE-FILE|
      (|UIOP/FILESYSTEM|::|DIRECTORY-FILES| |UIOP/FILESYSTEM|::|D|))
     (|UIOP/FILESYSTEM|::|DELETE-EMPTY-DIRECTORY| |UIOP/FILESYSTEM|::|D|))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/FILESYSTEM|::|ENSURE-ALL-DIRECTORIES-EXIST|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|ENSURE-ALL-DIRECTORIES-EXIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/FILESYSTEM|::|PATHNAMES|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|DELETE-FILE-IF-EXISTS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|DELETE-FILE-IF-EXISTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/FILESYSTEM|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/FILESYSTEM|::|RENAME-FILE-OVERWRITING-TARGET|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|RENAME-FILE-OVERWRITING-TARGET|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/FILESYSTEM|::|SOURCE| |UIOP/FILESYSTEM|::|TARGET|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|DELETE-EMPTY-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|DELETE-EMPTY-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/FILESYSTEM|::|DELETE-DIRECTORY-TREE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/FILESYSTEM|::|DELETE-DIRECTORY-TREE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/FILESYSTEM|::|DIRECTORY-PATHNAME| |COMMON-LISP|::|&KEY|
    (|UIOP/FILESYSTEM|::|VALIDATE| |COMMON-LISP|::|NIL|
     |UIOP/FILESYSTEM|::|VALIDATEP|)
    (|UIOP/FILESYSTEM|::|IF-DOES-NOT-EXIST| :|ERROR|))))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|UIOP/STREAM|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP/PACKAGE| :|UIOP/UTILITY| :|UIOP/OS|
    :|UIOP/PATHNAME| :|UIOP/FILESYSTEM|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|*DEFAULT-STREAM-ELEMENT-TYPE*| #:|*STDIN*| #:|SETUP-STDIN| #:|*STDOUT*|
    #:|SETUP-STDOUT| #:|*STDERR*| #:|SETUP-STDERR| #:|DETECT-ENCODING|
    #:|*ENCODING-DETECTION-HOOK*| #:|ALWAYS-DEFAULT-ENCODING|
    #:|ENCODING-EXTERNAL-FORMAT| #:|*ENCODING-EXTERNAL-FORMAT-HOOK*|
    #:|DEFAULT-ENCODING-EXTERNAL-FORMAT| #:|*DEFAULT-ENCODING*|
    #:|*UTF-8-EXTERNAL-FORMAT*| #:|WITH-SAFE-IO-SYNTAX|
    #:|CALL-WITH-SAFE-IO-SYNTAX| #:|SAFE-READ-FROM-STRING| #:|WITH-OUTPUT|
    #:|OUTPUT-STRING| #:|WITH-INPUT| #:|INPUT-STRING| #:|WITH-INPUT-FILE|
    #:|CALL-WITH-INPUT-FILE| #:|WITH-OUTPUT-FILE| #:|CALL-WITH-OUTPUT-FILE|
    #:|NULL-DEVICE-PATHNAME| #:|CALL-WITH-NULL-INPUT| #:|WITH-NULL-INPUT|
    #:|CALL-WITH-NULL-OUTPUT| #:|WITH-NULL-OUTPUT| #:|FINISH-OUTPUTS|
    #:|FORMAT!| #:|SAFE-FORMAT!| #:|COPY-STREAM-TO-STREAM|
    #:|CONCATENATE-FILES| #:|COPY-FILE| #:|SLURP-STREAM-STRING|
    #:|SLURP-STREAM-LINES| #:|SLURP-STREAM-LINE| #:|SLURP-STREAM-FORMS|
    #:|SLURP-STREAM-FORM| #:|READ-FILE-STRING| #:|READ-FILE-LINE|
    #:|READ-FILE-LINES| #:|SAFE-READ-FILE-LINE| #:|READ-FILE-FORMS|
    #:|READ-FILE-FORM| #:|SAFE-READ-FILE-FORM| #:|EVAL-INPUT| #:|EVAL-THUNK|
    #:|STANDARD-EVAL-THUNK| #:|PRINTLN| #:|WRITELN| #:|FILE-STREAM-P|
    #:|FILE-OR-SYNONYM-STREAM-P| #:|*TEMPORARY-DIRECTORY*|
    #:|TEMPORARY-DIRECTORY| #:|DEFAULT-TEMPORARY-DIRECTORY|
    #:|SETUP-TEMPORARY-DIRECTORY| #:|CALL-WITH-TEMPORARY-FILE|
    #:|WITH-TEMPORARY-FILE| #:|ADD-PATHNAME-SUFFIX| #:|TMPIZE-PATHNAME|
    #:|CALL-WITH-STAGING-PATHNAME| #:|WITH-STAGING-PATHNAME|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|UIOP/STREAM|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/STREAM"))
(|COMMON-LISP|::|DEFVAR| |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|
 (|COMMON-LISP|::|OR| :|DEFAULT|)
 "default element-type for open (depends on the current CL implementation)")
(|COMMON-LISP|::|DEFVAR| |UIOP/STREAM|::|*STDIN*|
 |COMMON-LISP|::|*STANDARD-INPUT*|
 "the original standard input stream at startup")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SETUP-STDIN| |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|SETF| |UIOP/STREAM|::|*STDIN*|
  |COMMON-LISP|::|*STANDARD-INPUT*|))
(|COMMON-LISP|::|DEFVAR| |UIOP/STREAM|::|*STDOUT*|
 |COMMON-LISP|::|*STANDARD-OUTPUT*|
 "the original standard output stream at startup")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SETUP-STDOUT| |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|SETF| |UIOP/STREAM|::|*STDOUT*|
  |COMMON-LISP|::|*STANDARD-OUTPUT*|))
(|COMMON-LISP|::|DEFVAR| |UIOP/STREAM|::|*STDERR*|
 |COMMON-LISP|::|*ERROR-OUTPUT*| "the original error output stream at startup")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SETUP-STDERR| |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|SETF| |UIOP/STREAM|::|*STDERR*|
  |COMMON-LISP|::|*ERROR-OUTPUT*|))
(|UIOP/STREAM|::|SETUP-STDIN|)
(|UIOP/STREAM|::|SETUP-STDOUT|)
(|UIOP/STREAM|::|SETUP-STDERR|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |UIOP/STREAM|::|*STDIN*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SETUP-STDIN|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SETUP-STDIN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |UIOP/STREAM|::|*STDOUT*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SETUP-STDOUT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SETUP-STDOUT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |UIOP/STREAM|::|*STDERR*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SETUP-STDERR|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SETUP-STDERR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/STREAM|::|*DEFAULT-ENCODING*|
 (|COMMON-LISP|::|OR|
  (|UIOP/UTILITY|::|IF-LET|
   (|UIOP/STREAM|::|PREVIOUS|
    (|COMMON-LISP|::|AND|
     (|COMMON-LISP|::|BOUNDP| '|UIOP/STREAM|::|*DEFAULT-ENCODING*|)
     (|COMMON-LISP|::|SYMBOL-VALUE| '|UIOP/STREAM|::|*DEFAULT-ENCODING*|)))
   (|COMMON-LISP|::|UNLESS|
    (|COMMON-LISP|::|EQ| |UIOP/STREAM|::|PREVIOUS| :|DEFAULT|)
    |UIOP/STREAM|::|PREVIOUS|))
  :|UTF-8|)
 "Default encoding for source files.\n
The default value :utf-8 is the portable thing.\n
The legacy behavior was :default.\n
If you (asdf:load-system :asdf-encodings) then\n
you will have autodetection via *encoding-detection-hook* below,\n
reading emacs-style -*- coding: utf-8 -*- specifications,\n
and falling back to utf-8 or latin1 if nothing is specified.")
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|
 (|COMMON-LISP|::|IF| (|UIOP/OS|::|FEATUREP| :|ASDF-UNICODE|)
  (|COMMON-LISP|::|OR| |CHARSET|::|UTF-8| :|UTF-8|) :|DEFAULT|)
 "Default :external-format argument to pass to CL:OPEN and also\n
CL:LOAD or CL:COMPILE-FILE to best process a UTF-8 encoded file.\n
On modern implementations, this will decode UTF-8 code points as CL characters.\n
On legacy implementations, it may fall back on some 8-bit encoding,\n
with non-ASCII code points being read as several CL characters;\n
hopefully, if done consistently, that won't affect program behavior too much.")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|ALWAYS-DEFAULT-ENCODING|
 (|COMMON-LISP|::|PATHNAME|)
 "Trivial function to use as *encoding-detection-hook*,\n
always 'detects' the *default-encoding*"
 (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |COMMON-LISP|::|PATHNAME|))
 |UIOP/STREAM|::|*DEFAULT-ENCODING*|)
(|COMMON-LISP|::|DEFVAR| |UIOP/STREAM|::|*ENCODING-DETECTION-HOOK*|
 #'|UIOP/STREAM|::|ALWAYS-DEFAULT-ENCODING|
 "Hook for an extension to define a function to automatically detect a file's encoding")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|DETECT-ENCODING|
 (|COMMON-LISP|::|PATHNAME|)
 "Detects the encoding of a specified file, going through user-configurable hooks"
 (|COMMON-LISP|::|IF|
  (|COMMON-LISP|::|AND| |COMMON-LISP|::|PATHNAME|
   (|COMMON-LISP|::|NOT|
    (|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P| |COMMON-LISP|::|PATHNAME|))
   (|UIOP/FILESYSTEM|::|PROBE-FILE*| |COMMON-LISP|::|PATHNAME|))
  (|COMMON-LISP|::|FUNCALL| |UIOP/STREAM|::|*ENCODING-DETECTION-HOOK*|
   |COMMON-LISP|::|PATHNAME|)
  |UIOP/STREAM|::|*DEFAULT-ENCODING*|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|DEFAULT-ENCODING-EXTERNAL-FORMAT|
 (|UIOP/STREAM|::|ENCODING|)
 "Default, ignorant, function to transform a character ENCODING as a\n
portable keyword to an implementation-dependent EXTERNAL-FORMAT specification.\n
Load system ASDF-ENCODINGS to hook in a better one."
 (|COMMON-LISP|::|CASE| |UIOP/STREAM|::|ENCODING| (:|DEFAULT| :|DEFAULT|)
  (:|UTF-8| |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
  (|COMMON-LISP|::|OTHERWISE|
   (|COMMON-LISP|::|CERROR| "Continue using :external-format :default"
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<Your ASDF component is using encoding ~S but it isn't recognized. Your system should :defsystem-depends-on (:asdf-encodings).~:>")
    |UIOP/STREAM|::|ENCODING|)
   :|DEFAULT|)))
(|COMMON-LISP|::|DEFVAR| |UIOP/STREAM|::|*ENCODING-EXTERNAL-FORMAT-HOOK*|
 #'|UIOP/STREAM|::|DEFAULT-ENCODING-EXTERNAL-FORMAT|
 "Hook for an extension (e.g. ASDF-ENCODINGS) to define a better mapping\n
from non-default encodings to and implementation-defined external-format's")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|ENCODING-EXTERNAL-FORMAT|
 (|UIOP/STREAM|::|ENCODING|)
 "Transform a portable ENCODING keyword to an implementation-dependent EXTERNAL-FORMAT,\n
going through all the proper hooks."
 (|COMMON-LISP|::|FUNCALL| |UIOP/STREAM|::|*ENCODING-EXTERNAL-FORMAT-HOOK*|
  (|COMMON-LISP|::|OR| |UIOP/STREAM|::|ENCODING|
   |UIOP/STREAM|::|*DEFAULT-ENCODING*|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/STREAM|::|*DEFAULT-ENCODING*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|ALWAYS-DEFAULT-ENCODING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|ALWAYS-DEFAULT-ENCODING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/STREAM|::|*ENCODING-DETECTION-HOOK*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|DETECT-ENCODING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|DETECT-ENCODING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/STREAM|::|DEFAULT-ENCODING-EXTERNAL-FORMAT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|DEFAULT-ENCODING-EXTERNAL-FORMAT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/STREAM|::|ENCODING|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/STREAM|::|*ENCODING-EXTERNAL-FORMAT-HOOK*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|ENCODING-EXTERNAL-FORMAT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|ENCODING-EXTERNAL-FORMAT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/STREAM|::|ENCODING|)))
(|COMMON-LISP|::|DEFVAR| |UIOP/STREAM|::|*STANDARD-READTABLE*|
 (|COMMON-LISP|::|WITH-STANDARD-IO-SYNTAX| |COMMON-LISP|::|*READTABLE*|)
 "The standard readtable, implementing the syntax specified by the CLHS.\n
It must never be modified, though only good implementations will even enforce that.")
(|COMMON-LISP|::|DEFMACRO| |UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX|
 ((|COMMON-LISP|::|&KEY| (|COMMON-LISP|::|PACKAGE| :|CL|))
  |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)
 "Establish safe CL reader options around the evaluation of BODY"
 `(|UIOP/STREAM|::|CALL-WITH-SAFE-IO-SYNTAX|
   #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
      (|COMMON-LISP|::|LET|
       ((|COMMON-LISP|::|*PACKAGE*|
         (|COMMON-LISP|::|FIND-PACKAGE| ,|COMMON-LISP|::|PACKAGE|)))
       ,@|UIOP/STREAM|::|BODY|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|CALL-WITH-SAFE-IO-SYNTAX|
 (|UIOP/STREAM|::|THUNK| |COMMON-LISP|::|&KEY|
  (|COMMON-LISP|::|PACKAGE| :|CL|))
 (|COMMON-LISP|::|WITH-STANDARD-IO-SYNTAX|
  (|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|*PACKAGE*|
     (|COMMON-LISP|::|FIND-PACKAGE| |COMMON-LISP|::|PACKAGE|))
    (|COMMON-LISP|::|*READ-DEFAULT-FLOAT-FORMAT*|
     '|COMMON-LISP|::|DOUBLE-FLOAT|)
    (|COMMON-LISP|::|*PRINT-READABLY*| |COMMON-LISP|::|NIL|)
    (|COMMON-LISP|::|*READ-EVAL*| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|FUNCALL| |UIOP/STREAM|::|THUNK|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SAFE-READ-FROM-STRING|
 (|COMMON-LISP|::|STRING| |COMMON-LISP|::|&KEY|
  (|COMMON-LISP|::|PACKAGE| :|CL|)
  (|UIOP/STREAM|::|EOF-ERROR-P| |COMMON-LISP|::|T|) |UIOP/STREAM|::|EOF-VALUE|
  (|UIOP/STREAM|::|START| 0.) |UIOP/STREAM|::|END|
  |UIOP/STREAM|::|PRESERVE-WHITESPACE|)
 "Read from STRING using a safe syntax, as per WITH-SAFE-IO-SYNTAX"
 (|UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX| (:|PACKAGE| |COMMON-LISP|::|PACKAGE|)
  (|COMMON-LISP|::|READ-FROM-STRING| |COMMON-LISP|::|STRING|
   |UIOP/STREAM|::|EOF-ERROR-P| |UIOP/STREAM|::|EOF-VALUE| :|START|
   |UIOP/STREAM|::|START| :|END| |UIOP/STREAM|::|END| :|PRESERVE-WHITESPACE|
   |UIOP/STREAM|::|PRESERVE-WHITESPACE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/STREAM|::|*STANDARD-READTABLE*|))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX|)
(|SYSTEM|::|%PUTD| '|UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Establish safe CL reader options around the evaluation of BODY"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16668| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G16669| #1#) (#4=#:|G16670| #3#)
       (|COMMON-LISP|::|PACKAGE|
        (|COMMON-LISP|::|LET|
         ((#5=#:|KWD-ARG-16671|
           (|COMMON-LISP|::|GETF| #4# ':|PACKAGE| '#6=(|COMMON-LISP|::|NIL|))))
         (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQ| #5# '#6#)
          (|COMMON-LISP|::|PROGN| :|CL|) #5#)))
       (|UIOP/STREAM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|SYSTEM|::|KEYWORD-TEST| #4# '(:|PACKAGE|))
      (|COMMON-LISP|::|BLOCK| |UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX|
       `(|UIOP/STREAM|::|CALL-WITH-SAFE-IO-SYNTAX|
         #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
            (|COMMON-LISP|::|LET|
             ((|COMMON-LISP|::|*PACKAGE*|
               (|COMMON-LISP|::|FIND-PACKAGE| ,|COMMON-LISP|::|PACKAGE|)))
             ,@|UIOP/STREAM|::|BODY|))))))))
  '((|COMMON-LISP|::|&KEY| (|COMMON-LISP|::|PACKAGE| :|CL|))
    |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|CALL-WITH-SAFE-IO-SYNTAX|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|CALL-WITH-SAFE-IO-SYNTAX|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|THUNK| |COMMON-LISP|::|&KEY|
    (|COMMON-LISP|::|PACKAGE| :|CL|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SAFE-READ-FROM-STRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SAFE-READ-FROM-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STRING| |COMMON-LISP|::|&KEY|
    (|COMMON-LISP|::|PACKAGE| :|CL|)
    (|UIOP/STREAM|::|EOF-ERROR-P| |COMMON-LISP|::|T|)
    |UIOP/STREAM|::|EOF-VALUE| (|UIOP/STREAM|::|START| 0.) |UIOP/STREAM|::|END|
    |UIOP/STREAM|::|PRESERVE-WHITESPACE|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|CALL-WITH-OUTPUT-FILE|
 (|COMMON-LISP|::|PATHNAME| |UIOP/STREAM|::|THUNK| |COMMON-LISP|::|&KEY|
  (|UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
  (|UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
  (|UIOP/STREAM|::|IF-EXISTS| :|ERROR|)
  (|UIOP/STREAM|::|IF-DOES-NOT-EXIST| :|CREATE|))
 "Open FILE for input with given recognizes options, call THUNK with the resulting stream.\n
Other keys are accepted but discarded."
 (|COMMON-LISP|::|WITH-OPEN-FILE|
  (|UIOP/STREAM|::|S| |COMMON-LISP|::|PATHNAME| :|DIRECTION| :|OUTPUT|
   :|ELEMENT-TYPE| |UIOP/STREAM|::|ELEMENT-TYPE| :|EXTERNAL-FORMAT|
   |UIOP/STREAM|::|EXTERNAL-FORMAT| :|IF-EXISTS| |UIOP/STREAM|::|IF-EXISTS|
   :|IF-DOES-NOT-EXIST| |UIOP/STREAM|::|IF-DOES-NOT-EXIST|)
  (|COMMON-LISP|::|FUNCALL| |UIOP/STREAM|::|THUNK| |UIOP/STREAM|::|S|)))
(|COMMON-LISP|::|DEFMACRO| |UIOP/STREAM|::|WITH-OUTPUT-FILE|
 ((|UIOP/STREAM|::|VAR| |COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|&REST|
   |UIOP/STREAM|::|KEYS| |COMMON-LISP|::|&KEY| |UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-EXISTS|
   |UIOP/STREAM|::|IF-DOES-NOT-EXIST|)
  |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORE| |UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-EXISTS|
   |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
 `(|UIOP/STREAM|::|CALL-WITH-OUTPUT-FILE| ,|COMMON-LISP|::|PATHNAME|
   #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|VAR|) ,@|UIOP/STREAM|::|BODY|)
   ,@|UIOP/STREAM|::|KEYS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|CALL-WITH-OUTPUT|
 (|UIOP/STREAM|::|OUTPUT| |COMMON-LISP|::|FUNCTION| |COMMON-LISP|::|&KEY|
  |UIOP/STREAM|::|KEYS|)
 "Calls FUNCTION with an actual stream argument,\n
behaving like FORMAT with respect to how stream designators are interpreted:\n
If OUTPUT is a STREAM, use it as the stream.\n
If OUTPUT is NIL, use a STRING-OUTPUT-STREAM as the stream, and return the resulting string.\n
If OUTPUT is T, use *STANDARD-OUTPUT* as the stream.\n
If OUTPUT is a STRING with a fill-pointer, use it as a string-output-stream.\n
If OUTPUT is a PATHNAME, open the file and write to it, passing KEYS to WITH-OUTPUT-FILE\n
-- this latter as an extension since ASDF 3.1.\n
Otherwise, signal an error."
 (|COMMON-LISP|::|ETYPECASE| |UIOP/STREAM|::|OUTPUT|
  (|COMMON-LISP|::|NULL|
   (|COMMON-LISP|::|WITH-OUTPUT-TO-STRING| (|COMMON-LISP|::|STREAM|)
    (|COMMON-LISP|::|FUNCALL| |COMMON-LISP|::|FUNCTION|
     |COMMON-LISP|::|STREAM|)))
  ((|COMMON-LISP|::|EQL| |COMMON-LISP|::|T|)
   (|COMMON-LISP|::|FUNCALL| |COMMON-LISP|::|FUNCTION|
    |COMMON-LISP|::|*STANDARD-OUTPUT*|))
  (|COMMON-LISP|::|STREAM|
   (|COMMON-LISP|::|FUNCALL| |COMMON-LISP|::|FUNCTION|
    |UIOP/STREAM|::|OUTPUT|))
  (|COMMON-LISP|::|STRING|
   (|COMMON-LISP|::|ASSERT|
    (|COMMON-LISP|::|FILL-POINTER| |UIOP/STREAM|::|OUTPUT|))
   (|COMMON-LISP|::|WITH-OUTPUT-TO-STRING|
    (|COMMON-LISP|::|STREAM| |UIOP/STREAM|::|OUTPUT|)
    (|COMMON-LISP|::|FUNCALL| |COMMON-LISP|::|FUNCTION|
     |COMMON-LISP|::|STREAM|)))
  (|COMMON-LISP|::|PATHNAME|
   (|COMMON-LISP|::|APPLY| '|UIOP/STREAM|::|CALL-WITH-OUTPUT-FILE|
    |UIOP/STREAM|::|OUTPUT| |COMMON-LISP|::|FUNCTION| |UIOP/STREAM|::|KEYS|))))
(|COMMON-LISP|::|DEFMACRO| |UIOP/STREAM|::|WITH-OUTPUT|
 ((|UIOP/STREAM|::|OUTPUT-VAR| |COMMON-LISP|::|&OPTIONAL|
   (|UIOP/STREAM|::|VALUE| |UIOP/STREAM|::|OUTPUT-VAR|))
  |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)
 "Bind OUTPUT-VAR to an output stream, coercing VALUE (default: previous binding of OUTPUT-VAR)\n
as per FORMAT, and evaluate BODY within the scope of this binding."
 `(|UIOP/STREAM|::|CALL-WITH-OUTPUT| ,|UIOP/STREAM|::|VALUE|
   #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|OUTPUT-VAR|)
      ,@|UIOP/STREAM|::|BODY|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|OUTPUT-STRING|
 (|COMMON-LISP|::|STRING| |COMMON-LISP|::|&OPTIONAL| |UIOP/STREAM|::|OUTPUT|)
 "If the desired OUTPUT is not NIL, print the string to the output; otherwise return the string"
 (|COMMON-LISP|::|IF| |UIOP/STREAM|::|OUTPUT|
  (|UIOP/STREAM|::|WITH-OUTPUT| (|UIOP/STREAM|::|OUTPUT|)
   (|COMMON-LISP|::|PRINC| |COMMON-LISP|::|STRING| |UIOP/STREAM|::|OUTPUT|))
  |COMMON-LISP|::|STRING|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|CALL-WITH-OUTPUT-FILE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|CALL-WITH-OUTPUT-FILE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PATHNAME| |UIOP/STREAM|::|THUNK| |COMMON-LISP|::|&KEY|
    (|UIOP/STREAM|::|ELEMENT-TYPE|
     |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
    (|UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
    (|UIOP/STREAM|::|IF-EXISTS| :|ERROR|)
    (|UIOP/STREAM|::|IF-DOES-NOT-EXIST| :|CREATE|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/STREAM|::|WITH-OUTPUT-FILE|)
(|SYSTEM|::|%PUTD| '|UIOP/STREAM|::|WITH-OUTPUT-FILE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/STREAM|::|WITH-OUTPUT-FILE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16767| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G16768|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 2. 2. |COMMON-LISP|::|T|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/STREAM|::|WITH-OUTPUT-FILE| #1#
          '#4=(|UIOP/STREAM|::|VAR| |COMMON-LISP|::|PATHNAME|
               |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
               |COMMON-LISP|::|&KEY| |UIOP/STREAM|::|ELEMENT-TYPE|
               |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-EXISTS|
               |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
         #1#))
       (|UIOP/STREAM|::|VAR| (|COMMON-LISP|::|CAR| #3#))
       (|COMMON-LISP|::|PATHNAME| (|COMMON-LISP|::|CADR| . #5=(#3#)))
       (|UIOP/STREAM|::|KEYS| (|COMMON-LISP|::|CDDR| . #5#))
       (|UIOP/STREAM|::|ELEMENT-TYPE|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|ELEMENT-TYPE| .
         #6=(|COMMON-LISP|::|NIL|)))
       (|UIOP/STREAM|::|EXTERNAL-FORMAT|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|EXTERNAL-FORMAT| .
         #6#))
       (|UIOP/STREAM|::|IF-EXISTS|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|IF-EXISTS| . #6#))
       (|UIOP/STREAM|::|IF-DOES-NOT-EXIST|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|IF-DOES-NOT-EXIST| .
         #6#))
       (|UIOP/STREAM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|DECLARE|
       (|COMMON-LISP|::|IGNORE| |UIOP/STREAM|::|ELEMENT-TYPE|
        |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-EXISTS|
        |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
      (|SYSTEM|::|KEYWORD-TEST| |UIOP/STREAM|::|KEYS|
       '(:|IF-DOES-NOT-EXIST| :|IF-EXISTS| :|EXTERNAL-FORMAT| :|ELEMENT-TYPE|))
      (|COMMON-LISP|::|BLOCK| |UIOP/STREAM|::|WITH-OUTPUT-FILE|
       `(|UIOP/STREAM|::|CALL-WITH-OUTPUT-FILE| ,|COMMON-LISP|::|PATHNAME|
         #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|VAR|)
            ,@|UIOP/STREAM|::|BODY|)
         ,@|UIOP/STREAM|::|KEYS|))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|CALL-WITH-OUTPUT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|CALL-WITH-OUTPUT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|OUTPUT| |COMMON-LISP|::|FUNCTION| |COMMON-LISP|::|&KEY|
    |UIOP/STREAM|::|KEYS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/STREAM|::|WITH-OUTPUT|)
(|SYSTEM|::|%PUTD| '|UIOP/STREAM|::|WITH-OUTPUT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/STREAM|::|WITH-OUTPUT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Bind OUTPUT-VAR to an output stream, coercing VALUE (default: previous binding of OUTPUT-VAR)\n
as per FORMAT, and evaluate BODY within the scope of this binding."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16818| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G16819|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 1. 2. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/STREAM|::|WITH-OUTPUT| #1#
          '#4=(|UIOP/STREAM|::|OUTPUT-VAR| |COMMON-LISP|::|&OPTIONAL|
               (|UIOP/STREAM|::|VALUE| |UIOP/STREAM|::|OUTPUT-VAR|)))
         #1#))
       (|UIOP/STREAM|::|OUTPUT-VAR| (|COMMON-LISP|::|CAR| #3#))
       (|UIOP/STREAM|::|VALUE|
        (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CDR| . #5=(#3#))
         (|COMMON-LISP|::|CADR| . #5#) |UIOP/STREAM|::|OUTPUT-VAR|))
       (|UIOP/STREAM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/STREAM|::|WITH-OUTPUT|
       `(|UIOP/STREAM|::|CALL-WITH-OUTPUT| ,|UIOP/STREAM|::|VALUE|
         #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|OUTPUT-VAR|)
            ,@|UIOP/STREAM|::|BODY|)))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|OUTPUT-STRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|OUTPUT-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STRING| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/STREAM|::|OUTPUT|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|CALL-WITH-INPUT-FILE|
 (|COMMON-LISP|::|PATHNAME| |UIOP/STREAM|::|THUNK| |COMMON-LISP|::|&KEY|
  (|UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
  (|UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
  (|UIOP/STREAM|::|IF-DOES-NOT-EXIST| :|ERROR|))
 "Open FILE for input with given recognizes options, call THUNK with the resulting stream.\n
Other keys are accepted but discarded."
 (|COMMON-LISP|::|WITH-OPEN-FILE|
  (|UIOP/STREAM|::|S| |COMMON-LISP|::|PATHNAME| :|DIRECTION| :|INPUT|
   :|ELEMENT-TYPE| |UIOP/STREAM|::|ELEMENT-TYPE| :|EXTERNAL-FORMAT|
   |UIOP/STREAM|::|EXTERNAL-FORMAT| :|IF-DOES-NOT-EXIST|
   |UIOP/STREAM|::|IF-DOES-NOT-EXIST|)
  (|COMMON-LISP|::|FUNCALL| |UIOP/STREAM|::|THUNK| |UIOP/STREAM|::|S|)))
(|COMMON-LISP|::|DEFMACRO| |UIOP/STREAM|::|WITH-INPUT-FILE|
 ((|UIOP/STREAM|::|VAR| |COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|&REST|
   |UIOP/STREAM|::|KEYS| |COMMON-LISP|::|&KEY| |UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-DOES-NOT-EXIST|)
  |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORE| |UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
 `(|UIOP/STREAM|::|CALL-WITH-INPUT-FILE| ,|COMMON-LISP|::|PATHNAME|
   #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|VAR|) ,@|UIOP/STREAM|::|BODY|)
   ,@|UIOP/STREAM|::|KEYS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|CALL-WITH-INPUT|
 (|UIOP/STREAM|::|INPUT| |COMMON-LISP|::|FUNCTION| |COMMON-LISP|::|&KEY|
  |UIOP/STREAM|::|KEYS|)
 "Calls FUNCTION with an actual stream argument, interpreting\n
stream designators like READ, but also coercing strings to STRING-INPUT-STREAM,\n
and PATHNAME to FILE-STREAM.\n
If INPUT is a STREAM, use it as the stream.\n
If INPUT is NIL, use a *STANDARD-INPUT* as the stream.\n
If INPUT is T, use *TERMINAL-IO* as the stream.\n
If INPUT is a STRING, use it as a string-input-stream.\n
If INPUT is a PATHNAME, open it, passing KEYS to WITH-INPUT-FILE\n
-- the latter is an extension since ASDF 3.1.\n
Otherwise, signal an error."
 (|COMMON-LISP|::|ETYPECASE| |UIOP/STREAM|::|INPUT|
  (|COMMON-LISP|::|NULL|
   (|COMMON-LISP|::|FUNCALL| |COMMON-LISP|::|FUNCTION|
    |COMMON-LISP|::|*STANDARD-INPUT*|))
  ((|COMMON-LISP|::|EQL| |COMMON-LISP|::|T|)
   (|COMMON-LISP|::|FUNCALL| |COMMON-LISP|::|FUNCTION|
    |COMMON-LISP|::|*TERMINAL-IO*|))
  (|COMMON-LISP|::|STREAM|
   (|COMMON-LISP|::|FUNCALL| |COMMON-LISP|::|FUNCTION| |UIOP/STREAM|::|INPUT|))
  (|COMMON-LISP|::|STRING|
   (|COMMON-LISP|::|WITH-INPUT-FROM-STRING|
    (|COMMON-LISP|::|STREAM| |UIOP/STREAM|::|INPUT|)
    (|COMMON-LISP|::|FUNCALL| |COMMON-LISP|::|FUNCTION|
     |COMMON-LISP|::|STREAM|)))
  (|COMMON-LISP|::|PATHNAME|
   (|COMMON-LISP|::|APPLY| '|UIOP/STREAM|::|CALL-WITH-INPUT-FILE|
    |UIOP/STREAM|::|INPUT| |COMMON-LISP|::|FUNCTION| |UIOP/STREAM|::|KEYS|))))
(|COMMON-LISP|::|DEFMACRO| |UIOP/STREAM|::|WITH-INPUT|
 ((|UIOP/STREAM|::|INPUT-VAR| |COMMON-LISP|::|&OPTIONAL|
   (|UIOP/STREAM|::|VALUE| |UIOP/STREAM|::|INPUT-VAR|))
  |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)
 "Bind INPUT-VAR to an input stream, coercing VALUE (default: previous binding of INPUT-VAR)\n
as per CALL-WITH-INPUT, and evaluate BODY within the scope of this binding."
 `(|UIOP/STREAM|::|CALL-WITH-INPUT| ,|UIOP/STREAM|::|VALUE|
   #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|INPUT-VAR|)
      ,@|UIOP/STREAM|::|BODY|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|INPUT-STRING|
 (|COMMON-LISP|::|&OPTIONAL| |UIOP/STREAM|::|INPUT|)
 "If the desired INPUT is a string, return that string; otherwise slurp the INPUT into a string\n
and return that"
 (|COMMON-LISP|::|IF| (|COMMON-LISP|::|STRINGP| |UIOP/STREAM|::|INPUT|)
  |UIOP/STREAM|::|INPUT|
  (|UIOP/STREAM|::|WITH-INPUT| (|UIOP/STREAM|::|INPUT|)
   (|COMMON-LISP|::|FUNCALL| '|UIOP/STREAM|::|SLURP-STREAM-STRING|
    |UIOP/STREAM|::|INPUT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|CALL-WITH-INPUT-FILE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|CALL-WITH-INPUT-FILE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PATHNAME| |UIOP/STREAM|::|THUNK| |COMMON-LISP|::|&KEY|
    (|UIOP/STREAM|::|ELEMENT-TYPE|
     |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
    (|UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
    (|UIOP/STREAM|::|IF-DOES-NOT-EXIST| :|ERROR|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/STREAM|::|WITH-INPUT-FILE|)
(|SYSTEM|::|%PUTD| '|UIOP/STREAM|::|WITH-INPUT-FILE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/STREAM|::|WITH-INPUT-FILE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16872| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G16873|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 2. 2. |COMMON-LISP|::|T|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/STREAM|::|WITH-INPUT-FILE| #1#
          '#4=(|UIOP/STREAM|::|VAR| |COMMON-LISP|::|PATHNAME|
               |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
               |COMMON-LISP|::|&KEY| |UIOP/STREAM|::|ELEMENT-TYPE|
               |UIOP/STREAM|::|EXTERNAL-FORMAT|
               |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
         #1#))
       (|UIOP/STREAM|::|VAR| (|COMMON-LISP|::|CAR| #3#))
       (|COMMON-LISP|::|PATHNAME| (|COMMON-LISP|::|CADR| . #5=(#3#)))
       (|UIOP/STREAM|::|KEYS| (|COMMON-LISP|::|CDDR| . #5#))
       (|UIOP/STREAM|::|ELEMENT-TYPE|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|ELEMENT-TYPE| .
         #6=(|COMMON-LISP|::|NIL|)))
       (|UIOP/STREAM|::|EXTERNAL-FORMAT|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|EXTERNAL-FORMAT| .
         #6#))
       (|UIOP/STREAM|::|IF-DOES-NOT-EXIST|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|IF-DOES-NOT-EXIST| .
         #6#))
       (|UIOP/STREAM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|DECLARE|
       (|COMMON-LISP|::|IGNORE| |UIOP/STREAM|::|ELEMENT-TYPE|
        |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
      (|SYSTEM|::|KEYWORD-TEST| |UIOP/STREAM|::|KEYS|
       '(:|IF-DOES-NOT-EXIST| :|EXTERNAL-FORMAT| :|ELEMENT-TYPE|))
      (|COMMON-LISP|::|BLOCK| |UIOP/STREAM|::|WITH-INPUT-FILE|
       `(|UIOP/STREAM|::|CALL-WITH-INPUT-FILE| ,|COMMON-LISP|::|PATHNAME|
         #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|VAR|)
            ,@|UIOP/STREAM|::|BODY|)
         ,@|UIOP/STREAM|::|KEYS|))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|CALL-WITH-INPUT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|CALL-WITH-INPUT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|INPUT| |COMMON-LISP|::|FUNCTION| |COMMON-LISP|::|&KEY|
    |UIOP/STREAM|::|KEYS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/STREAM|::|WITH-INPUT|)
(|SYSTEM|::|%PUTD| '|UIOP/STREAM|::|WITH-INPUT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/STREAM|::|WITH-INPUT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Bind INPUT-VAR to an input stream, coercing VALUE (default: previous binding of INPUT-VAR)\n
as per CALL-WITH-INPUT, and evaluate BODY within the scope of this binding."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16914| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G16915|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 1. 2. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/STREAM|::|WITH-INPUT| #1#
          '#4=(|UIOP/STREAM|::|INPUT-VAR| |COMMON-LISP|::|&OPTIONAL|
               (|UIOP/STREAM|::|VALUE| |UIOP/STREAM|::|INPUT-VAR|)))
         #1#))
       (|UIOP/STREAM|::|INPUT-VAR| (|COMMON-LISP|::|CAR| #3#))
       (|UIOP/STREAM|::|VALUE|
        (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CDR| . #5=(#3#))
         (|COMMON-LISP|::|CADR| . #5#) |UIOP/STREAM|::|INPUT-VAR|))
       (|UIOP/STREAM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/STREAM|::|WITH-INPUT|
       `(|UIOP/STREAM|::|CALL-WITH-INPUT| ,|UIOP/STREAM|::|VALUE|
         #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|INPUT-VAR|)
            ,@|UIOP/STREAM|::|BODY|)))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|INPUT-STRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|INPUT-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL| |UIOP/STREAM|::|INPUT|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|NULL-DEVICE-PATHNAME|
 |COMMON-LISP|::|NIL|
 "Pathname to a bit bucket device that discards any information written to it\n
and always returns EOF when read from"
 (|UIOP/OS|::|OS-COND|
  ((|UIOP/OS|::|OS-UNIX-P|)
   #S(|COMMON-LISP|::|PATHNAME| :|HOST| |COMMON-LISP|::|NIL|
      :|DEVICE| |COMMON-LISP|::|NIL| :|DIRECTORY| (:|ABSOLUTE| "dev")
      :|NAME| "null" :|TYPE| |COMMON-LISP|::|NIL|
      :|VERSION| |COMMON-LISP|::|NIL|))
  ((|UIOP/OS|::|OS-WINDOWS-P|)
   #S(|COMMON-LISP|::|PATHNAME| :|HOST| |COMMON-LISP|::|NIL|
      :|DEVICE| |COMMON-LISP|::|NIL| :|DIRECTORY| |COMMON-LISP|::|NIL|
      :|NAME| "NUL" :|TYPE| |COMMON-LISP|::|NIL|
      :|VERSION| |COMMON-LISP|::|NIL|))
  (|COMMON-LISP|::|T| (|COMMON-LISP|::|ERROR| "No /dev/null on your OS"))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|CALL-WITH-NULL-INPUT|
 (|UIOP/STREAM|::|FUN| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
  |COMMON-LISP|::|&KEY| |UIOP/STREAM|::|ELEMENT-TYPE|
  |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-DOES-NOT-EXIST|)
 "Call FUN with an input stream from the null device; pass keyword arguments to OPEN."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORE| |UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
 (|COMMON-LISP|::|APPLY| '|UIOP/STREAM|::|CALL-WITH-INPUT-FILE|
  (|UIOP/STREAM|::|NULL-DEVICE-PATHNAME|) |UIOP/STREAM|::|FUN|
  |UIOP/STREAM|::|KEYS|))
(|COMMON-LISP|::|DEFMACRO| |UIOP/STREAM|::|WITH-NULL-INPUT|
 ((|UIOP/STREAM|::|VAR| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
   |COMMON-LISP|::|&KEY| |UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-DOES-NOT-EXIST|)
  |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORE| |UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
 "Evaluate BODY in a context when VAR is bound to an input stream accessing the null device.\n
Pass keyword arguments to OPEN."
 `(|UIOP/STREAM|::|CALL-WITH-NULL-INPUT|
   #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|VAR|) ,@|UIOP/STREAM|::|BODY|)
   ,@|UIOP/STREAM|::|KEYS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|CALL-WITH-NULL-OUTPUT|
 (|UIOP/STREAM|::|FUN| |COMMON-LISP|::|&KEY|
  (|UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
  (|UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
  (|UIOP/STREAM|::|IF-EXISTS| :|OVERWRITE|)
  (|UIOP/STREAM|::|IF-DOES-NOT-EXIST| :|ERROR|))
 "Call FUN with an output stream to the null device; pass keyword arguments to OPEN."
 (|UIOP/STREAM|::|CALL-WITH-OUTPUT-FILE|
  (|UIOP/STREAM|::|NULL-DEVICE-PATHNAME|) |UIOP/STREAM|::|FUN| :|ELEMENT-TYPE|
  |UIOP/STREAM|::|ELEMENT-TYPE| :|EXTERNAL-FORMAT|
  |UIOP/STREAM|::|EXTERNAL-FORMAT| :|IF-EXISTS| |UIOP/STREAM|::|IF-EXISTS|
  :|IF-DOES-NOT-EXIST| |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
(|COMMON-LISP|::|DEFMACRO| |UIOP/STREAM|::|WITH-NULL-OUTPUT|
 ((|UIOP/STREAM|::|VAR| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
   |COMMON-LISP|::|&KEY| |UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-DOES-NOT-EXIST|
   |UIOP/STREAM|::|IF-EXISTS|)
  |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)
 "Evaluate BODY in a context when VAR is bound to an output stream accessing the null device.\n
Pass keyword arguments to OPEN."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORE| |UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-EXISTS|
   |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
 `(|UIOP/STREAM|::|CALL-WITH-NULL-OUTPUT|
   #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|VAR|) ,@|UIOP/STREAM|::|BODY|)
   ,@|UIOP/STREAM|::|KEYS|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|NULL-DEVICE-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|NULL-DEVICE-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|CALL-WITH-NULL-INPUT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|CALL-WITH-NULL-INPUT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|FUN| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
    |COMMON-LISP|::|&KEY| |UIOP/STREAM|::|ELEMENT-TYPE|
    |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-DOES-NOT-EXIST|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/STREAM|::|WITH-NULL-INPUT|)
(|SYSTEM|::|%PUTD| '|UIOP/STREAM|::|WITH-NULL-INPUT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/STREAM|::|WITH-NULL-INPUT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Evaluate BODY in a context when VAR is bound to an input stream accessing the null device.\n
Pass keyword arguments to OPEN."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16965| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G16966|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 1. 1. |COMMON-LISP|::|T|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/STREAM|::|WITH-NULL-INPUT| #1#
          '#4=(|UIOP/STREAM|::|VAR| |COMMON-LISP|::|&REST|
               |UIOP/STREAM|::|KEYS| |COMMON-LISP|::|&KEY|
               |UIOP/STREAM|::|ELEMENT-TYPE| |UIOP/STREAM|::|EXTERNAL-FORMAT|
               |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
         #1#))
       (|UIOP/STREAM|::|VAR| (|COMMON-LISP|::|CAR| #3#))
       (|UIOP/STREAM|::|KEYS| (|COMMON-LISP|::|CDR| #3#))
       (|UIOP/STREAM|::|ELEMENT-TYPE|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|ELEMENT-TYPE| .
         #5=(|COMMON-LISP|::|NIL|)))
       (|UIOP/STREAM|::|EXTERNAL-FORMAT|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|EXTERNAL-FORMAT| .
         #5#))
       (|UIOP/STREAM|::|IF-DOES-NOT-EXIST|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|IF-DOES-NOT-EXIST| .
         #5#))
       (|UIOP/STREAM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|DECLARE|
       (|COMMON-LISP|::|IGNORE| |UIOP/STREAM|::|ELEMENT-TYPE|
        |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
      (|SYSTEM|::|KEYWORD-TEST| |UIOP/STREAM|::|KEYS|
       '(:|IF-DOES-NOT-EXIST| :|EXTERNAL-FORMAT| :|ELEMENT-TYPE|))
      (|COMMON-LISP|::|BLOCK| |UIOP/STREAM|::|WITH-NULL-INPUT|
       `(|UIOP/STREAM|::|CALL-WITH-NULL-INPUT|
         #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|VAR|)
            ,@|UIOP/STREAM|::|BODY|)
         ,@|UIOP/STREAM|::|KEYS|))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|CALL-WITH-NULL-OUTPUT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|CALL-WITH-NULL-OUTPUT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|FUN| |COMMON-LISP|::|&KEY|
    (|UIOP/STREAM|::|ELEMENT-TYPE|
     |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
    (|UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
    (|UIOP/STREAM|::|IF-EXISTS| :|OVERWRITE|)
    (|UIOP/STREAM|::|IF-DOES-NOT-EXIST| :|ERROR|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/STREAM|::|WITH-NULL-OUTPUT|)
(|SYSTEM|::|%PUTD| '|UIOP/STREAM|::|WITH-NULL-OUTPUT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/STREAM|::|WITH-NULL-OUTPUT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Evaluate BODY in a context when VAR is bound to an output stream accessing the null device.\n
Pass keyword arguments to OPEN."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16993| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G16994|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 1. 1. |COMMON-LISP|::|T|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/STREAM|::|WITH-NULL-OUTPUT| #1#
          '#4=(|UIOP/STREAM|::|VAR| |COMMON-LISP|::|&REST|
               |UIOP/STREAM|::|KEYS| |COMMON-LISP|::|&KEY|
               |UIOP/STREAM|::|ELEMENT-TYPE| |UIOP/STREAM|::|EXTERNAL-FORMAT|
               |UIOP/STREAM|::|IF-DOES-NOT-EXIST| |UIOP/STREAM|::|IF-EXISTS|))
         #1#))
       (|UIOP/STREAM|::|VAR| (|COMMON-LISP|::|CAR| #3#))
       (|UIOP/STREAM|::|KEYS| (|COMMON-LISP|::|CDR| #3#))
       (|UIOP/STREAM|::|ELEMENT-TYPE|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|ELEMENT-TYPE| .
         #5=(|COMMON-LISP|::|NIL|)))
       (|UIOP/STREAM|::|EXTERNAL-FORMAT|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|EXTERNAL-FORMAT| .
         #5#))
       (|UIOP/STREAM|::|IF-DOES-NOT-EXIST|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|IF-DOES-NOT-EXIST| .
         #5#))
       (|UIOP/STREAM|::|IF-EXISTS|
        (|COMMON-LISP|::|GETF| |UIOP/STREAM|::|KEYS| ':|IF-EXISTS| . #5#))
       (|UIOP/STREAM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|DECLARE|
       (|COMMON-LISP|::|IGNORE| |UIOP/STREAM|::|ELEMENT-TYPE|
        |UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|IF-EXISTS|
        |UIOP/STREAM|::|IF-DOES-NOT-EXIST|))
      (|SYSTEM|::|KEYWORD-TEST| |UIOP/STREAM|::|KEYS|
       '(:|IF-EXISTS| :|IF-DOES-NOT-EXIST| :|EXTERNAL-FORMAT| :|ELEMENT-TYPE|))
      (|COMMON-LISP|::|BLOCK| |UIOP/STREAM|::|WITH-NULL-OUTPUT|
       `(|UIOP/STREAM|::|CALL-WITH-NULL-OUTPUT|
         #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|VAR|)
            ,@|UIOP/STREAM|::|BODY|)
         ,@|UIOP/STREAM|::|KEYS|))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|FINISH-OUTPUTS|
 (|COMMON-LISP|::|&REST| |UIOP/STREAM|::|STREAMS|)
 "Finish output on the main output streams as well as any specified one.\n
Useful for portably flushing I/O before user input or program exit."
 (|COMMON-LISP|::|DOLIST|
  (|UIOP/STREAM|::|S|
   (|COMMON-LISP|::|APPEND| |UIOP/STREAM|::|STREAMS|
    (|COMMON-LISP|::|LIST| |UIOP/STREAM|::|*STDOUT*| |UIOP/STREAM|::|*STDERR*|
     |COMMON-LISP|::|*ERROR-OUTPUT*| |COMMON-LISP|::|*STANDARD-OUTPUT*|
     |COMMON-LISP|::|*TRACE-OUTPUT*| |COMMON-LISP|::|*DEBUG-IO*|
     |COMMON-LISP|::|*TERMINAL-IO*| |COMMON-LISP|::|*QUERY-IO*|)))
  (|COMMON-LISP|::|IGNORE-ERRORS|
   (|COMMON-LISP|::|FINISH-OUTPUT| |UIOP/STREAM|::|S|)))
 (|COMMON-LISP|::|VALUES|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|FORMAT!|
 (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|FORMAT| |COMMON-LISP|::|&REST|
  |UIOP/STREAM|::|ARGS|)
 "Just like format, but call finish-outputs before and after the output."
 (|UIOP/STREAM|::|FINISH-OUTPUTS| |COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|STREAM|
  |COMMON-LISP|::|FORMAT| |UIOP/STREAM|::|ARGS|)
 (|UIOP/STREAM|::|FINISH-OUTPUTS| |COMMON-LISP|::|STREAM|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SAFE-FORMAT!|
 (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|FORMAT| |COMMON-LISP|::|&REST|
  |UIOP/STREAM|::|ARGS|)
 "Variant of FORMAT that is safe against both\n
dangerous syntax configuration and errors while printing."
 (|UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|IGNORE-ERRORS|
   (|COMMON-LISP|::|APPLY| '|UIOP/STREAM|::|FORMAT!| |COMMON-LISP|::|STREAM|
    |COMMON-LISP|::|FORMAT| |UIOP/STREAM|::|ARGS|))
  (|UIOP/STREAM|::|FINISH-OUTPUTS| |COMMON-LISP|::|STREAM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|FINISH-OUTPUTS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|FINISH-OUTPUTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/STREAM|::|STREAMS|)))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|FORMAT!|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|FORMAT!|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STREAM| |COMMON-LISP|::|FORMAT| |COMMON-LISP|::|&REST|
    |UIOP/STREAM|::|ARGS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SAFE-FORMAT!|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SAFE-FORMAT!|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STREAM| |COMMON-LISP|::|FORMAT| |COMMON-LISP|::|&REST|
    |UIOP/STREAM|::|ARGS|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|COPY-STREAM-TO-STREAM|
 (|UIOP/STREAM|::|INPUT| |UIOP/STREAM|::|OUTPUT| |COMMON-LISP|::|&KEY|
  |UIOP/STREAM|::|ELEMENT-TYPE| |UIOP/STREAM|::|BUFFER-SIZE|
  |UIOP/STREAM|::|LINEWISE| |UIOP/STREAM|::|PREFIX|)
 "Copy the contents of the INPUT stream into the OUTPUT stream.\n
If LINEWISE is true, then read and copy the stream line by line, with an optional PREFIX.\n
Otherwise, using WRITE-SEQUENCE using a buffer of size BUFFER-SIZE."
 (|COMMON-LISP|::|WITH-OPEN-STREAM|
  (|UIOP/STREAM|::|INPUT| |UIOP/STREAM|::|INPUT|)
  (|COMMON-LISP|::|IF| |UIOP/STREAM|::|LINEWISE|
   (|UIOP/COMMON-LISP|::|LOOP*| :|FOR|
    (|UIOP/STREAM|::|LINE| |UIOP/STREAM|::|EOF|) |COMMON-LISP|::|=|
    (|COMMON-LISP|::|MULTIPLE-VALUE-LIST|
     (|COMMON-LISP|::|READ-LINE| |UIOP/STREAM|::|INPUT| |COMMON-LISP|::|NIL|
      |COMMON-LISP|::|NIL|))
    :|WHILE| |UIOP/STREAM|::|LINE| :|DO|
    (|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|PREFIX|
     (|COMMON-LISP|::|PRINC| |UIOP/STREAM|::|PREFIX| |UIOP/STREAM|::|OUTPUT|))
    (|COMMON-LISP|::|PRINC| |UIOP/STREAM|::|LINE| |UIOP/STREAM|::|OUTPUT|)
    (|COMMON-LISP|::|UNLESS| |UIOP/STREAM|::|EOF|
     (|COMMON-LISP|::|TERPRI| |UIOP/STREAM|::|OUTPUT|))
    (|COMMON-LISP|::|FINISH-OUTPUT| |UIOP/STREAM|::|OUTPUT|)
    (|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|EOF| (|COMMON-LISP|::|RETURN|)))
   (|COMMON-LISP|::|LOOP| :|WITH| |UIOP/STREAM|::|BUFFER-SIZE|
    |COMMON-LISP|::|=| (|COMMON-LISP|::|OR| |UIOP/STREAM|::|BUFFER-SIZE| 8192.)
    :|WITH| |UIOP/STREAM|::|BUFFER| |COMMON-LISP|::|=|
    (|COMMON-LISP|::|MAKE-ARRAY|
     (|COMMON-LISP|::|LIST| |UIOP/STREAM|::|BUFFER-SIZE|) :|ELEMENT-TYPE|
     (|COMMON-LISP|::|OR| |UIOP/STREAM|::|ELEMENT-TYPE|
      '|COMMON-LISP|::|CHARACTER|))
    :|FOR| |UIOP/STREAM|::|END| |COMMON-LISP|::|=|
    (|COMMON-LISP|::|READ-SEQUENCE| |UIOP/STREAM|::|BUFFER|
     |UIOP/STREAM|::|INPUT|)
    :|UNTIL| (|COMMON-LISP|::|ZEROP| |UIOP/STREAM|::|END|) :|DO|
    (|COMMON-LISP|::|WRITE-SEQUENCE| |UIOP/STREAM|::|BUFFER|
     |UIOP/STREAM|::|OUTPUT| :|END| |UIOP/STREAM|::|END|)
    (|COMMON-LISP|::|WHEN|
     (|COMMON-LISP|::|<| |UIOP/STREAM|::|END| |UIOP/STREAM|::|BUFFER-SIZE|)
     (|COMMON-LISP|::|RETURN|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|CONCATENATE-FILES|
 (|UIOP/STREAM|::|INPUTS| |UIOP/STREAM|::|OUTPUT|)
 "create a new OUTPUT file the contents of which a the concatenate of the INPUTS files."
 (|COMMON-LISP|::|WITH-OPEN-FILE|
  (|UIOP/STREAM|::|O| |UIOP/STREAM|::|OUTPUT| :|ELEMENT-TYPE|
   '(|COMMON-LISP|::|UNSIGNED-BYTE| 8.) :|DIRECTION| :|OUTPUT| :|IF-EXISTS|
   :|RENAME-AND-DELETE|)
  (|COMMON-LISP|::|DOLIST| (|UIOP/STREAM|::|INPUT| |UIOP/STREAM|::|INPUTS|)
   (|COMMON-LISP|::|WITH-OPEN-FILE|
    (|UIOP/STREAM|::|I| |UIOP/STREAM|::|INPUT| :|ELEMENT-TYPE|
     '(|COMMON-LISP|::|UNSIGNED-BYTE| 8.) :|DIRECTION| :|INPUT|
     :|IF-DOES-NOT-EXIST| :|ERROR|)
    (|UIOP/STREAM|::|COPY-STREAM-TO-STREAM| |UIOP/STREAM|::|I|
     |UIOP/STREAM|::|O| :|ELEMENT-TYPE|
     '(|COMMON-LISP|::|UNSIGNED-BYTE| 8.))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|COPY-FILE|
 (|UIOP/STREAM|::|INPUT| |UIOP/STREAM|::|OUTPUT|)
 "Copy contents of the INPUT file to the OUTPUT file"
 (|UIOP/STREAM|::|CONCATENATE-FILES|
  (|COMMON-LISP|::|LIST| |UIOP/STREAM|::|INPUT|) |UIOP/STREAM|::|OUTPUT|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SLURP-STREAM-STRING|
 (|UIOP/STREAM|::|INPUT| |COMMON-LISP|::|&KEY|
  (|UIOP/STREAM|::|ELEMENT-TYPE| '|COMMON-LISP|::|CHARACTER|)
  |UIOP/STREAM|::|STRIPPED|)
 "Read the contents of the INPUT stream as a string"
 (|COMMON-LISP|::|LET|
  ((|COMMON-LISP|::|STRING|
    (|COMMON-LISP|::|WITH-OPEN-STREAM|
     (|UIOP/STREAM|::|INPUT| |UIOP/STREAM|::|INPUT|)
     (|COMMON-LISP|::|WITH-OUTPUT-TO-STRING| (|UIOP/STREAM|::|OUTPUT|)
      (|UIOP/STREAM|::|COPY-STREAM-TO-STREAM| |UIOP/STREAM|::|INPUT|
       |UIOP/STREAM|::|OUTPUT| :|ELEMENT-TYPE|
       |UIOP/STREAM|::|ELEMENT-TYPE|)))))
  (|COMMON-LISP|::|IF| |UIOP/STREAM|::|STRIPPED|
   (|UIOP/UTILITY|::|STRIPLN| |COMMON-LISP|::|STRING|)
   |COMMON-LISP|::|STRING|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SLURP-STREAM-LINES|
 (|UIOP/STREAM|::|INPUT| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|COUNT|)
 "Read the contents of the INPUT stream as a list of lines, return those lines.\n\n
Note: relies on the Lisp's READ-LINE, but additionally removes any remaining CR\n
from the line-ending if the file or stream had CR+LF but Lisp only removed LF.\n\n
Read no more than COUNT lines."
 (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|COUNT|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|INTEGER|))
 (|COMMON-LISP|::|WITH-OPEN-STREAM|
  (|UIOP/STREAM|::|INPUT| |UIOP/STREAM|::|INPUT|)
  (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/STREAM|::|N| :|FROM| 0. :|FOR|
   |UIOP/STREAM|::|L| |COMMON-LISP|::|=|
   (|COMMON-LISP|::|AND|
    (|COMMON-LISP|::|OR| (|COMMON-LISP|::|NOT| |COMMON-LISP|::|COUNT|)
     (|COMMON-LISP|::|<| |UIOP/STREAM|::|N| |COMMON-LISP|::|COUNT|))
    (|COMMON-LISP|::|READ-LINE| |UIOP/STREAM|::|INPUT| |COMMON-LISP|::|NIL|
     |COMMON-LISP|::|NIL|))
   :|WHILE| |UIOP/STREAM|::|L| :|COLLECT|
   (|UIOP/UTILITY|::|STRIPLN| |UIOP/STREAM|::|L|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SLURP-STREAM-LINE|
 (|UIOP/STREAM|::|INPUT| |COMMON-LISP|::|&KEY| (|UIOP/STREAM|::|AT| 0.))
 "Read the contents of the INPUT stream as a list of lines,\n
then return the ACCESS-AT of that list of lines using the AT specifier.\n
PATH defaults to 0, i.e. return the first line.\n
PATH is typically an integer, or a list of an integer and a function.\n
If PATH is NIL, it will return all the lines in the file.\n\n
The stream will not be read beyond the Nth lines,\n
where N is the index specified by path\n
if path is either an integer or a list that starts with an integer."
 (|UIOP/UTILITY|::|ACCESS-AT|
  (|UIOP/STREAM|::|SLURP-STREAM-LINES| |UIOP/STREAM|::|INPUT| :|COUNT|
   (|UIOP/UTILITY|::|ACCESS-AT-COUNT| |UIOP/STREAM|::|AT|))
  |UIOP/STREAM|::|AT|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SLURP-STREAM-FORMS|
 (|UIOP/STREAM|::|INPUT| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|COUNT|)
 "Read the contents of the INPUT stream as a list of forms,\n
and return those forms.\n\n
If COUNT is null, read to the end of the stream;\n
if COUNT is an integer, stop after COUNT forms were read.\n\n
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof"
 (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|COUNT|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|INTEGER|))
 (|COMMON-LISP|::|LOOP| :|WITH| |UIOP/STREAM|::|EOF| |COMMON-LISP|::|=|
  '#:|EOF| :|FOR| |UIOP/STREAM|::|N| :|FROM| 0. :|FOR| |UIOP/STREAM|::|FORM|
  |COMMON-LISP|::|=|
  (|COMMON-LISP|::|IF|
   (|COMMON-LISP|::|AND| |COMMON-LISP|::|COUNT|
    (|COMMON-LISP|::|>=| |UIOP/STREAM|::|N| |COMMON-LISP|::|COUNT|))
   |UIOP/STREAM|::|EOF|
   (|COMMON-LISP|::|READ-PRESERVING-WHITESPACE| |UIOP/STREAM|::|INPUT|
    |COMMON-LISP|::|NIL| |UIOP/STREAM|::|EOF|))
  :|UNTIL| (|COMMON-LISP|::|EQ| |UIOP/STREAM|::|FORM| |UIOP/STREAM|::|EOF|)
  :|COLLECT| |UIOP/STREAM|::|FORM|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SLURP-STREAM-FORM|
 (|UIOP/STREAM|::|INPUT| |COMMON-LISP|::|&KEY| (|UIOP/STREAM|::|AT| 0.))
 "Read the contents of the INPUT stream as a list of forms,\n
then return the ACCESS-AT of these forms following the AT.\n
AT defaults to 0, i.e. return the first form.\n
AT is typically a list of integers.\n
If AT is NIL, it will return all the forms in the file.\n\n
The stream will not be read beyond the Nth form,\n
where N is the index specified by path,\n
if path is either an integer or a list that starts with an integer.\n\n
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof"
 (|UIOP/UTILITY|::|ACCESS-AT|
  (|UIOP/STREAM|::|SLURP-STREAM-FORMS| |UIOP/STREAM|::|INPUT| :|COUNT|
   (|UIOP/UTILITY|::|ACCESS-AT-COUNT| |UIOP/STREAM|::|AT|))
  |UIOP/STREAM|::|AT|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|READ-FILE-STRING|
 (|UIOP/STREAM|::|FILE| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|)
 "Open FILE with option KEYS, read its contents as a string"
 (|COMMON-LISP|::|APPLY| '|UIOP/STREAM|::|CALL-WITH-INPUT-FILE|
  |UIOP/STREAM|::|FILE| '|UIOP/STREAM|::|SLURP-STREAM-STRING|
  |UIOP/STREAM|::|KEYS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|READ-FILE-LINES|
 (|UIOP/STREAM|::|FILE| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|)
 "Open FILE with option KEYS, read its contents as a list of lines\n
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof"
 (|COMMON-LISP|::|APPLY| '|UIOP/STREAM|::|CALL-WITH-INPUT-FILE|
  |UIOP/STREAM|::|FILE| '|UIOP/STREAM|::|SLURP-STREAM-LINES|
  |UIOP/STREAM|::|KEYS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|READ-FILE-LINE|
 (|UIOP/STREAM|::|FILE| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
  |COMMON-LISP|::|&KEY| (|UIOP/STREAM|::|AT| 0.)
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Open input FILE with option KEYS (except AT),\n
and read its contents as per SLURP-STREAM-LINE with given AT specifier.\n
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof"
 (|COMMON-LISP|::|APPLY| '|UIOP/STREAM|::|CALL-WITH-INPUT-FILE|
  |UIOP/STREAM|::|FILE|
  #'(|COMMON-LISP|::|LAMBDA| (|UIOP/STREAM|::|INPUT|)
     (|UIOP/STREAM|::|SLURP-STREAM-LINE| |UIOP/STREAM|::|INPUT| :|AT|
      |UIOP/STREAM|::|AT|))
  (|UIOP/UTILITY|::|REMOVE-PLIST-KEY| :|AT| |UIOP/STREAM|::|KEYS|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|READ-FILE-FORMS|
 (|UIOP/STREAM|::|FILE| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
  |COMMON-LISP|::|&KEY| |COMMON-LISP|::|COUNT|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Open input FILE with option KEYS (except COUNT),\n
and read its contents as per SLURP-STREAM-FORMS with given COUNT.\n
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof"
 (|COMMON-LISP|::|APPLY| '|UIOP/STREAM|::|CALL-WITH-INPUT-FILE|
  |UIOP/STREAM|::|FILE|
  #'(|COMMON-LISP|::|LAMBDA| (|UIOP/STREAM|::|INPUT|)
     (|UIOP/STREAM|::|SLURP-STREAM-FORMS| |UIOP/STREAM|::|INPUT| :|COUNT|
      |COMMON-LISP|::|COUNT|))
  (|UIOP/UTILITY|::|REMOVE-PLIST-KEY| :|COUNT| |UIOP/STREAM|::|KEYS|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|READ-FILE-FORM|
 (|UIOP/STREAM|::|FILE| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
  |COMMON-LISP|::|&KEY| (|UIOP/STREAM|::|AT| 0.)
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Open input FILE with option KEYS (except AT),\n
and read its contents as per SLURP-STREAM-FORM with given AT specifier.\n
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof"
 (|COMMON-LISP|::|APPLY| '|UIOP/STREAM|::|CALL-WITH-INPUT-FILE|
  |UIOP/STREAM|::|FILE|
  #'(|COMMON-LISP|::|LAMBDA| (|UIOP/STREAM|::|INPUT|)
     (|UIOP/STREAM|::|SLURP-STREAM-FORM| |UIOP/STREAM|::|INPUT| :|AT|
      |UIOP/STREAM|::|AT|))
  (|UIOP/UTILITY|::|REMOVE-PLIST-KEY| :|AT| |UIOP/STREAM|::|KEYS|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SAFE-READ-FILE-LINE|
 (|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
  |COMMON-LISP|::|&KEY| (|COMMON-LISP|::|PACKAGE| :|CL|)
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Reads the specified line from the top of a file using a safe standardized syntax.\n
Extracts the line using READ-FILE-LINE,\n
within an WITH-SAFE-IO-SYNTAX using the specified PACKAGE."
 (|UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX| (:|PACKAGE| |COMMON-LISP|::|PACKAGE|)
  (|COMMON-LISP|::|APPLY| '|UIOP/STREAM|::|READ-FILE-LINE|
   |COMMON-LISP|::|PATHNAME|
   (|UIOP/UTILITY|::|REMOVE-PLIST-KEY| :|PACKAGE| |UIOP/STREAM|::|KEYS|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SAFE-READ-FILE-FORM|
 (|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
  |COMMON-LISP|::|&KEY| (|COMMON-LISP|::|PACKAGE| :|CL|)
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Reads the specified form from the top of a file using a safe standardized syntax.\n
Extracts the form using READ-FILE-FORM,\n
within an WITH-SAFE-IO-SYNTAX using the specified PACKAGE."
 (|UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX| (:|PACKAGE| |COMMON-LISP|::|PACKAGE|)
  (|COMMON-LISP|::|APPLY| '|UIOP/STREAM|::|READ-FILE-FORM|
   |COMMON-LISP|::|PATHNAME|
   (|UIOP/UTILITY|::|REMOVE-PLIST-KEY| :|PACKAGE| |UIOP/STREAM|::|KEYS|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|EVAL-INPUT| (|UIOP/STREAM|::|INPUT|)
 "Portably read and evaluate forms from INPUT, return the last values."
 (|UIOP/STREAM|::|WITH-INPUT| (|UIOP/STREAM|::|INPUT|)
  (|COMMON-LISP|::|LOOP| :|WITH| |UIOP/STREAM|::|RESULTS| :|WITH|
   |UIOP/STREAM|::|EOF| |COMMON-LISP|::|=| '#:|EOF| :|FOR|
   |UIOP/STREAM|::|FORM| |COMMON-LISP|::|=|
   (|COMMON-LISP|::|READ| |UIOP/STREAM|::|INPUT| |COMMON-LISP|::|NIL|
    |UIOP/STREAM|::|EOF|)
   :|UNTIL| (|COMMON-LISP|::|EQ| |UIOP/STREAM|::|FORM| |UIOP/STREAM|::|EOF|)
   :|DO|
   (|COMMON-LISP|::|SETF| |UIOP/STREAM|::|RESULTS|
    (|COMMON-LISP|::|MULTIPLE-VALUE-LIST|
     (|COMMON-LISP|::|EVAL| |UIOP/STREAM|::|FORM|)))
   :|FINALLY|
   (|COMMON-LISP|::|RETURN|
    (|COMMON-LISP|::|VALUES-LIST| |UIOP/STREAM|::|RESULTS|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|EVAL-THUNK| (|UIOP/STREAM|::|THUNK|)
 "Evaluate a THUNK of code:\n
If a function, FUNCALL it without arguments.\n
If a constant literal and not a sequence, return it.\n
If a cons or a symbol, EVAL it.\n
If a string, repeatedly read and evaluate from it, returning the last values."
 (|COMMON-LISP|::|ETYPECASE| |UIOP/STREAM|::|THUNK|
  ((|COMMON-LISP|::|OR| |COMMON-LISP|::|BOOLEAN| |COMMON-LISP|::|KEYWORD|
    |COMMON-LISP|::|NUMBER| |COMMON-LISP|::|CHARACTER|
    |COMMON-LISP|::|PATHNAME|)
   |UIOP/STREAM|::|THUNK|)
  ((|COMMON-LISP|::|OR| |COMMON-LISP|::|CONS| |COMMON-LISP|::|SYMBOL|)
   (|COMMON-LISP|::|EVAL| |UIOP/STREAM|::|THUNK|))
  #'(|COMMON-LISP|::|FUNCALL| |UIOP/STREAM|::|THUNK|)
  (|COMMON-LISP|::|STRING|
   (|UIOP/STREAM|::|EVAL-INPUT| |UIOP/STREAM|::|THUNK|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|STANDARD-EVAL-THUNK|
 (|UIOP/STREAM|::|THUNK| |COMMON-LISP|::|&KEY|
  (|COMMON-LISP|::|PACKAGE| :|CL|))
 "Like EVAL-THUNK, but in a more standardized evaluation context."
 (|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|THUNK|
  (|UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX| (:|PACKAGE| |COMMON-LISP|::|PACKAGE|)
   (|COMMON-LISP|::|LET| ((|COMMON-LISP|::|*READ-EVAL*| |COMMON-LISP|::|T|))
    (|UIOP/STREAM|::|EVAL-THUNK| |UIOP/STREAM|::|THUNK|)))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|COPY-STREAM-TO-STREAM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|COPY-STREAM-TO-STREAM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|INPUT| |UIOP/STREAM|::|OUTPUT| |COMMON-LISP|::|&KEY|
    |UIOP/STREAM|::|ELEMENT-TYPE| |UIOP/STREAM|::|BUFFER-SIZE|
    |UIOP/STREAM|::|LINEWISE| |UIOP/STREAM|::|PREFIX|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|CONCATENATE-FILES|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|CONCATENATE-FILES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|INPUTS| |UIOP/STREAM|::|OUTPUT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|COPY-FILE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|COPY-FILE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|INPUT| |UIOP/STREAM|::|OUTPUT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SLURP-STREAM-STRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SLURP-STREAM-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|INPUT| |COMMON-LISP|::|&KEY|
    (|UIOP/STREAM|::|ELEMENT-TYPE| '|COMMON-LISP|::|CHARACTER|)
    |UIOP/STREAM|::|STRIPPED|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SLURP-STREAM-LINES|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SLURP-STREAM-LINES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|INPUT| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|COUNT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SLURP-STREAM-LINE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SLURP-STREAM-LINE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|INPUT| |COMMON-LISP|::|&KEY| (|UIOP/STREAM|::|AT| 0.))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SLURP-STREAM-FORMS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SLURP-STREAM-FORMS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|INPUT| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|COUNT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SLURP-STREAM-FORM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SLURP-STREAM-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|INPUT| |COMMON-LISP|::|&KEY| (|UIOP/STREAM|::|AT| 0.))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|READ-FILE-STRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|READ-FILE-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|FILE| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|READ-FILE-LINES|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|READ-FILE-LINES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|FILE| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|READ-FILE-LINE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|READ-FILE-LINE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|FILE| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
    |COMMON-LISP|::|&KEY| (|UIOP/STREAM|::|AT| 0.)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|READ-FILE-FORMS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|READ-FILE-FORMS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|FILE| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
    |COMMON-LISP|::|&KEY| |COMMON-LISP|::|COUNT|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|READ-FILE-FORM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|READ-FILE-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|FILE| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
    |COMMON-LISP|::|&KEY| (|UIOP/STREAM|::|AT| 0.)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SAFE-READ-FILE-LINE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SAFE-READ-FILE-LINE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
    |COMMON-LISP|::|&KEY| (|COMMON-LISP|::|PACKAGE| :|CL|)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SAFE-READ-FILE-FORM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SAFE-READ-FILE-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
    |COMMON-LISP|::|&KEY| (|COMMON-LISP|::|PACKAGE| :|CL|)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|EVAL-INPUT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|EVAL-INPUT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/STREAM|::|INPUT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|EVAL-THUNK|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|EVAL-THUNK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/STREAM|::|THUNK|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|STANDARD-EVAL-THUNK|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|STANDARD-EVAL-THUNK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|THUNK| |COMMON-LISP|::|&KEY|
    (|COMMON-LISP|::|PACKAGE| :|CL|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|PRINTLN|
 (|UIOP/STREAM|::|X| |COMMON-LISP|::|&OPTIONAL|
  (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|*STANDARD-OUTPUT*|))
 "Variant of PRINC that also calls TERPRI afterwards"
 (|COMMON-LISP|::|PRINC| |UIOP/STREAM|::|X| |COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|TERPRI| |COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|FINISH-OUTPUT| |COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|VALUES|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|WRITELN|
 (|UIOP/STREAM|::|X| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
  |COMMON-LISP|::|&KEY|
  (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|*STANDARD-OUTPUT*|)
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Variant of WRITE that also calls TERPRI afterwards"
 (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|WRITE| |UIOP/STREAM|::|X|
  |UIOP/STREAM|::|KEYS|)
 (|COMMON-LISP|::|TERPRI| |COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|FINISH-OUTPUT| |COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|VALUES|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|PRINTLN|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|PRINTLN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|X| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|*STANDARD-OUTPUT*|))))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|WRITELN|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|WRITELN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|X| |COMMON-LISP|::|&REST| |UIOP/STREAM|::|KEYS|
    |COMMON-LISP|::|&KEY|
    (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|*STANDARD-OUTPUT*|)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|DEFAULT-TEMPORARY-DIRECTORY|
 |COMMON-LISP|::|NIL| "Return a default directory to use for temporary files"
 (|UIOP/OS|::|OS-COND|
  ((|UIOP/OS|::|OS-UNIX-P|)
   (|COMMON-LISP|::|OR|
    (|UIOP/FILESYSTEM|::|GETENV-PATHNAME| "TMPDIR" :|ENSURE-DIRECTORY|
     |COMMON-LISP|::|T|)
    (|UIOP/FILESYSTEM|::|PARSE-NATIVE-NAMESTRING| "/tmp/")))
  ((|UIOP/OS|::|OS-WINDOWS-P|)
   (|UIOP/FILESYSTEM|::|GETENV-PATHNAME| "TEMP" :|ENSURE-DIRECTORY|
    |COMMON-LISP|::|T|))
  (|COMMON-LISP|::|T|
   (|UIOP/PATHNAME|::|SUBPATHNAME| (|COMMON-LISP|::|USER-HOMEDIR-PATHNAME|)
    "tmp/"))))
(|COMMON-LISP|::|DEFVAR| |UIOP/STREAM|::|*TEMPORARY-DIRECTORY*|
 |COMMON-LISP|::|NIL| "User-configurable location for temporary files")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|TEMPORARY-DIRECTORY|
 |COMMON-LISP|::|NIL| "Return a directory to use for temporary files"
 (|COMMON-LISP|::|OR| |UIOP/STREAM|::|*TEMPORARY-DIRECTORY*|
  (|UIOP/STREAM|::|DEFAULT-TEMPORARY-DIRECTORY|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|SETUP-TEMPORARY-DIRECTORY|
 |COMMON-LISP|::|NIL| "Configure a default temporary directory to use."
 (|COMMON-LISP|::|SETF| |UIOP/STREAM|::|*TEMPORARY-DIRECTORY*|
  (|UIOP/STREAM|::|DEFAULT-TEMPORARY-DIRECTORY|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|CALL-WITH-TEMPORARY-FILE|
 (|UIOP/STREAM|::|THUNK| |COMMON-LISP|::|&KEY|
  (|UIOP/STREAM|::|WANT-STREAM-P| |COMMON-LISP|::|T|)
  (|UIOP/STREAM|::|WANT-PATHNAME-P| |COMMON-LISP|::|T|)
  (|UIOP/STREAM|::|DIRECTION| :|IO|) |UIOP/STREAM|::|KEEP|
  |UIOP/STREAM|::|AFTER| |COMMON-LISP|::|DIRECTORY|
  (|COMMON-LISP|::|TYPE| "tmp" |COMMON-LISP|::|TYPEP|) |UIOP/STREAM|::|PREFIX|
  (|UIOP/STREAM|::|SUFFIX|
   (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|TYPEP| "-tmp"))
  (|UIOP/STREAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
  (|UIOP/STREAM|::|EXTERNAL-FORMAT| |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|))
 "Call a THUNK with stream and/or pathname arguments identifying a temporary file.\n\n
The temporary file's pathname will be based on concatenating\n
PREFIX (or \"tmp\" if it's NIL), a random alphanumeric string,\n
and optional SUFFIX (defaults to \"-tmp\" if a type was provided)\n
and TYPE (defaults to \"tmp\", using a dot as separator if not NIL),\n
within DIRECTORY (defaulting to the TEMPORARY-DIRECTORY) if the PREFIX isn't absolute.\n\n
The file will be open with specified DIRECTION (defaults to :IO),\n
ELEMENT-TYPE (defaults to *DEFAULT-STREAM-ELEMENT-TYPE*) and\n
EXTERNAL-FORMAT (defaults to *UTF-8-EXTERNAL-FORMAT*).\n
If WANT-STREAM-P is true (the defaults to T), then THUNK will then be CALL-FUNCTION'ed\n
with the stream and the pathname (if WANT-PATHNAME-P is true, defaults to T),\n
and stream will be closed after the THUNK exits (either normally or abnormally).\n
If WANT-STREAM-P is false, then WANT-PATHAME-P must be true, and then\n
THUNK is only CALL-FUNCTION'ed after the stream is closed, with the pathname as argument.\n
Upon exit of THUNK, the AFTER thunk if defined is CALL-FUNCTION'ed with the pathname as argument.\n
If AFTER is defined, its results are returned, otherwise, the results of THUNK are returned.\n
Finally, the file will be deleted, unless the KEEP argument when CALL-FUNCTION'ed returns true."
 (|COMMON-LISP|::|CHECK-TYPE| |UIOP/STREAM|::|DIRECTION|
  (|COMMON-LISP|::|MEMBER| :|OUTPUT| :|IO|))
 (|COMMON-LISP|::|ASSERT|
  (|COMMON-LISP|::|OR| |UIOP/STREAM|::|WANT-STREAM-P|
   |UIOP/STREAM|::|WANT-PATHNAME-P|))
 (|COMMON-LISP|::|LOOP| :|WITH| |UIOP/STREAM|::|PREFIX-PN| |COMMON-LISP|::|=|
  (|UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME|
   (|COMMON-LISP|::|OR| |UIOP/STREAM|::|PREFIX| "tmp")
   (|COMMON-LISP|::|OR|
    (|UIOP/PATHNAME|::|ENSURE-PATHNAME| |COMMON-LISP|::|DIRECTORY|
     :|NAMESTRING| :|NATIVE| :|ENSURE-DIRECTORY| |COMMON-LISP|::|T|
     :|ENSURE-PHYSICAL| |COMMON-LISP|::|T|)
    #'|UIOP/STREAM|::|TEMPORARY-DIRECTORY|))
  :|WITH| |UIOP/STREAM|::|PREFIX-NNS| |COMMON-LISP|::|=|
  (|UIOP/FILESYSTEM|::|NATIVE-NAMESTRING| |UIOP/STREAM|::|PREFIX-PN|) :|WITH|
  |UIOP/STREAM|::|RESULTS| |COMMON-LISP|::|=|
  (|COMMON-LISP|::|PROGN|
   (|COMMON-LISP|::|ENSURE-DIRECTORIES-EXIST| |UIOP/STREAM|::|PREFIX-PN|)
   |COMMON-LISP|::|NIL|)
  :|FOR| |UIOP/STREAM|::|COUNTER| :|FROM|
  (|COMMON-LISP|::|RANDOM| (|COMMON-LISP|::|EXPT| 36. 8.)) :|FOR|
  |COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|=|
  (|UIOP/FILESYSTEM|::|PARSE-NATIVE-NAMESTRING|
   (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "~A~36R~@[~A~]~@[.~A~]"
    |UIOP/STREAM|::|PREFIX-NNS| |UIOP/STREAM|::|COUNTER|
    |UIOP/STREAM|::|SUFFIX|
    (|COMMON-LISP|::|UNLESS|
     (|COMMON-LISP|::|EQ| |COMMON-LISP|::|TYPE| :|UNSPECIFIC|)
     |COMMON-LISP|::|TYPE|)))
  :|FOR| |UIOP/STREAM|::|OKP| |COMMON-LISP|::|=| |COMMON-LISP|::|NIL| :|DO|
  (|COMMON-LISP|::|UNWIND-PROTECT|
   (|COMMON-LISP|::|PROGN|
    (|COMMON-LISP|::|ENSURE-DIRECTORIES-EXIST| |COMMON-LISP|::|PATHNAME|)
    (|COMMON-LISP|::|WITH-OPEN-FILE|
     (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|PATHNAME| :|DIRECTION|
      |UIOP/STREAM|::|DIRECTION| :|ELEMENT-TYPE| |UIOP/STREAM|::|ELEMENT-TYPE|
      :|EXTERNAL-FORMAT| |UIOP/STREAM|::|EXTERNAL-FORMAT| :|IF-EXISTS|
      |COMMON-LISP|::|NIL| :|IF-DOES-NOT-EXIST| :|CREATE|)
     (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|STREAM|
      (|COMMON-LISP|::|SETF| |UIOP/STREAM|::|OKP| |COMMON-LISP|::|PATHNAME|)
      (|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|WANT-STREAM-P|
       (|COMMON-LISP|::|SETF| |UIOP/STREAM|::|RESULTS|
        (|COMMON-LISP|::|MULTIPLE-VALUE-LIST|
         (|COMMON-LISP|::|IF| |UIOP/STREAM|::|WANT-PATHNAME-P|
          (|COMMON-LISP|::|FUNCALL| |UIOP/STREAM|::|THUNK|
           |COMMON-LISP|::|STREAM| |COMMON-LISP|::|PATHNAME|)
          (|COMMON-LISP|::|FUNCALL| |UIOP/STREAM|::|THUNK|
           |COMMON-LISP|::|STREAM|)))))))
    (|COMMON-LISP|::|COND|
     ((|COMMON-LISP|::|NOT| |UIOP/STREAM|::|OKP|) |COMMON-LISP|::|NIL|)
     (|UIOP/STREAM|::|AFTER|
      (|COMMON-LISP|::|RETURN|
       (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/STREAM|::|AFTER|
        |UIOP/STREAM|::|OKP|)))
     ((|COMMON-LISP|::|AND| |UIOP/STREAM|::|WANT-PATHNAME-P|
       (|COMMON-LISP|::|NOT| |UIOP/STREAM|::|WANT-STREAM-P|))
      (|COMMON-LISP|::|RETURN|
       (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/STREAM|::|THUNK|
        |UIOP/STREAM|::|OKP|)))
     (|COMMON-LISP|::|T|
      (|COMMON-LISP|::|RETURN|
       (|COMMON-LISP|::|VALUES-LIST| |UIOP/STREAM|::|RESULTS|)))))
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|AND| |UIOP/STREAM|::|OKP|
     (|COMMON-LISP|::|NOT|
      (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/STREAM|::|KEEP|)))
    (|COMMON-LISP|::|IGNORE-ERRORS|
     (|UIOP/FILESYSTEM|::|DELETE-FILE-IF-EXISTS| |UIOP/STREAM|::|OKP|))))))
(|COMMON-LISP|::|DEFMACRO| |UIOP/STREAM|::|WITH-TEMPORARY-FILE|
 ((|COMMON-LISP|::|&KEY|
   (|COMMON-LISP|::|STREAM| (|COMMON-LISP|::|GENSYM| "STREAM")
    |COMMON-LISP|::|STREAMP|)
   (|COMMON-LISP|::|PATHNAME| (|COMMON-LISP|::|GENSYM| "PATHNAME")
    |COMMON-LISP|::|PATHNAMEP|)
   |COMMON-LISP|::|DIRECTORY| |UIOP/STREAM|::|PREFIX| |UIOP/STREAM|::|SUFFIX|
   |COMMON-LISP|::|TYPE| |UIOP/STREAM|::|KEEP| |UIOP/STREAM|::|DIRECTION|
   |UIOP/STREAM|::|ELEMENT-TYPE| |UIOP/STREAM|::|EXTERNAL-FORMAT|)
  |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)
 "Evaluate BODY where the symbols specified by keyword arguments\n
STREAM and PATHNAME (if respectively specified) are bound corresponding\n
to a newly created temporary file ready for I/O, as per CALL-WITH-TEMPORARY-FILE.\n
At least one of STREAM or PATHNAME must be specified.\n
If the STREAM is not specified, it will be closed before the BODY is evaluated.\n
If STREAM is specified, then the :CLOSE-STREAM label if it appears in the BODY,\n
separates forms run before and after the stream is closed.\n
The values of the last form of the BODY (not counting the separating :CLOSE-STREAM) are returned.\n
Upon success, the KEEP form is evaluated and the file is is deleted unless it evaluates to TRUE."
 (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|STREAM| |COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|PATHNAME|
  |COMMON-LISP|::|SYMBOL|)
 (|COMMON-LISP|::|ASSERT|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|STREAMP| |COMMON-LISP|::|PATHNAMEP|))
 (|COMMON-LISP|::|LET*|
  ((|UIOP/STREAM|::|AFTERP|
    (|COMMON-LISP|::|POSITION| :|CLOSE-STREAM| |UIOP/STREAM|::|BODY|))
   (|UIOP/STREAM|::|BEFORE|
    (|COMMON-LISP|::|IF| |UIOP/STREAM|::|AFTERP|
     (|COMMON-LISP|::|SUBSEQ| |UIOP/STREAM|::|BODY| 0. |UIOP/STREAM|::|AFTERP|)
     |UIOP/STREAM|::|BODY|))
   (|UIOP/STREAM|::|AFTER|
    (|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|AFTERP|
     (|COMMON-LISP|::|SUBSEQ| |UIOP/STREAM|::|BODY|
      (|COMMON-LISP|::|1+| |UIOP/STREAM|::|AFTERP|))))
   (|UIOP/STREAM|::|BEFOREF| (|COMMON-LISP|::|GENSYM| "BEFORE"))
   (|UIOP/STREAM|::|AFTERF| (|COMMON-LISP|::|GENSYM| "AFTER")))
  `(|COMMON-LISP|::|FLET|
    (,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|BEFORE|
        `((,|UIOP/STREAM|::|BEFOREF|
           (,@(|COMMON-LISP|::|WHEN| |COMMON-LISP|::|STREAMP|
               `(,|COMMON-LISP|::|STREAM|))
            ,@(|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PATHNAMEP|
               `(,|COMMON-LISP|::|PATHNAME|)))
           ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|AFTER|
              `((|COMMON-LISP|::|DECLARE|
                 (|COMMON-LISP|::|IGNORABLE| ,|COMMON-LISP|::|PATHNAME|))))
           ,@|UIOP/STREAM|::|BEFORE|)))
     ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|AFTER|
        (|COMMON-LISP|::|ASSERT| |COMMON-LISP|::|PATHNAMEP|)
        `((,|UIOP/STREAM|::|AFTERF| (,|COMMON-LISP|::|PATHNAME|)
           ,@|UIOP/STREAM|::|AFTER|))))
    (|COMMON-LISP|::|DECLARE|
     (|COMMON-LISP|::|DYNAMIC-EXTENT|
      ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|BEFORE|
         `(#',|UIOP/STREAM|::|BEFOREF|))
      ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|AFTER|
         `(#',|UIOP/STREAM|::|AFTERF|))))
    (|UIOP/STREAM|::|CALL-WITH-TEMPORARY-FILE|
     ,(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|BEFORE|
       `#',|UIOP/STREAM|::|BEFOREF|)
     :|WANT-STREAM-P| ,|COMMON-LISP|::|STREAMP| :|WANT-PATHNAME-P|
     ,|COMMON-LISP|::|PATHNAMEP|
     ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|DIRECTION|
        `(:|DIRECTION| ,|UIOP/STREAM|::|DIRECTION|))
     ,@(|COMMON-LISP|::|WHEN| |COMMON-LISP|::|DIRECTORY|
        `(:|DIRECTORY| ,|COMMON-LISP|::|DIRECTORY|))
     ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|PREFIX|
        `(:|PREFIX| ,|UIOP/STREAM|::|PREFIX|))
     ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|SUFFIX|
        `(:|SUFFIX| ,|UIOP/STREAM|::|SUFFIX|))
     ,@(|COMMON-LISP|::|WHEN| |COMMON-LISP|::|TYPE|
        `(:|TYPE| ,|COMMON-LISP|::|TYPE|))
     ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|KEEP|
        `(:|KEEP| ,|UIOP/STREAM|::|KEEP|))
     ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|AFTER|
        `(:|AFTER| #',|UIOP/STREAM|::|AFTERF|))
     ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|ELEMENT-TYPE|
        `(:|ELEMENT-TYPE| ,|UIOP/STREAM|::|ELEMENT-TYPE|))
     ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|EXTERNAL-FORMAT|
        `(:|EXTERNAL-FORMAT| ,|UIOP/STREAM|::|EXTERNAL-FORMAT|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|GET-TEMPORARY-FILE|
 (|COMMON-LISP|::|&KEY| |COMMON-LISP|::|DIRECTORY| |UIOP/STREAM|::|PREFIX|
  |UIOP/STREAM|::|SUFFIX| |COMMON-LISP|::|TYPE|)
 (|UIOP/STREAM|::|WITH-TEMPORARY-FILE|
  (:|PATHNAME| |UIOP/STREAM|::|PN| :|KEEP| |COMMON-LISP|::|T| :|DIRECTORY|
   |COMMON-LISP|::|DIRECTORY| :|PREFIX| |UIOP/STREAM|::|PREFIX| :|SUFFIX|
   |UIOP/STREAM|::|SUFFIX| :|TYPE| |COMMON-LISP|::|TYPE|)
  |UIOP/STREAM|::|PN|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|ADD-PATHNAME-SUFFIX|
 (|COMMON-LISP|::|PATHNAME| |UIOP/STREAM|::|SUFFIX| |COMMON-LISP|::|&REST|
  |UIOP/STREAM|::|KEYS|)
 "Add a SUFFIX to the name of a PATHNAME, return a new pathname.\n
Further KEYS can be passed to MAKE-PATHNAME."
 (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|MAKE-PATHNAME| :|NAME|
  (|UIOP/UTILITY|::|STRCAT|
   (|COMMON-LISP|::|PATHNAME-NAME| |COMMON-LISP|::|PATHNAME|)
   |UIOP/STREAM|::|SUFFIX|)
  :|DEFAULTS| |COMMON-LISP|::|PATHNAME| |UIOP/STREAM|::|KEYS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|TMPIZE-PATHNAME| (|UIOP/STREAM|::|X|)
 "Return a new pathname modified from X by adding a trivial random suffix.\n
A new empty file with said temporary pathname is created, to ensure there is no\n
clash with any concurrent process attempting the same thing."
 (|COMMON-LISP|::|LET*|
  ((|UIOP/STREAM|::|PX|
    (|UIOP/PATHNAME|::|ENSURE-PATHNAME| |UIOP/STREAM|::|X| :|ENSURE-PHYSICAL|
     |COMMON-LISP|::|T|))
   (|UIOP/STREAM|::|PREFIX|
    (|UIOP/UTILITY|::|IF-LET|
     (|UIOP/STREAM|::|N| (|COMMON-LISP|::|PATHNAME-NAME| |UIOP/STREAM|::|PX|))
     (|UIOP/UTILITY|::|STRCAT| |UIOP/STREAM|::|N| "-tmp") "tmp"))
   (|COMMON-LISP|::|DIRECTORY|
    (|UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME| |UIOP/STREAM|::|PX|)))
  (|UIOP/STREAM|::|GET-TEMPORARY-FILE| :|DIRECTORY| |COMMON-LISP|::|DIRECTORY|
   :|PREFIX| |UIOP/STREAM|::|PREFIX| :|TYPE|
   (|COMMON-LISP|::|PATHNAME-TYPE| |UIOP/STREAM|::|PX|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|CALL-WITH-STAGING-PATHNAME|
 (|COMMON-LISP|::|PATHNAME| |UIOP/STREAM|::|FUN|)
 "Calls FUN with a staging pathname, and atomically\n
renames the staging pathname to the PATHNAME in the end.\n
NB: this protects only against failure of the program, not against concurrent attempts.\n
For the latter case, we ought pick a random suffix and atomically open it."
 (|COMMON-LISP|::|LET*|
  ((|COMMON-LISP|::|PATHNAME|
    (|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|PATHNAME|))
   (|UIOP/STREAM|::|STAGING|
    (|UIOP/STREAM|::|TMPIZE-PATHNAME| |COMMON-LISP|::|PATHNAME|)))
  (|COMMON-LISP|::|UNWIND-PROTECT|
   (|COMMON-LISP|::|MULTIPLE-VALUE-PROG1|
    (|COMMON-LISP|::|FUNCALL| |UIOP/STREAM|::|FUN| |UIOP/STREAM|::|STAGING|)
    (|UIOP/FILESYSTEM|::|RENAME-FILE-OVERWRITING-TARGET|
     |UIOP/STREAM|::|STAGING| |COMMON-LISP|::|PATHNAME|))
   (|UIOP/FILESYSTEM|::|DELETE-FILE-IF-EXISTS| |UIOP/STREAM|::|STAGING|))))
(|COMMON-LISP|::|DEFMACRO| |UIOP/STREAM|::|WITH-STAGING-PATHNAME|
 ((|UIOP/STREAM|::|PATHNAME-VAR| |COMMON-LISP|::|&OPTIONAL|
   (|UIOP/STREAM|::|PATHNAME-VALUE| |UIOP/STREAM|::|PATHNAME-VAR|))
  |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)
 "Trivial syntax wrapper for CALL-WITH-STAGING-PATHNAME"
 `(|UIOP/STREAM|::|CALL-WITH-STAGING-PATHNAME| ,|UIOP/STREAM|::|PATHNAME-VALUE|
   #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|PATHNAME-VAR|)
      ,@|UIOP/STREAM|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|DEFAULT-TEMPORARY-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|DEFAULT-TEMPORARY-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/STREAM|::|*TEMPORARY-DIRECTORY*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|TEMPORARY-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|TEMPORARY-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|SETUP-TEMPORARY-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|SETUP-TEMPORARY-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|CALL-WITH-TEMPORARY-FILE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|CALL-WITH-TEMPORARY-FILE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/STREAM|::|THUNK| |COMMON-LISP|::|&KEY|
    (|UIOP/STREAM|::|WANT-STREAM-P| |COMMON-LISP|::|T|)
    (|UIOP/STREAM|::|WANT-PATHNAME-P| |COMMON-LISP|::|T|)
    (|UIOP/STREAM|::|DIRECTION| :|IO|) |UIOP/STREAM|::|KEEP|
    |UIOP/STREAM|::|AFTER| |COMMON-LISP|::|DIRECTORY|
    (|COMMON-LISP|::|TYPE| "tmp" |COMMON-LISP|::|TYPEP|)
    |UIOP/STREAM|::|PREFIX|
    (|UIOP/STREAM|::|SUFFIX|
     (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|TYPEP| "-tmp"))
    (|UIOP/STREAM|::|ELEMENT-TYPE|
     |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
    (|UIOP/STREAM|::|EXTERNAL-FORMAT|
     |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/STREAM|::|WITH-TEMPORARY-FILE|)
(|SYSTEM|::|%PUTD| '|UIOP/STREAM|::|WITH-TEMPORARY-FILE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/STREAM|::|WITH-TEMPORARY-FILE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Evaluate BODY where the symbols specified by keyword arguments\n
STREAM and PATHNAME (if respectively specified) are bound corresponding\n
to a newly created temporary file ready for I/O, as per CALL-WITH-TEMPORARY-FILE.\n
At least one of STREAM or PATHNAME must be specified.\n
If the STREAM is not specified, it will be closed before the BODY is evaluated.\n
If STREAM is specified, then the :CLOSE-STREAM label if it appears in the BODY,\n
separates forms run before and after the stream is closed.\n
The values of the last form of the BODY (not counting the separating :CLOSE-STREAM) are returned.\n
Upon success, the KEEP form is evaluated and the file is is deleted unless it evaluates to TRUE."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G17606| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G17607| #1#) (#4=#:|G17608| #3#)
       (|COMMON-LISP|::|STREAMP| . #5=(|COMMON-LISP|::|T|))
       (|COMMON-LISP|::|STREAM|
        (|COMMON-LISP|::|LET|
         ((#6=#:|KWD-ARG-17609|
           (|COMMON-LISP|::|GETF| #4# ':|STREAM| '#7=(|COMMON-LISP|::|NIL|))))
         (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQ| #6# '#7#)
          (|COMMON-LISP|::|PROGN|
           (|COMMON-LISP|::|SETQ| |COMMON-LISP|::|STREAMP| .
            #8=(|COMMON-LISP|::|NIL|))
           #9=(|COMMON-LISP|::|GENSYM| "STREAM"))
          #6#)))
       (|COMMON-LISP|::|PATHNAMEP| . #5#)
       (|COMMON-LISP|::|PATHNAME|
        (|COMMON-LISP|::|LET|
         ((#10=#:|KWD-ARG-17610|
           (|COMMON-LISP|::|GETF| #4# ':|PATHNAME| '#7#)))
         (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQ| #10# '#7#)
          (|COMMON-LISP|::|PROGN|
           (|COMMON-LISP|::|SETQ| |COMMON-LISP|::|PATHNAMEP| . #8#)
           #11=(|COMMON-LISP|::|GENSYM| "PATHNAME"))
          #10#)))
       (|COMMON-LISP|::|DIRECTORY|
        (|COMMON-LISP|::|GETF| #4# ':|DIRECTORY| . #12=(|COMMON-LISP|::|NIL|)))
       (|UIOP/STREAM|::|PREFIX| (|COMMON-LISP|::|GETF| #4# ':|PREFIX| . #12#))
       (|UIOP/STREAM|::|SUFFIX| (|COMMON-LISP|::|GETF| #4# ':|SUFFIX| . #12#))
       (|COMMON-LISP|::|TYPE| (|COMMON-LISP|::|GETF| #4# ':|TYPE| . #12#))
       (|UIOP/STREAM|::|KEEP| (|COMMON-LISP|::|GETF| #4# ':|KEEP| . #12#))
       (|UIOP/STREAM|::|DIRECTION|
        (|COMMON-LISP|::|GETF| #4# ':|DIRECTION| . #12#))
       (|UIOP/STREAM|::|ELEMENT-TYPE|
        (|COMMON-LISP|::|GETF| #4# ':|ELEMENT-TYPE| . #12#))
       (|UIOP/STREAM|::|EXTERNAL-FORMAT|
        (|COMMON-LISP|::|GETF| #4# ':|EXTERNAL-FORMAT| . #12#))
       (|UIOP/STREAM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|SYSTEM|::|KEYWORD-TEST| #4#
       '(:|EXTERNAL-FORMAT| :|ELEMENT-TYPE| :|DIRECTION| :|KEEP| :|TYPE|
         :|SUFFIX| :|PREFIX| :|DIRECTORY| :|PATHNAME| :|STREAM|))
      (|COMMON-LISP|::|BLOCK| |UIOP/STREAM|::|WITH-TEMPORARY-FILE|
       (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|STREAM|
        |COMMON-LISP|::|SYMBOL|)
       (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|PATHNAME|
        |COMMON-LISP|::|SYMBOL|)
       (|COMMON-LISP|::|ASSERT|
        (|COMMON-LISP|::|OR| |COMMON-LISP|::|STREAMP|
         |COMMON-LISP|::|PATHNAMEP|))
       (|COMMON-LISP|::|LET*|
        ((|UIOP/STREAM|::|AFTERP|
          (|COMMON-LISP|::|POSITION| :|CLOSE-STREAM| |UIOP/STREAM|::|BODY|))
         (|UIOP/STREAM|::|BEFORE|
          (|COMMON-LISP|::|IF| |UIOP/STREAM|::|AFTERP|
           (|COMMON-LISP|::|SUBSEQ| |UIOP/STREAM|::|BODY| 0.
            |UIOP/STREAM|::|AFTERP|)
           |UIOP/STREAM|::|BODY|))
         (|UIOP/STREAM|::|AFTER|
          (|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|AFTERP|
           (|COMMON-LISP|::|SUBSEQ| |UIOP/STREAM|::|BODY|
            (|COMMON-LISP|::|1+| |UIOP/STREAM|::|AFTERP|))))
         (|UIOP/STREAM|::|BEFOREF| (|COMMON-LISP|::|GENSYM| "BEFORE"))
         (|UIOP/STREAM|::|AFTERF| (|COMMON-LISP|::|GENSYM| "AFTER")))
        `(|COMMON-LISP|::|FLET|
          (,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|BEFORE|
              `((,|UIOP/STREAM|::|BEFOREF|
                 (,@(|COMMON-LISP|::|WHEN| |COMMON-LISP|::|STREAMP|
                     `(,|COMMON-LISP|::|STREAM|))
                  ,@(|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PATHNAMEP|
                     `(,|COMMON-LISP|::|PATHNAME|)))
                 ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|AFTER|
                    `((|COMMON-LISP|::|DECLARE|
                       (|COMMON-LISP|::|IGNORABLE|
                        ,|COMMON-LISP|::|PATHNAME|))))
                 ,@|UIOP/STREAM|::|BEFORE|)))
           ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|AFTER|
              (|COMMON-LISP|::|ASSERT| |COMMON-LISP|::|PATHNAMEP|)
              `((,|UIOP/STREAM|::|AFTERF| (,|COMMON-LISP|::|PATHNAME|)
                 ,@|UIOP/STREAM|::|AFTER|))))
          (|COMMON-LISP|::|DECLARE|
           (|COMMON-LISP|::|DYNAMIC-EXTENT|
            ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|BEFORE|
               `(#',|UIOP/STREAM|::|BEFOREF|))
            ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|AFTER|
               `(#',|UIOP/STREAM|::|AFTERF|))))
          (|UIOP/STREAM|::|CALL-WITH-TEMPORARY-FILE|
           ,(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|BEFORE|
             `#',|UIOP/STREAM|::|BEFOREF|)
           :|WANT-STREAM-P| ,|COMMON-LISP|::|STREAMP| :|WANT-PATHNAME-P|
           ,|COMMON-LISP|::|PATHNAMEP|
           ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|DIRECTION|
              `(:|DIRECTION| ,|UIOP/STREAM|::|DIRECTION|))
           ,@(|COMMON-LISP|::|WHEN| |COMMON-LISP|::|DIRECTORY|
              `(:|DIRECTORY| ,|COMMON-LISP|::|DIRECTORY|))
           ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|PREFIX|
              `(:|PREFIX| ,|UIOP/STREAM|::|PREFIX|))
           ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|SUFFIX|
              `(:|SUFFIX| ,|UIOP/STREAM|::|SUFFIX|))
           ,@(|COMMON-LISP|::|WHEN| |COMMON-LISP|::|TYPE|
              `(:|TYPE| ,|COMMON-LISP|::|TYPE|))
           ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|KEEP|
              `(:|KEEP| ,|UIOP/STREAM|::|KEEP|))
           ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|AFTER|
              `(:|AFTER| #',|UIOP/STREAM|::|AFTERF|))
           ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|ELEMENT-TYPE|
              `(:|ELEMENT-TYPE| ,|UIOP/STREAM|::|ELEMENT-TYPE|))
           ,@(|COMMON-LISP|::|WHEN| |UIOP/STREAM|::|EXTERNAL-FORMAT|
              `(:|EXTERNAL-FORMAT| ,|UIOP/STREAM|::|EXTERNAL-FORMAT|))))))))))
  '((|COMMON-LISP|::|&KEY|
     (|COMMON-LISP|::|STREAM| #9# |COMMON-LISP|::|STREAMP|)
     (|COMMON-LISP|::|PATHNAME| #11# |COMMON-LISP|::|PATHNAMEP|)
     |COMMON-LISP|::|DIRECTORY| |UIOP/STREAM|::|PREFIX| |UIOP/STREAM|::|SUFFIX|
     |COMMON-LISP|::|TYPE| |UIOP/STREAM|::|KEEP| |UIOP/STREAM|::|DIRECTION|
     |UIOP/STREAM|::|ELEMENT-TYPE| |UIOP/STREAM|::|EXTERNAL-FORMAT|)
    |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|GET-TEMPORARY-FILE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|GET-TEMPORARY-FILE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| |COMMON-LISP|::|DIRECTORY| |UIOP/STREAM|::|PREFIX|
    |UIOP/STREAM|::|SUFFIX| |COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|ADD-PATHNAME-SUFFIX|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|ADD-PATHNAME-SUFFIX|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PATHNAME| |UIOP/STREAM|::|SUFFIX| |COMMON-LISP|::|&REST|
    |UIOP/STREAM|::|KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|TMPIZE-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|TMPIZE-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/STREAM|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|CALL-WITH-STAGING-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|CALL-WITH-STAGING-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PATHNAME| |UIOP/STREAM|::|FUN|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/STREAM|::|WITH-STAGING-PATHNAME|)
(|SYSTEM|::|%PUTD| '|UIOP/STREAM|::|WITH-STAGING-PATHNAME|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/STREAM|::|WITH-STAGING-PATHNAME|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Trivial syntax wrapper for CALL-WITH-STAGING-PATHNAME"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G17760| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G17761|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 1. 2. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/STREAM|::|WITH-STAGING-PATHNAME| #1#
          '#4=(|UIOP/STREAM|::|PATHNAME-VAR| |COMMON-LISP|::|&OPTIONAL|
               (|UIOP/STREAM|::|PATHNAME-VALUE|
                |UIOP/STREAM|::|PATHNAME-VAR|)))
         #1#))
       (|UIOP/STREAM|::|PATHNAME-VAR| (|COMMON-LISP|::|CAR| #3#))
       (|UIOP/STREAM|::|PATHNAME-VALUE|
        (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CDR| . #5=(#3#))
         (|COMMON-LISP|::|CADR| . #5#) |UIOP/STREAM|::|PATHNAME-VAR|))
       (|UIOP/STREAM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/STREAM|::|WITH-STAGING-PATHNAME|
       `(|UIOP/STREAM|::|CALL-WITH-STAGING-PATHNAME|
         ,|UIOP/STREAM|::|PATHNAME-VALUE|
         #'(|COMMON-LISP|::|LAMBDA| (,|UIOP/STREAM|::|PATHNAME-VAR|)
            ,@|UIOP/STREAM|::|BODY|)))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/STREAM|::|BODY|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|FILE-STREAM-P|
 (|COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|TYPEP| |COMMON-LISP|::|STREAM|
  '|COMMON-LISP|::|FILE-STREAM|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/STREAM|::|FILE-OR-SYNONYM-STREAM-P|
 (|COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|OR| (|UIOP/STREAM|::|FILE-STREAM-P| |COMMON-LISP|::|STREAM|)
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|TYPEP| |COMMON-LISP|::|STREAM|
    '|COMMON-LISP|::|SYNONYM-STREAM|)
   (|UIOP/STREAM|::|FILE-OR-SYNONYM-STREAM-P|
    (|COMMON-LISP|::|SYMBOL-VALUE|
     (|COMMON-LISP|::|SYNONYM-STREAM-SYMBOL| |COMMON-LISP|::|STREAM|))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|FILE-STREAM-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|FILE-STREAM-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|STREAM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/STREAM|::|FILE-OR-SYNONYM-STREAM-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/STREAM|::|FILE-OR-SYNONYM-STREAM-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|STREAM|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|UIOP/IMAGE|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP/PACKAGE| :|UIOP/UTILITY| :|UIOP/PATHNAME|
    :|UIOP/STREAM| :|UIOP/OS|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|*IMAGE-DUMPED-P*| #:|RAW-COMMAND-LINE-ARGUMENTS|
    #:|*COMMAND-LINE-ARGUMENTS*| #:|COMMAND-LINE-ARGUMENTS|
    #:|RAW-COMMAND-LINE-ARGUMENTS| #:|SETUP-COMMAND-LINE-ARGUMENTS| #:|ARGV0|
    #:|*LISP-INTERACTION*| #:|FATAL-CONDITION| #:|FATAL-CONDITION-P|
    #:|HANDLE-FATAL-CONDITION| #:|CALL-WITH-FATAL-CONDITION-HANDLER|
    #:|WITH-FATAL-CONDITION-HANDLER| #:|*IMAGE-RESTORE-HOOK*|
    #:|*IMAGE-PRELUDE*| #:|*IMAGE-ENTRY-POINT*| #:|*IMAGE-POSTLUDE*|
    #:|*IMAGE-DUMP-HOOK*| #:|QUIT| #:|DIE| #:|RAW-PRINT-BACKTRACE|
    #:|PRINT-BACKTRACE| #:|PRINT-CONDITION-BACKTRACE| #:|SHELL-BOOLEAN-EXIT|
    #:|REGISTER-IMAGE-RESTORE-HOOK| #:|REGISTER-IMAGE-DUMP-HOOK|
    #:|CALL-IMAGE-RESTORE-HOOK| #:|CALL-IMAGE-DUMP-HOOK| #:|RESTORE-IMAGE|
    #:|DUMP-IMAGE| #:|CREATE-IMAGE|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|UIOP/IMAGE|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/IMAGE"))
(|COMMON-LISP|::|DEFVAR| |UIOP/IMAGE|::|*LISP-INTERACTION*| |COMMON-LISP|::|T|
 "Is this an interactive Lisp environment, or is it batch processing?")
(|COMMON-LISP|::|DEFVAR| |UIOP/IMAGE|::|*COMMAND-LINE-ARGUMENTS*|
 |COMMON-LISP|::|NIL| "Command-line arguments")
(|COMMON-LISP|::|DEFVAR| |UIOP/IMAGE|::|*IMAGE-DUMPED-P*| |COMMON-LISP|::|NIL|
 "Is this a dumped image? As a standalone executable?")
(|COMMON-LISP|::|DEFVAR| |UIOP/IMAGE|::|*IMAGE-RESTORE-HOOK*|
 |COMMON-LISP|::|NIL|
 "Functions to call (in reverse order) when the image is restored")
(|COMMON-LISP|::|DEFVAR| |UIOP/IMAGE|::|*IMAGE-RESTORED-P*|
 |COMMON-LISP|::|NIL|
 "Has the image been restored? A boolean, or :in-progress while restoring, :in-regress while dumping")
(|COMMON-LISP|::|DEFVAR| |UIOP/IMAGE|::|*IMAGE-PRELUDE*| |COMMON-LISP|::|NIL|
 "a form to evaluate, or string containing forms to read and evaluate\n
when the image is restarted, but before the entry point is called.")
(|COMMON-LISP|::|DEFVAR| |UIOP/IMAGE|::|*IMAGE-ENTRY-POINT*|
 |COMMON-LISP|::|NIL|
 "a function with which to restart the dumped image when execution is restored from it.")
(|COMMON-LISP|::|DEFVAR| |UIOP/IMAGE|::|*IMAGE-POSTLUDE*| |COMMON-LISP|::|NIL|
 "a form to evaluate, or string containing forms to read and evaluate\n
before the image dump hooks are called and before the image is dumped.")
(|COMMON-LISP|::|DEFVAR| |UIOP/IMAGE|::|*IMAGE-DUMP-HOOK*| |COMMON-LISP|::|NIL|
 "Functions to call (in order) when before an image is dumped")
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/IMAGE|::|*LISP-INTERACTION*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/IMAGE|::|*COMMAND-LINE-ARGUMENTS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/IMAGE|::|*IMAGE-DUMPED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/IMAGE|::|*IMAGE-RESTORE-HOOK*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/IMAGE|::|*IMAGE-RESTORED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/IMAGE|::|*IMAGE-PRELUDE*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/IMAGE|::|*IMAGE-ENTRY-POINT*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/IMAGE|::|*IMAGE-POSTLUDE*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/IMAGE|::|*IMAGE-DUMP-HOOK*|))
(|COMMON-LISP|::|DEFTYPE| |UIOP/IMAGE|::|FATAL-CONDITION| |COMMON-LISP|::|NIL|
 `(|COMMON-LISP|::|AND| |COMMON-LISP|::|SERIOUS-CONDITION|))
(|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
 (|SYSTEM|::|%PUT| '|UIOP/IMAGE|::|FATAL-CONDITION|
  '|SYSTEM|::|DEFTYPE-EXPANDER|
  (|COMMON-LISP|::|FUNCTION| #:|DEFTYPE-FATAL-CONDITION|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<DEFTYPE-FORM>|)
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<DEFTYPE-FORM>| 1.
       1.))
     (|SYSTEM|::|TYPE-CALL-ERROR| |SYSTEM|::|<DEFTYPE-FORM>|)
     (|COMMON-LISP|::|LET*| |COMMON-LISP|::|NIL|
      (|COMMON-LISP|::|BLOCK| |UIOP/IMAGE|::|FATAL-CONDITION|
       `(|COMMON-LISP|::|AND| |COMMON-LISP|::|SERIOUS-CONDITION|)))))))
 (|SYSTEM|::|%SET-DOCUMENTATION| '|UIOP/IMAGE|::|FATAL-CONDITION|
  '|COMMON-LISP|::|TYPE| '|COMMON-LISP|::|NIL|)
 '|UIOP/IMAGE|::|FATAL-CONDITION|)
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|QUIT|
 (|COMMON-LISP|::|&OPTIONAL| (|UIOP/IMAGE|::|CODE| 0.)
  (|COMMON-LISP|::|FINISH-OUTPUT| |COMMON-LISP|::|T|))
 "Quits from the Lisp world, with the given exit status if provided.\n
This is designed to abstract away the implementation specific quit forms."
 (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|FINISH-OUTPUT|
  (|UIOP/STREAM|::|FINISH-OUTPUTS|))
 (|EXT|::|QUIT| |UIOP/IMAGE|::|CODE|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|DIE|
 (|UIOP/IMAGE|::|CODE| |COMMON-LISP|::|FORMAT| |COMMON-LISP|::|&REST|
  |UIOP/IMAGE|::|ARGUMENTS|)
 "Die in error with some error message"
 (|UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|IGNORE-ERRORS|
   (|UIOP/STREAM|::|FORMAT!| |UIOP/STREAM|::|*STDERR*| "~&~?~&"
    |COMMON-LISP|::|FORMAT| |UIOP/IMAGE|::|ARGUMENTS|)))
 (|UIOP/IMAGE|::|QUIT| |UIOP/IMAGE|::|CODE|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|RAW-PRINT-BACKTRACE|
 (|COMMON-LISP|::|&KEY| (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|*DEBUG-IO*|)
  |COMMON-LISP|::|COUNT| |COMMON-LISP|::|CONDITION|)
 "Print a backtrace, directly accessing the implementation"
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |COMMON-LISP|::|STREAM| |COMMON-LISP|::|COUNT|
   |COMMON-LISP|::|CONDITION|))
 (|SYSTEM|::|PRINT-BACKTRACE| :|OUT| |COMMON-LISP|::|STREAM| :|LIMIT|
  |COMMON-LISP|::|COUNT|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|PRINT-BACKTRACE|
 (|COMMON-LISP|::|&REST| |UIOP/IMAGE|::|KEYS| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|STREAM| |COMMON-LISP|::|COUNT| |COMMON-LISP|::|CONDITION|)
 "Print a backtrace"
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORE| |COMMON-LISP|::|STREAM| |COMMON-LISP|::|COUNT|
   |COMMON-LISP|::|CONDITION|))
 (|UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX| (:|PACKAGE| :|CL|)
  (|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|*PRINT-READABLY*| |COMMON-LISP|::|NIL|)
    (|COMMON-LISP|::|*PRINT-CIRCLE*| |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|*PRINT-MISER-WIDTH*| 75.)
    (|COMMON-LISP|::|*PRINT-LENGTH*| |COMMON-LISP|::|NIL|)
    (|COMMON-LISP|::|*PRINT-LEVEL*| |COMMON-LISP|::|NIL|)
    (|COMMON-LISP|::|*PRINT-PRETTY*| |COMMON-LISP|::|T|))
   (|COMMON-LISP|::|IGNORE-ERRORS|
    (|COMMON-LISP|::|APPLY| '|UIOP/IMAGE|::|RAW-PRINT-BACKTRACE|
     |UIOP/IMAGE|::|KEYS|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|PRINT-CONDITION-BACKTRACE|
 (|COMMON-LISP|::|CONDITION| |COMMON-LISP|::|&KEY|
  (|COMMON-LISP|::|STREAM| |UIOP/STREAM|::|*STDERR*|) |COMMON-LISP|::|COUNT|)
 "Print a condition after a backtrace triggered by that condition"
 (|UIOP/IMAGE|::|PRINT-BACKTRACE| :|STREAM| |COMMON-LISP|::|STREAM| :|COUNT|
  |COMMON-LISP|::|COUNT| :|CONDITION| |COMMON-LISP|::|CONDITION|)
 (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|CONDITION|
  (|UIOP/STREAM|::|SAFE-FORMAT!| |COMMON-LISP|::|STREAM|
   "~&Above backtrace due to this condition:~%~A~&"
   |COMMON-LISP|::|CONDITION|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|FATAL-CONDITION-P|
 (|COMMON-LISP|::|CONDITION|) "Is the CONDITION fatal?"
 (|COMMON-LISP|::|TYPEP| |COMMON-LISP|::|CONDITION|
  '|UIOP/IMAGE|::|FATAL-CONDITION|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|HANDLE-FATAL-CONDITION|
 (|COMMON-LISP|::|CONDITION|)
 "Handle a fatal CONDITION:\n
depending on whether *LISP-INTERACTION* is set, enter debugger or die"
 (|COMMON-LISP|::|COND|
  (|UIOP/IMAGE|::|*LISP-INTERACTION*|
   (|COMMON-LISP|::|INVOKE-DEBUGGER| |COMMON-LISP|::|CONDITION|))
  (|COMMON-LISP|::|T|
   (|UIOP/STREAM|::|SAFE-FORMAT!| |UIOP/STREAM|::|*STDERR*|
    "~&Fatal condition:~%~A~%" |COMMON-LISP|::|CONDITION|)
   (|UIOP/IMAGE|::|PRINT-CONDITION-BACKTRACE| |COMMON-LISP|::|CONDITION|
    :|STREAM| |UIOP/STREAM|::|*STDERR*|)
   (|UIOP/IMAGE|::|DIE| 99. "~A" |COMMON-LISP|::|CONDITION|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|CALL-WITH-FATAL-CONDITION-HANDLER|
 (|UIOP/IMAGE|::|THUNK|)
 "Call THUNK in a context where fatal conditions are appropriately handled"
 (|COMMON-LISP|::|HANDLER-BIND|
  ((|UIOP/IMAGE|::|FATAL-CONDITION| #'|UIOP/IMAGE|::|HANDLE-FATAL-CONDITION|))
  (|COMMON-LISP|::|FUNCALL| |UIOP/IMAGE|::|THUNK|)))
(|COMMON-LISP|::|DEFMACRO| |UIOP/IMAGE|::|WITH-FATAL-CONDITION-HANDLER|
 ((|COMMON-LISP|::|&OPTIONAL|) |COMMON-LISP|::|&BODY| |UIOP/IMAGE|::|BODY|)
 "Execute BODY in a context where fatal conditions are appropriately handled"
 `(|UIOP/IMAGE|::|CALL-WITH-FATAL-CONDITION-HANDLER|
   #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| ,@|UIOP/IMAGE|::|BODY|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|SHELL-BOOLEAN-EXIT|
 (|UIOP/IMAGE|::|X|) "Quit with a return code that is 0 iff argument X is true"
 (|UIOP/IMAGE|::|QUIT| (|COMMON-LISP|::|IF| |UIOP/IMAGE|::|X| 0. 1.)))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|QUIT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|QUIT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL| (|UIOP/IMAGE|::|CODE| 0.)
    (|COMMON-LISP|::|FINISH-OUTPUT| |COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|DIE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|DIE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/IMAGE|::|CODE| |COMMON-LISP|::|FORMAT| |COMMON-LISP|::|&REST|
    |UIOP/IMAGE|::|ARGUMENTS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|RAW-PRINT-BACKTRACE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|RAW-PRINT-BACKTRACE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|*DEBUG-IO*|)
    |COMMON-LISP|::|COUNT| |COMMON-LISP|::|CONDITION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|PRINT-BACKTRACE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|PRINT-BACKTRACE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/IMAGE|::|KEYS| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|STREAM| |COMMON-LISP|::|COUNT|
    |COMMON-LISP|::|CONDITION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|PRINT-CONDITION-BACKTRACE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|PRINT-CONDITION-BACKTRACE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|CONDITION| |COMMON-LISP|::|&KEY|
    (|COMMON-LISP|::|STREAM| |UIOP/STREAM|::|*STDERR*|)
    |COMMON-LISP|::|COUNT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|FATAL-CONDITION-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|FATAL-CONDITION-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|CONDITION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|HANDLE-FATAL-CONDITION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|HANDLE-FATAL-CONDITION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|CONDITION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/IMAGE|::|CALL-WITH-FATAL-CONDITION-HANDLER|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|CALL-WITH-FATAL-CONDITION-HANDLER|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/IMAGE|::|THUNK|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|UIOP/IMAGE|::|WITH-FATAL-CONDITION-HANDLER|)
(|SYSTEM|::|%PUTD| '|UIOP/IMAGE|::|WITH-FATAL-CONDITION-HANDLER|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/IMAGE|::|WITH-FATAL-CONDITION-HANDLER|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Execute BODY in a context where fatal conditions are appropriately handled"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G17959| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#:|G17960|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 0. 0. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/IMAGE|::|WITH-FATAL-CONDITION-HANDLER| #1#
          '#3=(|COMMON-LISP|::|&OPTIONAL|))
         #1#))
       (|UIOP/IMAGE|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/IMAGE|::|WITH-FATAL-CONDITION-HANDLER|
       `(|UIOP/IMAGE|::|CALL-WITH-FATAL-CONDITION-HANDLER|
         #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
            ,@|UIOP/IMAGE|::|BODY|)))))))
  '(#3# |COMMON-LISP|::|&BODY| |UIOP/IMAGE|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|SHELL-BOOLEAN-EXIT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|SHELL-BOOLEAN-EXIT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/IMAGE|::|X|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|REGISTER-IMAGE-RESTORE-HOOK|
 (|UIOP/IMAGE|::|HOOK| |COMMON-LISP|::|&OPTIONAL|
  (|UIOP/IMAGE|::|CALL-NOW-P| |COMMON-LISP|::|T|))
 "Regiter a hook function to be run when restoring a dumped image"
 (|UIOP/UTILITY|::|REGISTER-HOOK-FUNCTION|
  '|UIOP/IMAGE|::|*IMAGE-RESTORE-HOOK*| |UIOP/IMAGE|::|HOOK|
  |UIOP/IMAGE|::|CALL-NOW-P|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|REGISTER-IMAGE-DUMP-HOOK|
 (|UIOP/IMAGE|::|HOOK| |COMMON-LISP|::|&OPTIONAL|
  (|UIOP/IMAGE|::|CALL-NOW-P| |COMMON-LISP|::|NIL|))
 "Register a the hook function to be run before to dump an image"
 (|UIOP/UTILITY|::|REGISTER-HOOK-FUNCTION| '|UIOP/IMAGE|::|*IMAGE-DUMP-HOOK*|
  |UIOP/IMAGE|::|HOOK| |UIOP/IMAGE|::|CALL-NOW-P|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|CALL-IMAGE-RESTORE-HOOK|
 |COMMON-LISP|::|NIL|
 "Call the hook functions registered to be run when restoring a dumped image"
 (|UIOP/UTILITY|::|CALL-FUNCTIONS|
  (|COMMON-LISP|::|REVERSE| |UIOP/IMAGE|::|*IMAGE-RESTORE-HOOK*|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|CALL-IMAGE-DUMP-HOOK|
 |COMMON-LISP|::|NIL|
 "Call the hook functions registered to be run before to dump an image"
 (|UIOP/UTILITY|::|CALL-FUNCTIONS| |UIOP/IMAGE|::|*IMAGE-DUMP-HOOK*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|REGISTER-IMAGE-RESTORE-HOOK|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|REGISTER-IMAGE-RESTORE-HOOK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/IMAGE|::|HOOK| |COMMON-LISP|::|&OPTIONAL|
    (|UIOP/IMAGE|::|CALL-NOW-P| |COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|REGISTER-IMAGE-DUMP-HOOK|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|REGISTER-IMAGE-DUMP-HOOK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/IMAGE|::|HOOK| |COMMON-LISP|::|&OPTIONAL|
    (|UIOP/IMAGE|::|CALL-NOW-P| |COMMON-LISP|::|NIL|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|CALL-IMAGE-RESTORE-HOOK|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|CALL-IMAGE-RESTORE-HOOK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|CALL-IMAGE-DUMP-HOOK|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|CALL-IMAGE-DUMP-HOOK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|RAW-COMMAND-LINE-ARGUMENTS|
 |COMMON-LISP|::|NIL| "Find what the actual command line for this process was."
 (|COMMON-LISP|::|COERCE| (|EXT|::|ARGV|) '|COMMON-LISP|::|LIST|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|COMMAND-LINE-ARGUMENTS|
 (|COMMON-LISP|::|&OPTIONAL|
  (|UIOP/IMAGE|::|ARGUMENTS| (|UIOP/IMAGE|::|RAW-COMMAND-LINE-ARGUMENTS|)))
 "Extract user arguments from command-line invocation of current process.\n
Assume the calling conventions of a generated script that uses --\n
if we are not called from a directly executable image."
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|EQ| |UIOP/IMAGE|::|*IMAGE-DUMPED-P*| :|EXECUTABLE|)
   (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|ARGUMENTS|
    (|COMMON-LISP|::|MEMBER| "--" |UIOP/IMAGE|::|ARGUMENTS| :|TEST|
     '|COMMON-LISP|::|STRING-EQUAL|)))
  (|COMMON-LISP|::|REST| |UIOP/IMAGE|::|ARGUMENTS|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|ARGV0| |COMMON-LISP|::|NIL|
 "On supported implementations (most that matter), or when invoked by a proper wrapper script,\n
return a string that for the name with which the program was invoked, i.e. argv[0] in C.\n
Otherwise, return NIL."
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|EQ| |UIOP/IMAGE|::|*IMAGE-DUMPED-P*| :|EXECUTABLE|)
   (|COMMON-LISP|::|OR|
    (|COMMON-LISP|::|FIRST| (|UIOP/IMAGE|::|RAW-COMMAND-LINE-ARGUMENTS|))))
  (|COMMON-LISP|::|T| (|UIOP/OS|::|GETENVP| "__CL_ARGV0"))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|SETUP-COMMAND-LINE-ARGUMENTS|
 |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|*COMMAND-LINE-ARGUMENTS*|
  (|UIOP/IMAGE|::|COMMAND-LINE-ARGUMENTS|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|RESTORE-IMAGE|
 (|COMMON-LISP|::|&KEY|
  (|UIOP/IMAGE|::|LISP-INTERACTION| |UIOP/IMAGE|::|*LISP-INTERACTION*|)
  (|UIOP/IMAGE|::|RESTORE-HOOK| |UIOP/IMAGE|::|*IMAGE-RESTORE-HOOK*|)
  (|UIOP/IMAGE|::|PRELUDE| |UIOP/IMAGE|::|*IMAGE-PRELUDE*|)
  (|UIOP/IMAGE|::|ENTRY-POINT| |UIOP/IMAGE|::|*IMAGE-ENTRY-POINT*|)
  (|UIOP/IMAGE|::|IF-ALREADY-RESTORED|
   '(|COMMON-LISP|::|CERROR| "RUN RESTORE-IMAGE ANYWAY")))
 "From a freshly restarted Lisp image, restore the saved Lisp environment\n
by setting appropriate variables, running various hooks, and calling any specified entry point.\n\n
If the image has already been restored or is already being restored, as per *IMAGE-RESTORED-P*,\n
call the IF-ALREADY-RESTORED error handler (by default, a continuable error), and do return\n
immediately to the surrounding restore process if allowed to continue.\n\n
Then, comes the restore process itself:\n
First, call each function in the RESTORE-HOOK,\n
in the order they were registered with REGISTER-IMAGE-RESTORE-HOOK.\n
Second, evaluate the prelude, which is often Lisp text that is read,\n
as per EVAL-INPUT.\n
Third, call the ENTRY-POINT function, if any is specified, with no argument.\n\n
The restore process happens in a WITH-FATAL-CONDITION-HANDLER, so that if LISP-INTERACTION is NIL,\n
any unhandled error leads to a backtrace and an exit with an error status.\n
If LISP-INTERACTION is NIL, the process also exits when no error occurs:\n
if neither restart nor entry function is provided, the program will exit with status 0 (success);\n
if a function was provided, the program will exit after the function returns (if it returns),\n
with status 0 if and only if the primary return value of result is generalized boolean true,\n
and with status 1 if this value is NIL.\n\n
If LISP-INTERACTION is true, unhandled errors will take you to the debugger, and the result\n
of the function will be returned rather than interpreted as a boolean designating an exit code."
 (|COMMON-LISP|::|WHEN| |UIOP/IMAGE|::|*IMAGE-RESTORED-P*|
  (|COMMON-LISP|::|IF| |UIOP/IMAGE|::|IF-ALREADY-RESTORED|
   (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/IMAGE|::|IF-ALREADY-RESTORED|
    "Image already ~:[being ~;~]restored"
    (|COMMON-LISP|::|EQ| |UIOP/IMAGE|::|*IMAGE-RESTORED-P*|
     |COMMON-LISP|::|T|))
   (|COMMON-LISP|::|RETURN-FROM| |UIOP/IMAGE|::|RESTORE-IMAGE|)))
 (|UIOP/IMAGE|::|WITH-FATAL-CONDITION-HANDLER| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|*LISP-INTERACTION*|
   |UIOP/IMAGE|::|LISP-INTERACTION|)
  (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|*IMAGE-RESTORE-HOOK*|
   |UIOP/IMAGE|::|RESTORE-HOOK|)
  (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|*IMAGE-PRELUDE*|
   |UIOP/IMAGE|::|PRELUDE|)
  (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|*IMAGE-RESTORED-P*| :|IN-PROGRESS|)
  (|UIOP/IMAGE|::|CALL-IMAGE-RESTORE-HOOK|)
  (|UIOP/STREAM|::|STANDARD-EVAL-THUNK| |UIOP/IMAGE|::|PRELUDE|)
  (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|*IMAGE-RESTORED-P*| |COMMON-LISP|::|T|)
  (|COMMON-LISP|::|LET|
   ((|UIOP/IMAGE|::|RESULTS|
     (|COMMON-LISP|::|MULTIPLE-VALUE-LIST|
      (|COMMON-LISP|::|IF| |UIOP/IMAGE|::|ENTRY-POINT|
       (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/IMAGE|::|ENTRY-POINT|)
       |COMMON-LISP|::|T|))))
   (|COMMON-LISP|::|IF| |UIOP/IMAGE|::|LISP-INTERACTION|
    (|COMMON-LISP|::|VALUES-LIST| |UIOP/IMAGE|::|RESULTS|)
    (|UIOP/IMAGE|::|SHELL-BOOLEAN-EXIT|
     (|COMMON-LISP|::|FIRST| |UIOP/IMAGE|::|RESULTS|))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|RAW-COMMAND-LINE-ARGUMENTS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|RAW-COMMAND-LINE-ARGUMENTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|COMMAND-LINE-ARGUMENTS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|COMMAND-LINE-ARGUMENTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL|
    (|UIOP/IMAGE|::|ARGUMENTS| (|UIOP/IMAGE|::|RAW-COMMAND-LINE-ARGUMENTS|)))))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|ARGV0|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|ARGV0|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|SETUP-COMMAND-LINE-ARGUMENTS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|SETUP-COMMAND-LINE-ARGUMENTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|RESTORE-IMAGE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|RESTORE-IMAGE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY|
    (|UIOP/IMAGE|::|LISP-INTERACTION| |UIOP/IMAGE|::|*LISP-INTERACTION*|)
    (|UIOP/IMAGE|::|RESTORE-HOOK| |UIOP/IMAGE|::|*IMAGE-RESTORE-HOOK*|)
    (|UIOP/IMAGE|::|PRELUDE| |UIOP/IMAGE|::|*IMAGE-PRELUDE*|)
    (|UIOP/IMAGE|::|ENTRY-POINT| |UIOP/IMAGE|::|*IMAGE-ENTRY-POINT*|)
    (|UIOP/IMAGE|::|IF-ALREADY-RESTORED|
     '(|COMMON-LISP|::|CERROR| "RUN RESTORE-IMAGE ANYWAY")))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|DUMP-IMAGE|
 (|UIOP/IMAGE|::|FILENAME| |COMMON-LISP|::|&KEY| |UIOP/IMAGE|::|OUTPUT-NAME|
  |UIOP/IMAGE|::|EXECUTABLE|
  (|UIOP/IMAGE|::|POSTLUDE| |UIOP/IMAGE|::|*IMAGE-POSTLUDE*|)
  (|UIOP/IMAGE|::|DUMP-HOOK| |UIOP/IMAGE|::|*IMAGE-DUMP-HOOK*|))
 "Dump an image of the current Lisp environment at pathname FILENAME, with various options.\n\n
First, finalize the image, by evaluating the POSTLUDE as per EVAL-INPUT, then calling each of\n
 the functions in DUMP-HOOK, in reverse order of registration by REGISTER-DUMP-HOOK.\n\n
If EXECUTABLE is true, create an standalone executable program that calls RESTORE-IMAGE on startup.\n\n
Pass various implementation-defined options, such as PREPEND-SYMBOLS and PURITY on CCL,\n
or COMPRESSION on SBCL, and APPLICATION-TYPE on SBCL/Windows."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/IMAGE|::|FILENAME|
   |UIOP/IMAGE|::|OUTPUT-NAME| |UIOP/IMAGE|::|EXECUTABLE|))
 (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|*IMAGE-DUMPED-P*|
  (|COMMON-LISP|::|IF| |UIOP/IMAGE|::|EXECUTABLE| :|EXECUTABLE|
   |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|*IMAGE-RESTORED-P*| :|IN-REGRESS|)
 (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|*IMAGE-POSTLUDE*|
  |UIOP/IMAGE|::|POSTLUDE|)
 (|UIOP/STREAM|::|STANDARD-EVAL-THUNK| |UIOP/IMAGE|::|*IMAGE-POSTLUDE*|)
 (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|*IMAGE-DUMP-HOOK*|
  |UIOP/IMAGE|::|DUMP-HOOK|)
 (|UIOP/IMAGE|::|CALL-IMAGE-DUMP-HOOK|)
 (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|*IMAGE-RESTORED-P*|
  |COMMON-LISP|::|NIL|)
 (|COMMON-LISP|::|APPLY| #'|EXT|::|SAVEINITMEM| |UIOP/IMAGE|::|FILENAME|
  :|QUIET| |COMMON-LISP|::|T| :|START-PACKAGE| |COMMON-LISP|::|*PACKAGE*|
  :|KEEP-GLOBAL-HANDLERS| |COMMON-LISP|::|NIL| :|EXECUTABLE|
  (|COMMON-LISP|::|IF| |UIOP/IMAGE|::|EXECUTABLE| 0. |COMMON-LISP|::|T|)
  (|COMMON-LISP|::|WHEN| |UIOP/IMAGE|::|EXECUTABLE|
   (|COMMON-LISP|::|LIST| :|NORC| |COMMON-LISP|::|T| :|SCRIPT|
    |COMMON-LISP|::|NIL| :|INIT-FUNCTION| #'|UIOP/IMAGE|::|RESTORE-IMAGE|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/IMAGE|::|CREATE-IMAGE|
 (|UIOP/IMAGE|::|DESTINATION| |UIOP/IMAGE|::|LISP-OBJECT-FILES|
  |COMMON-LISP|::|&KEY| |UIOP/IMAGE|::|KIND| |UIOP/IMAGE|::|OUTPUT-NAME|
  |UIOP/IMAGE|::|PROLOGUE-CODE| |UIOP/IMAGE|::|EPILOGUE-CODE|
  |UIOP/IMAGE|::|EXTRA-OBJECT-FILES|
  (|UIOP/IMAGE|::|PRELUDE| |COMMON-LISP|::|NIL| |UIOP/IMAGE|::|PRELUDEP|)
  (|UIOP/IMAGE|::|POSTLUDE| |COMMON-LISP|::|NIL| |UIOP/IMAGE|::|POSTLUDEP|)
  (|UIOP/IMAGE|::|ENTRY-POINT| |COMMON-LISP|::|NIL|
   |UIOP/IMAGE|::|ENTRY-POINT-P|)
  |UIOP/IMAGE|::|BUILD-ARGS| |UIOP/IMAGE|::|NO-UIOP|)
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/IMAGE|::|DESTINATION|
   |UIOP/IMAGE|::|LISP-OBJECT-FILES| |UIOP/IMAGE|::|EXTRA-OBJECT-FILES|
   |UIOP/IMAGE|::|KIND| |UIOP/IMAGE|::|OUTPUT-NAME|
   |UIOP/IMAGE|::|PROLOGUE-CODE| |UIOP/IMAGE|::|EPILOGUE-CODE|
   |UIOP/IMAGE|::|PRELUDE| |UIOP/IMAGE|::|PRELUDEP| |UIOP/IMAGE|::|POSTLUDE|
   |UIOP/IMAGE|::|POSTLUDEP| |UIOP/IMAGE|::|ENTRY-POINT|
   |UIOP/IMAGE|::|ENTRY-POINT-P| |UIOP/IMAGE|::|BUILD-ARGS|
   |UIOP/IMAGE|::|NO-UIOP|))
 "On ECL, create an executable at pathname DESTINATION from the specified OBJECT-FILES and options"
 (|UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR| '|UIOP/IMAGE|::|CREATE-IMAGE|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|DUMP-IMAGE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|DUMP-IMAGE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/IMAGE|::|FILENAME| |COMMON-LISP|::|&KEY| |UIOP/IMAGE|::|OUTPUT-NAME|
    |UIOP/IMAGE|::|EXECUTABLE|
    (|UIOP/IMAGE|::|POSTLUDE| |UIOP/IMAGE|::|*IMAGE-POSTLUDE*|)
    (|UIOP/IMAGE|::|DUMP-HOOK| |UIOP/IMAGE|::|*IMAGE-DUMP-HOOK*|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/IMAGE|::|CREATE-IMAGE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/IMAGE|::|CREATE-IMAGE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/IMAGE|::|DESTINATION| |UIOP/IMAGE|::|LISP-OBJECT-FILES|
    |COMMON-LISP|::|&KEY| |UIOP/IMAGE|::|KIND| |UIOP/IMAGE|::|OUTPUT-NAME|
    |UIOP/IMAGE|::|PROLOGUE-CODE| |UIOP/IMAGE|::|EPILOGUE-CODE|
    |UIOP/IMAGE|::|EXTRA-OBJECT-FILES|
    (|UIOP/IMAGE|::|PRELUDE| |COMMON-LISP|::|NIL| |UIOP/IMAGE|::|PRELUDEP|)
    (|UIOP/IMAGE|::|POSTLUDE| |COMMON-LISP|::|NIL| |UIOP/IMAGE|::|POSTLUDEP|)
    (|UIOP/IMAGE|::|ENTRY-POINT| |COMMON-LISP|::|NIL|
     |UIOP/IMAGE|::|ENTRY-POINT-P|)
    |UIOP/IMAGE|::|BUILD-ARGS| |UIOP/IMAGE|::|NO-UIOP|)))
(|COMMON-LISP|::|MAP| |COMMON-LISP|::|NIL|
 '|UIOP/IMAGE|::|REGISTER-IMAGE-RESTORE-HOOK|
 '(|UIOP/STREAM|::|SETUP-STDIN| |UIOP/STREAM|::|SETUP-STDOUT|
   |UIOP/STREAM|::|SETUP-STDERR| |UIOP/IMAGE|::|SETUP-COMMAND-LINE-ARGUMENTS|
   |UIOP/STREAM|::|SETUP-TEMPORARY-DIRECTORY|))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|UIOP/LISP-BUILD| :|NICKNAMES| '#1=(:|ASDF/LISP-BUILD|) :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP/PACKAGE| :|UIOP/UTILITY| :|UIOP/OS|
    :|UIOP/PATHNAME| :|UIOP/FILESYSTEM| :|UIOP/STREAM| :|UIOP/IMAGE|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|*COMPILE-FILE-WARNINGS-BEHAVIOUR*| #:|*COMPILE-FILE-FAILURE-BEHAVIOUR*|
    #:|*OUTPUT-TRANSLATION-FUNCTION*| #:|*OPTIMIZATION-SETTINGS*|
    #:|*PREVIOUS-OPTIMIZATION-SETTINGS*| #:|*BASE-BUILD-DIRECTORY*|
    #:|COMPILE-CONDITION| #:|COMPILE-FILE-ERROR| #:|COMPILE-WARNED-ERROR|
    #:|COMPILE-FAILED-ERROR| #:|COMPILE-WARNED-WARNING|
    #:|COMPILE-FAILED-WARNING| #:|CHECK-LISP-COMPILE-RESULTS|
    #:|CHECK-LISP-COMPILE-WARNINGS| #:|*UNINTERESTING-CONDITIONS*|
    #:|*USUAL-UNINTERESTING-CONDITIONS*|
    #:|*UNINTERESTING-COMPILER-CONDITIONS*|
    #:|*UNINTERESTING-LOADER-CONDITIONS*| #:|GET-OPTIMIZATION-SETTINGS|
    #:|PROCLAIM-OPTIMIZATION-SETTINGS| #:|WITH-OPTIMIZATION-SETTINGS|
    #:|CALL-WITH-MUFFLED-COMPILER-CONDITIONS|
    #:|WITH-MUFFLED-COMPILER-CONDITIONS|
    #:|CALL-WITH-MUFFLED-LOADER-CONDITIONS| #:|WITH-MUFFLED-LOADER-CONDITIONS|
    #:|REIFY-SIMPLE-SEXP| #:|UNREIFY-SIMPLE-SEXP| #:|REIFY-DEFERRED-WARNINGS|
    #:|UNREIFY-DEFERRED-WARNINGS| #:|RESET-DEFERRED-WARNINGS|
    #:|SAVE-DEFERRED-WARNINGS| #:|CHECK-DEFERRED-WARNINGS|
    #:|WITH-SAVED-DEFERRED-WARNINGS| #:|WARNINGS-FILE-P| #:|WARNINGS-FILE-TYPE|
    #:|*WARNINGS-FILE-TYPE*| #:|ENABLE-DEFERRED-WARNINGS-CHECK|
    #:|DISABLE-DEFERRED-WARNINGS-CHECK| #:|CURRENT-LISP-FILE-PATHNAME|
    #:|LOAD-PATHNAME| #:|LISPIZE-PATHNAME| #:|COMPILE-FILE-TYPE|
    #:|CALL-AROUND-HOOK| #:|COMPILE-FILE*| #:|COMPILE-FILE-PATHNAME*|
    #:|*COMPILE-CHECK*| #:|LOAD*| #:|LOAD-FROM-STRING| #:|COMBINE-FASLS|)
  :|INTERN| '(#:|DEFAULTS| #:|FAILURE-P| #:|WARNINGS-P| #:|S| #:|Y| #:|BODY|)
  :|RECYCLE| '(:|UIOP/LISP-BUILD| . #1#) :|MIX| '|COMMON-LISP|::|NIL|
  :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/LISP-BUILD"))
(|COMMON-LISP|::|DEFVAR| |UIOP/LISP-BUILD|::|*COMPILE-FILE-WARNINGS-BEHAVIOUR*|
 (|COMMON-LISP|::|OR| :|IGNORE| :|WARN|)
 "How should ASDF react if it encounters a warning when compiling a file?\n
Valid values are :error, :warn, and :ignore.")
(|COMMON-LISP|::|DEFVAR| |UIOP/LISP-BUILD|::|*COMPILE-FILE-FAILURE-BEHAVIOUR*|
 (|COMMON-LISP|::|OR| :|IGNORE| :|WARN|)
 "How should ASDF react if it encounters a failure (per the ANSI spec of COMPILE-FILE)\n
when compiling a file, which includes any non-style-warning warning.\n
Valid values are :error, :warn, and :ignore.\n
Note that ASDF ALWAYS raises an error if it fails to create an output file when compiling.")
(|COMMON-LISP|::|DEFVAR| |UIOP/LISP-BUILD|::|*BASE-BUILD-DIRECTORY*|
 |COMMON-LISP|::|NIL|
 "When set to a non-null value, it should be an absolute directory pathname,\n
which will serve as the *DEFAULT-PATHNAME-DEFAULTS* around a COMPILE-FILE,\n
what more while the input-file is shortened if possible to ENOUGH-PATHNAME relative to it.\n
This can help you produce more deterministic output for FASLs.")
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/LISP-BUILD|::|*COMPILE-FILE-WARNINGS-BEHAVIOUR*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/LISP-BUILD|::|*COMPILE-FILE-FAILURE-BEHAVIOUR*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/LISP-BUILD|::|*BASE-BUILD-DIRECTORY*|))
(|COMMON-LISP|::|DEFVAR| |UIOP/LISP-BUILD|::|*OPTIMIZATION-SETTINGS*|
 |COMMON-LISP|::|NIL|
 "Optimization settings to be used by PROCLAIM-OPTIMIZATION-SETTINGS")
(|COMMON-LISP|::|DEFVAR| |UIOP/LISP-BUILD|::|*PREVIOUS-OPTIMIZATION-SETTINGS*|
 |COMMON-LISP|::|NIL|
 "Optimization settings saved by PROCLAIM-OPTIMIZATION-SETTINGS")
(|COMMON-LISP|::|DEFPARAMETER| |UIOP/LISP-BUILD|::|+OPTIMIZATION-VARIABLES+|
 (|COMMON-LISP|::|OR| '|COMMON-LISP|::|NIL|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|GET-OPTIMIZATION-SETTINGS|
 |COMMON-LISP|::|NIL|
 "Get current compiler optimization settings, ready to PROCLAIM again"
 (|COMMON-LISP|::|LET|
  ((|UIOP/LISP-BUILD|::|SETTINGS|
    '(|COMMON-LISP|::|SPEED| |COMMON-LISP|::|SPACE| |COMMON-LISP|::|SAFETY|
      |COMMON-LISP|::|DEBUG| |COMMON-LISP|::|COMPILATION-SPEED|)))
  (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/LISP-BUILD|::|X| :|IN|
   |UIOP/LISP-BUILD|::|SETTINGS| :|FOR| |UIOP/LISP-BUILD|::|Y|
   |COMMON-LISP|::|=|
   (|COMMON-LISP|::|OR|
    (|COMMON-LISP|::|GETHASH| |UIOP/LISP-BUILD|::|X| |SYSTEM|::|*OPTIMIZE*|
     1.))
   :|WHEN| |UIOP/LISP-BUILD|::|Y| :|COLLECT|
   (|COMMON-LISP|::|LIST| |UIOP/LISP-BUILD|::|X| |UIOP/LISP-BUILD|::|Y|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|PROCLAIM-OPTIMIZATION-SETTINGS|
 |COMMON-LISP|::|NIL|
 "Proclaim the optimization settings in *OPTIMIZATION-SETTINGS*"
 (|COMMON-LISP|::|PROCLAIM|
  `(|COMMON-LISP|::|OPTIMIZE| ,@|UIOP/LISP-BUILD|::|*OPTIMIZATION-SETTINGS*|))
 (|COMMON-LISP|::|LET|
  ((|UIOP/LISP-BUILD|::|SETTINGS|
    (|UIOP/LISP-BUILD|::|GET-OPTIMIZATION-SETTINGS|)))
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|EQUAL|
    |UIOP/LISP-BUILD|::|*PREVIOUS-OPTIMIZATION-SETTINGS*|
    |UIOP/LISP-BUILD|::|SETTINGS|)
   (|COMMON-LISP|::|SETF| |UIOP/LISP-BUILD|::|*PREVIOUS-OPTIMIZATION-SETTINGS*|
    |UIOP/LISP-BUILD|::|SETTINGS|))))
(|COMMON-LISP|::|DEFMACRO| |UIOP/LISP-BUILD|::|WITH-OPTIMIZATION-SETTINGS|
 ((|COMMON-LISP|::|&OPTIONAL|
   (|UIOP/LISP-BUILD|::|SETTINGS|
    |UIOP/LISP-BUILD|::|*OPTIMIZATION-SETTINGS*|))
  |COMMON-LISP|::|&BODY| |UIOP/LISP-BUILD|::|BODY|)
 (|COMMON-LISP|::|LET|
  ((|UIOP/LISP-BUILD|::|PREVIOUS-SETTINGS|
    (|COMMON-LISP|::|GENSYM| "PREVIOUS-SETTINGS")))
  `(|COMMON-LISP|::|LET|
    ((,|UIOP/LISP-BUILD|::|PREVIOUS-SETTINGS|
      (|UIOP/LISP-BUILD|::|GET-OPTIMIZATION-SETTINGS|)))
    ,@(|COMMON-LISP|::|WHEN| |UIOP/LISP-BUILD|::|SETTINGS|
       `((|COMMON-LISP|::|PROCLAIM|
          `(|COMMON-LISP|::|OPTIMIZE| ,@,|UIOP/LISP-BUILD|::|SETTINGS|))))
    (|COMMON-LISP|::|UNWIND-PROTECT|
     (|COMMON-LISP|::|PROGN| ,@|UIOP/LISP-BUILD|::|BODY|)
     (|COMMON-LISP|::|PROCLAIM|
      `(|COMMON-LISP|::|OPTIMIZE|
        ,@,|UIOP/LISP-BUILD|::|PREVIOUS-SETTINGS|))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/LISP-BUILD|::|*OPTIMIZATION-SETTINGS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/LISP-BUILD|::|*PREVIOUS-OPTIMIZATION-SETTINGS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/LISP-BUILD|::|+OPTIMIZATION-VARIABLES+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|GET-OPTIMIZATION-SETTINGS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|GET-OPTIMIZATION-SETTINGS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LISP-BUILD|::|PROCLAIM-OPTIMIZATION-SETTINGS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|PROCLAIM-OPTIMIZATION-SETTINGS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|UIOP/LISP-BUILD|::|WITH-OPTIMIZATION-SETTINGS|)
(|SYSTEM|::|%PUTD| '|UIOP/LISP-BUILD|::|WITH-OPTIMIZATION-SETTINGS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/LISP-BUILD|::|WITH-OPTIMIZATION-SETTINGS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G18176| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G18177|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 0. 1. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/LISP-BUILD|::|WITH-OPTIMIZATION-SETTINGS| #1#
          '#4=(|COMMON-LISP|::|&OPTIONAL|
               (|UIOP/LISP-BUILD|::|SETTINGS|
                |UIOP/LISP-BUILD|::|*OPTIMIZATION-SETTINGS*|)))
         #1#))
       (|UIOP/LISP-BUILD|::|SETTINGS|
        (|COMMON-LISP|::|IF| #3# (|COMMON-LISP|::|CAR| #3#)
         |UIOP/LISP-BUILD|::|*OPTIMIZATION-SETTINGS*|))
       (|UIOP/LISP-BUILD|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |UIOP/LISP-BUILD|::|WITH-OPTIMIZATION-SETTINGS|
       (|COMMON-LISP|::|LET|
        ((|UIOP/LISP-BUILD|::|PREVIOUS-SETTINGS|
          (|COMMON-LISP|::|GENSYM| "PREVIOUS-SETTINGS")))
        `(|COMMON-LISP|::|LET|
          ((,|UIOP/LISP-BUILD|::|PREVIOUS-SETTINGS|
            (|UIOP/LISP-BUILD|::|GET-OPTIMIZATION-SETTINGS|)))
          ,@(|COMMON-LISP|::|WHEN| |UIOP/LISP-BUILD|::|SETTINGS|
             `((|COMMON-LISP|::|PROCLAIM|
                `(|COMMON-LISP|::|OPTIMIZE|
                  ,@,|UIOP/LISP-BUILD|::|SETTINGS|))))
          (|COMMON-LISP|::|UNWIND-PROTECT|
           (|COMMON-LISP|::|PROGN| ,@|UIOP/LISP-BUILD|::|BODY|)
           (|COMMON-LISP|::|PROCLAIM|
            `(|COMMON-LISP|::|OPTIMIZE|
              ,@,|UIOP/LISP-BUILD|::|PREVIOUS-SETTINGS|))))))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/LISP-BUILD|::|BODY|)))
(|COMMON-LISP|::|DEFVAR| |UIOP/LISP-BUILD|::|*USUAL-UNINTERESTING-CONDITIONS*|
 (|COMMON-LISP|::|APPEND|
  '("No generic function ~S present when encountering macroexpansion of defmethod. Assuming it will be an instance of standard-generic-function."))
 "A suggested value to which to set or bind *uninteresting-conditions*.")
(|COMMON-LISP|::|DEFVAR| |UIOP/LISP-BUILD|::|*UNINTERESTING-CONDITIONS*|
 '|COMMON-LISP|::|NIL|
 "Conditions that may be skipped while compiling or loading Lisp code.")
(|COMMON-LISP|::|DEFVAR|
 |UIOP/LISP-BUILD|::|*UNINTERESTING-COMPILER-CONDITIONS*| '|COMMON-LISP|::|NIL|
 "Additional conditions that may be skipped while compiling Lisp code.")
(|COMMON-LISP|::|DEFVAR| |UIOP/LISP-BUILD|::|*UNINTERESTING-LOADER-CONDITIONS*|
 (|COMMON-LISP|::|APPEND|
  '("Overwriting already existing readtable ~S."
    #(#:|FINALIZERS-OFF-WARNING| :|ASDF-FINALIZERS|))
  '(|CLOS|::|SIMPLE-GF-REPLACING-METHOD-WARNING|))
 "Additional conditions that may be skipped while loading Lisp code.")
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/LISP-BUILD|::|*USUAL-UNINTERESTING-CONDITIONS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/LISP-BUILD|::|*UNINTERESTING-CONDITIONS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/LISP-BUILD|::|*UNINTERESTING-COMPILER-CONDITIONS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/LISP-BUILD|::|*UNINTERESTING-LOADER-CONDITIONS*|))
(|UIOP/UTILITY|::|DEFUN*|
 |UIOP/LISP-BUILD|::|CALL-WITH-MUFFLED-COMPILER-CONDITIONS|
 (|UIOP/LISP-BUILD|::|THUNK|)
 "Call given THUNK in a context where uninteresting conditions and compiler conditions are muffled"
 (|UIOP/UTILITY|::|CALL-WITH-MUFFLED-CONDITIONS| |UIOP/LISP-BUILD|::|THUNK|
  (|COMMON-LISP|::|APPEND| |UIOP/LISP-BUILD|::|*UNINTERESTING-CONDITIONS*|
   |UIOP/LISP-BUILD|::|*UNINTERESTING-COMPILER-CONDITIONS*|)))
(|COMMON-LISP|::|DEFMACRO|
 |UIOP/LISP-BUILD|::|WITH-MUFFLED-COMPILER-CONDITIONS|
 ((|COMMON-LISP|::|&OPTIONAL|) |COMMON-LISP|::|&BODY|
  |UIOP/LISP-BUILD|::|BODY|)
 "Trivial syntax for CALL-WITH-MUFFLED-COMPILER-CONDITIONS"
 `(|UIOP/LISP-BUILD|::|CALL-WITH-MUFFLED-COMPILER-CONDITIONS|
   #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
      ,@|UIOP/LISP-BUILD|::|BODY|)))
(|UIOP/UTILITY|::|DEFUN*|
 |UIOP/LISP-BUILD|::|CALL-WITH-MUFFLED-LOADER-CONDITIONS|
 (|UIOP/LISP-BUILD|::|THUNK|)
 "Call given THUNK in a context where uninteresting conditions and loader conditions are muffled"
 (|UIOP/UTILITY|::|CALL-WITH-MUFFLED-CONDITIONS| |UIOP/LISP-BUILD|::|THUNK|
  (|COMMON-LISP|::|APPEND| |UIOP/LISP-BUILD|::|*UNINTERESTING-CONDITIONS*|
   |UIOP/LISP-BUILD|::|*UNINTERESTING-LOADER-CONDITIONS*|)))
(|COMMON-LISP|::|DEFMACRO| |UIOP/LISP-BUILD|::|WITH-MUFFLED-LOADER-CONDITIONS|
 ((|COMMON-LISP|::|&OPTIONAL|) |COMMON-LISP|::|&BODY|
  |UIOP/LISP-BUILD|::|BODY|)
 "Trivial syntax for CALL-WITH-MUFFLED-LOADER-CONDITIONS"
 `(|UIOP/LISP-BUILD|::|CALL-WITH-MUFFLED-LOADER-CONDITIONS|
   #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
      ,@|UIOP/LISP-BUILD|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LISP-BUILD|::|CALL-WITH-MUFFLED-COMPILER-CONDITIONS|))
(|SYSTEM|::|C-DEFUN|
 '|UIOP/LISP-BUILD|::|CALL-WITH-MUFFLED-COMPILER-CONDITIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/LISP-BUILD|::|THUNK|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|UIOP/LISP-BUILD|::|WITH-MUFFLED-COMPILER-CONDITIONS|)
(|SYSTEM|::|%PUTD| '|UIOP/LISP-BUILD|::|WITH-MUFFLED-COMPILER-CONDITIONS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION|
   |UIOP/LISP-BUILD|::|WITH-MUFFLED-COMPILER-CONDITIONS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Trivial syntax for CALL-WITH-MUFFLED-COMPILER-CONDITIONS"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G18221| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#:|G18222|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 0. 0. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/LISP-BUILD|::|WITH-MUFFLED-COMPILER-CONDITIONS| #1#
          '#3=(|COMMON-LISP|::|&OPTIONAL|))
         #1#))
       (|UIOP/LISP-BUILD|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK|
       |UIOP/LISP-BUILD|::|WITH-MUFFLED-COMPILER-CONDITIONS|
       `(|UIOP/LISP-BUILD|::|CALL-WITH-MUFFLED-COMPILER-CONDITIONS|
         #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
            ,@|UIOP/LISP-BUILD|::|BODY|)))))))
  '(#3# |COMMON-LISP|::|&BODY| |UIOP/LISP-BUILD|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LISP-BUILD|::|CALL-WITH-MUFFLED-LOADER-CONDITIONS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|CALL-WITH-MUFFLED-LOADER-CONDITIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/LISP-BUILD|::|THUNK|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|UIOP/LISP-BUILD|::|WITH-MUFFLED-LOADER-CONDITIONS|)
(|SYSTEM|::|%PUTD| '|UIOP/LISP-BUILD|::|WITH-MUFFLED-LOADER-CONDITIONS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION|
   |UIOP/LISP-BUILD|::|WITH-MUFFLED-LOADER-CONDITIONS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Trivial syntax for CALL-WITH-MUFFLED-LOADER-CONDITIONS"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G18241| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#:|G18242|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 0. 0. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/LISP-BUILD|::|WITH-MUFFLED-LOADER-CONDITIONS| #1#
          '#3=(|COMMON-LISP|::|&OPTIONAL|))
         #1#))
       (|UIOP/LISP-BUILD|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK|
       |UIOP/LISP-BUILD|::|WITH-MUFFLED-LOADER-CONDITIONS|
       `(|UIOP/LISP-BUILD|::|CALL-WITH-MUFFLED-LOADER-CONDITIONS|
         #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
            ,@|UIOP/LISP-BUILD|::|BODY|)))))))
  '(#3# |COMMON-LISP|::|&BODY| |UIOP/LISP-BUILD|::|BODY|)))
(|COMMON-LISP|::|DEFINE-CONDITION| |UIOP/LISP-BUILD|::|COMPILE-CONDITION|
 (|COMMON-LISP|::|CONDITION|)
 ((|UIOP/LISP-BUILD|::|CONTEXT-FORMAT| :|INITFORM| |COMMON-LISP|::|NIL|
   :|READER| |UIOP/LISP-BUILD|::|COMPILE-CONDITION-CONTEXT-FORMAT| :|INITARG|
   :|CONTEXT-FORMAT|)
  (|UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS| :|INITFORM| |COMMON-LISP|::|NIL|
   :|READER| |UIOP/LISP-BUILD|::|COMPILE-CONDITION-CONTEXT-ARGUMENTS|
   :|INITARG| :|CONTEXT-ARGUMENTS|)
  (|UIOP/LISP-BUILD|::|DESCRIPTION| :|INITFORM| |COMMON-LISP|::|NIL| :|READER|
   |UIOP/LISP-BUILD|::|COMPILE-CONDITION-DESCRIPTION| :|INITARG|
   :|DESCRIPTION|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA| (|UIOP/LISP-BUILD|::|C| |UIOP/LISP-BUILD|::|S|)
   (|COMMON-LISP|::|FORMAT| |UIOP/LISP-BUILD|::|S|
    (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<~A~@[ while ~?~]~@:>")
    (|COMMON-LISP|::|OR|
     (|UIOP/LISP-BUILD|::|COMPILE-CONDITION-DESCRIPTION|
      |UIOP/LISP-BUILD|::|C|)
     (|COMMON-LISP|::|TYPE-OF| |UIOP/LISP-BUILD|::|C|))
    (|UIOP/LISP-BUILD|::|COMPILE-CONDITION-CONTEXT-FORMAT|
     |UIOP/LISP-BUILD|::|C|)
    (|UIOP/LISP-BUILD|::|COMPILE-CONDITION-CONTEXT-ARGUMENTS|
     |UIOP/LISP-BUILD|::|C|)))))
(|COMMON-LISP|::|DEFINE-CONDITION| |UIOP/LISP-BUILD|::|COMPILE-FILE-ERROR|
 (|UIOP/LISP-BUILD|::|COMPILE-CONDITION| |COMMON-LISP|::|ERROR|)
 |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|DEFINE-CONDITION| |UIOP/LISP-BUILD|::|COMPILE-WARNED-WARNING|
 (|UIOP/LISP-BUILD|::|COMPILE-CONDITION| |COMMON-LISP|::|WARNING|)
 |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|DEFINE-CONDITION| |UIOP/LISP-BUILD|::|COMPILE-WARNED-ERROR|
 (|UIOP/LISP-BUILD|::|COMPILE-CONDITION| |COMMON-LISP|::|ERROR|)
 |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|DEFINE-CONDITION| |UIOP/LISP-BUILD|::|COMPILE-FAILED-WARNING|
 (|UIOP/LISP-BUILD|::|COMPILE-CONDITION| |COMMON-LISP|::|WARNING|)
 |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|DEFINE-CONDITION| |UIOP/LISP-BUILD|::|COMPILE-FAILED-ERROR|
 (|UIOP/LISP-BUILD|::|COMPILE-CONDITION| |COMMON-LISP|::|ERROR|)
 |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|CHECK-LISP-COMPILE-WARNINGS|
 (|UIOP/LISP-BUILD|::|WARNINGS-P| |UIOP/LISP-BUILD|::|FAILURE-P|
  |COMMON-LISP|::|&OPTIONAL| |UIOP/LISP-BUILD|::|CONTEXT-FORMAT|
  |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|)
 "Given the warnings or failures as resulted from COMPILE-FILE or checking deferred warnings,\n
raise an error or warning as appropriate"
 (|COMMON-LISP|::|WHEN| |UIOP/LISP-BUILD|::|FAILURE-P|
  (|COMMON-LISP|::|CASE| |UIOP/LISP-BUILD|::|*COMPILE-FILE-FAILURE-BEHAVIOUR*|
   (:|WARN|
    (|COMMON-LISP|::|WARN| '|UIOP/LISP-BUILD|::|COMPILE-FAILED-WARNING|
     :|DESCRIPTION| "Lisp compilation failed" :|CONTEXT-FORMAT|
     |UIOP/LISP-BUILD|::|CONTEXT-FORMAT| :|CONTEXT-ARGUMENTS|
     |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|))
   (:|ERROR|
    (|COMMON-LISP|::|ERROR| '|UIOP/LISP-BUILD|::|COMPILE-FAILED-ERROR|
     :|DESCRIPTION| "Lisp compilation failed" :|CONTEXT-FORMAT|
     |UIOP/LISP-BUILD|::|CONTEXT-FORMAT| :|CONTEXT-ARGUMENTS|
     |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|))
   (:|IGNORE| |COMMON-LISP|::|NIL|)))
 (|COMMON-LISP|::|WHEN| |UIOP/LISP-BUILD|::|WARNINGS-P|
  (|COMMON-LISP|::|CASE| |UIOP/LISP-BUILD|::|*COMPILE-FILE-WARNINGS-BEHAVIOUR*|
   (:|WARN|
    (|COMMON-LISP|::|WARN| '|UIOP/LISP-BUILD|::|COMPILE-WARNED-WARNING|
     :|DESCRIPTION| "Lisp compilation had style-warnings" :|CONTEXT-FORMAT|
     |UIOP/LISP-BUILD|::|CONTEXT-FORMAT| :|CONTEXT-ARGUMENTS|
     |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|))
   (:|ERROR|
    (|COMMON-LISP|::|ERROR| '|UIOP/LISP-BUILD|::|COMPILE-WARNED-ERROR|
     :|DESCRIPTION| "Lisp compilation had style-warnings" :|CONTEXT-FORMAT|
     |UIOP/LISP-BUILD|::|CONTEXT-FORMAT| :|CONTEXT-ARGUMENTS|
     |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|))
   (:|IGNORE| |COMMON-LISP|::|NIL|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|CHECK-LISP-COMPILE-RESULTS|
 (|UIOP/LISP-BUILD|::|OUTPUT| |UIOP/LISP-BUILD|::|WARNINGS-P|
  |UIOP/LISP-BUILD|::|FAILURE-P| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/LISP-BUILD|::|CONTEXT-FORMAT| |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|)
 "Given the results of COMPILE-FILE, raise an error or warning as appropriate"
 (|COMMON-LISP|::|UNLESS| |UIOP/LISP-BUILD|::|OUTPUT|
  (|COMMON-LISP|::|ERROR| '|UIOP/LISP-BUILD|::|COMPILE-FILE-ERROR|
   :|CONTEXT-FORMAT| |UIOP/LISP-BUILD|::|CONTEXT-FORMAT| :|CONTEXT-ARGUMENTS|
   |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|))
 (|UIOP/LISP-BUILD|::|CHECK-LISP-COMPILE-WARNINGS|
  |UIOP/LISP-BUILD|::|WARNINGS-P| |UIOP/LISP-BUILD|::|FAILURE-P|
  |UIOP/LISP-BUILD|::|CONTEXT-FORMAT| |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|))
(|COMMON-LISP|::|LET*| ((#1=#:|G18292| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/LISP-BUILD|::|COMPILE-CONDITION| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|CONDITION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/LISP-BUILD|::|CONTEXT-FORMAT|
    :|READERS| '(|UIOP/LISP-BUILD|::|COMPILE-CONDITION-CONTEXT-FORMAT|)
    :|INITARGS| '(:|CONTEXT-FORMAT|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|
    :|READERS| '(|UIOP/LISP-BUILD|::|COMPILE-CONDITION-CONTEXT-ARGUMENTS|)
    :|INITARGS| '(:|CONTEXT-ARGUMENTS|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/LISP-BUILD|::|DESCRIPTION| :|READERS|
    '(|UIOP/LISP-BUILD|::|COMPILE-CONDITION-DESCRIPTION|) :|INITARGS|
    '(:|DESCRIPTION|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|COMPILE-CONDITION-CONTEXT-FORMAT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|COMPILE-CONDITION-CONTEXT-ARGUMENTS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|COMPILE-CONDITION-DESCRIPTION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G18340| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/LISP-BUILD|::|COMPILE-FILE-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|UIOP/LISP-BUILD|::|COMPILE-CONDITION|
   '|COMMON-LISP|::|ERROR|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G18343| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/LISP-BUILD|::|COMPILE-WARNED-WARNING| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|UIOP/LISP-BUILD|::|COMPILE-CONDITION|
   '|COMMON-LISP|::|WARNING|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G18346| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/LISP-BUILD|::|COMPILE-WARNED-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|UIOP/LISP-BUILD|::|COMPILE-CONDITION|
   '|COMMON-LISP|::|ERROR|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G18349| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/LISP-BUILD|::|COMPILE-FAILED-WARNING| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|UIOP/LISP-BUILD|::|COMPILE-CONDITION|
   '|COMMON-LISP|::|WARNING|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G18352| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/LISP-BUILD|::|COMPILE-FAILED-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|UIOP/LISP-BUILD|::|COMPILE-CONDITION|
   '|COMMON-LISP|::|ERROR|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LISP-BUILD|::|CHECK-LISP-COMPILE-WARNINGS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|CHECK-LISP-COMPILE-WARNINGS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LISP-BUILD|::|WARNINGS-P| |UIOP/LISP-BUILD|::|FAILURE-P|
    |COMMON-LISP|::|&OPTIONAL| |UIOP/LISP-BUILD|::|CONTEXT-FORMAT|
    |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|CHECK-LISP-COMPILE-RESULTS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|CHECK-LISP-COMPILE-RESULTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LISP-BUILD|::|OUTPUT| |UIOP/LISP-BUILD|::|WARNINGS-P|
    |UIOP/LISP-BUILD|::|FAILURE-P| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/LISP-BUILD|::|CONTEXT-FORMAT|
    |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|REIFY-SIMPLE-SEXP|
 (|UIOP/LISP-BUILD|::|SEXP|)
 "Given a simple SEXP, return a representation of it as a portable SEXP.\n
Simple means made of symbols, numbers, characters, simple-strings, pathnames, cons cells."
 (|COMMON-LISP|::|ETYPECASE| |UIOP/LISP-BUILD|::|SEXP|
  (|COMMON-LISP|::|SYMBOL|
   (|UIOP/PACKAGE|::|REIFY-SYMBOL| |UIOP/LISP-BUILD|::|SEXP|))
  ((|COMMON-LISP|::|OR| |COMMON-LISP|::|NUMBER| |COMMON-LISP|::|CHARACTER|
    |COMMON-LISP|::|SIMPLE-STRING| |COMMON-LISP|::|PATHNAME|)
   |UIOP/LISP-BUILD|::|SEXP|)
  (|COMMON-LISP|::|CONS|
   (|COMMON-LISP|::|CONS|
    (|UIOP/LISP-BUILD|::|REIFY-SIMPLE-SEXP|
     (|COMMON-LISP|::|CAR| |UIOP/LISP-BUILD|::|SEXP|))
    (|UIOP/LISP-BUILD|::|REIFY-SIMPLE-SEXP|
     (|COMMON-LISP|::|CDR| |UIOP/LISP-BUILD|::|SEXP|))))
  (|COMMON-LISP|::|SIMPLE-VECTOR|
   (|COMMON-LISP|::|VECTOR|
    (|COMMON-LISP|::|MAPCAR| '|UIOP/LISP-BUILD|::|REIFY-SIMPLE-SEXP|
     (|COMMON-LISP|::|COERCE| |UIOP/LISP-BUILD|::|SEXP|
      '|COMMON-LISP|::|LIST|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|UNREIFY-SIMPLE-SEXP|
 (|UIOP/LISP-BUILD|::|SEXP|)
 "Given the portable output of REIFY-SIMPLE-SEXP, return the simple SEXP it represents"
 (|COMMON-LISP|::|ETYPECASE| |UIOP/LISP-BUILD|::|SEXP|
  ((|COMMON-LISP|::|OR| |COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|NUMBER|
    |COMMON-LISP|::|CHARACTER| |COMMON-LISP|::|SIMPLE-STRING|
    |COMMON-LISP|::|PATHNAME|)
   |UIOP/LISP-BUILD|::|SEXP|)
  (|COMMON-LISP|::|CONS|
   (|COMMON-LISP|::|CONS|
    (|UIOP/LISP-BUILD|::|UNREIFY-SIMPLE-SEXP|
     (|COMMON-LISP|::|CAR| |UIOP/LISP-BUILD|::|SEXP|))
    (|UIOP/LISP-BUILD|::|UNREIFY-SIMPLE-SEXP|
     (|COMMON-LISP|::|CDR| |UIOP/LISP-BUILD|::|SEXP|))))
  ((|COMMON-LISP|::|SIMPLE-VECTOR| 2.)
   (|UIOP/PACKAGE|::|UNREIFY-SYMBOL| |UIOP/LISP-BUILD|::|SEXP|))
  ((|COMMON-LISP|::|SIMPLE-VECTOR| 1.)
   (|COMMON-LISP|::|COERCE|
    (|COMMON-LISP|::|MAPCAR| '|UIOP/LISP-BUILD|::|UNREIFY-SIMPLE-SEXP|
     (|COMMON-LISP|::|AREF| |UIOP/LISP-BUILD|::|SEXP| 0.))
    '|COMMON-LISP|::|VECTOR|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|REIFY-DEFERRED-WARNINGS|
 |COMMON-LISP|::|NIL|
 "return a portable S-expression, portably readable and writeable in any Common Lisp implementation\n
using READ within a WITH-SAFE-IO-SYNTAX, that represents the warnings currently deferred by\n
WITH-COMPILATION-UNIT. One of three functions required for deferred-warnings support in ASDF.")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|UNREIFY-DEFERRED-WARNINGS|
 (|UIOP/LISP-BUILD|::|REIFIED-DEFERRED-WARNINGS|)
 "given a S-expression created by REIFY-DEFERRED-WARNINGS, reinstantiate the corresponding\n
deferred warnings as to be handled at the end of the current WITH-COMPILATION-UNIT.\n
Handle any warning that has been resolved already,\n
such as an undefined function that has been defined since.\n
One of three functions required for deferred-warnings support in ASDF."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/LISP-BUILD|::|REIFIED-DEFERRED-WARNINGS|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|RESET-DEFERRED-WARNINGS|
 |COMMON-LISP|::|NIL|
 "Reset the set of deferred warnings to be handled at the end of the current WITH-COMPILATION-UNIT.\n
One of three functions required for deferred-warnings support in ASDF.")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|SAVE-DEFERRED-WARNINGS|
 (|UIOP/LISP-BUILD|::|WARNINGS-FILE|)
 "Save forward reference conditions so they may be issued at a latter time,\n
possibly in a different process."
 (|COMMON-LISP|::|WITH-OPEN-FILE|
  (|UIOP/LISP-BUILD|::|S| |UIOP/LISP-BUILD|::|WARNINGS-FILE| :|DIRECTION|
   :|OUTPUT| :|IF-EXISTS| :|SUPERSEDE| :|ELEMENT-TYPE|
   |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*| :|EXTERNAL-FORMAT|
   |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
  (|UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX| |COMMON-LISP|::|NIL|
   (|COMMON-LISP|::|LET| ((|COMMON-LISP|::|*READ-EVAL*| |COMMON-LISP|::|T|))
    (|COMMON-LISP|::|WRITE| (|UIOP/LISP-BUILD|::|REIFY-DEFERRED-WARNINGS|)
     :|STREAM| |UIOP/LISP-BUILD|::|S| :|PRETTY| |COMMON-LISP|::|T| :|READABLY|
     |COMMON-LISP|::|T|))
   (|COMMON-LISP|::|TERPRI| |UIOP/LISP-BUILD|::|S|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|WARNINGS-FILE-TYPE|
 (|COMMON-LISP|::|&OPTIONAL| |UIOP/OS|::|IMPLEMENTATION-TYPE|)
 "The pathname type for warnings files on given IMPLEMENTATION-TYPE,\n
where NIL designates the current one"
 (|COMMON-LISP|::|CASE|
  (|COMMON-LISP|::|OR| |UIOP/OS|::|IMPLEMENTATION-TYPE|
   |UIOP/OS|::|*IMPLEMENTATION-TYPE*|)
  ((:|ACL| :|ALLEGRO|) "allegro-warnings") ((:|CMU| :|CMUCL|) "cmucl-warnings")
  ((:|SBCL|) "sbcl-warnings") ((:|CLOZURE| :|CCL|) "ccl-warnings")
  ((:|SCL|) "scl-warnings")))
(|COMMON-LISP|::|DEFVAR| |UIOP/LISP-BUILD|::|*WARNINGS-FILE-TYPE*|
 |COMMON-LISP|::|NIL| "Pathname type for warnings files, or NIL if disabled")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|ENABLE-DEFERRED-WARNINGS-CHECK|
 |COMMON-LISP|::|NIL| "Enable the saving of deferred warnings"
 (|COMMON-LISP|::|SETF| |UIOP/LISP-BUILD|::|*WARNINGS-FILE-TYPE*|
  (|UIOP/LISP-BUILD|::|WARNINGS-FILE-TYPE|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|DISABLE-DEFERRED-WARNINGS-CHECK|
 |COMMON-LISP|::|NIL| "Disable the saving of deferred warnings"
 (|COMMON-LISP|::|SETF| |UIOP/LISP-BUILD|::|*WARNINGS-FILE-TYPE*|
  |COMMON-LISP|::|NIL|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|WARNINGS-FILE-P|
 (|UIOP/LISP-BUILD|::|FILE| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/OS|::|IMPLEMENTATION-TYPE|)
 "Is FILE a saved warnings file for the given IMPLEMENTATION-TYPE?\n
If that given type is NIL, use the currently configured *WARNINGS-FILE-TYPE* instead."
 (|UIOP/UTILITY|::|IF-LET|
  (|COMMON-LISP|::|TYPE|
   (|COMMON-LISP|::|IF| |UIOP/OS|::|IMPLEMENTATION-TYPE|
    (|UIOP/LISP-BUILD|::|WARNINGS-FILE-TYPE| |UIOP/OS|::|IMPLEMENTATION-TYPE|)
    |UIOP/LISP-BUILD|::|*WARNINGS-FILE-TYPE*|))
  (|COMMON-LISP|::|EQUAL|
   (|COMMON-LISP|::|PATHNAME-TYPE| |UIOP/LISP-BUILD|::|FILE|)
   |COMMON-LISP|::|TYPE|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|CHECK-DEFERRED-WARNINGS|
 (|UIOP/LISP-BUILD|::|FILES| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/LISP-BUILD|::|CONTEXT-FORMAT| |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|)
 "Given a list of FILES containing deferred warnings saved by CALL-WITH-SAVED-DEFERRED-WARNINGS,\n
re-intern and raise any warnings that are still meaningful."
 (|COMMON-LISP|::|LET|
  ((|UIOP/LISP-BUILD|::|FILE-ERRORS| |COMMON-LISP|::|NIL|)
   (|UIOP/LISP-BUILD|::|FAILURE-P| |COMMON-LISP|::|NIL|)
   (|UIOP/LISP-BUILD|::|WARNINGS-P| |COMMON-LISP|::|NIL|))
  (|COMMON-LISP|::|HANDLER-BIND|
   ((|COMMON-LISP|::|WARNING|
     #'(|COMMON-LISP|::|LAMBDA| (|UIOP/LISP-BUILD|::|C|)
        (|COMMON-LISP|::|SETF| |UIOP/LISP-BUILD|::|WARNINGS-P|
         |COMMON-LISP|::|T|)
        (|COMMON-LISP|::|UNLESS|
         (|COMMON-LISP|::|TYPEP| |UIOP/LISP-BUILD|::|C|
          '|COMMON-LISP|::|STYLE-WARNING|)
         (|COMMON-LISP|::|SETF| |UIOP/LISP-BUILD|::|FAILURE-P|
          |COMMON-LISP|::|T|)))))
   (|COMMON-LISP|::|WITH-COMPILATION-UNIT| (:|OVERRIDE| |COMMON-LISP|::|T|)
    (|UIOP/LISP-BUILD|::|RESET-DEFERRED-WARNINGS|)
    (|COMMON-LISP|::|DOLIST|
     (|UIOP/LISP-BUILD|::|FILE| |UIOP/LISP-BUILD|::|FILES|)
     (|UIOP/LISP-BUILD|::|UNREIFY-DEFERRED-WARNINGS|
      (|COMMON-LISP|::|HANDLER-CASE|
       (|UIOP/STREAM|::|WITH-SAFE-IO-SYNTAX| |COMMON-LISP|::|NIL|
        (|COMMON-LISP|::|LET|
         ((|COMMON-LISP|::|*READ-EVAL*| |COMMON-LISP|::|T|))
         (|UIOP/STREAM|::|READ-FILE-FORM| |UIOP/LISP-BUILD|::|FILE|)))
       (|COMMON-LISP|::|ERROR| (|UIOP/LISP-BUILD|::|C|)
        (|COMMON-LISP|::|PUSH| |UIOP/LISP-BUILD|::|C|
         |UIOP/LISP-BUILD|::|FILE-ERRORS|)
        |COMMON-LISP|::|NIL|))))))
  (|COMMON-LISP|::|DOLIST|
   (|COMMON-LISP|::|ERROR| |UIOP/LISP-BUILD|::|FILE-ERRORS|)
   (|COMMON-LISP|::|ERROR| |COMMON-LISP|::|ERROR|))
  (|UIOP/LISP-BUILD|::|CHECK-LISP-COMPILE-WARNINGS|
   (|COMMON-LISP|::|OR| |UIOP/LISP-BUILD|::|FAILURE-P|
    |UIOP/LISP-BUILD|::|WARNINGS-P|)
   |UIOP/LISP-BUILD|::|FAILURE-P| |UIOP/LISP-BUILD|::|CONTEXT-FORMAT|
   |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|)))
(|UIOP/UTILITY|::|DEFUN*|
 |UIOP/LISP-BUILD|::|CALL-WITH-SAVED-DEFERRED-WARNINGS|
 (|UIOP/LISP-BUILD|::|THUNK| |UIOP/LISP-BUILD|::|WARNINGS-FILE|
  |COMMON-LISP|::|&KEY| |UIOP/LISP-BUILD|::|SOURCE-NAMESTRING|)
 "If WARNINGS-FILE is not nil, record the deferred-warnings around a call to THUNK\n
and save those warnings to the given file for latter use,\n
possibly in a different process. Otherwise just call THUNK."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/LISP-BUILD|::|SOURCE-NAMESTRING|))
 (|COMMON-LISP|::|IF| |UIOP/LISP-BUILD|::|WARNINGS-FILE|
  (|COMMON-LISP|::|WITH-COMPILATION-UNIT| (:|OVERRIDE| |COMMON-LISP|::|T|)
   (|COMMON-LISP|::|UNWIND-PROTECT|
    (|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
     (|COMMON-LISP|::|MULTIPLE-VALUE-PROG1|
      (|COMMON-LISP|::|FUNCALL| |UIOP/LISP-BUILD|::|THUNK|)
      (|UIOP/LISP-BUILD|::|SAVE-DEFERRED-WARNINGS|
       |UIOP/LISP-BUILD|::|WARNINGS-FILE|)))
    (|UIOP/LISP-BUILD|::|RESET-DEFERRED-WARNINGS|)))
  (|COMMON-LISP|::|FUNCALL| |UIOP/LISP-BUILD|::|THUNK|)))
(|COMMON-LISP|::|DEFMACRO| |UIOP/LISP-BUILD|::|WITH-SAVED-DEFERRED-WARNINGS|
 ((|UIOP/LISP-BUILD|::|WARNINGS-FILE| |COMMON-LISP|::|&KEY|
   |UIOP/LISP-BUILD|::|SOURCE-NAMESTRING|)
  |COMMON-LISP|::|&BODY| |UIOP/LISP-BUILD|::|BODY|)
 "Trivial syntax for CALL-WITH-SAVED-DEFERRED-WARNINGS"
 `(|UIOP/LISP-BUILD|::|CALL-WITH-SAVED-DEFERRED-WARNINGS|
   #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| ,@|UIOP/LISP-BUILD|::|BODY|)
   ,|UIOP/LISP-BUILD|::|WARNINGS-FILE| :|SOURCE-NAMESTRING|
   ,|UIOP/LISP-BUILD|::|SOURCE-NAMESTRING|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|REIFY-SIMPLE-SEXP|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|REIFY-SIMPLE-SEXP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/LISP-BUILD|::|SEXP|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|UNREIFY-SIMPLE-SEXP|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|UNREIFY-SIMPLE-SEXP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/LISP-BUILD|::|SEXP|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|REIFY-DEFERRED-WARNINGS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|REIFY-DEFERRED-WARNINGS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|UNREIFY-DEFERRED-WARNINGS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|UNREIFY-DEFERRED-WARNINGS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LISP-BUILD|::|REIFIED-DEFERRED-WARNINGS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|RESET-DEFERRED-WARNINGS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|RESET-DEFERRED-WARNINGS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|SAVE-DEFERRED-WARNINGS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|SAVE-DEFERRED-WARNINGS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/LISP-BUILD|::|WARNINGS-FILE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|WARNINGS-FILE-TYPE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|WARNINGS-FILE-TYPE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL| |UIOP/OS|::|IMPLEMENTATION-TYPE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/LISP-BUILD|::|*WARNINGS-FILE-TYPE*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LISP-BUILD|::|ENABLE-DEFERRED-WARNINGS-CHECK|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|ENABLE-DEFERRED-WARNINGS-CHECK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LISP-BUILD|::|DISABLE-DEFERRED-WARNINGS-CHECK|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|DISABLE-DEFERRED-WARNINGS-CHECK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|WARNINGS-FILE-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|WARNINGS-FILE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LISP-BUILD|::|FILE| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/OS|::|IMPLEMENTATION-TYPE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|CHECK-DEFERRED-WARNINGS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|CHECK-DEFERRED-WARNINGS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LISP-BUILD|::|FILES| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/LISP-BUILD|::|CONTEXT-FORMAT|
    |UIOP/LISP-BUILD|::|CONTEXT-ARGUMENTS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LISP-BUILD|::|CALL-WITH-SAVED-DEFERRED-WARNINGS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|CALL-WITH-SAVED-DEFERRED-WARNINGS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LISP-BUILD|::|THUNK| |UIOP/LISP-BUILD|::|WARNINGS-FILE|
    |COMMON-LISP|::|&KEY| |UIOP/LISP-BUILD|::|SOURCE-NAMESTRING|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|UIOP/LISP-BUILD|::|WITH-SAVED-DEFERRED-WARNINGS|)
(|SYSTEM|::|%PUTD| '|UIOP/LISP-BUILD|::|WITH-SAVED-DEFERRED-WARNINGS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/LISP-BUILD|::|WITH-SAVED-DEFERRED-WARNINGS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Trivial syntax for CALL-WITH-SAVED-DEFERRED-WARNINGS"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G18645| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G18646|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 1. 1. |COMMON-LISP|::|T|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/LISP-BUILD|::|WITH-SAVED-DEFERRED-WARNINGS| #1#
          '#4=(|UIOP/LISP-BUILD|::|WARNINGS-FILE| |COMMON-LISP|::|&KEY|
               |UIOP/LISP-BUILD|::|SOURCE-NAMESTRING|))
         #1#))
       (|UIOP/LISP-BUILD|::|WARNINGS-FILE| (|COMMON-LISP|::|CAR| #3#))
       (#5=#:|G18647| (|COMMON-LISP|::|CDR| #3#))
       (|UIOP/LISP-BUILD|::|SOURCE-NAMESTRING|
        (|COMMON-LISP|::|GETF| #5# ':|SOURCE-NAMESTRING| |COMMON-LISP|::|NIL|))
       (|UIOP/LISP-BUILD|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|SYSTEM|::|KEYWORD-TEST| #5# '(:|SOURCE-NAMESTRING|))
      (|COMMON-LISP|::|BLOCK| |UIOP/LISP-BUILD|::|WITH-SAVED-DEFERRED-WARNINGS|
       `(|UIOP/LISP-BUILD|::|CALL-WITH-SAVED-DEFERRED-WARNINGS|
         #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
            ,@|UIOP/LISP-BUILD|::|BODY|)
         ,|UIOP/LISP-BUILD|::|WARNINGS-FILE| :|SOURCE-NAMESTRING|
         ,|UIOP/LISP-BUILD|::|SOURCE-NAMESTRING|))))))
  '(#4# |COMMON-LISP|::|&BODY| |UIOP/LISP-BUILD|::|BODY|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|CURRENT-LISP-FILE-PATHNAME|
 |COMMON-LISP|::|NIL|
 "Portably return the PATHNAME of the current Lisp source file being compiled or loaded"
 (|COMMON-LISP|::|OR| |COMMON-LISP|::|*COMPILE-FILE-PATHNAME*|
  |COMMON-LISP|::|*LOAD-PATHNAME*|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|LOAD-PATHNAME|
 |COMMON-LISP|::|NIL|
 "Portably return the LOAD-PATHNAME of the current source file or fasl"
 |COMMON-LISP|::|*LOAD-PATHNAME*|)
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|LISPIZE-PATHNAME|
 (|UIOP/LISP-BUILD|::|INPUT-FILE|)
 "From a INPUT-FILE pathname, return a corresponding .lisp source pathname"
 (|COMMON-LISP|::|MAKE-PATHNAME| :|TYPE| "lisp" :|DEFAULTS|
  |UIOP/LISP-BUILD|::|INPUT-FILE|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|COMPILE-FILE-TYPE|
 (|COMMON-LISP|::|&REST| |UIOP/LISP-BUILD|::|KEYS|)
 "pathname TYPE for lisp FASt Loading files"
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/LISP-BUILD|::|KEYS|))
 (|COMMON-LISP|::|LOAD-TIME-VALUE|
  (|COMMON-LISP|::|PATHNAME-TYPE|
   (|COMMON-LISP|::|COMPILE-FILE-PATHNAME| "foo.lisp"))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|CALL-AROUND-HOOK|
 (|UIOP/LISP-BUILD|::|HOOK| |COMMON-LISP|::|FUNCTION|)
 "Call a HOOK around the execution of FUNCTION"
 (|UIOP/UTILITY|::|CALL-FUNCTION|
  (|COMMON-LISP|::|OR| |UIOP/LISP-BUILD|::|HOOK| '|COMMON-LISP|::|FUNCALL|)
  |COMMON-LISP|::|FUNCTION|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|COMPILE-FILE-PATHNAME*|
 (|UIOP/LISP-BUILD|::|INPUT-FILE| |COMMON-LISP|::|&REST|
  |UIOP/LISP-BUILD|::|KEYS| |COMMON-LISP|::|&KEY|
  |UIOP/LISP-BUILD|::|OUTPUT-FILE| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Variant of COMPILE-FILE-PATHNAME that works well with COMPILE-FILE*"
 (|COMMON-LISP|::|LET*|
  ((|UIOP/LISP-BUILD|::|KEYS|
    (|UIOP/UTILITY|::|REMOVE-PLIST-KEYS|
     `(,@(|COMMON-LISP|::|UNLESS| |UIOP/LISP-BUILD|::|OUTPUT-FILE|
          '(:|OUTPUT-FILE|)))
     |UIOP/LISP-BUILD|::|KEYS|)))
  (|COMMON-LISP|::|IF|
   (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/LISP-BUILD|::|OUTPUT-FILE|)
   (|COMMON-LISP|::|LET*|
    ((|COMMON-LISP|::|TYPE|
      (|COMMON-LISP|::|PATHNAME-TYPE|
       (|COMMON-LISP|::|APPLY| '|UIOP/LISP-BUILD|::|COMPILE-FILE-TYPE|
        |UIOP/LISP-BUILD|::|KEYS|)))
     (|UIOP/LISP-BUILD|::|DEFAULTS|
      (|COMMON-LISP|::|MAKE-PATHNAME| :|TYPE| |COMMON-LISP|::|TYPE| :|DEFAULTS|
       (|UIOP/PATHNAME|::|MERGE-PATHNAMES*| |UIOP/LISP-BUILD|::|INPUT-FILE|))))
    (|UIOP/PATHNAME|::|MERGE-PATHNAMES*| |UIOP/LISP-BUILD|::|OUTPUT-FILE|
     |UIOP/LISP-BUILD|::|DEFAULTS|))
   (|COMMON-LISP|::|FUNCALL| |UIOP/PATHNAME|::|*OUTPUT-TRANSLATION-FUNCTION*|
    (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|COMPILE-FILE-PATHNAME|
     |UIOP/LISP-BUILD|::|INPUT-FILE| |UIOP/LISP-BUILD|::|KEYS|)))))
(|COMMON-LISP|::|DEFVAR| |UIOP/LISP-BUILD|::|*COMPILE-CHECK*|
 |COMMON-LISP|::|NIL| "A hook for user-defined compile-time invariants")
(|UIOP/UTILITY|::|DEFUN*| (|UIOP/LISP-BUILD|::|COMPILE-FILE*|)
 (|UIOP/LISP-BUILD|::|INPUT-FILE| |COMMON-LISP|::|&REST|
  |UIOP/LISP-BUILD|::|KEYS| |COMMON-LISP|::|&KEY|
  (|UIOP/LISP-BUILD|::|COMPILE-CHECK| |UIOP/LISP-BUILD|::|*COMPILE-CHECK*|)
  |UIOP/LISP-BUILD|::|OUTPUT-FILE| |UIOP/LISP-BUILD|::|WARNINGS-FILE|
  |UIOP/LISP-BUILD|::|LIB-FILE| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "This function provides a portable wrapper around COMPILE-FILE.\n
It ensures that the OUTPUT-FILE value is only returned and\n
the file only actually created if the compilation was successful,\n
even though your implementation may not do that. It also checks an optional\n
user-provided consistency function COMPILE-CHECK to determine success;\n
it will call this function if not NIL at the end of the compilation\n
with the arguments sent to COMPILE-FILE*, except with :OUTPUT-FILE TMP-FILE\n
where TMP-FILE is the name of a temporary output-file.\n
It also checks two flags (with legacy british spelling from ASDF1),\n
*COMPILE-FILE-FAILURE-BEHAVIOUR* and *COMPILE-FILE-WARNINGS-BEHAVIOUR*\n
with appropriate implementation-dependent defaults,\n
and if a failure (respectively warnings) are reported by COMPILE-FILE,\n
it will consider that an error unless the respective behaviour flag\n
is one of :SUCCESS :WARN :IGNORE.\n
If WARNINGS-FILE is defined, deferred warnings are saved to that file.\n
On ECL or MKCL, it creates both the linkable object and loadable fasl files.\n
On implementations that erroneously do not recognize standard keyword arguments,\n
it will filter them appropriately."
 (|COMMON-LISP|::|LET*|
  ((|UIOP/LISP-BUILD|::|KEYWORDS|
    (|UIOP/UTILITY|::|REMOVE-PLIST-KEYS|
     `(:|OUTPUT-FILE| :|COMPILE-CHECK| :|WARNINGS-FILE| :|LIB-FILE|)
     |UIOP/LISP-BUILD|::|KEYS|))
   (|UIOP/LISP-BUILD|::|OUTPUT-FILE|
    (|COMMON-LISP|::|OR| |UIOP/LISP-BUILD|::|OUTPUT-FILE|
     (|COMMON-LISP|::|APPLY| '|UIOP/LISP-BUILD|::|COMPILE-FILE-PATHNAME*|
      |UIOP/LISP-BUILD|::|INPUT-FILE| :|OUTPUT-FILE|
      |UIOP/LISP-BUILD|::|OUTPUT-FILE| |UIOP/LISP-BUILD|::|KEYWORDS|)))
   (|UIOP/LISP-BUILD|::|PHYSICAL-OUTPUT-FILE|
    (|UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME| |UIOP/LISP-BUILD|::|OUTPUT-FILE|))
   (|UIOP/LISP-BUILD|::|TMP-FILE|
    (|UIOP/STREAM|::|TMPIZE-PATHNAME|
     |UIOP/LISP-BUILD|::|PHYSICAL-OUTPUT-FILE|))
   (|UIOP/LISP-BUILD|::|TMP-LIB|
    (|COMMON-LISP|::|MAKE-PATHNAME| :|TYPE| "lib" :|DEFAULTS|
     |UIOP/LISP-BUILD|::|TMP-FILE|)))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|UIOP/LISP-BUILD|::|OUTPUT-TRUENAME| |UIOP/LISP-BUILD|::|WARNINGS-P|
    |UIOP/LISP-BUILD|::|FAILURE-P|)
   (|UIOP/PATHNAME|::|WITH-ENOUGH-PATHNAME|
    (|UIOP/LISP-BUILD|::|INPUT-FILE| :|DEFAULTS|
     |UIOP/LISP-BUILD|::|*BASE-BUILD-DIRECTORY*|)
    (|UIOP/LISP-BUILD|::|WITH-SAVED-DEFERRED-WARNINGS|
     (|UIOP/LISP-BUILD|::|WARNINGS-FILE| :|SOURCE-NAMESTRING|
      (|COMMON-LISP|::|NAMESTRING| |UIOP/LISP-BUILD|::|INPUT-FILE|))
     (|UIOP/LISP-BUILD|::|WITH-MUFFLED-COMPILER-CONDITIONS|
      |COMMON-LISP|::|NIL|
      (|COMMON-LISP|::|OR|
       (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|COMPILE-FILE|
        |UIOP/LISP-BUILD|::|INPUT-FILE| :|OUTPUT-FILE|
        |UIOP/LISP-BUILD|::|TMP-FILE| |UIOP/LISP-BUILD|::|KEYWORDS|)))))
   (|COMMON-LISP|::|COND|
    ((|COMMON-LISP|::|AND| |UIOP/LISP-BUILD|::|OUTPUT-TRUENAME|
      (|COMMON-LISP|::|FLET|
       ((|UIOP/LISP-BUILD|::|CHECK-FLAG|
         (|UIOP/LISP-BUILD|::|FLAG| |UIOP/LISP-BUILD|::|BEHAVIOUR|)
         (|COMMON-LISP|::|OR| (|COMMON-LISP|::|NOT| |UIOP/LISP-BUILD|::|FLAG|)
          (|COMMON-LISP|::|MEMBER| |UIOP/LISP-BUILD|::|BEHAVIOUR|
           '(:|SUCCESS| :|WARN| :|IGNORE|)))))
       (|COMMON-LISP|::|AND|
        (|UIOP/LISP-BUILD|::|CHECK-FLAG| |UIOP/LISP-BUILD|::|FAILURE-P|
         |UIOP/LISP-BUILD|::|*COMPILE-FILE-FAILURE-BEHAVIOUR*|)
        (|UIOP/LISP-BUILD|::|CHECK-FLAG| |UIOP/LISP-BUILD|::|WARNINGS-P|
         |UIOP/LISP-BUILD|::|*COMPILE-FILE-WARNINGS-BEHAVIOUR*|)))
      (|COMMON-LISP|::|PROGN|
       (|COMMON-LISP|::|OR|
        (|COMMON-LISP|::|NOT| |UIOP/LISP-BUILD|::|COMPILE-CHECK|)
        (|COMMON-LISP|::|APPLY| |UIOP/LISP-BUILD|::|COMPILE-CHECK|
         |UIOP/LISP-BUILD|::|INPUT-FILE| :|OUTPUT-FILE|
         |UIOP/LISP-BUILD|::|OUTPUT-TRUENAME| |UIOP/LISP-BUILD|::|KEYWORDS|))))
     (|UIOP/FILESYSTEM|::|DELETE-FILE-IF-EXISTS|
      |UIOP/LISP-BUILD|::|PHYSICAL-OUTPUT-FILE|)
     (|COMMON-LISP|::|WHEN| |UIOP/LISP-BUILD|::|OUTPUT-TRUENAME|
      (|COMMON-LISP|::|PROGN|
       (|COMMON-LISP|::|SETF| |UIOP/LISP-BUILD|::|TMP-LIB|
        (|COMMON-LISP|::|MAKE-PATHNAME| :|TYPE| "lib" :|DEFAULTS|
         |UIOP/LISP-BUILD|::|OUTPUT-TRUENAME|))
       (|COMMON-LISP|::|UNLESS| |UIOP/LISP-BUILD|::|LIB-FILE|
        (|COMMON-LISP|::|SETF| |UIOP/LISP-BUILD|::|LIB-FILE|
         (|COMMON-LISP|::|MAKE-PATHNAME| :|TYPE| "lib" :|DEFAULTS|
          |UIOP/LISP-BUILD|::|PHYSICAL-OUTPUT-FILE|)))
       (|UIOP/FILESYSTEM|::|RENAME-FILE-OVERWRITING-TARGET|
        |UIOP/LISP-BUILD|::|TMP-LIB| |UIOP/LISP-BUILD|::|LIB-FILE|))
      (|UIOP/FILESYSTEM|::|RENAME-FILE-OVERWRITING-TARGET|
       |UIOP/LISP-BUILD|::|OUTPUT-TRUENAME|
       |UIOP/LISP-BUILD|::|PHYSICAL-OUTPUT-FILE|)
      (|COMMON-LISP|::|SETF| |UIOP/LISP-BUILD|::|OUTPUT-TRUENAME|
       (|COMMON-LISP|::|TRUENAME| |UIOP/LISP-BUILD|::|PHYSICAL-OUTPUT-FILE|)))
     (|COMMON-LISP|::|PROGN|
      (|UIOP/FILESYSTEM|::|DELETE-FILE-IF-EXISTS|
       |UIOP/LISP-BUILD|::|TMP-FILE|)
      (|UIOP/FILESYSTEM|::|DELETE-FILE-IF-EXISTS|
       |UIOP/LISP-BUILD|::|TMP-LIB|)))
    (|COMMON-LISP|::|T|
     (|UIOP/FILESYSTEM|::|DELETE-FILE-IF-EXISTS|
      |UIOP/LISP-BUILD|::|OUTPUT-TRUENAME|)
     (|UIOP/FILESYSTEM|::|DELETE-FILE-IF-EXISTS| |UIOP/LISP-BUILD|::|TMP-LIB|)
     (|COMMON-LISP|::|SETF| |UIOP/LISP-BUILD|::|OUTPUT-TRUENAME|
      |COMMON-LISP|::|NIL|)))
   (|COMMON-LISP|::|VALUES| |UIOP/LISP-BUILD|::|OUTPUT-TRUENAME|
    |UIOP/LISP-BUILD|::|WARNINGS-P| |UIOP/LISP-BUILD|::|FAILURE-P|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|LOAD*|
 (|UIOP/LISP-BUILD|::|X| |COMMON-LISP|::|&REST| |UIOP/LISP-BUILD|::|KEYS|
  |COMMON-LISP|::|&KEY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Portable wrapper around LOAD that properly handles loading from a stream."
 (|UIOP/LISP-BUILD|::|WITH-MUFFLED-LOADER-CONDITIONS| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|ETYPECASE| |UIOP/LISP-BUILD|::|X|
   ((|COMMON-LISP|::|OR| |COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|STRING|
     |COMMON-LISP|::|STREAM|)
    (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|LOAD| |UIOP/LISP-BUILD|::|X|
     |UIOP/LISP-BUILD|::|KEYS|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|LOAD-FROM-STRING|
 (|COMMON-LISP|::|STRING|) "Portably read and evaluate forms from a STRING."
 (|COMMON-LISP|::|WITH-INPUT-FROM-STRING|
  (|UIOP/LISP-BUILD|::|S| |COMMON-LISP|::|STRING|)
  (|UIOP/LISP-BUILD|::|LOAD*| |UIOP/LISP-BUILD|::|S|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|CURRENT-LISP-FILE-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|CURRENT-LISP-FILE-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|LOAD-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|LOAD-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|LISPIZE-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|LISPIZE-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/LISP-BUILD|::|INPUT-FILE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|COMPILE-FILE-TYPE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|COMPILE-FILE-TYPE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/LISP-BUILD|::|KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|CALL-AROUND-HOOK|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|CALL-AROUND-HOOK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LISP-BUILD|::|HOOK| |COMMON-LISP|::|FUNCTION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|COMPILE-FILE-PATHNAME*|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|COMPILE-FILE-PATHNAME*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LISP-BUILD|::|INPUT-FILE| |COMMON-LISP|::|&REST|
    |UIOP/LISP-BUILD|::|KEYS| |COMMON-LISP|::|&KEY|
    |UIOP/LISP-BUILD|::|OUTPUT-FILE| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/LISP-BUILD|::|*COMPILE-CHECK*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|COMPILE-FILE*|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|COMPILE-FILE*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LISP-BUILD|::|INPUT-FILE| |COMMON-LISP|::|&REST|
    |UIOP/LISP-BUILD|::|KEYS| |COMMON-LISP|::|&KEY|
    (|UIOP/LISP-BUILD|::|COMPILE-CHECK| |UIOP/LISP-BUILD|::|*COMPILE-CHECK*|)
    |UIOP/LISP-BUILD|::|OUTPUT-FILE| |UIOP/LISP-BUILD|::|WARNINGS-FILE|
    |UIOP/LISP-BUILD|::|LIB-FILE| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|LOAD*|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|LOAD*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LISP-BUILD|::|X| |COMMON-LISP|::|&REST| |UIOP/LISP-BUILD|::|KEYS|
    |COMMON-LISP|::|&KEY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|LOAD-FROM-STRING|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|LOAD-FROM-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|STRING|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LISP-BUILD|::|COMBINE-FASLS|
 (|UIOP/LISP-BUILD|::|INPUTS| |UIOP/LISP-BUILD|::|OUTPUT|)
 "Combine a list of FASLs INPUTS into a single FASL OUTPUT"
 (|UIOP/STREAM|::|CONCATENATE-FILES| |UIOP/LISP-BUILD|::|INPUTS|
  |UIOP/LISP-BUILD|::|OUTPUT|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LISP-BUILD|::|COMBINE-FASLS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LISP-BUILD|::|COMBINE-FASLS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LISP-BUILD|::|INPUTS| |UIOP/LISP-BUILD|::|OUTPUT|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|UIOP/LAUNCH-PROGRAM| :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP/PACKAGE| :|UIOP/UTILITY| :|UIOP/PATHNAME|
    :|UIOP/OS| :|UIOP/FILESYSTEM| :|UIOP/STREAM|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|EASY-SH-CHARACTER-P| #:|ESCAPE-SH-TOKEN| #:|ESCAPE-SH-COMMAND|
    #:|ESCAPE-WINDOWS-TOKEN| #:|ESCAPE-WINDOWS-COMMAND| #:|ESCAPE-SHELL-TOKEN|
    #:|ESCAPE-SHELL-COMMAND| #:|ESCAPE-TOKEN| #:|ESCAPE-COMMAND|
    #:|LAUNCH-PROGRAM| #:|CLOSE-STREAMS| #:|PROCESS-ALIVE-P|
    #:|TERMINATE-PROCESS| #:|WAIT-PROCESS| #:|PROCESS-INFO-ERROR-OUTPUT|
    #:|PROCESS-INFO-INPUT| #:|PROCESS-INFO-OUTPUT| #:|PROCESS-INFO-PID|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|UIOP/LAUNCH-PROGRAM|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/LAUNCH-PROGRAM"))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|REQUIRES-ESCAPING-P|
 (|UIOP/LAUNCH-PROGRAM|::|TOKEN| |COMMON-LISP|::|&KEY|
  |UIOP/LAUNCH-PROGRAM|::|GOOD-CHARS| |UIOP/LAUNCH-PROGRAM|::|BAD-CHARS|)
 "Does this token require escaping, given the specification of\n
either good chars that don't need escaping or bad chars that do need escaping,\n
as either a recognizing function or a sequence of characters."
 (|COMMON-LISP|::|SOME|
  (|COMMON-LISP|::|COND|
   ((|COMMON-LISP|::|AND| |UIOP/LAUNCH-PROGRAM|::|GOOD-CHARS|
     |UIOP/LAUNCH-PROGRAM|::|BAD-CHARS|)
    (|UIOP/UTILITY|::|PARAMETER-ERROR|
     "~S: only one of good-chars and bad-chars can be provided"
     '|UIOP/LAUNCH-PROGRAM|::|REQUIRES-ESCAPING-P|))
   ((|COMMON-LISP|::|TYPEP| |UIOP/LAUNCH-PROGRAM|::|GOOD-CHARS|
     '|COMMON-LISP|::|FUNCTION|)
    (|COMMON-LISP|::|COMPLEMENT| |UIOP/LAUNCH-PROGRAM|::|GOOD-CHARS|))
   ((|COMMON-LISP|::|TYPEP| |UIOP/LAUNCH-PROGRAM|::|BAD-CHARS|
     '|COMMON-LISP|::|FUNCTION|)
    |UIOP/LAUNCH-PROGRAM|::|BAD-CHARS|)
   ((|COMMON-LISP|::|AND| |UIOP/LAUNCH-PROGRAM|::|GOOD-CHARS|
     (|COMMON-LISP|::|TYPEP| |UIOP/LAUNCH-PROGRAM|::|GOOD-CHARS|
      '|COMMON-LISP|::|SEQUENCE|))
    #'(|COMMON-LISP|::|LAMBDA| (|UIOP/LAUNCH-PROGRAM|::|C|)
       (|COMMON-LISP|::|NOT|
        (|COMMON-LISP|::|FIND| |UIOP/LAUNCH-PROGRAM|::|C|
         |UIOP/LAUNCH-PROGRAM|::|GOOD-CHARS|))))
   ((|COMMON-LISP|::|AND| |UIOP/LAUNCH-PROGRAM|::|BAD-CHARS|
     (|COMMON-LISP|::|TYPEP| |UIOP/LAUNCH-PROGRAM|::|BAD-CHARS|
      '|COMMON-LISP|::|SEQUENCE|))
    #'(|COMMON-LISP|::|LAMBDA| (|UIOP/LAUNCH-PROGRAM|::|C|)
       (|COMMON-LISP|::|FIND| |UIOP/LAUNCH-PROGRAM|::|C|
        |UIOP/LAUNCH-PROGRAM|::|BAD-CHARS|)))
   (|COMMON-LISP|::|T|
    (|UIOP/UTILITY|::|PARAMETER-ERROR| "~S: no good-char criterion"
     '|UIOP/LAUNCH-PROGRAM|::|REQUIRES-ESCAPING-P|)))
  |UIOP/LAUNCH-PROGRAM|::|TOKEN|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-TOKEN|
 (|UIOP/LAUNCH-PROGRAM|::|TOKEN| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|STREAM|
  |COMMON-LISP|::|QUOTE| |UIOP/LAUNCH-PROGRAM|::|GOOD-CHARS|
  |UIOP/LAUNCH-PROGRAM|::|BAD-CHARS| |UIOP/LAUNCH-PROGRAM|::|ESCAPER|)
 "Call the ESCAPER function on TOKEN string if it needs escaping as per\n
REQUIRES-ESCAPING-P using GOOD-CHARS and BAD-CHARS, otherwise output TOKEN,\n
using STREAM as output (or returning result as a string if NIL)"
 (|COMMON-LISP|::|IF|
  (|UIOP/LAUNCH-PROGRAM|::|REQUIRES-ESCAPING-P| |UIOP/LAUNCH-PROGRAM|::|TOKEN|
   :|GOOD-CHARS| |UIOP/LAUNCH-PROGRAM|::|GOOD-CHARS| :|BAD-CHARS|
   |UIOP/LAUNCH-PROGRAM|::|BAD-CHARS|)
  (|UIOP/STREAM|::|WITH-OUTPUT| (|COMMON-LISP|::|STREAM|)
   (|COMMON-LISP|::|APPLY| |UIOP/LAUNCH-PROGRAM|::|ESCAPER|
    |UIOP/LAUNCH-PROGRAM|::|TOKEN| |COMMON-LISP|::|STREAM|
    (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|QUOTE|
     `(:|QUOTE| ,|COMMON-LISP|::|QUOTE|))))
  (|UIOP/STREAM|::|OUTPUT-STRING| |UIOP/LAUNCH-PROGRAM|::|TOKEN|
   |COMMON-LISP|::|STREAM|)))
(|UIOP/UTILITY|::|DEFUN*|
 |UIOP/LAUNCH-PROGRAM|::|ESCAPE-WINDOWS-TOKEN-WITHIN-DOUBLE-QUOTES|
 (|UIOP/LAUNCH-PROGRAM|::|X| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/LAUNCH-PROGRAM|::|S|)
 "Escape a string token X within double-quotes\n
for use within a MS Windows command-line, outputing to S."
 (|COMMON-LISP|::|LABELS|
  ((|UIOP/LAUNCH-PROGRAM|::|ISSUE| (|UIOP/LAUNCH-PROGRAM|::|C|)
    (|COMMON-LISP|::|PRINC| |UIOP/LAUNCH-PROGRAM|::|C|
     |UIOP/LAUNCH-PROGRAM|::|S|))
   (|UIOP/LAUNCH-PROGRAM|::|ISSUE-BACKSLASH| (|UIOP/LAUNCH-PROGRAM|::|N|)
    (|COMMON-LISP|::|LOOP| :|REPEAT| |UIOP/LAUNCH-PROGRAM|::|N| :|DO|
     (|UIOP/LAUNCH-PROGRAM|::|ISSUE| #\\))))
  (|COMMON-LISP|::|LOOP| :|INITIALLY| (|UIOP/LAUNCH-PROGRAM|::|ISSUE| #\")
   :|FINALLY| (|UIOP/LAUNCH-PROGRAM|::|ISSUE| #\") :|WITH|
   |UIOP/LAUNCH-PROGRAM|::|L| |COMMON-LISP|::|=|
   (|COMMON-LISP|::|LENGTH| |UIOP/LAUNCH-PROGRAM|::|X|) :|WITH|
   |UIOP/LAUNCH-PROGRAM|::|I| |COMMON-LISP|::|=| 0. :|FOR|
   |UIOP/LAUNCH-PROGRAM|::|I+1| |COMMON-LISP|::|=|
   (|COMMON-LISP|::|1+| |UIOP/LAUNCH-PROGRAM|::|I|) :|WHILE|
   (|COMMON-LISP|::|<| |UIOP/LAUNCH-PROGRAM|::|I| |UIOP/LAUNCH-PROGRAM|::|L|)
   :|DO|
   (|COMMON-LISP|::|CASE|
    (|COMMON-LISP|::|CHAR| |UIOP/LAUNCH-PROGRAM|::|X|
     |UIOP/LAUNCH-PROGRAM|::|I|)
    ((#\") (|UIOP/LAUNCH-PROGRAM|::|ISSUE-BACKSLASH| 1.)
     (|UIOP/LAUNCH-PROGRAM|::|ISSUE| #\")
     (|COMMON-LISP|::|SETF| |UIOP/LAUNCH-PROGRAM|::|I|
      |UIOP/LAUNCH-PROGRAM|::|I+1|))
    ((#\\)
     (|COMMON-LISP|::|LET*|
      ((|UIOP/LAUNCH-PROGRAM|::|J|
        (|COMMON-LISP|::|AND|
         (|COMMON-LISP|::|<| |UIOP/LAUNCH-PROGRAM|::|I+1|
          |UIOP/LAUNCH-PROGRAM|::|L|)
         (|COMMON-LISP|::|POSITION-IF-NOT|
          #'(|COMMON-LISP|::|LAMBDA| (|UIOP/LAUNCH-PROGRAM|::|C|)
             (|COMMON-LISP|::|EQL| |UIOP/LAUNCH-PROGRAM|::|C| #\\))
          |UIOP/LAUNCH-PROGRAM|::|X| :|START| |UIOP/LAUNCH-PROGRAM|::|I+1|)))
       (|UIOP/LAUNCH-PROGRAM|::|N|
        (|COMMON-LISP|::|-|
         (|COMMON-LISP|::|OR| |UIOP/LAUNCH-PROGRAM|::|J|
          |UIOP/LAUNCH-PROGRAM|::|L|)
         |UIOP/LAUNCH-PROGRAM|::|I|)))
      (|COMMON-LISP|::|COND|
       ((|COMMON-LISP|::|NULL| |UIOP/LAUNCH-PROGRAM|::|J|)
        (|UIOP/LAUNCH-PROGRAM|::|ISSUE-BACKSLASH|
         (|COMMON-LISP|::|*| 2. |UIOP/LAUNCH-PROGRAM|::|N|))
        (|COMMON-LISP|::|SETF| |UIOP/LAUNCH-PROGRAM|::|I|
         |UIOP/LAUNCH-PROGRAM|::|L|))
       ((|COMMON-LISP|::|AND|
         (|COMMON-LISP|::|<| |UIOP/LAUNCH-PROGRAM|::|J|
          |UIOP/LAUNCH-PROGRAM|::|L|)
         (|COMMON-LISP|::|EQL|
          (|COMMON-LISP|::|CHAR| |UIOP/LAUNCH-PROGRAM|::|X|
           |UIOP/LAUNCH-PROGRAM|::|J|)
          #\"))
        (|UIOP/LAUNCH-PROGRAM|::|ISSUE-BACKSLASH|
         (|COMMON-LISP|::|1+|
          (|COMMON-LISP|::|*| 2. |UIOP/LAUNCH-PROGRAM|::|N|)))
        (|UIOP/LAUNCH-PROGRAM|::|ISSUE| #\")
        (|COMMON-LISP|::|SETF| |UIOP/LAUNCH-PROGRAM|::|I|
         (|COMMON-LISP|::|1+| |UIOP/LAUNCH-PROGRAM|::|J|)))
       (|COMMON-LISP|::|T|
        (|UIOP/LAUNCH-PROGRAM|::|ISSUE-BACKSLASH| |UIOP/LAUNCH-PROGRAM|::|N|)
        (|COMMON-LISP|::|SETF| |UIOP/LAUNCH-PROGRAM|::|I|
         |UIOP/LAUNCH-PROGRAM|::|J|)))))
    (|COMMON-LISP|::|OTHERWISE|
     (|UIOP/LAUNCH-PROGRAM|::|ISSUE|
      (|COMMON-LISP|::|CHAR| |UIOP/LAUNCH-PROGRAM|::|X|
       |UIOP/LAUNCH-PROGRAM|::|I|))
     (|COMMON-LISP|::|SETF| |UIOP/LAUNCH-PROGRAM|::|I|
      |UIOP/LAUNCH-PROGRAM|::|I+1|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|EASY-WINDOWS-CHARACTER-P|
 (|UIOP/LAUNCH-PROGRAM|::|X|)
 "Is X an \"easy\" character that does not require quoting by the shell?"
 (|COMMON-LISP|::|OR|
  (|COMMON-LISP|::|ALPHANUMERICP| |UIOP/LAUNCH-PROGRAM|::|X|)
  (|COMMON-LISP|::|FIND| |UIOP/LAUNCH-PROGRAM|::|X| "+-_.,@:/=")))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-WINDOWS-TOKEN|
 (|UIOP/LAUNCH-PROGRAM|::|TOKEN| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/LAUNCH-PROGRAM|::|S|)
 "Escape a string TOKEN within double-quotes if needed\n
for use within a MS Windows command-line, outputing to S."
 (|UIOP/LAUNCH-PROGRAM|::|ESCAPE-TOKEN| |UIOP/LAUNCH-PROGRAM|::|TOKEN|
  :|STREAM| |UIOP/LAUNCH-PROGRAM|::|S| :|GOOD-CHARS|
  #'|UIOP/LAUNCH-PROGRAM|::|EASY-WINDOWS-CHARACTER-P| :|QUOTE|
  |COMMON-LISP|::|NIL| :|ESCAPER|
  '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-WINDOWS-TOKEN-WITHIN-DOUBLE-QUOTES|))
(|UIOP/UTILITY|::|DEFUN*|
 |UIOP/LAUNCH-PROGRAM|::|ESCAPE-SH-TOKEN-WITHIN-DOUBLE-QUOTES|
 (|UIOP/LAUNCH-PROGRAM|::|X| |UIOP/LAUNCH-PROGRAM|::|S| |COMMON-LISP|::|&KEY|
  '|COMMON-LISP|::|T|)
 "Escape a string TOKEN within double-quotes\n
for use within a POSIX Bourne shell, outputing to S;\n
omit the outer double-quotes if key argument :QUOTE is NIL"
 (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|QUOTE|
  (|COMMON-LISP|::|PRINC| #\" |UIOP/LAUNCH-PROGRAM|::|S|))
 (|COMMON-LISP|::|LOOP| :|FOR| |UIOP/LAUNCH-PROGRAM|::|C| :|ACROSS|
  |UIOP/LAUNCH-PROGRAM|::|X| :|DO|
  (|COMMON-LISP|::|WHEN|
   (|COMMON-LISP|::|FIND| |UIOP/LAUNCH-PROGRAM|::|C| "$`\\\"")
   (|COMMON-LISP|::|PRINC| #\\ |UIOP/LAUNCH-PROGRAM|::|S|))
  (|COMMON-LISP|::|PRINC| |UIOP/LAUNCH-PROGRAM|::|C|
   |UIOP/LAUNCH-PROGRAM|::|S|))
 (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|QUOTE|
  (|COMMON-LISP|::|PRINC| #\" |UIOP/LAUNCH-PROGRAM|::|S|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|EASY-SH-CHARACTER-P|
 (|UIOP/LAUNCH-PROGRAM|::|X|)
 "Is X an \"easy\" character that does not require quoting by the shell?"
 (|COMMON-LISP|::|OR|
  (|COMMON-LISP|::|ALPHANUMERICP| |UIOP/LAUNCH-PROGRAM|::|X|)
  (|COMMON-LISP|::|FIND| |UIOP/LAUNCH-PROGRAM|::|X| "+-_.,%@:/=")))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-SH-TOKEN|
 (|UIOP/LAUNCH-PROGRAM|::|TOKEN| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/LAUNCH-PROGRAM|::|S|)
 "Escape a string TOKEN within double-quotes if needed\n
for use within a POSIX Bourne shell, outputing to S."
 (|UIOP/LAUNCH-PROGRAM|::|ESCAPE-TOKEN| |UIOP/LAUNCH-PROGRAM|::|TOKEN|
  :|STREAM| |UIOP/LAUNCH-PROGRAM|::|S| :|QUOTE| #\" :|GOOD-CHARS|
  #'|UIOP/LAUNCH-PROGRAM|::|EASY-SH-CHARACTER-P| :|ESCAPER|
  '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SH-TOKEN-WITHIN-DOUBLE-QUOTES|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-SHELL-TOKEN|
 (|UIOP/LAUNCH-PROGRAM|::|TOKEN| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/LAUNCH-PROGRAM|::|S|)
 "Escape a token for the current operating system shell"
 (|UIOP/OS|::|OS-COND|
  ((|UIOP/OS|::|OS-UNIX-P|)
   (|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SH-TOKEN| |UIOP/LAUNCH-PROGRAM|::|TOKEN|
    |UIOP/LAUNCH-PROGRAM|::|S|))
  ((|UIOP/OS|::|OS-WINDOWS-P|)
   (|UIOP/LAUNCH-PROGRAM|::|ESCAPE-WINDOWS-TOKEN|
    |UIOP/LAUNCH-PROGRAM|::|TOKEN| |UIOP/LAUNCH-PROGRAM|::|S|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-COMMAND|
 (|UIOP/LAUNCH-PROGRAM|::|COMMAND| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/LAUNCH-PROGRAM|::|S|
  (|UIOP/LAUNCH-PROGRAM|::|ESCAPER|
   '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SHELL-TOKEN|))
 "Given a COMMAND as a list of tokens, return a string of the\n
spaced, escaped tokens, using ESCAPER to escape."
 (|COMMON-LISP|::|ETYPECASE| |UIOP/LAUNCH-PROGRAM|::|COMMAND|
  (|COMMON-LISP|::|STRING|
   (|UIOP/STREAM|::|OUTPUT-STRING| |UIOP/LAUNCH-PROGRAM|::|COMMAND|
    |UIOP/LAUNCH-PROGRAM|::|S|))
  (|COMMON-LISP|::|LIST|
   (|UIOP/STREAM|::|WITH-OUTPUT| (|UIOP/LAUNCH-PROGRAM|::|S|)
    (|COMMON-LISP|::|LOOP| :|FOR| |COMMON-LISP|::|FIRST| |COMMON-LISP|::|=|
     |COMMON-LISP|::|T| :|THEN| |COMMON-LISP|::|NIL| :|FOR|
     |UIOP/LAUNCH-PROGRAM|::|TOKEN| :|IN| |UIOP/LAUNCH-PROGRAM|::|COMMAND|
     :|DO|
     (|COMMON-LISP|::|UNLESS| |COMMON-LISP|::|FIRST|
      (|COMMON-LISP|::|PRINC| #\Space |UIOP/LAUNCH-PROGRAM|::|S|))
     (|COMMON-LISP|::|FUNCALL| |UIOP/LAUNCH-PROGRAM|::|ESCAPER|
      |UIOP/LAUNCH-PROGRAM|::|TOKEN| |UIOP/LAUNCH-PROGRAM|::|S|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-WINDOWS-COMMAND|
 (|UIOP/LAUNCH-PROGRAM|::|COMMAND| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/LAUNCH-PROGRAM|::|S|)
 "Escape a list of command-line arguments into a string suitable for parsing\n
by CommandLineToArgv in MS Windows"
 (|UIOP/LAUNCH-PROGRAM|::|ESCAPE-COMMAND| |UIOP/LAUNCH-PROGRAM|::|COMMAND|
  |UIOP/LAUNCH-PROGRAM|::|S| '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-WINDOWS-TOKEN|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-SH-COMMAND|
 (|UIOP/LAUNCH-PROGRAM|::|COMMAND| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/LAUNCH-PROGRAM|::|S|)
 "Escape a list of command-line arguments into a string suitable for parsing\n
by /bin/sh in POSIX"
 (|UIOP/LAUNCH-PROGRAM|::|ESCAPE-COMMAND| |UIOP/LAUNCH-PROGRAM|::|COMMAND|
  |UIOP/LAUNCH-PROGRAM|::|S| '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SH-TOKEN|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-SHELL-COMMAND|
 (|UIOP/LAUNCH-PROGRAM|::|COMMAND| |COMMON-LISP|::|&OPTIONAL|
  |COMMON-LISP|::|STREAM|)
 "Escape a command for the current operating system's shell"
 (|UIOP/LAUNCH-PROGRAM|::|ESCAPE-COMMAND| |UIOP/LAUNCH-PROGRAM|::|COMMAND|
  |COMMON-LISP|::|STREAM| '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SHELL-TOKEN|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|REQUIRES-ESCAPING-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|REQUIRES-ESCAPING-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|TOKEN| |COMMON-LISP|::|&KEY|
    |UIOP/LAUNCH-PROGRAM|::|GOOD-CHARS| |UIOP/LAUNCH-PROGRAM|::|BAD-CHARS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-TOKEN|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-TOKEN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|TOKEN| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|STREAM| |COMMON-LISP|::|QUOTE|
    |UIOP/LAUNCH-PROGRAM|::|GOOD-CHARS| |UIOP/LAUNCH-PROGRAM|::|BAD-CHARS|
    |UIOP/LAUNCH-PROGRAM|::|ESCAPER|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LAUNCH-PROGRAM|::|ESCAPE-WINDOWS-TOKEN-WITHIN-DOUBLE-QUOTES|))
(|SYSTEM|::|C-DEFUN|
 '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-WINDOWS-TOKEN-WITHIN-DOUBLE-QUOTES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|X| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/LAUNCH-PROGRAM|::|S|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LAUNCH-PROGRAM|::|EASY-WINDOWS-CHARACTER-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|EASY-WINDOWS-CHARACTER-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/LAUNCH-PROGRAM|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-WINDOWS-TOKEN|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-WINDOWS-TOKEN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|TOKEN| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/LAUNCH-PROGRAM|::|S|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LAUNCH-PROGRAM|::|ESCAPE-SH-TOKEN-WITHIN-DOUBLE-QUOTES|))
(|SYSTEM|::|C-DEFUN|
 '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SH-TOKEN-WITHIN-DOUBLE-QUOTES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|X| |UIOP/LAUNCH-PROGRAM|::|S| |COMMON-LISP|::|&KEY|
    '|COMMON-LISP|::|T|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|EASY-SH-CHARACTER-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|EASY-SH-CHARACTER-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/LAUNCH-PROGRAM|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-SH-TOKEN|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SH-TOKEN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|TOKEN| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/LAUNCH-PROGRAM|::|S|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-SHELL-TOKEN|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SHELL-TOKEN|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|TOKEN| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/LAUNCH-PROGRAM|::|S|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-COMMAND|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-COMMAND|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|COMMAND| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/LAUNCH-PROGRAM|::|S|
    (|UIOP/LAUNCH-PROGRAM|::|ESCAPER|
     '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SHELL-TOKEN|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-WINDOWS-COMMAND|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-WINDOWS-COMMAND|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|COMMAND| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/LAUNCH-PROGRAM|::|S|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-SH-COMMAND|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SH-COMMAND|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|COMMAND| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/LAUNCH-PROGRAM|::|S|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|ESCAPE-SHELL-COMMAND|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SHELL-COMMAND|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|COMMAND| |COMMON-LISP|::|&OPTIONAL|
    |COMMON-LISP|::|STREAM|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|%NORMALIZE-IO-SPECIFIER|
 (|UIOP/LAUNCH-PROGRAM|::|SPECIFIER| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/LAUNCH-PROGRAM|::|ROLE|)
 "Normalizes a portable I/O specifier for LAUNCH-PROGRAM into an implementation-dependent\n
argument to pass to the internal RUN-PROGRAM"
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/LAUNCH-PROGRAM|::|ROLE|))
 (|COMMON-LISP|::|TYPECASE| |UIOP/LAUNCH-PROGRAM|::|SPECIFIER|
  (|COMMON-LISP|::|NULL| (|COMMON-LISP|::|OR|))
  (|COMMON-LISP|::|STRING|
   (|UIOP/FILESYSTEM|::|PARSE-NATIVE-NAMESTRING|
    |UIOP/LAUNCH-PROGRAM|::|SPECIFIER|))
  (|COMMON-LISP|::|PATHNAME| |UIOP/LAUNCH-PROGRAM|::|SPECIFIER|)
  (|COMMON-LISP|::|STREAM| |UIOP/LAUNCH-PROGRAM|::|SPECIFIER|)
  ((|COMMON-LISP|::|EQL| :|STREAM|) :|STREAM|)
  ((|COMMON-LISP|::|EQL| :|INTERACTIVE|) :|TERMINAL|)
  ((|COMMON-LISP|::|EQL| :|OUTPUT|)
   (|COMMON-LISP|::|COND|
    ((|COMMON-LISP|::|EQ| |UIOP/LAUNCH-PROGRAM|::|ROLE| :|ERROR-OUTPUT|)
     (|UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR| :|ERROR-OUTPUT-REDIRECT|
      "Can't send ~a to ~a on this lisp implementation."
      |UIOP/LAUNCH-PROGRAM|::|ROLE| |UIOP/LAUNCH-PROGRAM|::|SPECIFIER|))
    (|COMMON-LISP|::|T|
     (|UIOP/UTILITY|::|PARAMETER-ERROR| "~S IO specifier invalid for ~S"
      |UIOP/LAUNCH-PROGRAM|::|SPECIFIER| |UIOP/LAUNCH-PROGRAM|::|ROLE|))))
  (|COMMON-LISP|::|OTHERWISE|
   (|UIOP/UTILITY|::|PARAMETER-ERROR| "Incorrect I/O specifier ~S for ~S"
    |UIOP/LAUNCH-PROGRAM|::|SPECIFIER| |UIOP/LAUNCH-PROGRAM|::|ROLE|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|%INTERACTIVEP|
 (|UIOP/LAUNCH-PROGRAM|::|INPUT| |UIOP/LAUNCH-PROGRAM|::|OUTPUT|
  |UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT|)
 (|COMMON-LISP|::|MEMBER| :|INTERACTIVE|
  (|COMMON-LISP|::|LIST| |UIOP/LAUNCH-PROGRAM|::|INPUT|
   |UIOP/LAUNCH-PROGRAM|::|OUTPUT| |UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|%SIGNAL-TO-EXIT-CODE|
 (|COMMON-LISP|::|SIGNUM|) (|COMMON-LISP|::|+| 128. |COMMON-LISP|::|SIGNUM|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|%CODE-TO-STATUS|
 (|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE| |UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|)
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|NULL| |UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|) :|RUNNING|)
  ((|COMMON-LISP|::|NULL| |UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|)
   (|COMMON-LISP|::|VALUES| :|EXITED| |UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|))
  (|COMMON-LISP|::|T|
   (|COMMON-LISP|::|VALUES| :|SIGNALED|
    |UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|))))
(|CLOS|::|DEFCLASS| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO| |COMMON-LISP|::|NIL|
 ((|UIOP/LAUNCH-PROGRAM|::|PROCESS| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|UIOP/LAUNCH-PROGRAM|::|BIDIR-STREAM| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT-STREAM| :|INITFORM|
   |COMMON-LISP|::|NIL|)
  (|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE| :|INITFORM| |COMMON-LISP|::|NIL|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|%HANDLE-IF-EXISTS|
 (|UIOP/LAUNCH-PROGRAM|::|FILE| |UIOP/LAUNCH-PROGRAM|::|IF-EXISTS|)
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|OR| (|COMMON-LISP|::|STRINGP| |UIOP/LAUNCH-PROGRAM|::|FILE|)
   (|COMMON-LISP|::|PATHNAMEP| |UIOP/LAUNCH-PROGRAM|::|FILE|))
  (|COMMON-LISP|::|ECASE| |UIOP/LAUNCH-PROGRAM|::|IF-EXISTS|
   ((:|APPEND| :|SUPERSEDE| :|ERROR|)
    (|COMMON-LISP|::|WITH-OPEN-FILE|
     (|UIOP/LAUNCH-PROGRAM|::|DUMMY| |UIOP/LAUNCH-PROGRAM|::|FILE| :|DIRECTION|
      :|OUTPUT| :|IF-EXISTS| |UIOP/LAUNCH-PROGRAM|::|IF-EXISTS|)
     (|COMMON-LISP|::|DECLARE|
      (|COMMON-LISP|::|IGNORABLE| |UIOP/LAUNCH-PROGRAM|::|DUMMY|)))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|%HANDLE-IF-DOES-NOT-EXIST|
 (|UIOP/LAUNCH-PROGRAM|::|FILE| |UIOP/LAUNCH-PROGRAM|::|IF-DOES-NOT-EXIST|)
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|OR| (|COMMON-LISP|::|STRINGP| |UIOP/LAUNCH-PROGRAM|::|FILE|)
   (|COMMON-LISP|::|PATHNAMEP| |UIOP/LAUNCH-PROGRAM|::|FILE|))
  (|COMMON-LISP|::|ECASE| |UIOP/LAUNCH-PROGRAM|::|IF-DOES-NOT-EXIST|
   ((:|CREATE| :|ERROR|)
    (|COMMON-LISP|::|WITH-OPEN-FILE|
     (|UIOP/LAUNCH-PROGRAM|::|DUMMY| |UIOP/LAUNCH-PROGRAM|::|FILE| :|DIRECTION|
      :|PROBE| :|IF-DOES-NOT-EXIST| |UIOP/LAUNCH-PROGRAM|::|IF-DOES-NOT-EXIST|)
     (|COMMON-LISP|::|DECLARE|
      (|COMMON-LISP|::|IGNORABLE| |UIOP/LAUNCH-PROGRAM|::|DUMMY|)))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-ERROR-OUTPUT|
 (|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)
 (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
  '|UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT-STREAM|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-INPUT|
 (|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)
 (|COMMON-LISP|::|OR|
  (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
   '|UIOP/LAUNCH-PROGRAM|::|BIDIR-STREAM|)
  (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
   '|UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-OUTPUT|
 (|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)
 (|COMMON-LISP|::|OR|
  (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
   '|UIOP/LAUNCH-PROGRAM|::|BIDIR-STREAM|)
  (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
   '|UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-PID|
 (|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)
 (|COMMON-LISP|::|LET|
  ((|UIOP/LAUNCH-PROGRAM|::|PROCESS|
    (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
     '|UIOP/LAUNCH-PROGRAM|::|PROCESS|)))
  (|COMMON-LISP|::|DECLARE|
   (|COMMON-LISP|::|IGNORABLE| |UIOP/LAUNCH-PROGRAM|::|PROCESS|))
  (|UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR|
   '|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-PID|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|%PROCESS-STATUS|
 (|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)
 (|UIOP/UTILITY|::|IF-LET|
  (|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|
   (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
    '|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|))
  (|COMMON-LISP|::|RETURN-FROM| |UIOP/LAUNCH-PROGRAM|::|%PROCESS-STATUS|
   (|UIOP/UTILITY|::|IF-LET|
    (|UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|
     (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
      '|UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|))
    (|COMMON-LISP|::|VALUES| :|SIGNALED| |UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|)
    (|COMMON-LISP|::|VALUES| :|EXITED| |UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|))))
 (|UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR|
  '|UIOP/LAUNCH-PROGRAM|::|%PROCESS-STATUS|)
 (|UIOP/UTILITY|::|IF-LET|
  (|UIOP/LAUNCH-PROGRAM|::|PROCESS|
   (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
    '|UIOP/LAUNCH-PROGRAM|::|PROCESS|))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|UIOP/LAUNCH-PROGRAM|::|STATUS| |UIOP/LAUNCH-PROGRAM|::|CODE|)
   (|COMMON-LISP|::|PROGN|)
   (|COMMON-LISP|::|CASE| |UIOP/LAUNCH-PROGRAM|::|STATUS|
    (:|EXITED|
     (|COMMON-LISP|::|SETF|
      (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
       '|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|)
      |UIOP/LAUNCH-PROGRAM|::|CODE|))
    (:|SIGNALED|
     (|COMMON-LISP|::|LET|
      ((|UIOP/LAUNCH-PROGRAM|::|%CODE|
        (|UIOP/LAUNCH-PROGRAM|::|%SIGNAL-TO-EXIT-CODE|
         |UIOP/LAUNCH-PROGRAM|::|CODE|)))
      (|COMMON-LISP|::|SETF|
       (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
        '|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|)
       |UIOP/LAUNCH-PROGRAM|::|%CODE|
       (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
        '|UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|)
       |UIOP/LAUNCH-PROGRAM|::|CODE|))))
   (|COMMON-LISP|::|IF| |UIOP/LAUNCH-PROGRAM|::|CODE|
    (|COMMON-LISP|::|VALUES| |UIOP/LAUNCH-PROGRAM|::|STATUS|
     |UIOP/LAUNCH-PROGRAM|::|CODE|)
    |UIOP/LAUNCH-PROGRAM|::|STATUS|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|PROCESS-ALIVE-P|
 (|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|) "Check if a process has yet to exit."
 (|COMMON-LISP|::|UNLESS|
  (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
   '|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|)
  (|COMMON-LISP|::|FIND|
   (|UIOP/LAUNCH-PROGRAM|::|%PROCESS-STATUS|
    |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)
   '(:|RUNNING| :|STOPPED| :|CONTINUED| :|RESUMED|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|WAIT-PROCESS|
 (|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)
 "Wait for the process to terminate, if it is still running.\n
Otherwise, return immediately. An exit code (a number) will be\n
returned, with 0 indicating success, and anything else indicating\n
failure. If the process exits after receiving a signal, the exit code\n
will be the sum of 128 and the (positive) numeric signal code. A second\n
value may be returned in this case: the numeric signal code itself.\n
Any asynchronously spawned process requires this function to be run\n
before it is garbage-collected in order to free up resources that\n
might otherwise be irrevocably lost."
 (|UIOP/UTILITY|::|IF-LET|
  (|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|
   (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
    '|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|))
  (|UIOP/UTILITY|::|IF-LET|
   (|UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|
    (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
     '|UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|))
   (|COMMON-LISP|::|VALUES| |UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|
    |UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|)
   |UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|)
  (|COMMON-LISP|::|LET|
   ((|UIOP/LAUNCH-PROGRAM|::|PROCESS|
     (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
      '|UIOP/LAUNCH-PROGRAM|::|PROCESS|)))
   (|UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR|
    '|UIOP/LAUNCH-PROGRAM|::|WAIT-PROCESS|)
   (|COMMON-LISP|::|WHEN| |UIOP/LAUNCH-PROGRAM|::|PROCESS|
    (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
     (|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE| |UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|)
     (|COMMON-LISP|::|PROGN|)
     (|COMMON-LISP|::|IF| |UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|
      (|COMMON-LISP|::|LET|
       ((|UIOP/LAUNCH-PROGRAM|::|%EXIT-CODE|
         (|UIOP/LAUNCH-PROGRAM|::|%SIGNAL-TO-EXIT-CODE|
          |UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|)))
       (|COMMON-LISP|::|SETF|
        (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
         '|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|)
        |UIOP/LAUNCH-PROGRAM|::|%EXIT-CODE|
        (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
         '|UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|)
        |UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|)
       (|COMMON-LISP|::|VALUES| |UIOP/LAUNCH-PROGRAM|::|%EXIT-CODE|
        |UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|))
      (|COMMON-LISP|::|PROGN|
       (|COMMON-LISP|::|SETF|
        (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
         '|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|)
        |UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|)
       |UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|)))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|%POSIX-SEND-SIGNAL|
 (|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO| |COMMON-LISP|::|SIGNAL|)
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
   |COMMON-LISP|::|SIGNAL|))
 (|COMMON-LISP|::|VALUES|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|TERMINATE-PROCESS|
 (|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO| |COMMON-LISP|::|&KEY|
  |UIOP/LAUNCH-PROGRAM|::|URGENT|)
 "Cause the process to exit. To that end, the process may or may\n
not be sent a signal, which it will find harder (or even impossible)\n
to ignore if URGENT is T. On some platforms, it may also be subject to\n
race conditions."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/LAUNCH-PROGRAM|::|URGENT|))
 (|UIOP/OS|::|OS-COND|
  ((|UIOP/OS|::|OS-UNIX-P|)
   (|UIOP/LAUNCH-PROGRAM|::|%POSIX-SEND-SIGNAL|
    |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
    (|COMMON-LISP|::|IF| |UIOP/LAUNCH-PROGRAM|::|URGENT| 9. 15.)))
  ((|UIOP/OS|::|OS-WINDOWS-P|)
   (|UIOP/UTILITY|::|IF-LET|
    (|UIOP/LAUNCH-PROGRAM|::|PID|
     (|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-PID|
      |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|))
    (|UIOP/PACKAGE|::|SYMBOL-CALL| :|UIOP| :|RUN-PROGRAM|
     (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "taskkill ~:[~;/f ~]/pid ~a"
      |UIOP/LAUNCH-PROGRAM|::|URGENT| |UIOP/LAUNCH-PROGRAM|::|PID|)
     :|IGNORE-ERROR-STATUS| |COMMON-LISP|::|T|)))
  (|COMMON-LISP|::|T|
   (|UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR|
    '|UIOP/LAUNCH-PROGRAM|::|TERMINATE-PROCESS|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|CLOSE-STREAMS|
 (|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)
 "Close any stream that the process might own. Needs to be run\n
whenever streams were requested by passing :stream to :input, :output,\n
or :error-output."
 (|COMMON-LISP|::|DOLIST|
  (|COMMON-LISP|::|STREAM|
   (|COMMON-LISP|::|CONS|
    (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
     '|UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT-STREAM|)
    (|UIOP/UTILITY|::|IF-LET|
     (|UIOP/LAUNCH-PROGRAM|::|BIDIR-STREAM|
      (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
       '|UIOP/LAUNCH-PROGRAM|::|BIDIR-STREAM|))
     (|COMMON-LISP|::|LIST| |UIOP/LAUNCH-PROGRAM|::|BIDIR-STREAM|)
     (|COMMON-LISP|::|LIST|
      (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
       '|UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM|)
      (|CLOS|::|SLOT-VALUE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|
       '|UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM|)))))
  (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|STREAM|
   (|COMMON-LISP|::|CLOSE| |COMMON-LISP|::|STREAM|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/LAUNCH-PROGRAM|::|LAUNCH-PROGRAM|
 (|UIOP/LAUNCH-PROGRAM|::|COMMAND| |COMMON-LISP|::|&REST|
  |UIOP/LAUNCH-PROGRAM|::|KEYS| |COMMON-LISP|::|&KEY|
  |UIOP/LAUNCH-PROGRAM|::|INPUT|
  (|UIOP/LAUNCH-PROGRAM|::|IF-INPUT-DOES-NOT-EXIST| :|ERROR|)
  |UIOP/LAUNCH-PROGRAM|::|OUTPUT|
  (|UIOP/LAUNCH-PROGRAM|::|IF-OUTPUT-EXISTS| :|SUPERSEDE|)
  |UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT|
  (|UIOP/LAUNCH-PROGRAM|::|IF-ERROR-OUTPUT-EXISTS| :|SUPERSEDE|)
  (|UIOP/LAUNCH-PROGRAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
  (|UIOP/LAUNCH-PROGRAM|::|EXTERNAL-FORMAT|
   |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
  |COMMON-LISP|::|DIRECTORY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Launch program specified by COMMAND,\n
either a list of strings specifying a program and list of arguments,\n
or a string specifying a shell command (/bin/sh on Unix, CMD.EXE on\n
Windows) _asynchronously_.\n\n
If OUTPUT is a pathname, a string designating a pathname, or NIL (the\n
default) designating the null device, the file at that path is used as\n
output.\n
If it's :INTERACTIVE, output is inherited from the current process;\n
beware that this may be different from your *STANDARD-OUTPUT*, and\n
under SLIME will be on your *inferior-lisp* buffer.  If it's T, output\n
goes to your current *STANDARD-OUTPUT* stream.  If it's :STREAM, a new\n
stream will be made available that can be accessed via\n
PROCESS-INFO-OUTPUT and read from. Otherwise, OUTPUT should be a value\n
that the underlying lisp implementation knows how to handle.\n\n
IF-OUTPUT-EXISTS, which is only meaningful if OUTPUT is a string or a\n
pathname, can take the values :ERROR, :APPEND, and :SUPERSEDE (the\n
default). The meaning of these values and their effect on the case\n
where OUTPUT does not exist, is analogous to the IF-EXISTS parameter\n
to OPEN with :DIRECTION :OUTPUT.\n\n
ERROR-OUTPUT is similar to OUTPUT. T designates the *ERROR-OUTPUT*,\n
:OUTPUT means redirecting the error output to the output stream,\n
and :STREAM causes a stream to be made available via\n
PROCESS-INFO-ERROR-OUTPUT.\n\n
IF-ERROR-OUTPUT-EXISTS is similar to IF-OUTPUT-EXIST, except that it\n
affects ERROR-OUTPUT rather than OUTPUT.\n\n
INPUT is similar to OUTPUT, except that T designates the\n
*STANDARD-INPUT* and a stream requested through the :STREAM keyword\n
would be available through PROCESS-INFO-INPUT.\n\n
IF-INPUT-DOES-NOT-EXIST, which is only meaningful if INPUT is a string\n
or a pathname, can take the values :CREATE and :ERROR (the\n
default). The meaning of these values is analogous to the\n
IF-DOES-NOT-EXIST parameter to OPEN with :DIRECTION :INPUT.\n\n
ELEMENT-TYPE and EXTERNAL-FORMAT are passed on to your Lisp\n
implementation, when applicable, for creation of the output stream.\n\n
LAUNCH-PROGRAM returns a PROCESS-INFO object."
 (|COMMON-LISP|::|PROGN| |UIOP/LAUNCH-PROGRAM|::|COMMAND|
  |UIOP/LAUNCH-PROGRAM|::|KEYS| |UIOP/LAUNCH-PROGRAM|::|INPUT|
  |UIOP/LAUNCH-PROGRAM|::|OUTPUT| |UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT|
  |COMMON-LISP|::|DIRECTORY| |UIOP/LAUNCH-PROGRAM|::|ELEMENT-TYPE|
  |UIOP/LAUNCH-PROGRAM|::|EXTERNAL-FORMAT|
  |UIOP/LAUNCH-PROGRAM|::|IF-INPUT-DOES-NOT-EXIST|
  |UIOP/LAUNCH-PROGRAM|::|IF-OUTPUT-EXISTS|
  |UIOP/LAUNCH-PROGRAM|::|IF-ERROR-OUTPUT-EXISTS|
  (|UIOP/UTILITY|::|NOT-IMPLEMENTED-ERROR|
   '|UIOP/LAUNCH-PROGRAM|::|LAUNCH-PROGRAM|))
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|SOME| #'|COMMON-LISP|::|STREAMP|
   (|COMMON-LISP|::|LIST| |UIOP/LAUNCH-PROGRAM|::|INPUT|
    |UIOP/LAUNCH-PROGRAM|::|OUTPUT| |UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT|))
  (|UIOP/UTILITY|::|PARAMETER-ERROR|
   "~S: I/O parameters cannot be foreign streams on this lisp"
   '|UIOP/LAUNCH-PROGRAM|::|LAUNCH-PROGRAM|))
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|EQ| |UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT| :|INTERACTIVE|)
  (|UIOP/UTILITY|::|PARAMETER-ERROR|
   "~S: The only admissible value for ~S is ~S on this lisp"
   '|UIOP/LAUNCH-PROGRAM|::|LAUNCH-PROGRAM| :|ERROR-OUTPUT| :|INTERACTIVE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LAUNCH-PROGRAM|::|%NORMALIZE-IO-SPECIFIER|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|%NORMALIZE-IO-SPECIFIER|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|SPECIFIER| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/LAUNCH-PROGRAM|::|ROLE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|%INTERACTIVEP|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|%INTERACTIVEP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|INPUT| |UIOP/LAUNCH-PROGRAM|::|OUTPUT|
    |UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|%SIGNAL-TO-EXIT-CODE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|%SIGNAL-TO-EXIT-CODE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|SIGNUM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|%CODE-TO-STATUS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|%CODE-TO-STATUS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE| |UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G19108| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/LAUNCH-PROGRAM|::|PROCESS| :|INITFORM|
    '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM|
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM|
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/LAUNCH-PROGRAM|::|BIDIR-STREAM|
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT-STREAM|
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/LAUNCH-PROGRAM|::|EXIT-CODE|
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/LAUNCH-PROGRAM|::|SIGNAL-CODE|
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|%HANDLE-IF-EXISTS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|%HANDLE-IF-EXISTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|FILE| |UIOP/LAUNCH-PROGRAM|::|IF-EXISTS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LAUNCH-PROGRAM|::|%HANDLE-IF-DOES-NOT-EXIST|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|%HANDLE-IF-DOES-NOT-EXIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|FILE| |UIOP/LAUNCH-PROGRAM|::|IF-DOES-NOT-EXIST|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-ERROR-OUTPUT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-ERROR-OUTPUT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-INPUT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-INPUT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-OUTPUT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-OUTPUT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-PID|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO-PID|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|%PROCESS-STATUS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|%PROCESS-STATUS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|PROCESS-ALIVE-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|PROCESS-ALIVE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|WAIT-PROCESS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|WAIT-PROCESS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|%POSIX-SEND-SIGNAL|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|%POSIX-SEND-SIGNAL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO| |COMMON-LISP|::|SIGNAL|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|TERMINATE-PROCESS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|TERMINATE-PROCESS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO| |COMMON-LISP|::|&KEY|
    |UIOP/LAUNCH-PROGRAM|::|URGENT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|CLOSE-STREAMS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|CLOSE-STREAMS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|PROCESS-INFO|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/LAUNCH-PROGRAM|::|LAUNCH-PROGRAM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/LAUNCH-PROGRAM|::|LAUNCH-PROGRAM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/LAUNCH-PROGRAM|::|COMMAND| |COMMON-LISP|::|&REST|
    |UIOP/LAUNCH-PROGRAM|::|KEYS| |COMMON-LISP|::|&KEY|
    |UIOP/LAUNCH-PROGRAM|::|INPUT|
    (|UIOP/LAUNCH-PROGRAM|::|IF-INPUT-DOES-NOT-EXIST| :|ERROR|)
    |UIOP/LAUNCH-PROGRAM|::|OUTPUT|
    (|UIOP/LAUNCH-PROGRAM|::|IF-OUTPUT-EXISTS| :|SUPERSEDE|)
    |UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT|
    (|UIOP/LAUNCH-PROGRAM|::|IF-ERROR-OUTPUT-EXISTS| :|SUPERSEDE|)
    (|UIOP/LAUNCH-PROGRAM|::|ELEMENT-TYPE|
     |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
    (|UIOP/LAUNCH-PROGRAM|::|EXTERNAL-FORMAT|
     |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
    |COMMON-LISP|::|DIRECTORY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|UIOP/RUN-PROGRAM| :|NICKNAMES| '#1=(:|ASDF/RUN-PROGRAM|) :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP/PACKAGE| :|UIOP/UTILITY| :|UIOP/VERSION|
    :|UIOP/PATHNAME| :|UIOP/OS| :|UIOP/FILESYSTEM| :|UIOP/STREAM|
    :|UIOP/LAUNCH-PROGRAM|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM|
  '((:|UIOP/LAUNCH-PROGRAM| #:|%HANDLE-IF-DOES-NOT-EXIST| #:|%HANDLE-IF-EXISTS|
     #:|%INTERACTIVEP| #:|INPUT-STREAM| #:|OUTPUT-STREAM|
     #:|ERROR-OUTPUT-STREAM|))
  :|EXPORT|
  '(#:|RUN-PROGRAM| #:|SLURP-INPUT-STREAM| #:|VOMIT-OUTPUT-STREAM|
    #:|SUBPROCESS-ERROR| #:|SUBPROCESS-ERROR-CODE| #:|SUBPROCESS-ERROR-COMMAND|
    #:|SUBPROCESS-ERROR-PROCESS|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|UIOP/RUN-PROGRAM| . #1#)
  :|MIX| '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/RUN-PROGRAM"))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/RUN-PROGRAM|::|CALL-STREAM-PROCESSOR|
 (|UIOP/RUN-PROGRAM|::|FUN| |UIOP/RUN-PROGRAM|::|PROCESSOR|
  |COMMON-LISP|::|STREAM|)
 "Given FUN (typically SLURP-INPUT-STREAM or VOMIT-OUTPUT-STREAM,\n
a PROCESSOR specification which is either an atom or a list specifying\n
a processor an keyword arguments, call the specified processor with\n
the given STREAM as input"
 (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CONSP| |UIOP/RUN-PROGRAM|::|PROCESSOR|)
  (|COMMON-LISP|::|APPLY| |UIOP/RUN-PROGRAM|::|FUN|
   (|COMMON-LISP|::|FIRST| |UIOP/RUN-PROGRAM|::|PROCESSOR|)
   |COMMON-LISP|::|STREAM|
   (|COMMON-LISP|::|REST| |UIOP/RUN-PROGRAM|::|PROCESSOR|))
  (|COMMON-LISP|::|FUNCALL| |UIOP/RUN-PROGRAM|::|FUN|
   |UIOP/RUN-PROGRAM|::|PROCESSOR| |COMMON-LISP|::|STREAM|)))
(|UIOP/UTILITY|::|DEFGENERIC*| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 (|UIOP/RUN-PROGRAM|::|PROCESSOR| |UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM|
  |COMMON-LISP|::|&KEY|)
 (:|DOCUMENTATION|
  "SLURP-INPUT-STREAM is a generic function with two positional arguments\n
PROCESSOR and INPUT-STREAM and additional keyword arguments, that consumes (slurps)\n
the contents of the INPUT-STREAM and processes them according to a method\n
specified by PROCESSOR.\n\n
Built-in methods include the following:\n
* if PROCESSOR is a function, it is called with the INPUT-STREAM as its argument\n
* if PROCESSOR is a list, its first element should be a function.  It will be applied to a cons of the\n
  INPUT-STREAM and the rest of the list.  That is (x . y) will be treated as\n
    (APPLY x <stream> y)\n
* if PROCESSOR is an output-stream, the contents of INPUT-STREAM is copied to the output-stream,\n
  per copy-stream-to-stream, with appropriate keyword arguments.\n
* if PROCESSOR is the symbol CL:STRING or the keyword :STRING, then the contents of INPUT-STREAM\n
  are returned as a string, as per SLURP-STREAM-STRING.\n
* if PROCESSOR is the keyword :LINES then the INPUT-STREAM will be handled by SLURP-STREAM-LINES.\n
* if PROCESSOR is the keyword :LINE then the INPUT-STREAM will be handled by SLURP-STREAM-LINE.\n
* if PROCESSOR is the keyword :FORMS then the INPUT-STREAM will be handled by SLURP-STREAM-FORMS.\n
* if PROCESSOR is the keyword :FORM then the INPUT-STREAM will be handled by SLURP-STREAM-FORM.\n
* if PROCESSOR is T, it is treated the same as *standard-output*. If it is NIL, NIL is returned.\n\n
Programmers are encouraged to define their own methods for this generic function."))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 (#'|COMMON-LISP|::|FUNCTION| |UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM|
  |COMMON-LISP|::|&KEY|)
 (|COMMON-LISP|::|FUNCALL| |COMMON-LISP|::|FUNCTION|
  |UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 ((|COMMON-LISP|::|LIST| |COMMON-LISP|::|CONS|)
  |UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM| |COMMON-LISP|::|&KEY|)
 (|COMMON-LISP|::|APPLY| (|COMMON-LISP|::|FIRST| |COMMON-LISP|::|LIST|)
  |UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM|
  (|COMMON-LISP|::|REST| |COMMON-LISP|::|LIST|)))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 ((|UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM| |COMMON-LISP|::|STREAM|)
  |UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM| |COMMON-LISP|::|&KEY|
  |UIOP/RUN-PROGRAM|::|LINEWISE| |UIOP/RUN-PROGRAM|::|PREFIX|
  (|UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| '|COMMON-LISP|::|CHARACTER|)
  |UIOP/RUN-PROGRAM|::|BUFFER-SIZE|)
 (|UIOP/STREAM|::|COPY-STREAM-TO-STREAM| |UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM|
  |UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM| :|LINEWISE|
  |UIOP/RUN-PROGRAM|::|LINEWISE| :|PREFIX| |UIOP/RUN-PROGRAM|::|PREFIX|
  :|ELEMENT-TYPE| |UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| :|BUFFER-SIZE|
  |UIOP/RUN-PROGRAM|::|BUFFER-SIZE|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 ((|UIOP/RUN-PROGRAM|::|X| (|COMMON-LISP|::|EQL| '|COMMON-LISP|::|STRING|))
  |COMMON-LISP|::|STREAM| |COMMON-LISP|::|&KEY| |UIOP/RUN-PROGRAM|::|STRIPPED|)
 (|UIOP/STREAM|::|SLURP-STREAM-STRING| |COMMON-LISP|::|STREAM| :|STRIPPED|
  |UIOP/RUN-PROGRAM|::|STRIPPED|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 ((|UIOP/RUN-PROGRAM|::|X| (|COMMON-LISP|::|EQL| :|STRING|))
  |COMMON-LISP|::|STREAM| |COMMON-LISP|::|&KEY| |UIOP/RUN-PROGRAM|::|STRIPPED|)
 (|UIOP/STREAM|::|SLURP-STREAM-STRING| |COMMON-LISP|::|STREAM| :|STRIPPED|
  |UIOP/RUN-PROGRAM|::|STRIPPED|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 ((|UIOP/RUN-PROGRAM|::|X| (|COMMON-LISP|::|EQL| :|LINES|))
  |COMMON-LISP|::|STREAM| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|COUNT|)
 (|UIOP/STREAM|::|SLURP-STREAM-LINES| |COMMON-LISP|::|STREAM| :|COUNT|
  |COMMON-LISP|::|COUNT|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 ((|UIOP/RUN-PROGRAM|::|X| (|COMMON-LISP|::|EQL| :|LINE|))
  |COMMON-LISP|::|STREAM| |COMMON-LISP|::|&KEY| (|UIOP/RUN-PROGRAM|::|AT| 0.))
 (|UIOP/STREAM|::|SLURP-STREAM-LINE| |COMMON-LISP|::|STREAM| :|AT|
  |UIOP/RUN-PROGRAM|::|AT|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 ((|UIOP/RUN-PROGRAM|::|X| (|COMMON-LISP|::|EQL| :|FORMS|))
  |COMMON-LISP|::|STREAM| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|COUNT|)
 (|UIOP/STREAM|::|SLURP-STREAM-FORMS| |COMMON-LISP|::|STREAM| :|COUNT|
  |COMMON-LISP|::|COUNT|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 ((|UIOP/RUN-PROGRAM|::|X| (|COMMON-LISP|::|EQL| :|FORM|))
  |COMMON-LISP|::|STREAM| |COMMON-LISP|::|&KEY| (|UIOP/RUN-PROGRAM|::|AT| 0.))
 (|UIOP/STREAM|::|SLURP-STREAM-FORM| |COMMON-LISP|::|STREAM| :|AT|
  |UIOP/RUN-PROGRAM|::|AT|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 ((|UIOP/RUN-PROGRAM|::|X| (|COMMON-LISP|::|EQL| |COMMON-LISP|::|T|))
  |COMMON-LISP|::|STREAM| |COMMON-LISP|::|&REST| |UIOP/RUN-PROGRAM|::|KEYS|
  |COMMON-LISP|::|&KEY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|COMMON-LISP|::|APPLY| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
  |COMMON-LISP|::|*STANDARD-OUTPUT*| |COMMON-LISP|::|STREAM|
  |UIOP/RUN-PROGRAM|::|KEYS|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 ((|UIOP/RUN-PROGRAM|::|X| |COMMON-LISP|::|NULL|)
  (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|T|) |COMMON-LISP|::|&KEY|)
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 ((|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|PATHNAME|)
  |UIOP/RUN-PROGRAM|::|INPUT| |COMMON-LISP|::|&KEY|
  (|UIOP/RUN-PROGRAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
  (|UIOP/RUN-PROGRAM|::|EXTERNAL-FORMAT|
   |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
  (|UIOP/RUN-PROGRAM|::|IF-EXISTS| :|RENAME-AND-DELETE|)
  (|UIOP/RUN-PROGRAM|::|IF-DOES-NOT-EXIST| :|CREATE|)
  |UIOP/RUN-PROGRAM|::|BUFFER-SIZE| |UIOP/RUN-PROGRAM|::|LINEWISE|)
 (|UIOP/STREAM|::|WITH-OUTPUT-FILE|
  (|UIOP/RUN-PROGRAM|::|OUTPUT| |COMMON-LISP|::|PATHNAME| :|ELEMENT-TYPE|
   |UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| :|EXTERNAL-FORMAT|
   |UIOP/RUN-PROGRAM|::|EXTERNAL-FORMAT| :|IF-EXISTS|
   |UIOP/RUN-PROGRAM|::|IF-EXISTS| :|IF-DOES-NOT-EXIST|
   |UIOP/RUN-PROGRAM|::|IF-DOES-NOT-EXIST|)
  (|UIOP/STREAM|::|COPY-STREAM-TO-STREAM| |UIOP/RUN-PROGRAM|::|INPUT|
   |UIOP/RUN-PROGRAM|::|OUTPUT| :|ELEMENT-TYPE|
   |UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| :|BUFFER-SIZE|
   |UIOP/RUN-PROGRAM|::|BUFFER-SIZE| :|LINEWISE|
   |UIOP/RUN-PROGRAM|::|LINEWISE|)))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 (|UIOP/RUN-PROGRAM|::|X| |COMMON-LISP|::|STREAM| |COMMON-LISP|::|&KEY|
  |UIOP/RUN-PROGRAM|::|LINEWISE| |UIOP/RUN-PROGRAM|::|PREFIX|
  (|UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| '|COMMON-LISP|::|CHARACTER|)
  |UIOP/RUN-PROGRAM|::|BUFFER-SIZE|)
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |COMMON-LISP|::|STREAM|
   |UIOP/RUN-PROGRAM|::|LINEWISE| |UIOP/RUN-PROGRAM|::|PREFIX|
   |UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| |UIOP/RUN-PROGRAM|::|BUFFER-SIZE|))
 (|COMMON-LISP|::|COND|
  (|COMMON-LISP|::|T|
   (|UIOP/UTILITY|::|PARAMETER-ERROR| "Invalid ~S destination ~S"
    '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM| |UIOP/RUN-PROGRAM|::|X|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/RUN-PROGRAM|::|CALL-STREAM-PROCESSOR|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|CALL-STREAM-PROCESSOR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/RUN-PROGRAM|::|FUN| |UIOP/RUN-PROGRAM|::|PROCESSOR|
    |COMMON-LISP|::|STREAM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 '#(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
   (:|LINEWISE| :|PREFIX| :|ELEMENT-TYPE| :|BUFFER-SIZE|) |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|STRIPPED|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|STRIPPED|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|COUNT|) |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|AT|) |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|COUNT|) |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|AT|) |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
   (:|ELEMENT-TYPE| :|EXTERNAL-FORMAT| :|IF-EXISTS| :|IF-DOES-NOT-EXIST|
    :|BUFFER-SIZE| :|LINEWISE|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
   (:|LINEWISE| :|PREFIX| :|ELEMENT-TYPE| :|BUFFER-SIZE|) |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|UIOP/UTILITY|::|DEFGENERIC*| |UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 (|UIOP/RUN-PROGRAM|::|PROCESSOR| |UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM|
  |COMMON-LISP|::|&KEY|)
 (:|DOCUMENTATION|
  "VOMIT-OUTPUT-STREAM is a generic function with two positional arguments\n
PROCESSOR and OUTPUT-STREAM and additional keyword arguments, that produces (vomits)\n
some content onto the OUTPUT-STREAM, according to a method specified by PROCESSOR.\n\n
Built-in methods include the following:\n
* if PROCESSOR is a function, it is called with the OUTPUT-STREAM as its argument\n
* if PROCESSOR is a list, its first element should be a function.\n
  It will be applied to a cons of the OUTPUT-STREAM and the rest of the list.\n
  That is (x . y) will be treated as (APPLY x <stream> y)\n
* if PROCESSOR is an input-stream, its contents will be copied the OUTPUT-STREAM,\n
  per copy-stream-to-stream, with appropriate keyword arguments.\n
* if PROCESSOR is a string, its contents will be printed to the OUTPUT-STREAM.\n
* if PROCESSOR is T, it is treated the same as *standard-input*. If it is NIL, nothing is done.\n\n
Programmers are encouraged to define their own methods for this generic function."))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 (#'|COMMON-LISP|::|FUNCTION| |UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM|
  |COMMON-LISP|::|&KEY|)
 (|COMMON-LISP|::|FUNCALL| |COMMON-LISP|::|FUNCTION|
  |UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 ((|COMMON-LISP|::|LIST| |COMMON-LISP|::|CONS|)
  |UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM| |COMMON-LISP|::|&KEY|)
 (|COMMON-LISP|::|APPLY| (|COMMON-LISP|::|FIRST| |COMMON-LISP|::|LIST|)
  |UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM|
  (|COMMON-LISP|::|REST| |COMMON-LISP|::|LIST|)))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 ((|UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM| |COMMON-LISP|::|STREAM|)
  |UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM| |COMMON-LISP|::|&KEY|
  |UIOP/RUN-PROGRAM|::|LINEWISE| |UIOP/RUN-PROGRAM|::|PREFIX|
  (|UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| '|COMMON-LISP|::|CHARACTER|)
  |UIOP/RUN-PROGRAM|::|BUFFER-SIZE|)
 (|UIOP/STREAM|::|COPY-STREAM-TO-STREAM| |UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM|
  |UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM| :|LINEWISE|
  |UIOP/RUN-PROGRAM|::|LINEWISE| :|PREFIX| |UIOP/RUN-PROGRAM|::|PREFIX|
  :|ELEMENT-TYPE| |UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| :|BUFFER-SIZE|
  |UIOP/RUN-PROGRAM|::|BUFFER-SIZE|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 ((|UIOP/RUN-PROGRAM|::|X| |COMMON-LISP|::|STRING|) |COMMON-LISP|::|STREAM|
  |COMMON-LISP|::|&KEY| |COMMON-LISP|::|FRESH-LINE| |COMMON-LISP|::|TERPRI|)
 (|COMMON-LISP|::|PRINC| |UIOP/RUN-PROGRAM|::|X| |COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|FRESH-LINE|
  (|COMMON-LISP|::|FRESH-LINE| |COMMON-LISP|::|STREAM|))
 (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|TERPRI|
  (|COMMON-LISP|::|TERPRI| |COMMON-LISP|::|STREAM|))
 (|COMMON-LISP|::|VALUES|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 ((|UIOP/RUN-PROGRAM|::|X| (|COMMON-LISP|::|EQL| |COMMON-LISP|::|T|))
  |COMMON-LISP|::|STREAM| |COMMON-LISP|::|&REST| |UIOP/RUN-PROGRAM|::|KEYS|
  |COMMON-LISP|::|&KEY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|COMMON-LISP|::|APPLY| '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
  |COMMON-LISP|::|*STANDARD-INPUT*| |COMMON-LISP|::|STREAM|
  |UIOP/RUN-PROGRAM|::|KEYS|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 ((|UIOP/RUN-PROGRAM|::|X| |COMMON-LISP|::|NULL|)
  (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|T|) |COMMON-LISP|::|&KEY|)
 (|COMMON-LISP|::|VALUES|))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 ((|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|PATHNAME|)
  |UIOP/RUN-PROGRAM|::|INPUT| |COMMON-LISP|::|&KEY|
  (|UIOP/RUN-PROGRAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
  (|UIOP/RUN-PROGRAM|::|EXTERNAL-FORMAT|
   |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
  (|UIOP/RUN-PROGRAM|::|IF-EXISTS| :|RENAME-AND-DELETE|)
  (|UIOP/RUN-PROGRAM|::|IF-DOES-NOT-EXIST| :|CREATE|)
  |UIOP/RUN-PROGRAM|::|BUFFER-SIZE| |UIOP/RUN-PROGRAM|::|LINEWISE|)
 (|UIOP/STREAM|::|WITH-OUTPUT-FILE|
  (|UIOP/RUN-PROGRAM|::|OUTPUT| |COMMON-LISP|::|PATHNAME| :|ELEMENT-TYPE|
   |UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| :|EXTERNAL-FORMAT|
   |UIOP/RUN-PROGRAM|::|EXTERNAL-FORMAT| :|IF-EXISTS|
   |UIOP/RUN-PROGRAM|::|IF-EXISTS| :|IF-DOES-NOT-EXIST|
   |UIOP/RUN-PROGRAM|::|IF-DOES-NOT-EXIST|)
  (|UIOP/STREAM|::|COPY-STREAM-TO-STREAM| |UIOP/RUN-PROGRAM|::|INPUT|
   |UIOP/RUN-PROGRAM|::|OUTPUT| :|ELEMENT-TYPE|
   |UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| :|BUFFER-SIZE|
   |UIOP/RUN-PROGRAM|::|BUFFER-SIZE| :|LINEWISE|
   |UIOP/RUN-PROGRAM|::|LINEWISE|)))
(|CLOS|::|DEFMETHOD| |UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 (|UIOP/RUN-PROGRAM|::|X| |COMMON-LISP|::|STREAM| |COMMON-LISP|::|&KEY|
  |UIOP/RUN-PROGRAM|::|LINEWISE| |UIOP/RUN-PROGRAM|::|PREFIX|
  (|UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| '|COMMON-LISP|::|CHARACTER|)
  |UIOP/RUN-PROGRAM|::|BUFFER-SIZE|)
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |COMMON-LISP|::|STREAM|
   |UIOP/RUN-PROGRAM|::|LINEWISE| |UIOP/RUN-PROGRAM|::|PREFIX|
   |UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| |UIOP/RUN-PROGRAM|::|BUFFER-SIZE|))
 (|COMMON-LISP|::|COND|
  (|COMMON-LISP|::|T|
   (|UIOP/UTILITY|::|PARAMETER-ERROR| "Invalid ~S source ~S"
    '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM| |UIOP/RUN-PROGRAM|::|X|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 '#(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
   (:|LINEWISE| :|PREFIX| :|ELEMENT-TYPE| :|BUFFER-SIZE|) |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|FRESH-LINE| :|TERPRI|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
   (:|ELEMENT-TYPE| :|EXTERNAL-FORMAT| :|IF-EXISTS| :|IF-DOES-NOT-EXIST|
    :|BUFFER-SIZE| :|LINEWISE|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
   (:|LINEWISE| :|PREFIX| :|ELEMENT-TYPE| :|BUFFER-SIZE|) |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|DEFINE-CONDITION| |UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR|
 (|COMMON-LISP|::|ERROR|)
 ((|UIOP/RUN-PROGRAM|::|CODE| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|CODE| :|READER| |UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR-CODE|)
  (|UIOP/RUN-PROGRAM|::|COMMAND| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|COMMAND| :|READER| |UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR-COMMAND|)
  (|UIOP/RUN-PROGRAM|::|PROCESS| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|PROCESS| :|READER| |UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR-PROCESS|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA| (|COMMON-LISP|::|CONDITION| |COMMON-LISP|::|STREAM|)
   (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|STREAM|
    "Subprocess ~@[~S~% ~]~@[with command ~S~% ~]exited with error~@[ code ~D~]"
    (|UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR-PROCESS| |COMMON-LISP|::|CONDITION|)
    (|UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR-COMMAND| |COMMON-LISP|::|CONDITION|)
    (|UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR-CODE|
     |COMMON-LISP|::|CONDITION|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/RUN-PROGRAM|::|%CHECK-RESULT|
 (|UIOP/RUN-PROGRAM|::|EXIT-CODE| |COMMON-LISP|::|&KEY|
  |UIOP/RUN-PROGRAM|::|COMMAND| |UIOP/RUN-PROGRAM|::|PROCESS|
  |UIOP/RUN-PROGRAM|::|IGNORE-ERROR-STATUS|)
 (|COMMON-LISP|::|UNLESS| |UIOP/RUN-PROGRAM|::|IGNORE-ERROR-STATUS|
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|EQL| |UIOP/RUN-PROGRAM|::|EXIT-CODE| 0.)
   (|COMMON-LISP|::|CERROR| "IGNORE-ERROR-STATUS"
    '|UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR| :|COMMAND|
    |UIOP/RUN-PROGRAM|::|COMMAND| :|CODE| |UIOP/RUN-PROGRAM|::|EXIT-CODE|
    :|PROCESS| |UIOP/RUN-PROGRAM|::|PROCESS|)))
 |UIOP/RUN-PROGRAM|::|EXIT-CODE|)
(|UIOP/UTILITY|::|DEFUN*| |UIOP/RUN-PROGRAM|::|%ACTIVE-IO-SPECIFIER-P|
 (|UIOP/RUN-PROGRAM|::|SPECIFIER|)
 "Determines whether a run-program I/O specifier requires Lisp-side processing\n
via SLURP-INPUT-STREAM or VOMIT-OUTPUT-STREAM (return T),\n
or whether it's already taken care of by the implementation's underlying run-program."
 (|COMMON-LISP|::|NOT|
  (|COMMON-LISP|::|TYPEP| |UIOP/RUN-PROGRAM|::|SPECIFIER|
   '(|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|STRING|
     |COMMON-LISP|::|PATHNAME|
     (|COMMON-LISP|::|MEMBER| :|INTERACTIVE| :|OUTPUT|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/RUN-PROGRAM|::|%RUN-PROGRAM|
 (|UIOP/RUN-PROGRAM|::|COMMAND| |COMMON-LISP|::|&REST|
  |UIOP/RUN-PROGRAM|::|KEYS| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "DEPRECATED. Use LAUNCH-PROGRAM instead."
 (|COMMON-LISP|::|APPLY| '|UIOP/LAUNCH-PROGRAM|::|LAUNCH-PROGRAM|
  |UIOP/RUN-PROGRAM|::|COMMAND| |UIOP/RUN-PROGRAM|::|KEYS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/RUN-PROGRAM|::|%CALL-WITH-PROGRAM-IO|
 (|UIOP/RUN-PROGRAM|::|GF| |UIOP/RUN-PROGRAM|::|TVAL|
  |UIOP/RUN-PROGRAM|::|STREAM-EASY-P| |UIOP/RUN-PROGRAM|::|FUN|
  |UIOP/RUN-PROGRAM|::|DIRECTION| |UIOP/RUN-PROGRAM|::|SPEC|
  |UIOP/RUN-PROGRAM|::|ACTIVEP| |UIOP/RUN-PROGRAM|::|RETURNER|
  |COMMON-LISP|::|&KEY|
  (|UIOP/RUN-PROGRAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
  (|UIOP/RUN-PROGRAM|::|EXTERNAL-FORMAT|
   |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/RUN-PROGRAM|::|STREAM-EASY-P|))
 (|COMMON-LISP|::|LET*|
  ((|UIOP/RUN-PROGRAM|::|ACTUAL-SPEC|
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|EQ| |UIOP/RUN-PROGRAM|::|SPEC| |COMMON-LISP|::|T|)
     |UIOP/RUN-PROGRAM|::|TVAL| |UIOP/RUN-PROGRAM|::|SPEC|))
   (|UIOP/RUN-PROGRAM|::|ACTIVITY-SPEC|
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|EQ| |UIOP/RUN-PROGRAM|::|ACTUAL-SPEC| :|OUTPUT|)
     (|COMMON-LISP|::|ECASE| |UIOP/RUN-PROGRAM|::|DIRECTION|
      ((:|INPUT| :|OUTPUT|)
       (|UIOP/UTILITY|::|PARAMETER-ERROR| "~S does not allow ~S as a ~S spec"
        '|UIOP/RUN-PROGRAM|::|RUN-PROGRAM| :|OUTPUT|
        |UIOP/RUN-PROGRAM|::|DIRECTION|))
      ((:|ERROR-OUTPUT|) |COMMON-LISP|::|NIL|))
     |UIOP/RUN-PROGRAM|::|ACTUAL-SPEC|)))
  (|COMMON-LISP|::|LABELS|
   ((|UIOP/RUN-PROGRAM|::|ACTIVITY| (|COMMON-LISP|::|STREAM|)
     (|UIOP/UTILITY|::|CALL-FUNCTION| |UIOP/RUN-PROGRAM|::|RETURNER|
      (|UIOP/RUN-PROGRAM|::|CALL-STREAM-PROCESSOR| |UIOP/RUN-PROGRAM|::|GF|
       |UIOP/RUN-PROGRAM|::|ACTIVITY-SPEC| |COMMON-LISP|::|STREAM|)))
    (|UIOP/RUN-PROGRAM|::|EASY-CASE| |COMMON-LISP|::|NIL|
     (|COMMON-LISP|::|FUNCALL| |UIOP/RUN-PROGRAM|::|FUN|
      |UIOP/RUN-PROGRAM|::|ACTUAL-SPEC| |COMMON-LISP|::|NIL|))
    (|UIOP/RUN-PROGRAM|::|HARD-CASE| |COMMON-LISP|::|NIL|
     (|COMMON-LISP|::|IF| |UIOP/RUN-PROGRAM|::|ACTIVEP|
      (|COMMON-LISP|::|FUNCALL| |UIOP/RUN-PROGRAM|::|FUN| :|STREAM|
       #'|UIOP/RUN-PROGRAM|::|ACTIVITY|)
      (|UIOP/STREAM|::|WITH-TEMPORARY-FILE|
       (:|PATHNAME| |UIOP/RUN-PROGRAM|::|TMP|)
       (|COMMON-LISP|::|ECASE| |UIOP/RUN-PROGRAM|::|DIRECTION|
        (:|INPUT|
         (|UIOP/STREAM|::|WITH-OUTPUT-FILE|
          (|UIOP/RUN-PROGRAM|::|S| |UIOP/RUN-PROGRAM|::|TMP| :|IF-EXISTS|
           :|OVERWRITE| :|EXTERNAL-FORMAT|
           |UIOP/RUN-PROGRAM|::|EXTERNAL-FORMAT| :|ELEMENT-TYPE|
           |UIOP/RUN-PROGRAM|::|ELEMENT-TYPE|)
          (|UIOP/RUN-PROGRAM|::|ACTIVITY| |UIOP/RUN-PROGRAM|::|S|))
         (|COMMON-LISP|::|FUNCALL| |UIOP/RUN-PROGRAM|::|FUN|
          |UIOP/RUN-PROGRAM|::|TMP| |COMMON-LISP|::|NIL|))
        ((:|OUTPUT| :|ERROR-OUTPUT|)
         (|COMMON-LISP|::|MULTIPLE-VALUE-PROG1|
          (|COMMON-LISP|::|FUNCALL| |UIOP/RUN-PROGRAM|::|FUN|
           |UIOP/RUN-PROGRAM|::|TMP| |COMMON-LISP|::|NIL|)
          (|UIOP/STREAM|::|WITH-INPUT-FILE|
           (|UIOP/RUN-PROGRAM|::|S| |UIOP/RUN-PROGRAM|::|TMP|
            :|EXTERNAL-FORMAT| |UIOP/RUN-PROGRAM|::|EXTERNAL-FORMAT|
            :|ELEMENT-TYPE| |UIOP/RUN-PROGRAM|::|ELEMENT-TYPE|)
           (|UIOP/RUN-PROGRAM|::|ACTIVITY| |UIOP/RUN-PROGRAM|::|S|)))))))))
   (|COMMON-LISP|::|TYPECASE| |UIOP/RUN-PROGRAM|::|ACTIVITY-SPEC|
    ((|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|STRING|
      |COMMON-LISP|::|PATHNAME| (|COMMON-LISP|::|EQL| :|INTERACTIVE|))
     (|UIOP/RUN-PROGRAM|::|EASY-CASE|))
    (|COMMON-LISP|::|T| (|UIOP/RUN-PROGRAM|::|HARD-CASE|))))))
(|COMMON-LISP|::|DEFMACRO| |UIOP/RUN-PROGRAM|::|PLACE-SETTER|
 (|UIOP/RUN-PROGRAM|::|PLACE|)
 (|COMMON-LISP|::|WHEN| |UIOP/RUN-PROGRAM|::|PLACE|
  (|COMMON-LISP|::|LET|
   ((|UIOP/RUN-PROGRAM|::|VALUE| (|COMMON-LISP|::|GENSYM|)))
   `#'(|COMMON-LISP|::|LAMBDA| (,|UIOP/RUN-PROGRAM|::|VALUE|)
       (|COMMON-LISP|::|SETF| ,|UIOP/RUN-PROGRAM|::|PLACE|
        ,|UIOP/RUN-PROGRAM|::|VALUE|)))))
(|COMMON-LISP|::|DEFMACRO| |UIOP/RUN-PROGRAM|::|WITH-PROGRAM-INPUT|
 (((|UIOP/RUN-PROGRAM|::|REDUCED-INPUT-VAR| |COMMON-LISP|::|&OPTIONAL|
    (|UIOP/RUN-PROGRAM|::|INPUT-ACTIVITY-VAR| (|COMMON-LISP|::|GENSYM|)
     |UIOP/RUN-PROGRAM|::|IAVP|))
   |UIOP/RUN-PROGRAM|::|INPUT-FORM| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|SETF|
   |UIOP/RUN-PROGRAM|::|STREAM-EASY-P| |UIOP/RUN-PROGRAM|::|ACTIVE|
   |UIOP/RUN-PROGRAM|::|KEYS|)
  |COMMON-LISP|::|&BODY| |UIOP/RUN-PROGRAM|::|BODY|)
 `(|COMMON-LISP|::|APPLY| '|UIOP/RUN-PROGRAM|::|%CALL-WITH-PROGRAM-IO|
   '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM| |COMMON-LISP|::|*STANDARD-INPUT*|
   ,|UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
   #'(|COMMON-LISP|::|LAMBDA|
      (,|UIOP/RUN-PROGRAM|::|REDUCED-INPUT-VAR|
       ,|UIOP/RUN-PROGRAM|::|INPUT-ACTIVITY-VAR|)
      ,@(|COMMON-LISP|::|UNLESS| |UIOP/RUN-PROGRAM|::|IAVP|
         `((|COMMON-LISP|::|DECLARE|
            (|COMMON-LISP|::|IGNORE|
             ,|UIOP/RUN-PROGRAM|::|INPUT-ACTIVITY-VAR|))))
      ,@|UIOP/RUN-PROGRAM|::|BODY|)
   :|INPUT| ,|UIOP/RUN-PROGRAM|::|INPUT-FORM| ,|UIOP/RUN-PROGRAM|::|ACTIVE|
   (|UIOP/RUN-PROGRAM|::|PLACE-SETTER| ,|COMMON-LISP|::|SETF|)
   ,|UIOP/RUN-PROGRAM|::|KEYS|))
(|COMMON-LISP|::|DEFMACRO| |UIOP/RUN-PROGRAM|::|WITH-PROGRAM-OUTPUT|
 (((|UIOP/RUN-PROGRAM|::|REDUCED-OUTPUT-VAR| |COMMON-LISP|::|&OPTIONAL|
    (|UIOP/RUN-PROGRAM|::|OUTPUT-ACTIVITY-VAR| (|COMMON-LISP|::|GENSYM|)
     |UIOP/RUN-PROGRAM|::|OAVP|))
   |UIOP/RUN-PROGRAM|::|OUTPUT-FORM| |COMMON-LISP|::|&KEY|
   |COMMON-LISP|::|SETF| |UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
   |UIOP/RUN-PROGRAM|::|ACTIVE| |UIOP/RUN-PROGRAM|::|KEYS|)
  |COMMON-LISP|::|&BODY| |UIOP/RUN-PROGRAM|::|BODY|)
 `(|COMMON-LISP|::|APPLY| '|UIOP/RUN-PROGRAM|::|%CALL-WITH-PROGRAM-IO|
   '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM| |COMMON-LISP|::|*STANDARD-OUTPUT*|
   ,|UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
   #'(|COMMON-LISP|::|LAMBDA|
      (,|UIOP/RUN-PROGRAM|::|REDUCED-OUTPUT-VAR|
       ,|UIOP/RUN-PROGRAM|::|OUTPUT-ACTIVITY-VAR|)
      ,@(|COMMON-LISP|::|UNLESS| |UIOP/RUN-PROGRAM|::|OAVP|
         `((|COMMON-LISP|::|DECLARE|
            (|COMMON-LISP|::|IGNORE|
             ,|UIOP/RUN-PROGRAM|::|OUTPUT-ACTIVITY-VAR|))))
      ,@|UIOP/RUN-PROGRAM|::|BODY|)
   :|OUTPUT| ,|UIOP/RUN-PROGRAM|::|OUTPUT-FORM| ,|UIOP/RUN-PROGRAM|::|ACTIVE|
   (|UIOP/RUN-PROGRAM|::|PLACE-SETTER| ,|COMMON-LISP|::|SETF|)
   ,|UIOP/RUN-PROGRAM|::|KEYS|))
(|COMMON-LISP|::|DEFMACRO| |UIOP/RUN-PROGRAM|::|WITH-PROGRAM-ERROR-OUTPUT|
 (((|UIOP/RUN-PROGRAM|::|REDUCED-ERROR-OUTPUT-VAR| |COMMON-LISP|::|&OPTIONAL|
    (|UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-ACTIVITY-VAR| (|COMMON-LISP|::|GENSYM|)
     |UIOP/RUN-PROGRAM|::|EOAVP|))
   |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-FORM| |COMMON-LISP|::|&KEY|
   |COMMON-LISP|::|SETF| |UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
   |UIOP/RUN-PROGRAM|::|ACTIVE| |UIOP/RUN-PROGRAM|::|KEYS|)
  |COMMON-LISP|::|&BODY| |UIOP/RUN-PROGRAM|::|BODY|)
 `(|COMMON-LISP|::|APPLY| '|UIOP/RUN-PROGRAM|::|%CALL-WITH-PROGRAM-IO|
   '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM| |COMMON-LISP|::|*ERROR-OUTPUT*|
   ,|UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
   #'(|COMMON-LISP|::|LAMBDA|
      (,|UIOP/RUN-PROGRAM|::|REDUCED-ERROR-OUTPUT-VAR|
       ,|UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-ACTIVITY-VAR|)
      ,@(|COMMON-LISP|::|UNLESS| |UIOP/RUN-PROGRAM|::|EOAVP|
         `((|COMMON-LISP|::|DECLARE|
            (|COMMON-LISP|::|IGNORE|
             ,|UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-ACTIVITY-VAR|))))
      ,@|UIOP/RUN-PROGRAM|::|BODY|)
   :|ERROR-OUTPUT| ,|UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-FORM|
   ,|UIOP/RUN-PROGRAM|::|ACTIVE|
   (|UIOP/RUN-PROGRAM|::|PLACE-SETTER| ,|COMMON-LISP|::|SETF|)
   ,|UIOP/RUN-PROGRAM|::|KEYS|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/RUN-PROGRAM|::|%USE-LAUNCH-PROGRAM|
 (|UIOP/RUN-PROGRAM|::|COMMAND| |COMMON-LISP|::|&REST|
  |UIOP/RUN-PROGRAM|::|KEYS| |COMMON-LISP|::|&KEY| |UIOP/RUN-PROGRAM|::|INPUT|
  |UIOP/RUN-PROGRAM|::|OUTPUT| |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|
  |UIOP/RUN-PROGRAM|::|IGNORE-ERROR-STATUS| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|MEMBER| :|STREAM|
   (|COMMON-LISP|::|LIST| |UIOP/RUN-PROGRAM|::|INPUT|
    |UIOP/RUN-PROGRAM|::|OUTPUT| |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|))
  (|UIOP/UTILITY|::|PARAMETER-ERROR|
   "~S: ~S is not allowed as synchronous I/O redirection argument"
   '|UIOP/RUN-PROGRAM|::|RUN-PROGRAM| :|STREAM|))
 (|COMMON-LISP|::|LET*|
  ((|UIOP/RUN-PROGRAM|::|ACTIVE-INPUT-P|
    (|UIOP/RUN-PROGRAM|::|%ACTIVE-IO-SPECIFIER-P| |UIOP/RUN-PROGRAM|::|INPUT|))
   (|UIOP/RUN-PROGRAM|::|ACTIVE-OUTPUT-P|
    (|UIOP/RUN-PROGRAM|::|%ACTIVE-IO-SPECIFIER-P|
     |UIOP/RUN-PROGRAM|::|OUTPUT|))
   (|UIOP/RUN-PROGRAM|::|ACTIVE-ERROR-OUTPUT-P|
    (|UIOP/RUN-PROGRAM|::|%ACTIVE-IO-SPECIFIER-P|
     |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|))
   (|UIOP/RUN-PROGRAM|::|ACTIVITY|
    (|COMMON-LISP|::|COND| (|UIOP/RUN-PROGRAM|::|ACTIVE-OUTPUT-P| :|OUTPUT|)
     (|UIOP/RUN-PROGRAM|::|ACTIVE-INPUT-P| :|INPUT|)
     (|UIOP/RUN-PROGRAM|::|ACTIVE-ERROR-OUTPUT-P| :|ERROR-OUTPUT|)
     (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL|)))
   |UIOP/RUN-PROGRAM|::|OUTPUT-RESULT|
   |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-RESULT| |UIOP/RUN-PROGRAM|::|EXIT-CODE|
   |UIOP/RUN-PROGRAM|::|PROCESS-INFO|)
  (|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-OUTPUT|
   ((|UIOP/RUN-PROGRAM|::|REDUCED-OUTPUT|
     |UIOP/RUN-PROGRAM|::|OUTPUT-ACTIVITY|)
    |UIOP/RUN-PROGRAM|::|OUTPUT| :|KEYS| |UIOP/RUN-PROGRAM|::|KEYS| :|SETF|
    |UIOP/RUN-PROGRAM|::|OUTPUT-RESULT| :|STREAM-EASY-P| |COMMON-LISP|::|T|
    :|ACTIVE| (|COMMON-LISP|::|EQ| |UIOP/RUN-PROGRAM|::|ACTIVITY| :|OUTPUT|))
   (|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-ERROR-OUTPUT|
    ((|UIOP/RUN-PROGRAM|::|REDUCED-ERROR-OUTPUT|
      |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-ACTIVITY|)
     |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT| :|KEYS| |UIOP/RUN-PROGRAM|::|KEYS|
     :|SETF| |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-RESULT| :|STREAM-EASY-P|
     |COMMON-LISP|::|T| :|ACTIVE|
     (|COMMON-LISP|::|EQ| |UIOP/RUN-PROGRAM|::|ACTIVITY| :|ERROR-OUTPUT|))
    (|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-INPUT|
     ((|UIOP/RUN-PROGRAM|::|REDUCED-INPUT|
       |UIOP/RUN-PROGRAM|::|INPUT-ACTIVITY|)
      |UIOP/RUN-PROGRAM|::|INPUT| :|KEYS| |UIOP/RUN-PROGRAM|::|KEYS|
      :|STREAM-EASY-P| |COMMON-LISP|::|T| :|ACTIVE|
      (|COMMON-LISP|::|EQ| |UIOP/RUN-PROGRAM|::|ACTIVITY| :|INPUT|))
     (|COMMON-LISP|::|SETF| |UIOP/RUN-PROGRAM|::|PROCESS-INFO|
      (|COMMON-LISP|::|APPLY| '|UIOP/LAUNCH-PROGRAM|::|LAUNCH-PROGRAM|
       |UIOP/RUN-PROGRAM|::|COMMAND| :|INPUT|
       |UIOP/RUN-PROGRAM|::|REDUCED-INPUT| :|OUTPUT|
       |UIOP/RUN-PROGRAM|::|REDUCED-OUTPUT| :|ERROR-OUTPUT|
       (|COMMON-LISP|::|IF|
        (|COMMON-LISP|::|EQ| |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT| :|OUTPUT|)
        :|OUTPUT| |UIOP/RUN-PROGRAM|::|REDUCED-ERROR-OUTPUT|)
       |UIOP/RUN-PROGRAM|::|KEYS|))
     (|COMMON-LISP|::|LABELS|
      ((|UIOP/RUN-PROGRAM|::|GET-STREAM|
        (|UIOP/RUN-PROGRAM|::|STREAM-NAME| |COMMON-LISP|::|&OPTIONAL|
         |UIOP/RUN-PROGRAM|::|FALLBACKP|)
        (|COMMON-LISP|::|OR|
         (|CLOS|::|SLOT-VALUE| |UIOP/RUN-PROGRAM|::|PROCESS-INFO|
          |UIOP/RUN-PROGRAM|::|STREAM-NAME|)
         (|COMMON-LISP|::|WHEN| |UIOP/RUN-PROGRAM|::|FALLBACKP|
          (|CLOS|::|SLOT-VALUE| |UIOP/RUN-PROGRAM|::|PROCESS-INFO|
           '|UIOP/RUN-PROGRAM|::|BIDIR-STREAM|))))
       (|UIOP/RUN-PROGRAM|::|RUN-ACTIVITY|
        (|UIOP/RUN-PROGRAM|::|ACTIVITY| |UIOP/RUN-PROGRAM|::|STREAM-NAME|
         |COMMON-LISP|::|&OPTIONAL| |UIOP/RUN-PROGRAM|::|FALLBACKP|)
        (|UIOP/UTILITY|::|IF-LET|
         (|COMMON-LISP|::|STREAM|
          (|UIOP/RUN-PROGRAM|::|GET-STREAM| |UIOP/RUN-PROGRAM|::|STREAM-NAME|
           |UIOP/RUN-PROGRAM|::|FALLBACKP|))
         (|COMMON-LISP|::|FUNCALL| |UIOP/RUN-PROGRAM|::|ACTIVITY|
          |COMMON-LISP|::|STREAM|)
         (|COMMON-LISP|::|ERROR| '|UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR|
          :|CODE| `(:|MISSING| ,|UIOP/RUN-PROGRAM|::|STREAM-NAME|) :|COMMAND|
          |UIOP/RUN-PROGRAM|::|COMMAND| :|PROCESS|
          |UIOP/RUN-PROGRAM|::|PROCESS-INFO|))))
      (|COMMON-LISP|::|UNWIND-PROTECT|
       (|COMMON-LISP|::|ECASE| |UIOP/RUN-PROGRAM|::|ACTIVITY|
        ((|COMMON-LISP|::|NIL|))
        (:|INPUT|
         (|UIOP/RUN-PROGRAM|::|RUN-ACTIVITY|
          |UIOP/RUN-PROGRAM|::|INPUT-ACTIVITY|
          '|UIOP/LAUNCH-PROGRAM|::|INPUT-STREAM| |COMMON-LISP|::|T|))
        (:|OUTPUT|
         (|UIOP/RUN-PROGRAM|::|RUN-ACTIVITY|
          |UIOP/RUN-PROGRAM|::|OUTPUT-ACTIVITY|
          '|UIOP/LAUNCH-PROGRAM|::|OUTPUT-STREAM| |COMMON-LISP|::|T|))
        (:|ERROR-OUTPUT|
         (|UIOP/RUN-PROGRAM|::|RUN-ACTIVITY|
          |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-ACTIVITY|
          '|UIOP/LAUNCH-PROGRAM|::|ERROR-OUTPUT-STREAM|)))
       (|UIOP/LAUNCH-PROGRAM|::|CLOSE-STREAMS|
        |UIOP/RUN-PROGRAM|::|PROCESS-INFO|)
       (|COMMON-LISP|::|SETF| |UIOP/RUN-PROGRAM|::|EXIT-CODE|
        (|UIOP/LAUNCH-PROGRAM|::|WAIT-PROCESS|
         |UIOP/RUN-PROGRAM|::|PROCESS-INFO|)))))))
  (|UIOP/RUN-PROGRAM|::|%CHECK-RESULT| |UIOP/RUN-PROGRAM|::|EXIT-CODE|
   :|COMMAND| |UIOP/RUN-PROGRAM|::|COMMAND| :|PROCESS|
   |UIOP/RUN-PROGRAM|::|PROCESS-INFO| :|IGNORE-ERROR-STATUS|
   |UIOP/RUN-PROGRAM|::|IGNORE-ERROR-STATUS|)
  (|COMMON-LISP|::|VALUES| |UIOP/RUN-PROGRAM|::|OUTPUT-RESULT|
   |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-RESULT| |UIOP/RUN-PROGRAM|::|EXIT-CODE|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/RUN-PROGRAM|::|%NORMALIZE-SYSTEM-COMMAND|
 (|UIOP/RUN-PROGRAM|::|COMMAND|)
 (|COMMON-LISP|::|ETYPECASE| |UIOP/RUN-PROGRAM|::|COMMAND|
  (|COMMON-LISP|::|STRING| |UIOP/RUN-PROGRAM|::|COMMAND|)
  (|COMMON-LISP|::|LIST|
   (|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SHELL-COMMAND|
    (|UIOP/OS|::|OS-COND|
     ((|UIOP/OS|::|OS-UNIX-P|)
      (|COMMON-LISP|::|CONS| "exec" |UIOP/RUN-PROGRAM|::|COMMAND|))
     (|COMMON-LISP|::|T| |UIOP/RUN-PROGRAM|::|COMMAND|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/RUN-PROGRAM|::|%REDIRECTED-SYSTEM-COMMAND|
 (|UIOP/RUN-PROGRAM|::|COMMAND| |UIOP/RUN-PROGRAM|::|IN|
  |UIOP/RUN-PROGRAM|::|OUT| |UIOP/RUN-PROGRAM|::|ERR|
  |COMMON-LISP|::|DIRECTORY|)
 (|COMMON-LISP|::|FLET|
  ((|UIOP/RUN-PROGRAM|::|REDIRECT|
    (|UIOP/RUN-PROGRAM|::|SPEC| |UIOP/RUN-PROGRAM|::|OPERATOR|)
    (|COMMON-LISP|::|LET|
     ((|COMMON-LISP|::|PATHNAME|
       (|COMMON-LISP|::|TYPECASE| |UIOP/RUN-PROGRAM|::|SPEC|
        (|COMMON-LISP|::|NULL| (|UIOP/STREAM|::|NULL-DEVICE-PATHNAME|))
        (|COMMON-LISP|::|STRING|
         (|UIOP/FILESYSTEM|::|PARSE-NATIVE-NAMESTRING|
          |UIOP/RUN-PROGRAM|::|SPEC|))
        (|COMMON-LISP|::|PATHNAME| |UIOP/RUN-PROGRAM|::|SPEC|)
        ((|COMMON-LISP|::|EQL| :|OUTPUT|)
         (|COMMON-LISP|::|UNLESS|
          (|COMMON-LISP|::|EQUAL| |UIOP/RUN-PROGRAM|::|OPERATOR| " 2>>")
          (|UIOP/UTILITY|::|PARAMETER-ERROR|
           "~S: only the ~S argument can be ~S"
           '|UIOP/RUN-PROGRAM|::|RUN-PROGRAM| :|ERROR-OUTPUT| :|OUTPUT|))
         (|COMMON-LISP|::|RETURN-FROM| |UIOP/RUN-PROGRAM|::|REDIRECT|
          '(" 2>&1"))))))
     (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PATHNAME|
      (|COMMON-LISP|::|LIST| |UIOP/RUN-PROGRAM|::|OPERATOR| " "
       (|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SHELL-TOKEN|
        (|UIOP/FILESYSTEM|::|NATIVE-NAMESTRING|
         |COMMON-LISP|::|PATHNAME|)))))))
  (|COMMON-LISP|::|LET*|
   ((|UIOP/RUN-PROGRAM|::|REDIRECTIONS|
     (|COMMON-LISP|::|APPEND|
      (|UIOP/RUN-PROGRAM|::|REDIRECT| |UIOP/RUN-PROGRAM|::|IN| " <")
      (|UIOP/RUN-PROGRAM|::|REDIRECT| |UIOP/RUN-PROGRAM|::|OUT| " >>")
      (|UIOP/RUN-PROGRAM|::|REDIRECT| |UIOP/RUN-PROGRAM|::|ERR| " 2>>")))
    (|UIOP/RUN-PROGRAM|::|NORMALIZED|
     (|UIOP/RUN-PROGRAM|::|%NORMALIZE-SYSTEM-COMMAND|
      |UIOP/RUN-PROGRAM|::|COMMAND|))
    (|COMMON-LISP|::|DIRECTORY|
     (|COMMON-LISP|::|OR| |COMMON-LISP|::|DIRECTORY|))
    (|UIOP/OS|::|CHDIR|
     (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|DIRECTORY|
      (|COMMON-LISP|::|LET|
       ((|UIOP/RUN-PROGRAM|::|DIR-ARG|
         (|UIOP/LAUNCH-PROGRAM|::|ESCAPE-SHELL-TOKEN|
          (|UIOP/FILESYSTEM|::|NATIVE-NAMESTRING|
           |COMMON-LISP|::|DIRECTORY|))))
       (|UIOP/OS|::|OS-COND|
        ((|UIOP/OS|::|OS-UNIX-P|)
         `("cd " ,|UIOP/RUN-PROGRAM|::|DIR-ARG| " ; "))
        ((|UIOP/OS|::|OS-WINDOWS-P|)
         `("cd /d " ,|UIOP/RUN-PROGRAM|::|DIR-ARG| " & ")))))))
   (|UIOP/UTILITY|::|REDUCE/STRCAT|
    (|UIOP/OS|::|OS-COND|
     ((|UIOP/OS|::|OS-UNIX-P|)
      `(,@(|COMMON-LISP|::|WHEN| |UIOP/RUN-PROGRAM|::|REDIRECTIONS|
           `("exec " ,@|UIOP/RUN-PROGRAM|::|REDIRECTIONS| " ; "))
        ,@|UIOP/OS|::|CHDIR| ,|UIOP/RUN-PROGRAM|::|NORMALIZED|))
     ((|UIOP/OS|::|OS-WINDOWS-P|)
      `(,@|UIOP/RUN-PROGRAM|::|REDIRECTIONS| " (" ,@|UIOP/OS|::|CHDIR|
        ,|UIOP/RUN-PROGRAM|::|NORMALIZED| ")")))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/RUN-PROGRAM|::|%SYSTEM|
 (|UIOP/RUN-PROGRAM|::|COMMAND| |COMMON-LISP|::|&REST|
  |UIOP/RUN-PROGRAM|::|KEYS| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|DIRECTORY|
  |UIOP/RUN-PROGRAM|::|INPUT|
  (|UIOP/RUN-PROGRAM|::|IF-INPUT-DOES-NOT-EXIST| :|ERROR|)
  |UIOP/RUN-PROGRAM|::|OUTPUT|
  (|UIOP/RUN-PROGRAM|::|IF-OUTPUT-EXISTS| :|SUPERSEDE|)
  |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|
  (|UIOP/RUN-PROGRAM|::|IF-ERROR-OUTPUT-EXISTS| :|SUPERSEDE|)
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "A portable abstraction of a low-level call to libc's system()."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/RUN-PROGRAM|::|KEYS|
   |COMMON-LISP|::|DIRECTORY| |UIOP/RUN-PROGRAM|::|INPUT|
   |UIOP/RUN-PROGRAM|::|IF-INPUT-DOES-NOT-EXIST| |UIOP/RUN-PROGRAM|::|OUTPUT|
   |UIOP/RUN-PROGRAM|::|IF-OUTPUT-EXISTS| |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|
   |UIOP/RUN-PROGRAM|::|IF-ERROR-OUTPUT-EXISTS|))
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|MEMBER| :|STREAM|
   (|COMMON-LISP|::|LIST| |UIOP/RUN-PROGRAM|::|INPUT|
    |UIOP/RUN-PROGRAM|::|OUTPUT| |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|))
  (|UIOP/UTILITY|::|PARAMETER-ERROR|
   "~S: ~S is not allowed as synchronous I/O redirection argument"
   '|UIOP/RUN-PROGRAM|::|RUN-PROGRAM| :|STREAM|))
 (|COMMON-LISP|::|LET|
  ((|UIOP/RUN-PROGRAM|::|%COMMAND|
    (|UIOP/RUN-PROGRAM|::|%REDIRECTED-SYSTEM-COMMAND|
     |UIOP/RUN-PROGRAM|::|COMMAND| |UIOP/RUN-PROGRAM|::|INPUT|
     |UIOP/RUN-PROGRAM|::|OUTPUT| |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|
     |COMMON-LISP|::|DIRECTORY|)))
  (|UIOP/LAUNCH-PROGRAM|::|%HANDLE-IF-DOES-NOT-EXIST|
   |UIOP/RUN-PROGRAM|::|INPUT| |UIOP/RUN-PROGRAM|::|IF-INPUT-DOES-NOT-EXIST|)
  (|UIOP/LAUNCH-PROGRAM|::|%HANDLE-IF-EXISTS| |UIOP/RUN-PROGRAM|::|OUTPUT|
   |UIOP/RUN-PROGRAM|::|IF-OUTPUT-EXISTS|)
  (|UIOP/LAUNCH-PROGRAM|::|%HANDLE-IF-EXISTS|
   |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|
   |UIOP/RUN-PROGRAM|::|IF-ERROR-OUTPUT-EXISTS|)
  (|COMMON-LISP|::|LET|
   ((|UIOP/RUN-PROGRAM|::|RAW-EXIT-CODE|
     (|COMMON-LISP|::|OR|
      (|EXT|::|RUN-SHELL-COMMAND| |UIOP/RUN-PROGRAM|::|%COMMAND| :|WAIT|
       |COMMON-LISP|::|T| :|INPUT| :|TERMINAL| :|OUTPUT| :|TERMINAL|)
      0.)))
   (|COMMON-LISP|::|IF|
    (|COMMON-LISP|::|MINUSP| |UIOP/RUN-PROGRAM|::|RAW-EXIT-CODE|)
    (|COMMON-LISP|::|-| 128. |UIOP/RUN-PROGRAM|::|RAW-EXIT-CODE|)
    |UIOP/RUN-PROGRAM|::|RAW-EXIT-CODE|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/RUN-PROGRAM|::|%USE-SYSTEM|
 (|UIOP/RUN-PROGRAM|::|COMMAND| |COMMON-LISP|::|&REST|
  |UIOP/RUN-PROGRAM|::|KEYS| |COMMON-LISP|::|&KEY| |UIOP/RUN-PROGRAM|::|INPUT|
  |UIOP/RUN-PROGRAM|::|OUTPUT| |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|
  |UIOP/RUN-PROGRAM|::|IGNORE-ERROR-STATUS| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|COMMON-LISP|::|LET|
  (|UIOP/RUN-PROGRAM|::|OUTPUT-RESULT|
   |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-RESULT| |UIOP/RUN-PROGRAM|::|EXIT-CODE|)
  (|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-OUTPUT|
   ((|UIOP/RUN-PROGRAM|::|REDUCED-OUTPUT|) |UIOP/RUN-PROGRAM|::|OUTPUT| :|KEYS|
    |UIOP/RUN-PROGRAM|::|KEYS| :|SETF| |UIOP/RUN-PROGRAM|::|OUTPUT-RESULT|)
   (|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-ERROR-OUTPUT|
    ((|UIOP/RUN-PROGRAM|::|REDUCED-ERROR-OUTPUT|)
     |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT| :|KEYS| |UIOP/RUN-PROGRAM|::|KEYS|
     :|SETF| |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-RESULT|)
    (|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-INPUT|
     ((|UIOP/RUN-PROGRAM|::|REDUCED-INPUT|) |UIOP/RUN-PROGRAM|::|INPUT| :|KEYS|
      |UIOP/RUN-PROGRAM|::|KEYS|)
     (|COMMON-LISP|::|SETF| |UIOP/RUN-PROGRAM|::|EXIT-CODE|
      (|COMMON-LISP|::|APPLY| '|UIOP/RUN-PROGRAM|::|%SYSTEM|
       |UIOP/RUN-PROGRAM|::|COMMAND| :|INPUT|
       |UIOP/RUN-PROGRAM|::|REDUCED-INPUT| :|OUTPUT|
       |UIOP/RUN-PROGRAM|::|REDUCED-OUTPUT| :|ERROR-OUTPUT|
       |UIOP/RUN-PROGRAM|::|REDUCED-ERROR-OUTPUT|
       |UIOP/RUN-PROGRAM|::|KEYS|)))))
  (|UIOP/RUN-PROGRAM|::|%CHECK-RESULT| |UIOP/RUN-PROGRAM|::|EXIT-CODE|
   :|COMMAND| |UIOP/RUN-PROGRAM|::|COMMAND| :|IGNORE-ERROR-STATUS|
   |UIOP/RUN-PROGRAM|::|IGNORE-ERROR-STATUS|)
  (|COMMON-LISP|::|VALUES| |UIOP/RUN-PROGRAM|::|OUTPUT-RESULT|
   |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-RESULT| |UIOP/RUN-PROGRAM|::|EXIT-CODE|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/RUN-PROGRAM|::|RUN-PROGRAM|
 (|UIOP/RUN-PROGRAM|::|COMMAND| |COMMON-LISP|::|&REST|
  |UIOP/RUN-PROGRAM|::|KEYS| |COMMON-LISP|::|&KEY|
  |UIOP/RUN-PROGRAM|::|IGNORE-ERROR-STATUS|
  (|UIOP/RUN-PROGRAM|::|FORCE-SHELL| |COMMON-LISP|::|NIL|
   |UIOP/RUN-PROGRAM|::|FORCE-SHELL-SUPPLIEDP|)
  |UIOP/RUN-PROGRAM|::|INPUT|
  (|UIOP/RUN-PROGRAM|::|IF-INPUT-DOES-NOT-EXIST| :|ERROR|)
  |UIOP/RUN-PROGRAM|::|OUTPUT|
  (|UIOP/RUN-PROGRAM|::|IF-OUTPUT-EXISTS| :|SUPERSEDE|)
  |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|
  (|UIOP/RUN-PROGRAM|::|IF-ERROR-OUTPUT-EXISTS| :|SUPERSEDE|)
  (|UIOP/RUN-PROGRAM|::|ELEMENT-TYPE|
   |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
  (|UIOP/RUN-PROGRAM|::|EXTERNAL-FORMAT|
   |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Run program specified by COMMAND,\n
either a list of strings specifying a program and list of arguments,\n
or a string specifying a shell command (/bin/sh on Unix, CMD.EXE on Windows);\n
_synchronously_ process its output as specified and return the processing results\n
when the program and its output processing are complete.\n\n
Always call a shell (rather than directly execute the command when possible)\n
if FORCE-SHELL is specified.  Similarly, never call a shell if FORCE-SHELL is\n
specified to be NIL.\n\n
Signal a continuable SUBPROCESS-ERROR if the process wasn't successful (exit-code 0),\n
unless IGNORE-ERROR-STATUS is specified.\n\n
If OUTPUT is a pathname, a string designating a pathname, or NIL (the default)\n
designating the null device, the file at that path is used as output.\n
If it's :INTERACTIVE, output is inherited from the current process;\n
beware that this may be different from your *STANDARD-OUTPUT*,\n
and under SLIME will be on your *inferior-lisp* buffer.\n
If it's T, output goes to your current *STANDARD-OUTPUT* stream.\n
Otherwise, OUTPUT should be a value that is a suitable first argument to\n
SLURP-INPUT-STREAM (qv.), or a list of such a value and keyword arguments.\n
In this case, RUN-PROGRAM will create a temporary stream for the program output;\n
the program output, in that stream, will be processed by a call to SLURP-INPUT-STREAM,\n
using OUTPUT as the first argument (or the first element of OUTPUT, and the rest as keywords).\n
The primary value resulting from that call (or NIL if no call was needed)\n
will be the first value returned by RUN-PROGRAM.\n
E.g., using :OUTPUT :STRING will have it return the entire output stream as a string.\n
And using :OUTPUT '(:STRING :STRIPPED T) will have it return the same string\n
stripped of any ending newline.\n\n
IF-OUTPUT-EXISTS, which is only meaningful if OUTPUT is a string or a\n
pathname, can take the values :ERROR, :APPEND, and :SUPERSEDE (the\n
default). The meaning of these values and their effect on the case\n
where OUTPUT does not exist, is analogous to the IF-EXISTS parameter\n
to OPEN with :DIRECTION :OUTPUT.\n\n
ERROR-OUTPUT is similar to OUTPUT, except that the resulting value is returned\n
as the second value of RUN-PROGRAM. T designates the *ERROR-OUTPUT*.\n
Also :OUTPUT means redirecting the error output to the output stream,\n
in which case NIL is returned.\n\n
IF-ERROR-OUTPUT-EXISTS is similar to IF-OUTPUT-EXIST, except that it\n
affects ERROR-OUTPUT rather than OUTPUT.\n\n
INPUT is similar to OUTPUT, except that VOMIT-OUTPUT-STREAM is used,\n
no value is returned, and T designates the *STANDARD-INPUT*.\n\n
IF-INPUT-DOES-NOT-EXIST, which is only meaningful if INPUT is a string\n
or a pathname, can take the values :CREATE and :ERROR (the\n
default). The meaning of these values is analogous to the\n
IF-DOES-NOT-EXIST parameter to OPEN with :DIRECTION :INPUT.\n\n
ELEMENT-TYPE and EXTERNAL-FORMAT are passed on\n
to your Lisp implementation, when applicable, for creation of the output stream.\n\n
One and only one of the stream slurping or vomiting may or may not happen\n
in parallel in parallel with the subprocess,\n
depending on options and implementation,\n
and with priority being given to output processing.\n
Other streams are completely produced or consumed\n
before or after the subprocess is spawned, using temporary files.\n\n
RUN-PROGRAM returns 3 values:\n
0- the result of the OUTPUT slurping if any, or NIL\n
1- the result of the ERROR-OUTPUT slurping if any, or NIL\n
2- either 0 if the subprocess exited with success status,\n
or an indication of failure via the EXIT-CODE of the process"
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/RUN-PROGRAM|::|INPUT|
   |UIOP/RUN-PROGRAM|::|OUTPUT| |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|
   |UIOP/RUN-PROGRAM|::|IF-INPUT-DOES-NOT-EXIST|
   |UIOP/RUN-PROGRAM|::|IF-OUTPUT-EXISTS|
   |UIOP/RUN-PROGRAM|::|IF-ERROR-OUTPUT-EXISTS|
   |UIOP/RUN-PROGRAM|::|ELEMENT-TYPE| |UIOP/RUN-PROGRAM|::|EXTERNAL-FORMAT|
   |UIOP/RUN-PROGRAM|::|IGNORE-ERROR-STATUS|))
 (|COMMON-LISP|::|APPLY|
  (|COMMON-LISP|::|IF|
   (|COMMON-LISP|::|OR| |UIOP/RUN-PROGRAM|::|FORCE-SHELL|
    (|COMMON-LISP|::|AND|
     (|COMMON-LISP|::|STRINGP| |UIOP/RUN-PROGRAM|::|COMMAND|)
     (|COMMON-LISP|::|OR|
      (|COMMON-LISP|::|NOT| |UIOP/RUN-PROGRAM|::|FORCE-SHELL-SUPPLIEDP|)))
    |COMMON-LISP|::|T|)
   '|UIOP/RUN-PROGRAM|::|%USE-SYSTEM|
   '|UIOP/RUN-PROGRAM|::|%USE-LAUNCH-PROGRAM|)
  |UIOP/RUN-PROGRAM|::|COMMAND| |UIOP/RUN-PROGRAM|::|KEYS|))
(|COMMON-LISP|::|LET*| ((#1=#:|G20275| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|ERROR|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/RUN-PROGRAM|::|CODE| :|READERS|
    '(|UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR-CODE|) :|INITARGS| '(:|CODE|)
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/RUN-PROGRAM|::|COMMAND| :|READERS|
    '(|UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR-COMMAND|) :|INITARGS| '(:|COMMAND|)
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/RUN-PROGRAM|::|PROCESS| :|READERS|
    '(|UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR-PROCESS|) :|INITARGS| '(:|PROCESS|)
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR-CODE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR-COMMAND|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|SUBPROCESS-ERROR-PROCESS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/RUN-PROGRAM|::|%CHECK-RESULT|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|%CHECK-RESULT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/RUN-PROGRAM|::|EXIT-CODE| |COMMON-LISP|::|&KEY|
    |UIOP/RUN-PROGRAM|::|COMMAND| |UIOP/RUN-PROGRAM|::|PROCESS|
    |UIOP/RUN-PROGRAM|::|IGNORE-ERROR-STATUS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/RUN-PROGRAM|::|%ACTIVE-IO-SPECIFIER-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|%ACTIVE-IO-SPECIFIER-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/RUN-PROGRAM|::|SPECIFIER|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/RUN-PROGRAM|::|%RUN-PROGRAM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|%RUN-PROGRAM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/RUN-PROGRAM|::|COMMAND| |COMMON-LISP|::|&REST|
    |UIOP/RUN-PROGRAM|::|KEYS| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/RUN-PROGRAM|::|%CALL-WITH-PROGRAM-IO|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|%CALL-WITH-PROGRAM-IO|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/RUN-PROGRAM|::|GF| |UIOP/RUN-PROGRAM|::|TVAL|
    |UIOP/RUN-PROGRAM|::|STREAM-EASY-P| |UIOP/RUN-PROGRAM|::|FUN|
    |UIOP/RUN-PROGRAM|::|DIRECTION| |UIOP/RUN-PROGRAM|::|SPEC|
    |UIOP/RUN-PROGRAM|::|ACTIVEP| |UIOP/RUN-PROGRAM|::|RETURNER|
    |COMMON-LISP|::|&KEY|
    (|UIOP/RUN-PROGRAM|::|ELEMENT-TYPE|
     |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
    (|UIOP/RUN-PROGRAM|::|EXTERNAL-FORMAT|
     |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/RUN-PROGRAM|::|PLACE-SETTER|)
(|SYSTEM|::|%PUTD| '|UIOP/RUN-PROGRAM|::|PLACE-SETTER|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/RUN-PROGRAM|::|PLACE-SETTER|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|UIOP/RUN-PROGRAM|::|PLACE|
        (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |UIOP/RUN-PROGRAM|::|PLACE-SETTER|
       (|COMMON-LISP|::|WHEN| |UIOP/RUN-PROGRAM|::|PLACE|
        (|COMMON-LISP|::|LET|
         ((|UIOP/RUN-PROGRAM|::|VALUE| (|COMMON-LISP|::|GENSYM|)))
         `#'(|COMMON-LISP|::|LAMBDA| (,|UIOP/RUN-PROGRAM|::|VALUE|)
             (|COMMON-LISP|::|SETF| ,|UIOP/RUN-PROGRAM|::|PLACE|
              ,|UIOP/RUN-PROGRAM|::|VALUE|)))))))))
  '(|UIOP/RUN-PROGRAM|::|PLACE|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-INPUT|)
(|SYSTEM|::|%PUTD| '|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-INPUT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/RUN-PROGRAM|::|WITH-PROGRAM-INPUT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G20468| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G20469|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 2. 2. |COMMON-LISP|::|T|))
         (|SYSTEM|::|ERROR-OF-TYPE| #4='|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          #5=(|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-INPUT| #1#
          '#6=(#7=(|UIOP/RUN-PROGRAM|::|REDUCED-INPUT-VAR|
                   |COMMON-LISP|::|&OPTIONAL|
                   (|UIOP/RUN-PROGRAM|::|INPUT-ACTIVITY-VAR|
                    #8=(|COMMON-LISP|::|GENSYM|) |UIOP/RUN-PROGRAM|::|IAVP|))
               |UIOP/RUN-PROGRAM|::|INPUT-FORM| |COMMON-LISP|::|&KEY|
               |COMMON-LISP|::|SETF| |UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
               |UIOP/RUN-PROGRAM|::|ACTIVE| |UIOP/RUN-PROGRAM|::|KEYS|))
         #1#))
       (#9=#:|G20470| (|COMMON-LISP|::|CAR| #3#))
       (#10=#:|G20471|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #9# 1. 2. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| #4# :|FORM| #3# :|DETAIL| #9# #5#
          '|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-INPUT| #9# '#7#)
         #9#))
       (|UIOP/RUN-PROGRAM|::|REDUCED-INPUT-VAR| (|COMMON-LISP|::|CAR| #10#))
       (|UIOP/RUN-PROGRAM|::|INPUT-ACTIVITY-VAR|
        (|COMMON-LISP|::|IF| #11=(|COMMON-LISP|::|CDR| . #12=(#10#))
         (|COMMON-LISP|::|CADR| . #12#) #8#))
       (|UIOP/RUN-PROGRAM|::|IAVP|
        (|COMMON-LISP|::|NOT| (|COMMON-LISP|::|NULL| #11#)))
       (|UIOP/RUN-PROGRAM|::|INPUT-FORM| (|COMMON-LISP|::|CADR| . #13=(#3#)))
       (#14=#:|G20472| (|COMMON-LISP|::|CDDR| . #13#))
       (|COMMON-LISP|::|SETF|
        (|COMMON-LISP|::|GETF| #14# ':|SETF| . #15=(|COMMON-LISP|::|NIL|)))
       (|UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
        (|COMMON-LISP|::|GETF| #14# ':|STREAM-EASY-P| . #15#))
       (|UIOP/RUN-PROGRAM|::|ACTIVE|
        (|COMMON-LISP|::|GETF| #14# ':|ACTIVE| . #15#))
       (|UIOP/RUN-PROGRAM|::|KEYS|
        (|COMMON-LISP|::|GETF| #14# ':|KEYS| . #15#))
       (|UIOP/RUN-PROGRAM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|SYSTEM|::|KEYWORD-TEST| #14#
       '(:|KEYS| :|ACTIVE| :|STREAM-EASY-P| :|SETF|))
      (|COMMON-LISP|::|BLOCK| |UIOP/RUN-PROGRAM|::|WITH-PROGRAM-INPUT|
       `(|COMMON-LISP|::|APPLY| '|UIOP/RUN-PROGRAM|::|%CALL-WITH-PROGRAM-IO|
         '|UIOP/RUN-PROGRAM|::|VOMIT-OUTPUT-STREAM|
         |COMMON-LISP|::|*STANDARD-INPUT*| ,|UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
         #'(|COMMON-LISP|::|LAMBDA|
            (,|UIOP/RUN-PROGRAM|::|REDUCED-INPUT-VAR|
             ,|UIOP/RUN-PROGRAM|::|INPUT-ACTIVITY-VAR|)
            ,@(|COMMON-LISP|::|UNLESS| |UIOP/RUN-PROGRAM|::|IAVP|
               `((|COMMON-LISP|::|DECLARE|
                  (|COMMON-LISP|::|IGNORE|
                   ,|UIOP/RUN-PROGRAM|::|INPUT-ACTIVITY-VAR|))))
            ,@|UIOP/RUN-PROGRAM|::|BODY|)
         :|INPUT| ,|UIOP/RUN-PROGRAM|::|INPUT-FORM|
         ,|UIOP/RUN-PROGRAM|::|ACTIVE|
         (|UIOP/RUN-PROGRAM|::|PLACE-SETTER| ,|COMMON-LISP|::|SETF|)
         ,|UIOP/RUN-PROGRAM|::|KEYS|))))))
  '(#6# |COMMON-LISP|::|&BODY| |UIOP/RUN-PROGRAM|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-OUTPUT|)
(|SYSTEM|::|%PUTD| '|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-OUTPUT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/RUN-PROGRAM|::|WITH-PROGRAM-OUTPUT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G20495| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G20496|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 2. 2. |COMMON-LISP|::|T|))
         (|SYSTEM|::|ERROR-OF-TYPE| #4='|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          #5=(|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-OUTPUT| #1#
          '#6=(#7=(|UIOP/RUN-PROGRAM|::|REDUCED-OUTPUT-VAR|
                   |COMMON-LISP|::|&OPTIONAL|
                   (|UIOP/RUN-PROGRAM|::|OUTPUT-ACTIVITY-VAR|
                    #8=(|COMMON-LISP|::|GENSYM|) |UIOP/RUN-PROGRAM|::|OAVP|))
               |UIOP/RUN-PROGRAM|::|OUTPUT-FORM| |COMMON-LISP|::|&KEY|
               |COMMON-LISP|::|SETF| |UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
               |UIOP/RUN-PROGRAM|::|ACTIVE| |UIOP/RUN-PROGRAM|::|KEYS|))
         #1#))
       (#9=#:|G20497| (|COMMON-LISP|::|CAR| #3#))
       (#10=#:|G20498|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #9# 1. 2. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| #4# :|FORM| #3# :|DETAIL| #9# #5#
          '|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-OUTPUT| #9# '#7#)
         #9#))
       (|UIOP/RUN-PROGRAM|::|REDUCED-OUTPUT-VAR| (|COMMON-LISP|::|CAR| #10#))
       (|UIOP/RUN-PROGRAM|::|OUTPUT-ACTIVITY-VAR|
        (|COMMON-LISP|::|IF| #11=(|COMMON-LISP|::|CDR| . #12=(#10#))
         (|COMMON-LISP|::|CADR| . #12#) #8#))
       (|UIOP/RUN-PROGRAM|::|OAVP|
        (|COMMON-LISP|::|NOT| (|COMMON-LISP|::|NULL| #11#)))
       (|UIOP/RUN-PROGRAM|::|OUTPUT-FORM| (|COMMON-LISP|::|CADR| . #13=(#3#)))
       (#14=#:|G20499| (|COMMON-LISP|::|CDDR| . #13#))
       (|COMMON-LISP|::|SETF|
        (|COMMON-LISP|::|GETF| #14# ':|SETF| . #15=(|COMMON-LISP|::|NIL|)))
       (|UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
        (|COMMON-LISP|::|GETF| #14# ':|STREAM-EASY-P| . #15#))
       (|UIOP/RUN-PROGRAM|::|ACTIVE|
        (|COMMON-LISP|::|GETF| #14# ':|ACTIVE| . #15#))
       (|UIOP/RUN-PROGRAM|::|KEYS|
        (|COMMON-LISP|::|GETF| #14# ':|KEYS| . #15#))
       (|UIOP/RUN-PROGRAM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|SYSTEM|::|KEYWORD-TEST| #14#
       '(:|KEYS| :|ACTIVE| :|STREAM-EASY-P| :|SETF|))
      (|COMMON-LISP|::|BLOCK| |UIOP/RUN-PROGRAM|::|WITH-PROGRAM-OUTPUT|
       `(|COMMON-LISP|::|APPLY| '|UIOP/RUN-PROGRAM|::|%CALL-WITH-PROGRAM-IO|
         '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
         |COMMON-LISP|::|*STANDARD-OUTPUT*|
         ,|UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
         #'(|COMMON-LISP|::|LAMBDA|
            (,|UIOP/RUN-PROGRAM|::|REDUCED-OUTPUT-VAR|
             ,|UIOP/RUN-PROGRAM|::|OUTPUT-ACTIVITY-VAR|)
            ,@(|COMMON-LISP|::|UNLESS| |UIOP/RUN-PROGRAM|::|OAVP|
               `((|COMMON-LISP|::|DECLARE|
                  (|COMMON-LISP|::|IGNORE|
                   ,|UIOP/RUN-PROGRAM|::|OUTPUT-ACTIVITY-VAR|))))
            ,@|UIOP/RUN-PROGRAM|::|BODY|)
         :|OUTPUT| ,|UIOP/RUN-PROGRAM|::|OUTPUT-FORM|
         ,|UIOP/RUN-PROGRAM|::|ACTIVE|
         (|UIOP/RUN-PROGRAM|::|PLACE-SETTER| ,|COMMON-LISP|::|SETF|)
         ,|UIOP/RUN-PROGRAM|::|KEYS|))))))
  '(#6# |COMMON-LISP|::|&BODY| |UIOP/RUN-PROGRAM|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-ERROR-OUTPUT|)
(|SYSTEM|::|%PUTD| '|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-ERROR-OUTPUT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |UIOP/RUN-PROGRAM|::|WITH-PROGRAM-ERROR-OUTPUT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G20522| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G20523|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 2. 2. |COMMON-LISP|::|T|))
         (|SYSTEM|::|ERROR-OF-TYPE| #4='|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          #5=(|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-ERROR-OUTPUT| #1#
          '#6=(#7=(|UIOP/RUN-PROGRAM|::|REDUCED-ERROR-OUTPUT-VAR|
                   |COMMON-LISP|::|&OPTIONAL|
                   (|UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-ACTIVITY-VAR|
                    #8=(|COMMON-LISP|::|GENSYM|) |UIOP/RUN-PROGRAM|::|EOAVP|))
               |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-FORM| |COMMON-LISP|::|&KEY|
               |COMMON-LISP|::|SETF| |UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
               |UIOP/RUN-PROGRAM|::|ACTIVE| |UIOP/RUN-PROGRAM|::|KEYS|))
         #1#))
       (#9=#:|G20524| (|COMMON-LISP|::|CAR| #3#))
       (#10=#:|G20525|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #9# 1. 2. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| #4# :|FORM| #3# :|DETAIL| #9# #5#
          '|UIOP/RUN-PROGRAM|::|WITH-PROGRAM-ERROR-OUTPUT| #9# '#7#)
         #9#))
       (|UIOP/RUN-PROGRAM|::|REDUCED-ERROR-OUTPUT-VAR|
        (|COMMON-LISP|::|CAR| #10#))
       (|UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-ACTIVITY-VAR|
        (|COMMON-LISP|::|IF| #11=(|COMMON-LISP|::|CDR| . #12=(#10#))
         (|COMMON-LISP|::|CADR| . #12#) #8#))
       (|UIOP/RUN-PROGRAM|::|EOAVP|
        (|COMMON-LISP|::|NOT| (|COMMON-LISP|::|NULL| #11#)))
       (|UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-FORM|
        (|COMMON-LISP|::|CADR| . #13=(#3#)))
       (#14=#:|G20526| (|COMMON-LISP|::|CDDR| . #13#))
       (|COMMON-LISP|::|SETF|
        (|COMMON-LISP|::|GETF| #14# ':|SETF| . #15=(|COMMON-LISP|::|NIL|)))
       (|UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
        (|COMMON-LISP|::|GETF| #14# ':|STREAM-EASY-P| . #15#))
       (|UIOP/RUN-PROGRAM|::|ACTIVE|
        (|COMMON-LISP|::|GETF| #14# ':|ACTIVE| . #15#))
       (|UIOP/RUN-PROGRAM|::|KEYS|
        (|COMMON-LISP|::|GETF| #14# ':|KEYS| . #15#))
       (|UIOP/RUN-PROGRAM|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|SYSTEM|::|KEYWORD-TEST| #14#
       '(:|KEYS| :|ACTIVE| :|STREAM-EASY-P| :|SETF|))
      (|COMMON-LISP|::|BLOCK| |UIOP/RUN-PROGRAM|::|WITH-PROGRAM-ERROR-OUTPUT|
       `(|COMMON-LISP|::|APPLY| '|UIOP/RUN-PROGRAM|::|%CALL-WITH-PROGRAM-IO|
         '|UIOP/RUN-PROGRAM|::|SLURP-INPUT-STREAM|
         |COMMON-LISP|::|*ERROR-OUTPUT*| ,|UIOP/RUN-PROGRAM|::|STREAM-EASY-P|
         #'(|COMMON-LISP|::|LAMBDA|
            (,|UIOP/RUN-PROGRAM|::|REDUCED-ERROR-OUTPUT-VAR|
             ,|UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-ACTIVITY-VAR|)
            ,@(|COMMON-LISP|::|UNLESS| |UIOP/RUN-PROGRAM|::|EOAVP|
               `((|COMMON-LISP|::|DECLARE|
                  (|COMMON-LISP|::|IGNORE|
                   ,|UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-ACTIVITY-VAR|))))
            ,@|UIOP/RUN-PROGRAM|::|BODY|)
         :|ERROR-OUTPUT| ,|UIOP/RUN-PROGRAM|::|ERROR-OUTPUT-FORM|
         ,|UIOP/RUN-PROGRAM|::|ACTIVE|
         (|UIOP/RUN-PROGRAM|::|PLACE-SETTER| ,|COMMON-LISP|::|SETF|)
         ,|UIOP/RUN-PROGRAM|::|KEYS|))))))
  '(#6# |COMMON-LISP|::|&BODY| |UIOP/RUN-PROGRAM|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/RUN-PROGRAM|::|%USE-LAUNCH-PROGRAM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|%USE-LAUNCH-PROGRAM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/RUN-PROGRAM|::|COMMAND| |COMMON-LISP|::|&REST|
    |UIOP/RUN-PROGRAM|::|KEYS| |COMMON-LISP|::|&KEY|
    |UIOP/RUN-PROGRAM|::|INPUT| |UIOP/RUN-PROGRAM|::|OUTPUT|
    |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|
    |UIOP/RUN-PROGRAM|::|IGNORE-ERROR-STATUS|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/RUN-PROGRAM|::|%NORMALIZE-SYSTEM-COMMAND|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|%NORMALIZE-SYSTEM-COMMAND|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/RUN-PROGRAM|::|COMMAND|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/RUN-PROGRAM|::|%REDIRECTED-SYSTEM-COMMAND|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|%REDIRECTED-SYSTEM-COMMAND|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/RUN-PROGRAM|::|COMMAND| |UIOP/RUN-PROGRAM|::|IN|
    |UIOP/RUN-PROGRAM|::|OUT| |UIOP/RUN-PROGRAM|::|ERR|
    |COMMON-LISP|::|DIRECTORY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/RUN-PROGRAM|::|%SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|%SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/RUN-PROGRAM|::|COMMAND| |COMMON-LISP|::|&REST|
    |UIOP/RUN-PROGRAM|::|KEYS| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|DIRECTORY|
    |UIOP/RUN-PROGRAM|::|INPUT|
    (|UIOP/RUN-PROGRAM|::|IF-INPUT-DOES-NOT-EXIST| :|ERROR|)
    |UIOP/RUN-PROGRAM|::|OUTPUT|
    (|UIOP/RUN-PROGRAM|::|IF-OUTPUT-EXISTS| :|SUPERSEDE|)
    |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|
    (|UIOP/RUN-PROGRAM|::|IF-ERROR-OUTPUT-EXISTS| :|SUPERSEDE|)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/RUN-PROGRAM|::|%USE-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|%USE-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/RUN-PROGRAM|::|COMMAND| |COMMON-LISP|::|&REST|
    |UIOP/RUN-PROGRAM|::|KEYS| |COMMON-LISP|::|&KEY|
    |UIOP/RUN-PROGRAM|::|INPUT| |UIOP/RUN-PROGRAM|::|OUTPUT|
    |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|
    |UIOP/RUN-PROGRAM|::|IGNORE-ERROR-STATUS|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/RUN-PROGRAM|::|RUN-PROGRAM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/RUN-PROGRAM|::|RUN-PROGRAM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/RUN-PROGRAM|::|COMMAND| |COMMON-LISP|::|&REST|
    |UIOP/RUN-PROGRAM|::|KEYS| |COMMON-LISP|::|&KEY|
    |UIOP/RUN-PROGRAM|::|IGNORE-ERROR-STATUS|
    (|UIOP/RUN-PROGRAM|::|FORCE-SHELL| |COMMON-LISP|::|NIL|
     |UIOP/RUN-PROGRAM|::|FORCE-SHELL-SUPPLIEDP|)
    |UIOP/RUN-PROGRAM|::|INPUT|
    (|UIOP/RUN-PROGRAM|::|IF-INPUT-DOES-NOT-EXIST| :|ERROR|)
    |UIOP/RUN-PROGRAM|::|OUTPUT|
    (|UIOP/RUN-PROGRAM|::|IF-OUTPUT-EXISTS| :|SUPERSEDE|)
    |UIOP/RUN-PROGRAM|::|ERROR-OUTPUT|
    (|UIOP/RUN-PROGRAM|::|IF-ERROR-OUTPUT-EXISTS| :|SUPERSEDE|)
    (|UIOP/RUN-PROGRAM|::|ELEMENT-TYPE|
     |UIOP/STREAM|::|*DEFAULT-STREAM-ELEMENT-TYPE*|)
    (|UIOP/RUN-PROGRAM|::|EXTERNAL-FORMAT|
     |UIOP/STREAM|::|*UTF-8-EXTERNAL-FORMAT*|)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|UIOP/CONFIGURATION| :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP/UTILITY| :|UIOP/OS| :|UIOP/PATHNAME|
    :|UIOP/FILESYSTEM| :|UIOP/STREAM| :|UIOP/IMAGE| :|UIOP/LISP-BUILD|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|USER-CONFIGURATION-DIRECTORIES| #:|SYSTEM-CONFIGURATION-DIRECTORIES|
    #:|IN-FIRST-DIRECTORY| #:|IN-USER-CONFIGURATION-DIRECTORY|
    #:|IN-SYSTEM-CONFIGURATION-DIRECTORY| #:|GET-FOLDER-PATH| #:|XDG-DATA-HOME|
    #:|XDG-CONFIG-HOME| #:|XDG-DATA-DIRS| #:|XDG-CONFIG-DIRS|
    #:|XDG-CACHE-HOME| #:|XDG-RUNTIME-DIR| #:|SYSTEM-CONFIG-PATHNAMES|
    #:|FILTER-PATHNAME-SET| #:|XDG-DATA-PATHNAMES| #:|XDG-CONFIG-PATHNAMES|
    #:|FIND-PREFERRED-FILE| #:|XDG-DATA-PATHNAME| #:|XDG-CONFIG-PATHNAME|
    #:|VALIDATE-CONFIGURATION-FORM| #:|VALIDATE-CONFIGURATION-FILE|
    #:|VALIDATE-CONFIGURATION-DIRECTORY|
    #:|CONFIGURATION-INHERITANCE-DIRECTIVE-P| #:|REPORT-INVALID-FORM|
    #:|INVALID-CONFIGURATION| #:|*IGNORED-CONFIGURATION-FORM*| #:|*USER-CACHE*|
    #:|*CLEAR-CONFIGURATION-HOOK*| #:|CLEAR-CONFIGURATION|
    #:|REGISTER-CLEAR-CONFIGURATION-HOOK| #:|RESOLVE-LOCATION|
    #:|LOCATION-DESIGNATOR-P| #:|LOCATION-FUNCTION-P| #:|*HERE-DIRECTORY*|
    #:|RESOLVE-RELATIVE-LOCATION| #:|RESOLVE-ABSOLUTE-LOCATION|
    #:|UPGRADE-CONFIGURATION|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|UIOP/CONFIGURATION| :|ASDF/CONFIGURATION|) :|MIX| '|COMMON-LISP|::|NIL|
  :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/CONFIGURATION"))
(|COMMON-LISP|::|DEFINE-CONDITION|
 |UIOP/CONFIGURATION|::|INVALID-CONFIGURATION| |COMMON-LISP|::|NIL|
 ((|UIOP/CONFIGURATION|::|FORM| :|READER|
   |UIOP/CONFIGURATION|::|CONDITION-FORM| :|INITARG| :|FORM|)
  (|UIOP/CONFIGURATION|::|LOCATION| :|READER|
   |UIOP/CONFIGURATION|::|CONDITION-LOCATION| :|INITARG| :|LOCATION|)
  (|COMMON-LISP|::|FORMAT| :|READER| |UIOP/CONFIGURATION|::|CONDITION-FORMAT|
   :|INITARG| :|FORMAT|)
  (|UIOP/CONFIGURATION|::|ARGUMENTS| :|READER|
   |UIOP/CONFIGURATION|::|CONDITION-ARGUMENTS| :|INITARG| :|ARGUMENTS|
   :|INITFORM| |COMMON-LISP|::|NIL|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA|
   (|UIOP/CONFIGURATION|::|C| |UIOP/CONFIGURATION|::|S|)
   (|COMMON-LISP|::|FORMAT| |UIOP/CONFIGURATION|::|S|
    (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<~? (will be skipped)~@:>")
    (|UIOP/CONFIGURATION|::|CONDITION-FORMAT| |UIOP/CONFIGURATION|::|C|)
    (|COMMON-LISP|::|LIST*|
     (|UIOP/CONFIGURATION|::|CONDITION-FORM| |UIOP/CONFIGURATION|::|C|)
     (|UIOP/CONFIGURATION|::|CONDITION-LOCATION| |UIOP/CONFIGURATION|::|C|)
     (|UIOP/CONFIGURATION|::|CONDITION-ARGUMENTS|
      |UIOP/CONFIGURATION|::|C|))))))
(|UIOP/UTILITY|::|DEFUN*|
 |UIOP/CONFIGURATION|::|CONFIGURATION-INHERITANCE-DIRECTIVE-P|
 (|UIOP/CONFIGURATION|::|X|) "Is X a configuration inheritance directive?"
 (|COMMON-LISP|::|LET|
  ((|UIOP/CONFIGURATION|::|KW|
    '(:|INHERIT-CONFIGURATION| :|IGNORE-INHERITED-CONFIGURATION|)))
  (|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|MEMBER| |UIOP/CONFIGURATION|::|X|
    |UIOP/CONFIGURATION|::|KW|)
   (|COMMON-LISP|::|AND|
    (|UIOP/UTILITY|::|LENGTH=N-P| |UIOP/CONFIGURATION|::|X| 1.)
    (|COMMON-LISP|::|MEMBER| (|COMMON-LISP|::|CAR| |UIOP/CONFIGURATION|::|X|)
     |UIOP/CONFIGURATION|::|KW|)))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|REPORT-INVALID-FORM|
 (|UIOP/CONFIGURATION|::|REPORTER| |COMMON-LISP|::|&REST|
  |UIOP/CONFIGURATION|::|ARGS|)
 "Report an invalid form according to REPORTER and various ARGS"
 (|COMMON-LISP|::|ETYPECASE| |UIOP/CONFIGURATION|::|REPORTER|
  (|COMMON-LISP|::|NULL|
   (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|ERROR|
    '|UIOP/CONFIGURATION|::|INVALID-CONFIGURATION|
    |UIOP/CONFIGURATION|::|ARGS|))
  #'(|COMMON-LISP|::|APPLY| |UIOP/CONFIGURATION|::|REPORTER|
     |UIOP/CONFIGURATION|::|ARGS|)
  ((|COMMON-LISP|::|OR| |COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|STRING|)
   (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|ERROR|
    |UIOP/CONFIGURATION|::|REPORTER| |UIOP/CONFIGURATION|::|ARGS|))
  (|COMMON-LISP|::|CONS|
   (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|APPLY|
    (|COMMON-LISP|::|APPEND| |UIOP/CONFIGURATION|::|REPORTER|
     |UIOP/CONFIGURATION|::|ARGS|)))))
(|COMMON-LISP|::|DEFVAR| |UIOP/CONFIGURATION|::|*IGNORED-CONFIGURATION-FORM*|
 |COMMON-LISP|::|NIL|
 "Have configuration forms been ignored while parsing the configuration?")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-FORM|
 (|UIOP/CONFIGURATION|::|FORM| |UIOP/CONFIGURATION|::|TAG|
  |UIOP/CONFIGURATION|::|DIRECTIVE-VALIDATOR| |COMMON-LISP|::|&KEY|
  |UIOP/CONFIGURATION|::|LOCATION|
  |UIOP/CONFIGURATION|::|INVALID-FORM-REPORTER|)
 "Validate a configuration FORM. By default it will raise an error if the\n
FORM is not valid.  Otherwise it will return the validated form.\n
     Arguments control the behavior:\n
     The configuration FORM should be of the form (TAG . <rest>)\n
     Each element of <rest> will be checked by first seeing if it's a configuration inheritance\n
directive (see CONFIGURATION-INHERITANCE-DIRECTIVE-P) then invoking DIRECTIVE-VALIDATOR\n
on it.\n
     In the event of an invalid form, INVALID-FORM-REPORTER will be used to control\n
reporting (see REPORT-INVALID-FORM) with LOCATION providing information about where\n
the configuration form appeared."
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |UIOP/CONFIGURATION|::|FORM|)
   (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|CAR| |UIOP/CONFIGURATION|::|FORM|)
    |UIOP/CONFIGURATION|::|TAG|))
  (|COMMON-LISP|::|SETF| |UIOP/CONFIGURATION|::|*IGNORED-CONFIGURATION-FORM*|
   |COMMON-LISP|::|T|)
  (|UIOP/CONFIGURATION|::|REPORT-INVALID-FORM|
   |UIOP/CONFIGURATION|::|INVALID-FORM-REPORTER| :|FORM|
   |UIOP/CONFIGURATION|::|FORM| :|LOCATION| |UIOP/CONFIGURATION|::|LOCATION|)
  (|COMMON-LISP|::|RETURN-FROM|
   |UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-FORM| |COMMON-LISP|::|NIL|))
 (|COMMON-LISP|::|LOOP| :|WITH| |UIOP/CONFIGURATION|::|INHERIT|
  |COMMON-LISP|::|=| 0. :|WITH| |UIOP/CONFIGURATION|::|IGNORE-INVALID-P|
  |COMMON-LISP|::|=| |COMMON-LISP|::|NIL| :|WITH| |UIOP/CONFIGURATION|::|X|
  |COMMON-LISP|::|=| (|COMMON-LISP|::|LIST| |UIOP/CONFIGURATION|::|TAG|) :|FOR|
  |UIOP/CONFIGURATION|::|DIRECTIVE| :|IN|
  (|COMMON-LISP|::|CDR| |UIOP/CONFIGURATION|::|FORM|) :|WHEN|
  (|COMMON-LISP|::|COND|
   ((|UIOP/CONFIGURATION|::|CONFIGURATION-INHERITANCE-DIRECTIVE-P|
     |UIOP/CONFIGURATION|::|DIRECTIVE|)
    (|COMMON-LISP|::|INCF| |UIOP/CONFIGURATION|::|INHERIT|) |COMMON-LISP|::|T|)
   ((|COMMON-LISP|::|EQ| |UIOP/CONFIGURATION|::|DIRECTIVE|
     :|IGNORE-INVALID-ENTRIES|)
    (|COMMON-LISP|::|SETF| |UIOP/CONFIGURATION|::|IGNORE-INVALID-P|
     |COMMON-LISP|::|T|)
    |COMMON-LISP|::|T|)
   ((|COMMON-LISP|::|FUNCALL| |UIOP/CONFIGURATION|::|DIRECTIVE-VALIDATOR|
     |UIOP/CONFIGURATION|::|DIRECTIVE|)
    |COMMON-LISP|::|T|)
   (|UIOP/CONFIGURATION|::|IGNORE-INVALID-P| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|T|
    (|COMMON-LISP|::|SETF| |UIOP/CONFIGURATION|::|*IGNORED-CONFIGURATION-FORM*|
     |COMMON-LISP|::|T|)
    (|UIOP/CONFIGURATION|::|REPORT-INVALID-FORM|
     |UIOP/CONFIGURATION|::|INVALID-FORM-REPORTER| :|FORM|
     |UIOP/CONFIGURATION|::|DIRECTIVE| :|LOCATION|
     |UIOP/CONFIGURATION|::|LOCATION|)
    |COMMON-LISP|::|NIL|))
  :|DO|
  (|COMMON-LISP|::|PUSH| |UIOP/CONFIGURATION|::|DIRECTIVE|
   |UIOP/CONFIGURATION|::|X|)
  :|FINALLY|
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|=| |UIOP/CONFIGURATION|::|INHERIT| 1.)
   (|UIOP/CONFIGURATION|::|REPORT-INVALID-FORM|
    |UIOP/CONFIGURATION|::|INVALID-FORM-REPORTER| :|FORM|
    |UIOP/CONFIGURATION|::|FORM| :|LOCATION| |UIOP/CONFIGURATION|::|LOCATION|
    :|FORMAT|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<Invalid source registry ~S~@[ in ~S~]. ~\n
                                                        One and only one of ~S or ~S is required.~@:>")
    :|ARGUMENTS|
    '(:|INHERIT-CONFIGURATION| :|IGNORE-INHERITED-CONFIGURATION|)))
  (|COMMON-LISP|::|RETURN|
   (|COMMON-LISP|::|NREVERSE| |UIOP/CONFIGURATION|::|X|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-FILE|
 (|UIOP/CONFIGURATION|::|FILE| |UIOP/CONFIGURATION|::|VALIDATOR|
  |COMMON-LISP|::|&KEY| |UIOP/CONFIGURATION|::|DESCRIPTION|)
 "Validate a configuration FILE.  The configuration file should have only one s-expression\n
in it, which will be checked with the VALIDATOR FORM.  DESCRIPTION argument used for error\n
reporting."
 (|COMMON-LISP|::|LET|
  ((|UIOP/CONFIGURATION|::|FORMS|
    (|UIOP/STREAM|::|READ-FILE-FORMS| |UIOP/CONFIGURATION|::|FILE|)))
  (|COMMON-LISP|::|UNLESS|
   (|UIOP/UTILITY|::|LENGTH=N-P| |UIOP/CONFIGURATION|::|FORMS| 1.)
   (|COMMON-LISP|::|ERROR|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<One and only one form allowed for ~A. Got: ~3i~_~S~@:>~%")
    |UIOP/CONFIGURATION|::|DESCRIPTION| |UIOP/CONFIGURATION|::|FORMS|))
  (|COMMON-LISP|::|FUNCALL| |UIOP/CONFIGURATION|::|VALIDATOR|
   (|COMMON-LISP|::|CAR| |UIOP/CONFIGURATION|::|FORMS|) :|LOCATION|
   |UIOP/CONFIGURATION|::|FILE|)))
(|UIOP/UTILITY|::|DEFUN*|
 |UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-DIRECTORY|
 (|COMMON-LISP|::|DIRECTORY| |UIOP/CONFIGURATION|::|TAG|
  |UIOP/CONFIGURATION|::|VALIDATOR| |COMMON-LISP|::|&KEY|
  |UIOP/CONFIGURATION|::|INVALID-FORM-REPORTER|)
 "Map the VALIDATOR across the .conf files in DIRECTORY, the TAG will\n
be applied to the results to yield a configuration form.  Current\n
values of TAG include :source-registry and :output-translations."
 (|COMMON-LISP|::|LET|
  ((|UIOP/CONFIGURATION|::|FILES|
    (|COMMON-LISP|::|SORT|
     (|COMMON-LISP|::|IGNORE-ERRORS|
      (|COMMON-LISP|::|REMOVE-IF| '|UIOP/PATHNAME|::|HIDDEN-PATHNAME-P|
       (|UIOP/FILESYSTEM|::|DIRECTORY*|
        (|COMMON-LISP|::|MAKE-PATHNAME| :|NAME| |UIOP/PATHNAME|::|*WILD*|
         :|TYPE| "conf" :|DEFAULTS| |COMMON-LISP|::|DIRECTORY|))))
     #'|COMMON-LISP|::|STRING<| :|KEY| #'|COMMON-LISP|::|NAMESTRING|)))
  `(,|UIOP/CONFIGURATION|::|TAG|
    ,@(|COMMON-LISP|::|LOOP| :|FOR| |UIOP/CONFIGURATION|::|FILE| :|IN|
       |UIOP/CONFIGURATION|::|FILES| :|APPEND|
       (|COMMON-LISP|::|LOOP| :|WITH| |UIOP/CONFIGURATION|::|IGNORE-INVALID-P|
        |COMMON-LISP|::|=| |COMMON-LISP|::|NIL| :|FOR|
        |UIOP/CONFIGURATION|::|FORM| :|IN|
        (|UIOP/STREAM|::|READ-FILE-FORMS| |UIOP/CONFIGURATION|::|FILE|) :|WHEN|
        (|COMMON-LISP|::|EQ| |UIOP/CONFIGURATION|::|FORM|
         :|IGNORE-INVALID-ENTRIES|)
        :|DO|
        (|COMMON-LISP|::|SETF| |UIOP/CONFIGURATION|::|IGNORE-INVALID-P|
         |COMMON-LISP|::|T|)
        :|ELSE| :|WHEN|
        (|COMMON-LISP|::|FUNCALL| |UIOP/CONFIGURATION|::|VALIDATOR|
         |UIOP/CONFIGURATION|::|FORM|)
        :|COLLECT| |UIOP/CONFIGURATION|::|FORM| :|ELSE| :|WHEN|
        |UIOP/CONFIGURATION|::|IGNORE-INVALID-P| :|DO|
        (|COMMON-LISP|::|SETF|
         |UIOP/CONFIGURATION|::|*IGNORED-CONFIGURATION-FORM*|
         |COMMON-LISP|::|T|)
        :|ELSE| :|DO|
        (|UIOP/CONFIGURATION|::|REPORT-INVALID-FORM|
         |UIOP/CONFIGURATION|::|INVALID-FORM-REPORTER| :|FORM|
         |UIOP/CONFIGURATION|::|FORM| :|LOCATION|
         |UIOP/CONFIGURATION|::|FILE|)))
    :|INHERIT-CONFIGURATION|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|RESOLVE-RELATIVE-LOCATION|
 (|UIOP/CONFIGURATION|::|X| |COMMON-LISP|::|&KEY|
  |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY| |UIOP/PATHNAME|::|WILDEN|)
 "Given a designator X for an relative location, resolve it to a pathname."
 (|UIOP/PATHNAME|::|ENSURE-PATHNAME|
  (|COMMON-LISP|::|ETYPECASE| |UIOP/CONFIGURATION|::|X|
   (|COMMON-LISP|::|NULL| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|PATHNAME| |UIOP/CONFIGURATION|::|X|)
   (|COMMON-LISP|::|STRING|
    (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING| |UIOP/CONFIGURATION|::|X|
     :|ENSURE-DIRECTORY| |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY|))
   (|COMMON-LISP|::|CONS|
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NULL| (|COMMON-LISP|::|CDR| |UIOP/CONFIGURATION|::|X|))
     (|UIOP/CONFIGURATION|::|RESOLVE-RELATIVE-LOCATION|
      (|COMMON-LISP|::|CAR| |UIOP/CONFIGURATION|::|X|) :|ENSURE-DIRECTORY|
      |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY| :|WILDEN|
      |UIOP/PATHNAME|::|WILDEN|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|CAR|
        (|UIOP/CONFIGURATION|::|RESOLVE-RELATIVE-LOCATION|
         (|COMMON-LISP|::|CAR| |UIOP/CONFIGURATION|::|X|) :|ENSURE-DIRECTORY|
         |COMMON-LISP|::|T| :|WILDEN| |COMMON-LISP|::|NIL|)))
      (|UIOP/PATHNAME|::|MERGE-PATHNAMES*|
       (|UIOP/CONFIGURATION|::|RESOLVE-RELATIVE-LOCATION|
        (|COMMON-LISP|::|CDR| |UIOP/CONFIGURATION|::|X|) :|ENSURE-DIRECTORY|
        |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY| :|WILDEN|
        |UIOP/PATHNAME|::|WILDEN|)
       |COMMON-LISP|::|CAR|))))
   ((|COMMON-LISP|::|EQL| :|*/|) |UIOP/PATHNAME|::|*WILD-DIRECTORY*|)
   ((|COMMON-LISP|::|EQL| :|**/|) |UIOP/PATHNAME|::|*WILD-INFERIORS*|)
   ((|COMMON-LISP|::|EQL| :|*.*.*|) |UIOP/PATHNAME|::|*WILD-FILE*|)
   ((|COMMON-LISP|::|EQL| :|IMPLEMENTATION|)
    (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING|
     (|UIOP/OS|::|IMPLEMENTATION-IDENTIFIER|) :|ENSURE-DIRECTORY|
     |COMMON-LISP|::|T|))
   ((|COMMON-LISP|::|EQL| :|IMPLEMENTATION-TYPE|)
    (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING|
     (|COMMON-LISP|::|STRING-DOWNCASE| (|UIOP/OS|::|IMPLEMENTATION-TYPE|))
     :|ENSURE-DIRECTORY| |COMMON-LISP|::|T|))
   ((|COMMON-LISP|::|EQL| :|HOSTNAME|)
    (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING| (|UIOP/OS|::|HOSTNAME|)
     :|ENSURE-DIRECTORY| |COMMON-LISP|::|T|)))
  :|WILDEN|
  (|COMMON-LISP|::|AND| |UIOP/PATHNAME|::|WILDEN|
   (|COMMON-LISP|::|NOT|
    (|COMMON-LISP|::|PATHNAMEP| |UIOP/CONFIGURATION|::|X|))
   (|COMMON-LISP|::|NOT|
    (|COMMON-LISP|::|MEMBER| |UIOP/CONFIGURATION|::|X|
     '(:|*/| :|**/| :|*.*.*|))))
  :|WANT-RELATIVE| |COMMON-LISP|::|T|))
(|COMMON-LISP|::|DEFVAR| |UIOP/CONFIGURATION|::|*HERE-DIRECTORY*|
 |COMMON-LISP|::|NIL|
 "This special variable is bound to the currect directory during calls to\n
PROCESS-SOURCE-REGISTRY in order that we be able to interpret the :here\n
directive.")
(|COMMON-LISP|::|DEFVAR| |UIOP/CONFIGURATION|::|*USER-CACHE*|
 |COMMON-LISP|::|NIL|
 "A specification as per RESOLVE-LOCATION of where the user keeps his FASL cache")
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
 (|UIOP/CONFIGURATION|::|X| |COMMON-LISP|::|&KEY|
  |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY| |UIOP/PATHNAME|::|WILDEN|)
 "Given a designator X for an absolute location, resolve it to a pathname"
 (|UIOP/PATHNAME|::|ENSURE-PATHNAME|
  (|COMMON-LISP|::|ETYPECASE| |UIOP/CONFIGURATION|::|X|
   (|COMMON-LISP|::|NULL| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|PATHNAME| |UIOP/CONFIGURATION|::|X|)
   (|COMMON-LISP|::|STRING|
    (|COMMON-LISP|::|LET|
     ((|UIOP/CONFIGURATION|::|P|
       (|COMMON-LISP|::|PARSE-NAMESTRING| |UIOP/CONFIGURATION|::|X|)))
     (|COMMON-LISP|::|IF| |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY|
      (|UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME| |UIOP/CONFIGURATION|::|P|)
      |UIOP/CONFIGURATION|::|P|)))
   (|COMMON-LISP|::|CONS|
    (|COMMON-LISP|::|RETURN-FROM|
     |UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
     (|COMMON-LISP|::|IF|
      (|COMMON-LISP|::|NULL| (|COMMON-LISP|::|CDR| |UIOP/CONFIGURATION|::|X|))
      (|UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
       (|COMMON-LISP|::|CAR| |UIOP/CONFIGURATION|::|X|) :|ENSURE-DIRECTORY|
       |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY| :|WILDEN|
       |UIOP/PATHNAME|::|WILDEN|)
      (|UIOP/PATHNAME|::|MERGE-PATHNAMES*|
       (|UIOP/CONFIGURATION|::|RESOLVE-RELATIVE-LOCATION|
        (|COMMON-LISP|::|CDR| |UIOP/CONFIGURATION|::|X|) :|ENSURE-DIRECTORY|
        |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY| :|WILDEN|
        |UIOP/PATHNAME|::|WILDEN|)
       (|UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
        (|COMMON-LISP|::|CAR| |UIOP/CONFIGURATION|::|X|) :|ENSURE-DIRECTORY|
        |COMMON-LISP|::|T| :|WILDEN| |COMMON-LISP|::|NIL|)))))
   ((|COMMON-LISP|::|EQL| :|ROOT|)
    (|COMMON-LISP|::|RETURN-FROM|
     |UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
     (|COMMON-LISP|::|LET|
      ((|UIOP/CONFIGURATION|::|P|
        (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY| '(:|RELATIVE|))))
      (|COMMON-LISP|::|IF| |UIOP/PATHNAME|::|WILDEN|
       (|UIOP/PATHNAME|::|WILDEN| |UIOP/CONFIGURATION|::|P|)
       |UIOP/CONFIGURATION|::|P|))))
   ((|COMMON-LISP|::|EQL| :|HOME|) (|COMMON-LISP|::|USER-HOMEDIR-PATHNAME|))
   ((|COMMON-LISP|::|EQL| :|HERE|)
    (|UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
     (|COMMON-LISP|::|OR| |UIOP/CONFIGURATION|::|*HERE-DIRECTORY*|
      (|UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME|
       (|UIOP/LISP-BUILD|::|LOAD-PATHNAME|)))
     :|ENSURE-DIRECTORY| |COMMON-LISP|::|T| :|WILDEN| |COMMON-LISP|::|NIL|))
   ((|COMMON-LISP|::|EQL| :|USER-CACHE|)
    (|UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
     |UIOP/CONFIGURATION|::|*USER-CACHE*| :|ENSURE-DIRECTORY|
     |COMMON-LISP|::|T| :|WILDEN| |COMMON-LISP|::|NIL|)))
  :|WILDEN|
  (|COMMON-LISP|::|AND| |UIOP/PATHNAME|::|WILDEN|
   (|COMMON-LISP|::|NOT|
    (|COMMON-LISP|::|PATHNAMEP| |UIOP/CONFIGURATION|::|X|)))
  :|RESOLVE-SYMLINKS| |UIOP/FILESYSTEM|::|*RESOLVE-SYMLINKS*| :|WANT-ABSOLUTE|
  |COMMON-LISP|::|T|))
(|COMMON-LISP|::|DECLAIM|
 (|COMMON-LISP|::|FTYPE|
  (|COMMON-LISP|::|FUNCTION|
   (|COMMON-LISP|::|T| |COMMON-LISP|::|&KEY|
    (:|DIRECTORY| |COMMON-LISP|::|BOOLEAN|)
    (:|WILDEN| |COMMON-LISP|::|BOOLEAN|)
    (:|ENSURE-DIRECTORY| |COMMON-LISP|::|BOOLEAN|))
   |COMMON-LISP|::|T|)
  |UIOP/CONFIGURATION|::|RESOLVE-LOCATION|))
(|UIOP/UTILITY|::|DEFUN*| (|UIOP/CONFIGURATION|::|RESOLVE-LOCATION|)
 (|UIOP/CONFIGURATION|::|X| |COMMON-LISP|::|&KEY|
  |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY| |UIOP/PATHNAME|::|WILDEN|
  |COMMON-LISP|::|DIRECTORY|)
 "Resolve location designator X into a PATHNAME"
 (|UIOP/COMMON-LISP|::|LOOP*| :|WITH| |UIOP/CONFIGURATION|::|DIRP|
  |COMMON-LISP|::|=|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|DIRECTORY|
   |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY|)
  :|WITH| (|COMMON-LISP|::|FIRST| . |COMMON-LISP|::|REST|) |COMMON-LISP|::|=|
  (|COMMON-LISP|::|IF| (|COMMON-LISP|::|ATOM| |UIOP/CONFIGURATION|::|X|)
   (|COMMON-LISP|::|LIST| |UIOP/CONFIGURATION|::|X|) |UIOP/CONFIGURATION|::|X|)
  :|WITH| |UIOP/CONFIGURATION|::|PATH| |COMMON-LISP|::|=|
  (|COMMON-LISP|::|OR|
   (|UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION| |COMMON-LISP|::|FIRST|
    :|ENSURE-DIRECTORY|
    (|COMMON-LISP|::|AND|
     (|COMMON-LISP|::|OR| |UIOP/CONFIGURATION|::|DIRP| |COMMON-LISP|::|REST|)
     |COMMON-LISP|::|T|)
    :|WILDEN|
    (|COMMON-LISP|::|AND| |UIOP/PATHNAME|::|WILDEN|
     (|COMMON-LISP|::|NULL| |COMMON-LISP|::|REST|)))
   (|COMMON-LISP|::|RETURN| |COMMON-LISP|::|NIL|))
  :|FOR| (|UIOP/CONFIGURATION|::|ELEMENT| . |UIOP/CONFIGURATION|::|MOREP|)
  :|ON| |COMMON-LISP|::|REST| :|FOR| |UIOP/CONFIGURATION|::|DIR|
  |COMMON-LISP|::|=|
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|OR| |UIOP/CONFIGURATION|::|MOREP|
    |UIOP/CONFIGURATION|::|DIRP|)
   |COMMON-LISP|::|T|)
  :|FOR| |UIOP/CONFIGURATION|::|WILD| |COMMON-LISP|::|=|
  (|COMMON-LISP|::|AND| |UIOP/PATHNAME|::|WILDEN|
   (|COMMON-LISP|::|NOT| |UIOP/CONFIGURATION|::|MOREP|))
  :|FOR| |UIOP/CONFIGURATION|::|SUB| |COMMON-LISP|::|=|
  (|UIOP/PATHNAME|::|MERGE-PATHNAMES*|
   (|UIOP/CONFIGURATION|::|RESOLVE-RELATIVE-LOCATION|
    |UIOP/CONFIGURATION|::|ELEMENT| :|ENSURE-DIRECTORY|
    |UIOP/CONFIGURATION|::|DIR| :|WILDEN| |UIOP/CONFIGURATION|::|WILD|)
   |UIOP/CONFIGURATION|::|PATH|)
  :|DO|
  (|COMMON-LISP|::|SETF| |UIOP/CONFIGURATION|::|PATH|
   (|COMMON-LISP|::|IF|
    (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |UIOP/CONFIGURATION|::|SUB|)
    (|UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS*| |UIOP/CONFIGURATION|::|SUB|)
    |UIOP/CONFIGURATION|::|SUB|))
  :|FINALLY| (|COMMON-LISP|::|RETURN| |UIOP/CONFIGURATION|::|PATH|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|LOCATION-DESIGNATOR-P|
 (|UIOP/CONFIGURATION|::|X|) "Is X a designator for a location?"
 (|COMMON-LISP|::|FLET|
  ((|UIOP/CONFIGURATION|::|ABSOLUTE-COMPONENT-P| (|UIOP/CONFIGURATION|::|C|)
    (|COMMON-LISP|::|TYPEP| |UIOP/CONFIGURATION|::|C|
     '(|COMMON-LISP|::|OR| |COMMON-LISP|::|STRING| |COMMON-LISP|::|PATHNAME|
       (|COMMON-LISP|::|MEMBER| :|ROOT| :|HOME| :|HERE| :|USER-CACHE|))))
   (|UIOP/CONFIGURATION|::|RELATIVE-COMPONENT-P| (|UIOP/CONFIGURATION|::|C|)
    (|COMMON-LISP|::|TYPEP| |UIOP/CONFIGURATION|::|C|
     '(|COMMON-LISP|::|OR| |COMMON-LISP|::|STRING| |COMMON-LISP|::|PATHNAME|
       (|COMMON-LISP|::|MEMBER| :|*/| :|**/| :|*.*.*| :|IMPLEMENTATION|
        :|IMPLEMENTATION-TYPE|)))))
  (|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|TYPEP| |UIOP/CONFIGURATION|::|X| '|COMMON-LISP|::|BOOLEAN|)
   (|UIOP/CONFIGURATION|::|ABSOLUTE-COMPONENT-P| |UIOP/CONFIGURATION|::|X|)
   (|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |UIOP/CONFIGURATION|::|X|)
    (|UIOP/CONFIGURATION|::|ABSOLUTE-COMPONENT-P|
     (|COMMON-LISP|::|FIRST| |UIOP/CONFIGURATION|::|X|))
    (|COMMON-LISP|::|EVERY| #'|UIOP/CONFIGURATION|::|RELATIVE-COMPONENT-P|
     (|COMMON-LISP|::|REST| |UIOP/CONFIGURATION|::|X|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|LOCATION-FUNCTION-P|
 (|UIOP/CONFIGURATION|::|X|) "Is X the specification of a location function?"
 (|COMMON-LISP|::|AND|
  (|UIOP/UTILITY|::|LENGTH=N-P| |UIOP/CONFIGURATION|::|X| 2.)
  (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|CAR| |UIOP/CONFIGURATION|::|X|)
   :|FUNCTION|)))
(|COMMON-LISP|::|DEFVAR| |UIOP/CONFIGURATION|::|*CLEAR-CONFIGURATION-HOOK*|
 '|COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*|
 |UIOP/CONFIGURATION|::|REGISTER-CLEAR-CONFIGURATION-HOOK|
 (|UIOP/CONFIGURATION|::|HOOK-FUNCTION| |COMMON-LISP|::|&OPTIONAL|
  |UIOP/CONFIGURATION|::|CALL-NOW-P|)
 "Register a function to be called when clearing configuration"
 (|UIOP/UTILITY|::|REGISTER-HOOK-FUNCTION|
  '|UIOP/CONFIGURATION|::|*CLEAR-CONFIGURATION-HOOK*|
  |UIOP/CONFIGURATION|::|HOOK-FUNCTION| |UIOP/CONFIGURATION|::|CALL-NOW-P|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|CLEAR-CONFIGURATION|
 |COMMON-LISP|::|NIL| "Call the functions in *CLEAR-CONFIGURATION-HOOK*"
 (|UIOP/UTILITY|::|CALL-FUNCTIONS|
  |UIOP/CONFIGURATION|::|*CLEAR-CONFIGURATION-HOOK*|))
(|UIOP/IMAGE|::|REGISTER-IMAGE-DUMP-HOOK|
 '|UIOP/CONFIGURATION|::|CLEAR-CONFIGURATION|)
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|UPGRADE-CONFIGURATION|
 |COMMON-LISP|::|NIL|
 "If a previous version of ASDF failed to read some configuration, try again now."
 (|COMMON-LISP|::|WHEN| |UIOP/CONFIGURATION|::|*IGNORED-CONFIGURATION-FORM*|
  (|UIOP/CONFIGURATION|::|CLEAR-CONFIGURATION|)
  (|COMMON-LISP|::|SETF| |UIOP/CONFIGURATION|::|*IGNORED-CONFIGURATION-FORM*|
   |COMMON-LISP|::|NIL|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|GET-FOLDER-PATH|
 (|UIOP/CONFIGURATION|::|FOLDER|)
 "Semi-portable implementation of a subset of LispWorks' sys:get-folder-path,\n
this function tries to locate the Windows FOLDER for one of\n
:LOCAL-APPDATA, :APPDATA or :COMMON-APPDATA.\n
     Returns NIL when the folder is not defined (e.g., not on Windows)."
 (|COMMON-LISP|::|OR|
  (|COMMON-LISP|::|ECASE| |UIOP/CONFIGURATION|::|FOLDER|
   (:|LOCAL-APPDATA|
    (|COMMON-LISP|::|OR|
     (|UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORY| "LOCALAPPDATA")
     (|UIOP/PATHNAME|::|SUBPATHNAME*|
      (|UIOP/CONFIGURATION|::|GET-FOLDER-PATH| :|APPDATA|) "Local")))
   (:|APPDATA| (|UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORY| "APPDATA"))
   (:|COMMON-APPDATA|
    (|COMMON-LISP|::|OR|
     (|UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORY| "ALLUSERSAPPDATA")
     (|UIOP/PATHNAME|::|SUBPATHNAME*|
      (|UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORY| "ALLUSERSPROFILE")
      "Application Data/"))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|XDG-DATA-HOME|
 (|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)
 "Returns an absolute pathname for the directory containing user-specific data files.\n
MORE may contain specifications for a subpath relative to this directory: a\n
subpathname specification and keyword arguments as per RESOLVE-LOCATION (see\n
also \"Configuration DSL\") in the ASDF manual."
 (|UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
  `(,(|COMMON-LISP|::|OR|
      (|UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORY| "XDG_DATA_HOME")
      (|UIOP/OS|::|OS-COND|
       ((|UIOP/OS|::|OS-WINDOWS-P|)
        (|UIOP/CONFIGURATION|::|GET-FOLDER-PATH| :|LOCAL-APPDATA|))
       (|COMMON-LISP|::|T|
        (|UIOP/PATHNAME|::|SUBPATHNAME|
         (|COMMON-LISP|::|USER-HOMEDIR-PATHNAME|) ".local/share/"))))
    ,|UIOP/CONFIGURATION|::|MORE|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|XDG-CONFIG-HOME|
 (|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)
 "Returns a pathname for the directory containing user-specific configuration files.\n
MORE may contain specifications for a subpath relative to this directory: a\n
subpathname specification and keyword arguments as per RESOLVE-LOCATION (see\n
also \"Configuration DSL\") in the ASDF manual."
 (|UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
  `(,(|COMMON-LISP|::|OR|
      (|UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORY| "XDG_CONFIG_HOME")
      (|UIOP/OS|::|OS-COND|
       ((|UIOP/OS|::|OS-WINDOWS-P|)
        (|UIOP/CONFIGURATION|::|XDG-DATA-HOME| "config/"))
       (|COMMON-LISP|::|T|
        (|UIOP/PATHNAME|::|SUBPATHNAME|
         (|COMMON-LISP|::|USER-HOMEDIR-PATHNAME|) ".config/"))))
    ,|UIOP/CONFIGURATION|::|MORE|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|XDG-DATA-DIRS|
 (|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)
 "The preference-ordered set of additional paths to search for data files.\n
Returns a list of absolute directory pathnames.\n
MORE may contain specifications for a subpath relative to these directories: a\n
subpathname specification and keyword arguments as per RESOLVE-LOCATION (see\n
also \"Configuration DSL\") in the ASDF manual."
 (|COMMON-LISP|::|MAPCAR|
  #'(|COMMON-LISP|::|LAMBDA| (|UIOP/CONFIGURATION|::|D|)
     (|UIOP/CONFIGURATION|::|RESOLVE-LOCATION|
      `(,|UIOP/CONFIGURATION|::|D| ,|UIOP/CONFIGURATION|::|MORE|)))
  (|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|REMOVE| |COMMON-LISP|::|NIL|
    (|UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORIES| "XDG_DATA_DIRS"))
   (|UIOP/OS|::|OS-COND|
    ((|UIOP/OS|::|OS-WINDOWS-P|)
     (|COMMON-LISP|::|MAPCAR| '|UIOP/CONFIGURATION|::|GET-FOLDER-PATH|
      '(:|APPDATA| :|COMMON-APPDATA|)))
    (|COMMON-LISP|::|T|
     (|COMMON-LISP|::|MAPCAR| '|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING|
      '("/usr/local/share/" "/usr/share/")))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|XDG-CONFIG-DIRS|
 (|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)
 "The preference-ordered set of additional base paths to search for configuration files.\n
Returns a list of absolute directory pathnames.\n
MORE may contain specifications for a subpath relative to these directories:\n
subpathname specification and keyword arguments as per RESOLVE-LOCATION (see\n
also \"Configuration DSL\") in the ASDF manual."
 (|COMMON-LISP|::|MAPCAR|
  #'(|COMMON-LISP|::|LAMBDA| (|UIOP/CONFIGURATION|::|D|)
     (|UIOP/CONFIGURATION|::|RESOLVE-LOCATION|
      `(,|UIOP/CONFIGURATION|::|D| ,|UIOP/CONFIGURATION|::|MORE|)))
  (|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|REMOVE| |COMMON-LISP|::|NIL|
    (|UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORIES| "XDG_CONFIG_DIRS"))
   (|UIOP/OS|::|OS-COND|
    ((|UIOP/OS|::|OS-WINDOWS-P|)
     (|UIOP/CONFIGURATION|::|XDG-DATA-DIRS| "config/"))
    (|COMMON-LISP|::|T|
     (|COMMON-LISP|::|MAPCAR| '|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING|
      '("/etc/xdg/")))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|XDG-CACHE-HOME|
 (|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)
 "The base directory relative to which user specific non-essential data files should be stored.\n
Returns an absolute directory pathname.\n
MORE may contain specifications for a subpath relative to this directory: a\n
subpathname specification and keyword arguments as per RESOLVE-LOCATION (see\n
also \"Configuration DSL\") in the ASDF manual."
 (|UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
  `(,(|COMMON-LISP|::|OR|
      (|UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORY| "XDG_CACHE_HOME")
      (|UIOP/OS|::|OS-COND|
       ((|UIOP/OS|::|OS-WINDOWS-P|)
        (|UIOP/CONFIGURATION|::|XDG-DATA-HOME| "cache/"))
       (|COMMON-LISP|::|T|
        (|UIOP/PATHNAME|::|SUBPATHNAME*|
         (|COMMON-LISP|::|USER-HOMEDIR-PATHNAME|) ".cache/"))))
    ,|UIOP/CONFIGURATION|::|MORE|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|XDG-RUNTIME-DIR|
 (|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)
 "Pathname for user-specific non-essential runtime files and other file objects,\n
such as sockets, named pipes, etc.\n
Returns an absolute directory pathname.\n
MORE may contain specifications for a subpath relative to this directory: a\n
subpathname specification and keyword arguments as per RESOLVE-LOCATION (see\n
also \"Configuration DSL\") in the ASDF manual."
 (|UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
  `(,(|UIOP/FILESYSTEM|::|GETENV-ABSOLUTE-DIRECTORY| "XDG_RUNTIME_DIR")
    ,|UIOP/CONFIGURATION|::|MORE|)))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|SYSTEM-CONFIG-PATHNAMES|
 (|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)
 "Return a list of directories where are stored the system's default user configuration information.\n
MORE may contain specifications for a subpath relative to these directories: a\n
subpathname specification and keyword arguments as per RESOLVE-LOCATION (see\n
also \"Configuration DSL\") in the ASDF manual."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |UIOP/CONFIGURATION|::|MORE|))
 (|UIOP/OS|::|OS-COND|
  ((|UIOP/OS|::|OS-UNIX-P|)
   (|COMMON-LISP|::|LIST|
    (|UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
     `(,(|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING| "/etc/")
       ,|UIOP/CONFIGURATION|::|MORE|))))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|FILTER-PATHNAME-SET|
 (|UIOP/CONFIGURATION|::|DIRS|)
 "Parse strings as unix namestrings and remove duplicates and non absolute-pathnames in a list."
 (|COMMON-LISP|::|REMOVE-DUPLICATES|
  (|COMMON-LISP|::|REMOVE-IF-NOT| #'|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P|
   |UIOP/CONFIGURATION|::|DIRS|)
  :|FROM-END| |COMMON-LISP|::|T| :|TEST| '|COMMON-LISP|::|EQUAL|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|XDG-DATA-PATHNAMES|
 (|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)
 "Return a list of absolute pathnames for application data directories.  With APP,\n
returns directory for data for that application, without APP, returns the set of directories\n
for storing all application configurations.\n
MORE may contain specifications for a subpath relative to these directories: a\n
subpathname specification and keyword arguments as per RESOLVE-LOCATION (see\n
also \"Configuration DSL\") in the ASDF manual."
 (|UIOP/CONFIGURATION|::|FILTER-PATHNAME-SET|
  `(,(|UIOP/CONFIGURATION|::|XDG-DATA-HOME| |UIOP/CONFIGURATION|::|MORE|)
    ,@(|UIOP/CONFIGURATION|::|XDG-DATA-DIRS| |UIOP/CONFIGURATION|::|MORE|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAMES|
 (|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)
 "Return a list of pathnames for application configuration.\n
MORE may contain specifications for a subpath relative to these directories: a\n
subpathname specification and keyword arguments as per RESOLVE-LOCATION (see\n
also \"Configuration DSL\") in the ASDF manual."
 (|UIOP/CONFIGURATION|::|FILTER-PATHNAME-SET|
  `(,(|UIOP/CONFIGURATION|::|XDG-CONFIG-HOME| |UIOP/CONFIGURATION|::|MORE|)
    ,@(|UIOP/CONFIGURATION|::|XDG-CONFIG-DIRS| |UIOP/CONFIGURATION|::|MORE|))))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|
 (|UIOP/CONFIGURATION|::|FILES| |COMMON-LISP|::|&KEY|
  (|UIOP/CONFIGURATION|::|DIRECTION| :|INPUT|))
 "Find first file in the list of FILES that exists (for direction :input or :probe)\n
or just the first one (for direction :output or :io).\n
    Note that when we say \"file\" here, the files in question may be directories."
 (|COMMON-LISP|::|FIND-IF|
  (|COMMON-LISP|::|ECASE| |UIOP/CONFIGURATION|::|DIRECTION|
   ((:|PROBE| :|INPUT|) '|UIOP/FILESYSTEM|::|PROBE-FILE*|)
   ((:|OUTPUT| :|IO|) '|COMMON-LISP|::|IDENTITY|))
  |UIOP/CONFIGURATION|::|FILES|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|XDG-DATA-PATHNAME|
 (|COMMON-LISP|::|&OPTIONAL| |UIOP/CONFIGURATION|::|MORE|
  (|UIOP/CONFIGURATION|::|DIRECTION| :|INPUT|))
 (|UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|
  (|UIOP/CONFIGURATION|::|XDG-DATA-PATHNAMES| |UIOP/CONFIGURATION|::|MORE|)
  :|DIRECTION| |UIOP/CONFIGURATION|::|DIRECTION|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAME|
 (|COMMON-LISP|::|&OPTIONAL| |UIOP/CONFIGURATION|::|MORE|
  (|UIOP/CONFIGURATION|::|DIRECTION| :|INPUT|))
 (|UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|
  (|UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAMES| |UIOP/CONFIGURATION|::|MORE|)
  :|DIRECTION| |UIOP/CONFIGURATION|::|DIRECTION|))
(|UIOP/UTILITY|::|DEFUN*| |UIOP/CONFIGURATION|::|COMPUTE-USER-CACHE|
 |COMMON-LISP|::|NIL|
 "Compute (and return) the location of the default user-cache for translate-output\n
objects. Side-effects for cached file location computation."
 (|COMMON-LISP|::|SETF| |UIOP/CONFIGURATION|::|*USER-CACHE*|
  (|UIOP/CONFIGURATION|::|XDG-CACHE-HOME| "common-lisp" :|IMPLEMENTATION|)))
(|UIOP/IMAGE|::|REGISTER-IMAGE-RESTORE-HOOK|
 '|UIOP/CONFIGURATION|::|COMPUTE-USER-CACHE|)
(|COMMON-LISP|::|LET*| ((#1=#:|G20868| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|UIOP/CONFIGURATION|::|INVALID-CONFIGURATION| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|CONDITION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/CONFIGURATION|::|FORM| :|READERS|
    '(|UIOP/CONFIGURATION|::|CONDITION-FORM|) :|INITARGS| '(:|FORM|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/CONFIGURATION|::|LOCATION| :|READERS|
    '(|UIOP/CONFIGURATION|::|CONDITION-LOCATION|) :|INITARGS| '(:|LOCATION|))
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|FORMAT| :|READERS|
    '(|UIOP/CONFIGURATION|::|CONDITION-FORMAT|) :|INITARGS| '(:|FORMAT|))
   (|COMMON-LISP|::|LIST| :|NAME| '|UIOP/CONFIGURATION|::|ARGUMENTS| :|READERS|
    '(|UIOP/CONFIGURATION|::|CONDITION-ARGUMENTS|) :|INITARGS| '(:|ARGUMENTS|)
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|CONDITION-FORM|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|CONDITION-LOCATION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|CONDITION-FORMAT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|CONDITION-ARGUMENTS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/CONFIGURATION|::|CONFIGURATION-INHERITANCE-DIRECTIVE-P|))
(|SYSTEM|::|C-DEFUN|
 '|UIOP/CONFIGURATION|::|CONFIGURATION-INHERITANCE-DIRECTIVE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/CONFIGURATION|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|REPORT-INVALID-FORM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|REPORT-INVALID-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/CONFIGURATION|::|REPORTER| |COMMON-LISP|::|&REST|
    |UIOP/CONFIGURATION|::|ARGS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/CONFIGURATION|::|*IGNORED-CONFIGURATION-FORM*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-FORM|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/CONFIGURATION|::|FORM| |UIOP/CONFIGURATION|::|TAG|
    |UIOP/CONFIGURATION|::|DIRECTIVE-VALIDATOR| |COMMON-LISP|::|&KEY|
    |UIOP/CONFIGURATION|::|LOCATION|
    |UIOP/CONFIGURATION|::|INVALID-FORM-REPORTER|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-FILE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-FILE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/CONFIGURATION|::|FILE| |UIOP/CONFIGURATION|::|VALIDATOR|
    |COMMON-LISP|::|&KEY| |UIOP/CONFIGURATION|::|DESCRIPTION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|DIRECTORY| |UIOP/CONFIGURATION|::|TAG|
    |UIOP/CONFIGURATION|::|VALIDATOR| |COMMON-LISP|::|&KEY|
    |UIOP/CONFIGURATION|::|INVALID-FORM-REPORTER|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/CONFIGURATION|::|RESOLVE-RELATIVE-LOCATION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|RESOLVE-RELATIVE-LOCATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/CONFIGURATION|::|X| |COMMON-LISP|::|&KEY|
    |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY| |UIOP/PATHNAME|::|WILDEN|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/CONFIGURATION|::|*HERE-DIRECTORY*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |UIOP/CONFIGURATION|::|*USER-CACHE*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|RESOLVE-ABSOLUTE-LOCATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/CONFIGURATION|::|X| |COMMON-LISP|::|&KEY|
    |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY| |UIOP/PATHNAME|::|WILDEN|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|FTYPE|
   (|COMMON-LISP|::|FUNCTION|
    (|COMMON-LISP|::|T| |COMMON-LISP|::|&KEY|
     (:|DIRECTORY| |COMMON-LISP|::|BOOLEAN|)
     (:|WILDEN| |COMMON-LISP|::|BOOLEAN|)
     (:|ENSURE-DIRECTORY| |COMMON-LISP|::|BOOLEAN|))
    |COMMON-LISP|::|T|)
   |UIOP/CONFIGURATION|::|RESOLVE-LOCATION|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|RESOLVE-LOCATION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|RESOLVE-LOCATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/CONFIGURATION|::|X| |COMMON-LISP|::|&KEY|
    |UIOP/CONFIGURATION|::|ENSURE-DIRECTORY| |UIOP/PATHNAME|::|WILDEN|
    |COMMON-LISP|::|DIRECTORY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|LOCATION-DESIGNATOR-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|LOCATION-DESIGNATOR-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/CONFIGURATION|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|LOCATION-FUNCTION-P|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|LOCATION-FUNCTION-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/CONFIGURATION|::|X|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/CONFIGURATION|::|*CLEAR-CONFIGURATION-HOOK*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |UIOP/CONFIGURATION|::|REGISTER-CLEAR-CONFIGURATION-HOOK|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|REGISTER-CLEAR-CONFIGURATION-HOOK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/CONFIGURATION|::|HOOK-FUNCTION| |COMMON-LISP|::|&OPTIONAL|
    |UIOP/CONFIGURATION|::|CALL-NOW-P|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|CLEAR-CONFIGURATION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|CLEAR-CONFIGURATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|UPGRADE-CONFIGURATION|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|UPGRADE-CONFIGURATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|GET-FOLDER-PATH|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|GET-FOLDER-PATH|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/CONFIGURATION|::|FOLDER|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|XDG-DATA-HOME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|XDG-DATA-HOME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|XDG-CONFIG-HOME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|XDG-CONFIG-HOME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|XDG-DATA-DIRS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|XDG-DATA-DIRS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|XDG-CONFIG-DIRS|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|XDG-CONFIG-DIRS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|XDG-CACHE-HOME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|XDG-CACHE-HOME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|XDG-RUNTIME-DIR|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|XDG-RUNTIME-DIR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|SYSTEM-CONFIG-PATHNAMES|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|SYSTEM-CONFIG-PATHNAMES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|FILTER-PATHNAME-SET|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|FILTER-PATHNAME-SET|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|UIOP/CONFIGURATION|::|DIRS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|XDG-DATA-PATHNAMES|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|XDG-DATA-PATHNAMES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAMES|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAMES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |UIOP/CONFIGURATION|::|MORE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|UIOP/CONFIGURATION|::|FILES| |COMMON-LISP|::|&KEY|
    (|UIOP/CONFIGURATION|::|DIRECTION| :|INPUT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|XDG-DATA-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|XDG-DATA-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL| |UIOP/CONFIGURATION|::|MORE|
    (|UIOP/CONFIGURATION|::|DIRECTION| :|INPUT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL| |UIOP/CONFIGURATION|::|MORE|
    (|UIOP/CONFIGURATION|::|DIRECTION| :|INPUT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |UIOP/CONFIGURATION|::|COMPUTE-USER-CACHE|))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|COMPUTE-USER-CACHE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|UIOP/BACKWARD-DRIVER| :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP/PACKAGE| :|UIOP/UTILITY| :|UIOP/VERSION|
    :|UIOP/PATHNAME| :|UIOP/STREAM| :|UIOP/OS| :|UIOP/IMAGE|
    :|UIOP/RUN-PROGRAM| :|UIOP/LISP-BUILD| :|UIOP/CONFIGURATION|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|COERCE-PATHNAME| #:|USER-CONFIGURATION-DIRECTORIES|
    #:|SYSTEM-CONFIGURATION-DIRECTORIES| #:|IN-FIRST-DIRECTORY|
    #:|IN-USER-CONFIGURATION-DIRECTORY| #:|IN-SYSTEM-CONFIGURATION-DIRECTORY|
    #:|VERSION-COMPATIBLE-P|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|UIOP/BACKWARD-DRIVER| :|ASDF/BACKWARD-DRIVER| :|UIOP|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "UIOP/BACKWARD-DRIVER"))
(|UIOP/VERSION|::|WITH-DEPRECATION|
 ((|UIOP/VERSION|::|VERSION-DEPRECATION| |UIOP/VERSION|::|*UIOP-VERSION*|
   :|STYLE-WARNING| "3.2" :|WARNING| "3.4"))
 (|COMMON-LISP|::|DEFUN| |UIOP/BACKWARD-DRIVER|::|COERCE-PATHNAME|
  (|UIOP/BACKWARD-DRIVER|::|NAME| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|TYPE|
   |UIOP/BACKWARD-DRIVER|::|DEFAULTS|)
  "DEPRECATED. Please use UIOP:PARSE-UNIX-NAMESTRING instead."
  (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING| |UIOP/BACKWARD-DRIVER|::|NAME|
   :|TYPE| |COMMON-LISP|::|TYPE| :|DEFAULTS|
   |UIOP/BACKWARD-DRIVER|::|DEFAULTS|))
 (|COMMON-LISP|::|DEFUN| |UIOP/CONFIGURATION|::|USER-CONFIGURATION-DIRECTORIES|
  |COMMON-LISP|::|NIL|
  "Return the current user's list of user configuration directories\n
for configuring common-lisp.\n
DEPRECATED. Use UIOP:XDG-CONFIG-PATHNAMES instead."
  (|UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAMES| "common-lisp"))
 (|COMMON-LISP|::|DEFUN|
  |UIOP/CONFIGURATION|::|SYSTEM-CONFIGURATION-DIRECTORIES| |COMMON-LISP|::|NIL|
  "Return the list of system configuration directories for common-lisp.\n
DEPRECATED. Use UIOP:CONFIG-SYSTEM-PATHNAMES instead."
  (|UIOP/CONFIGURATION|::|SYSTEM-CONFIG-PATHNAMES| "common-lisp"))
 (|COMMON-LISP|::|DEFUN| |UIOP/CONFIGURATION|::|IN-FIRST-DIRECTORY|
  (|UIOP/BACKWARD-DRIVER|::|DIRS| |UIOP/BACKWARD-DRIVER|::|X|
   |COMMON-LISP|::|&KEY| (|UIOP/BACKWARD-DRIVER|::|DIRECTION| :|INPUT|))
  "Finds the first appropriate file named X in the list of DIRS for I/O\n
in DIRECTION (which may be :INPUT, :OUTPUT, :IO, or :PROBE).\n
If direction is :INPUT or :PROBE, will return the first extant file named\n
X in one of the DIRS.\n
If direction is :OUTPUT or :IO, will simply return the file named X in the\n
first element of DIRS that exists. DEPRECATED."
  (|UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|
   (|COMMON-LISP|::|MAPCAR|
    #'(|COMMON-LISP|::|LAMBDA| (|UIOP/BACKWARD-DRIVER|::|DIR|)
       (|UIOP/PATHNAME|::|SUBPATHNAME|
        (|UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME|
         |UIOP/BACKWARD-DRIVER|::|DIR|)
        |UIOP/BACKWARD-DRIVER|::|X|))
    |UIOP/BACKWARD-DRIVER|::|DIRS|)
   :|DIRECTION| |UIOP/BACKWARD-DRIVER|::|DIRECTION|))
 (|COMMON-LISP|::|DEFUN|
  |UIOP/CONFIGURATION|::|IN-USER-CONFIGURATION-DIRECTORY|
  (|UIOP/BACKWARD-DRIVER|::|X| |COMMON-LISP|::|&KEY|
   (|UIOP/BACKWARD-DRIVER|::|DIRECTION| :|INPUT|))
  "Return the file named X in the user configuration directory for common-lisp.\n
DEPRECATED."
  (|UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAME|
   `("common-lisp" ,|UIOP/BACKWARD-DRIVER|::|X|)
   |UIOP/BACKWARD-DRIVER|::|DIRECTION|))
 (|COMMON-LISP|::|DEFUN|
  |UIOP/CONFIGURATION|::|IN-SYSTEM-CONFIGURATION-DIRECTORY|
  (|UIOP/BACKWARD-DRIVER|::|X| |COMMON-LISP|::|&KEY|
   (|UIOP/BACKWARD-DRIVER|::|DIRECTION| :|INPUT|))
  "Return the pathname for the file named X under the system configuration directory\n
for common-lisp. DEPRECATED."
  (|UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|
   (|UIOP/CONFIGURATION|::|SYSTEM-CONFIG-PATHNAMES| "common-lisp"
    |UIOP/BACKWARD-DRIVER|::|X|)
   :|DIRECTION| |UIOP/BACKWARD-DRIVER|::|DIRECTION|))
 (|COMMON-LISP|::|DEFUN| |UIOP/BACKWARD-DRIVER|::|VERSION-COMPATIBLE-P|
  (|UIOP/BACKWARD-DRIVER|::|PROVIDED-VERSION|
   |UIOP/BACKWARD-DRIVER|::|REQUIRED-VERSION|)
  "Is the provided version a compatible substitution for the required-version?\n
If major versions differ, it's not compatible.\n
If they are equal, then any later version is compatible,\n
with later being determined by a lexicographical comparison of minor numbers.\n
DEPRECATED."
  (|COMMON-LISP|::|LET|
   ((|UIOP/BACKWARD-DRIVER|::|X|
     (|UIOP/VERSION|::|PARSE-VERSION|
      |UIOP/BACKWARD-DRIVER|::|PROVIDED-VERSION| |COMMON-LISP|::|NIL|))
    (|UIOP/BACKWARD-DRIVER|::|Y|
     (|UIOP/VERSION|::|PARSE-VERSION|
      |UIOP/BACKWARD-DRIVER|::|REQUIRED-VERSION| |COMMON-LISP|::|NIL|)))
   (|COMMON-LISP|::|AND| |UIOP/BACKWARD-DRIVER|::|X|
    |UIOP/BACKWARD-DRIVER|::|Y|
    (|COMMON-LISP|::|=| (|COMMON-LISP|::|CAR| |UIOP/BACKWARD-DRIVER|::|X|)
     (|COMMON-LISP|::|CAR| |UIOP/BACKWARD-DRIVER|::|Y|))
    (|UIOP/UTILITY|::|LEXICOGRAPHIC<=| '|COMMON-LISP|::|<|
     (|COMMON-LISP|::|CDR| |UIOP/BACKWARD-DRIVER|::|Y|)
     (|COMMON-LISP|::|CDR| |UIOP/BACKWARD-DRIVER|::|X|))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-COERCE-PATHNAME-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| |UIOP/BACKWARD-DRIVER|::|COERCE-PATHNAME|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|UIOP/BACKWARD-DRIVER|::|COERCE-PATHNAME|)
 (|COMMON-LISP|::|FUNCTION| |UIOP/BACKWARD-DRIVER|::|COERCE-PATHNAME|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK| |UIOP/BACKWARD-DRIVER|::|COERCE-PATHNAME|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/BACKWARD-DRIVER|::|COERCE-PATHNAME|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|UIOP/BACKWARD-DRIVER|::|COERCE-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '#1=(|UIOP/BACKWARD-DRIVER|::|NAME| |COMMON-LISP|::|&KEY|
       |COMMON-LISP|::|TYPE| |UIOP/BACKWARD-DRIVER|::|DEFAULTS|))
 '(#1# "DEPRECATED. Please use UIOP:PARSE-UNIX-NAMESTRING instead."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN| |UIOP/BACKWARD-DRIVER|::|COERCE-PATHNAME|))
   (|COMMON-LISP|::|BLOCK| |UIOP/BACKWARD-DRIVER|::|COERCE-PATHNAME|
    (|COMMON-LISP|::|UNLESS|
     |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-COERCE-PATHNAME-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-COERCE-PATHNAME-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/BACKWARD-DRIVER|::|COERCE-PATHNAME|))
    (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING| |UIOP/BACKWARD-DRIVER|::|NAME|
     :|TYPE| |COMMON-LISP|::|TYPE| :|DEFAULTS|
     |UIOP/BACKWARD-DRIVER|::|DEFAULTS|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-USER-CONFIGURATION-DIRECTORIES-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE|
   |UIOP/CONFIGURATION|::|USER-CONFIGURATION-DIRECTORIES|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|UIOP/CONFIGURATION|::|USER-CONFIGURATION-DIRECTORIES|)
 (|COMMON-LISP|::|FUNCTION|
  |UIOP/CONFIGURATION|::|USER-CONFIGURATION-DIRECTORIES|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK|
     |UIOP/CONFIGURATION|::|USER-CONFIGURATION-DIRECTORIES|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/CONFIGURATION|::|USER-CONFIGURATION-DIRECTORIES|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|USER-CONFIGURATION-DIRECTORIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|)
 '(|COMMON-LISP|::|NIL|
   "Return the current user's list of user configuration directories\n
for configuring common-lisp.\n
DEPRECATED. Use UIOP:XDG-CONFIG-PATHNAMES instead."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN|
     |UIOP/CONFIGURATION|::|USER-CONFIGURATION-DIRECTORIES|))
   (|COMMON-LISP|::|BLOCK|
    |UIOP/CONFIGURATION|::|USER-CONFIGURATION-DIRECTORIES|
    (|COMMON-LISP|::|UNLESS|
     |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-USER-CONFIGURATION-DIRECTORIES-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-USER-CONFIGURATION-DIRECTORIES-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/CONFIGURATION|::|USER-CONFIGURATION-DIRECTORIES|))
    (|UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAMES| "common-lisp"))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-SYSTEM-CONFIGURATION-DIRECTORIES-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE|
   |UIOP/CONFIGURATION|::|SYSTEM-CONFIGURATION-DIRECTORIES|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|UIOP/CONFIGURATION|::|SYSTEM-CONFIGURATION-DIRECTORIES|)
 (|COMMON-LISP|::|FUNCTION|
  |UIOP/CONFIGURATION|::|SYSTEM-CONFIGURATION-DIRECTORIES|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK|
     |UIOP/CONFIGURATION|::|SYSTEM-CONFIGURATION-DIRECTORIES|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/CONFIGURATION|::|SYSTEM-CONFIGURATION-DIRECTORIES|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|SYSTEM-CONFIGURATION-DIRECTORIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|)
 '(|COMMON-LISP|::|NIL|
   "Return the list of system configuration directories for common-lisp.\n
DEPRECATED. Use UIOP:CONFIG-SYSTEM-PATHNAMES instead."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN|
     |UIOP/CONFIGURATION|::|SYSTEM-CONFIGURATION-DIRECTORIES|))
   (|COMMON-LISP|::|BLOCK|
    |UIOP/CONFIGURATION|::|SYSTEM-CONFIGURATION-DIRECTORIES|
    (|COMMON-LISP|::|UNLESS|
     |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-SYSTEM-CONFIGURATION-DIRECTORIES-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-SYSTEM-CONFIGURATION-DIRECTORIES-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/CONFIGURATION|::|SYSTEM-CONFIGURATION-DIRECTORIES|))
    (|UIOP/CONFIGURATION|::|SYSTEM-CONFIG-PATHNAMES| "common-lisp"))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-IN-FIRST-DIRECTORY-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| |UIOP/CONFIGURATION|::|IN-FIRST-DIRECTORY|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|UIOP/CONFIGURATION|::|IN-FIRST-DIRECTORY|)
 (|COMMON-LISP|::|FUNCTION| |UIOP/CONFIGURATION|::|IN-FIRST-DIRECTORY|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK| |UIOP/CONFIGURATION|::|IN-FIRST-DIRECTORY|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/CONFIGURATION|::|IN-FIRST-DIRECTORY|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|IN-FIRST-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '#1=(|UIOP/BACKWARD-DRIVER|::|DIRS| |UIOP/BACKWARD-DRIVER|::|X|
       |COMMON-LISP|::|&KEY| (|UIOP/BACKWARD-DRIVER|::|DIRECTION| :|INPUT|)))
 '(#1#
   "Finds the first appropriate file named X in the list of DIRS for I/O\n
in DIRECTION (which may be :INPUT, :OUTPUT, :IO, or :PROBE).\n
If direction is :INPUT or :PROBE, will return the first extant file named\n
X in one of the DIRS.\n
If direction is :OUTPUT or :IO, will simply return the file named X in the\n
first element of DIRS that exists. DEPRECATED."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN| |UIOP/CONFIGURATION|::|IN-FIRST-DIRECTORY|))
   (|COMMON-LISP|::|BLOCK| |UIOP/CONFIGURATION|::|IN-FIRST-DIRECTORY|
    (|COMMON-LISP|::|UNLESS|
     |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-IN-FIRST-DIRECTORY-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-IN-FIRST-DIRECTORY-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/CONFIGURATION|::|IN-FIRST-DIRECTORY|))
    (|UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|
     (|COMMON-LISP|::|MAPCAR|
      #'(|COMMON-LISP|::|LAMBDA| (|UIOP/BACKWARD-DRIVER|::|DIR|)
         (|UIOP/PATHNAME|::|SUBPATHNAME|
          (|UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME|
           |UIOP/BACKWARD-DRIVER|::|DIR|)
          |UIOP/BACKWARD-DRIVER|::|X|))
      |UIOP/BACKWARD-DRIVER|::|DIRS|)
     :|DIRECTION| |UIOP/BACKWARD-DRIVER|::|DIRECTION|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-IN-USER-CONFIGURATION-DIRECTORY-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE|
   |UIOP/CONFIGURATION|::|IN-USER-CONFIGURATION-DIRECTORY|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|UIOP/CONFIGURATION|::|IN-USER-CONFIGURATION-DIRECTORY|)
 (|COMMON-LISP|::|FUNCTION|
  |UIOP/CONFIGURATION|::|IN-USER-CONFIGURATION-DIRECTORY|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK|
     |UIOP/CONFIGURATION|::|IN-USER-CONFIGURATION-DIRECTORY|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/CONFIGURATION|::|IN-USER-CONFIGURATION-DIRECTORY|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|IN-USER-CONFIGURATION-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '#1=(|UIOP/BACKWARD-DRIVER|::|X| |COMMON-LISP|::|&KEY|
       (|UIOP/BACKWARD-DRIVER|::|DIRECTION| :|INPUT|)))
 '(#1#
   "Return the file named X in the user configuration directory for common-lisp.\n
DEPRECATED."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN|
     |UIOP/CONFIGURATION|::|IN-USER-CONFIGURATION-DIRECTORY|))
   (|COMMON-LISP|::|BLOCK|
    |UIOP/CONFIGURATION|::|IN-USER-CONFIGURATION-DIRECTORY|
    (|COMMON-LISP|::|UNLESS|
     |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-IN-USER-CONFIGURATION-DIRECTORY-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-IN-USER-CONFIGURATION-DIRECTORY-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/CONFIGURATION|::|IN-USER-CONFIGURATION-DIRECTORY|))
    (|UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAME|
     `("common-lisp" ,|UIOP/BACKWARD-DRIVER|::|X|)
     |UIOP/BACKWARD-DRIVER|::|DIRECTION|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-IN-SYSTEM-CONFIGURATION-DIRECTORY-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE|
   |UIOP/CONFIGURATION|::|IN-SYSTEM-CONFIGURATION-DIRECTORY|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|UIOP/CONFIGURATION|::|IN-SYSTEM-CONFIGURATION-DIRECTORY|)
 (|COMMON-LISP|::|FUNCTION|
  |UIOP/CONFIGURATION|::|IN-SYSTEM-CONFIGURATION-DIRECTORY|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK|
     |UIOP/CONFIGURATION|::|IN-SYSTEM-CONFIGURATION-DIRECTORY|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/CONFIGURATION|::|IN-SYSTEM-CONFIGURATION-DIRECTORY|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|UIOP/CONFIGURATION|::|IN-SYSTEM-CONFIGURATION-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '#1=(|UIOP/BACKWARD-DRIVER|::|X| |COMMON-LISP|::|&KEY|
       (|UIOP/BACKWARD-DRIVER|::|DIRECTION| :|INPUT|)))
 '(#1#
   "Return the pathname for the file named X under the system configuration directory\n
for common-lisp. DEPRECATED."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN|
     |UIOP/CONFIGURATION|::|IN-SYSTEM-CONFIGURATION-DIRECTORY|))
   (|COMMON-LISP|::|BLOCK|
    |UIOP/CONFIGURATION|::|IN-SYSTEM-CONFIGURATION-DIRECTORY|
    (|COMMON-LISP|::|UNLESS|
     |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-IN-SYSTEM-CONFIGURATION-DIRECTORY-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-IN-SYSTEM-CONFIGURATION-DIRECTORY-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/CONFIGURATION|::|IN-SYSTEM-CONFIGURATION-DIRECTORY|))
    (|UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|
     (|UIOP/CONFIGURATION|::|SYSTEM-CONFIG-PATHNAMES| "common-lisp"
      |UIOP/BACKWARD-DRIVER|::|X|)
     :|DIRECTION| |UIOP/BACKWARD-DRIVER|::|DIRECTION|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-VERSION-COMPATIBLE-P-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| |UIOP/BACKWARD-DRIVER|::|VERSION-COMPATIBLE-P|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|UIOP/BACKWARD-DRIVER|::|VERSION-COMPATIBLE-P|)
 (|COMMON-LISP|::|FUNCTION| |UIOP/BACKWARD-DRIVER|::|VERSION-COMPATIBLE-P|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK| |UIOP/BACKWARD-DRIVER|::|VERSION-COMPATIBLE-P|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/BACKWARD-DRIVER|::|VERSION-COMPATIBLE-P|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|UIOP/BACKWARD-DRIVER|::|VERSION-COMPATIBLE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '#1=(|UIOP/BACKWARD-DRIVER|::|PROVIDED-VERSION|
       |UIOP/BACKWARD-DRIVER|::|REQUIRED-VERSION|))
 '(#1#
   "Is the provided version a compatible substitution for the required-version?\n
If major versions differ, it's not compatible.\n
If they are equal, then any later version is compatible,\n
with later being determined by a lexicographical comparison of minor numbers.\n
DEPRECATED."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN| |UIOP/BACKWARD-DRIVER|::|VERSION-COMPATIBLE-P|))
   (|COMMON-LISP|::|BLOCK| |UIOP/BACKWARD-DRIVER|::|VERSION-COMPATIBLE-P|
    (|COMMON-LISP|::|UNLESS|
     |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-VERSION-COMPATIBLE-P-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |UIOP/BACKWARD-DRIVER|::|*DEPRECATED-FUNCTION-STYLE-WARNING-VERSION-COMPATIBLE-P-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|UIOP/BACKWARD-DRIVER|::|VERSION-COMPATIBLE-P|))
    (|COMMON-LISP|::|LET|
     ((|UIOP/BACKWARD-DRIVER|::|X|
       (|UIOP/VERSION|::|PARSE-VERSION|
        |UIOP/BACKWARD-DRIVER|::|PROVIDED-VERSION| |COMMON-LISP|::|NIL|))
      (|UIOP/BACKWARD-DRIVER|::|Y|
       (|UIOP/VERSION|::|PARSE-VERSION|
        |UIOP/BACKWARD-DRIVER|::|REQUIRED-VERSION| |COMMON-LISP|::|NIL|)))
     (|COMMON-LISP|::|AND| |UIOP/BACKWARD-DRIVER|::|X|
      |UIOP/BACKWARD-DRIVER|::|Y|
      (|COMMON-LISP|::|=| (|COMMON-LISP|::|CAR| |UIOP/BACKWARD-DRIVER|::|X|)
       (|COMMON-LISP|::|CAR| |UIOP/BACKWARD-DRIVER|::|Y|))
      (|UIOP/UTILITY|::|LEXICOGRAPHIC<=| '|COMMON-LISP|::|<|
       (|COMMON-LISP|::|CDR| |UIOP/BACKWARD-DRIVER|::|Y|)
       (|COMMON-LISP|::|CDR| |UIOP/BACKWARD-DRIVER|::|X|)))))))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|UIOP/DRIVER|
  :|NICKNAMES| '#1=(:|UIOP| :|ASDF/DRIVER|) :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP/PACKAGE| :|UIOP/UTILITY| :|UIOP/VERSION|
    :|UIOP/OS| :|UIOP/PATHNAME| :|UIOP/FILESYSTEM| :|UIOP/STREAM| :|UIOP/IMAGE|
    :|UIOP/LAUNCH-PROGRAM| :|UIOP/RUN-PROGRAM| :|UIOP/LISP-BUILD|
    :|UIOP/CONFIGURATION| :|UIOP/BACKWARD-DRIVER|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '|COMMON-LISP|::|NIL| :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|UIOP/DRIVER| . #1#) :|MIX| '|COMMON-LISP|::|NIL| :|REEXPORT|
  '(:|UIOP/PACKAGE| :|UIOP/UTILITY| :|UIOP/VERSION| :|UIOP/OS| :|UIOP/PATHNAME|
    :|UIOP/FILESYSTEM| :|UIOP/STREAM| :|UIOP/IMAGE| :|UIOP/LAUNCH-PROGRAM|
    :|UIOP/RUN-PROGRAM| :|UIOP/LISP-BUILD| :|UIOP/CONFIGURATION|
    :|UIOP/BACKWARD-DRIVER|)
  :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROVIDE| '"uiop")
(|SYSTEM|::|C-PROVIDE| '"UIOP")
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/UPGRADE|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE| '(:|UIOP/COMMON-LISP| :|UIOP|) :|SHADOW| '|COMMON-LISP|::|NIL|
  :|SHADOWING-IMPORT-FROM| '|COMMON-LISP|::|NIL| :|IMPORT-FROM|
  '((:|UIOP/PACKAGE| #:|INTERN*| #:|FIND-SYMBOL*|)) :|EXPORT|
  '(#:|ASDF-VERSION| #:|*PREVIOUS-ASDF-VERSIONS*| #:|*ASDF-VERSION*|
    #:|ASDF-MESSAGE| #:|*VERBOSE-OUT*| #:|UPGRADING-P| #:|WHEN-UPGRADING|
    #:|UPGRADE-ASDF| #:|DEFPARAMETER*| #:|*POST-UPGRADE-CLEANUP-HOOK*|
    #:|CLEANUP-UPGRADED-ASDF| #:|WITH-ASDF-DEPRECATION| #:|INTERN*|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|ASDF/UPGRADE| :|ASDF|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/UPGRADE"))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/UPGRADE|::|ASDF-VERSION| |COMMON-LISP|::|NIL|
 "Exported interface to the version of ASDF currently installed. A string.\n
You can compare this string with e.g.: (ASDF:VERSION-SATISFIES (ASDF:ASDF-VERSION) \"3.4.5.67\")."
 (|COMMON-LISP|::|WHEN| (|COMMON-LISP|::|FIND-PACKAGE| :|ASDF|)
  (|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|SYMBOL-VALUE|
    (|COMMON-LISP|::|FIND-SYMBOL| (|COMMON-LISP|::|STRING| :|*ASDF-VERSION*|)
     :|ASDF|))
   (|COMMON-LISP|::|LET*|
    ((|ASDF/UPGRADE|::|REVSYM|
      (|COMMON-LISP|::|FIND-SYMBOL|
       (|COMMON-LISP|::|STRING| :|*ASDF-REVISION*|) :|ASDF|))
     (|ASDF/UPGRADE|::|REV|
      (|COMMON-LISP|::|AND| |ASDF/UPGRADE|::|REVSYM|
       (|COMMON-LISP|::|BOUNDP| |ASDF/UPGRADE|::|REVSYM|)
       (|COMMON-LISP|::|SYMBOL-VALUE| |ASDF/UPGRADE|::|REVSYM|))))
    (|COMMON-LISP|::|ETYPECASE| |ASDF/UPGRADE|::|REV|
     (|COMMON-LISP|::|STRING| |ASDF/UPGRADE|::|REV|)
     (|COMMON-LISP|::|CONS|
      (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "~{~D~^.~}"
       |ASDF/UPGRADE|::|REV|))
     (|COMMON-LISP|::|NULL| "1.0"))))))
(|COMMON-LISP|::|DEFVAR| |ASDF/UPGRADE|::|*PREVIOUS-ASDF-VERSIONS*|
 (|COMMON-LISP|::|LET|
  ((|ASDF/UPGRADE|::|PREVIOUS| (|ASDF/UPGRADE|::|ASDF-VERSION|)))
  (|COMMON-LISP|::|WHEN| |ASDF/UPGRADE|::|PREVIOUS|
   (|COMMON-LISP|::|WHEN|
    (|UIOP/VERSION|::|VERSION<| |ASDF/UPGRADE|::|PREVIOUS| "2.27")
    (|COMMON-LISP|::|LET|
     ((|ASDF/UPGRADE|::|AWAY|
       (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "~A-~A" :|ASDF|
        |ASDF/UPGRADE|::|PREVIOUS|)))
     (|COMMON-LISP|::|RENAME-PACKAGE| :|ASDF| |ASDF/UPGRADE|::|AWAY|)
     (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|*LOAD-VERBOSE*|
      (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|T|
       "~&; Renamed old ~A package away to ~A~%" :|ASDF|
       |ASDF/UPGRADE|::|AWAY|))))
   (|COMMON-LISP|::|LIST| |ASDF/UPGRADE|::|PREVIOUS|))))
(|COMMON-LISP|::|DEFVAR| |ASDF/UPGRADE|::|*ASDF-VERSION*| |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|DEFPARAMETER|
 |ASDF/UPGRADE|::|*OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*| "3.2.0.2")
(|COMMON-LISP|::|DEFVAR| |ASDF/UPGRADE|::|*VERBOSE-OUT*| |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/UPGRADE|::|ASDF-MESSAGE|
 (|ASDF/UPGRADE|::|FORMAT-STRING| |COMMON-LISP|::|&REST|
  |ASDF/UPGRADE|::|FORMAT-ARGS|)
 (|COMMON-LISP|::|WHEN| |ASDF/UPGRADE|::|*VERBOSE-OUT*|
  (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|FORMAT|
   |ASDF/UPGRADE|::|*VERBOSE-OUT*| |ASDF/UPGRADE|::|FORMAT-STRING|
   |ASDF/UPGRADE|::|FORMAT-ARGS|)))
(|COMMON-LISP|::|DEFVAR| |ASDF/UPGRADE|::|*POST-UPGRADE-CLEANUP-HOOK*|
 |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/UPGRADE|::|UPGRADING-P|
 (|COMMON-LISP|::|&OPTIONAL|
  (|ASDF/UPGRADE|::|OLDEST-COMPATIBLE-VERSION|
   |ASDF/UPGRADE|::|*OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*|))
 (|COMMON-LISP|::|AND| |ASDF/UPGRADE|::|*PREVIOUS-ASDF-VERSIONS*|
  (|UIOP/VERSION|::|VERSION<|
   (|COMMON-LISP|::|FIRST| |ASDF/UPGRADE|::|*PREVIOUS-ASDF-VERSIONS*|)
   |ASDF/UPGRADE|::|OLDEST-COMPATIBLE-VERSION|)))
(|COMMON-LISP|::|DEFMACRO| |ASDF/UPGRADE|::|DEFPARAMETER*|
 (|ASDF/UPGRADE|::|VAR| |ASDF/UPGRADE|::|VALUE| |COMMON-LISP|::|&OPTIONAL|
  |ASDF/UPGRADE|::|DOCSTRING|
  (|ASDF/UPGRADE|::|VERSION|
   |ASDF/UPGRADE|::|*OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*|))
 (|COMMON-LISP|::|LET*|
  ((|ASDF/UPGRADE|::|NAME|
    (|COMMON-LISP|::|STRING-TRIM| "*" |ASDF/UPGRADE|::|VAR|))
   (|ASDF/UPGRADE|::|VALFUN|
    (|COMMON-LISP|::|INTERN|
     (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "%~A-~A-~A" :|COMPUTE|
      |ASDF/UPGRADE|::|NAME| :|VALUE|))))
  `(|COMMON-LISP|::|PROGN|
    (|COMMON-LISP|::|DEFUN| ,|ASDF/UPGRADE|::|VALFUN| |COMMON-LISP|::|NIL|
     ,|ASDF/UPGRADE|::|VALUE|)
    (|COMMON-LISP|::|DEFVAR| ,|ASDF/UPGRADE|::|VAR| (,|ASDF/UPGRADE|::|VALFUN|)
     ,@(|UIOP/UTILITY|::|ENSURE-LIST| |ASDF/UPGRADE|::|DOCSTRING|))
    (|COMMON-LISP|::|WHEN|
     (|ASDF/UPGRADE|::|UPGRADING-P| ,|ASDF/UPGRADE|::|VERSION|)
     (|COMMON-LISP|::|SETF| ,|ASDF/UPGRADE|::|VAR|
      (,|ASDF/UPGRADE|::|VALFUN|))))))
(|COMMON-LISP|::|DEFMACRO| |ASDF/UPGRADE|::|WHEN-UPGRADING|
 ((|COMMON-LISP|::|&KEY|
   (|ASDF/UPGRADE|::|VERSION|
    |ASDF/UPGRADE|::|*OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*|)
   (|ASDF/UPGRADE|::|UPGRADING-P|
    `(|ASDF/UPGRADE|::|UPGRADING-P| ,|ASDF/UPGRADE|::|VERSION|))
   |COMMON-LISP|::|WHEN|)
  |COMMON-LISP|::|&BODY| |ASDF/UPGRADE|::|BODY|)
 "A wrapper macro for code that should only be run when upgrading a\n
previously-loaded version of ASDF."
 `(|UIOP/UTILITY|::|WITH-UPGRADABILITY| |COMMON-LISP|::|NIL|
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|AND| ,|ASDF/UPGRADE|::|UPGRADING-P|
     ,@(|COMMON-LISP|::|WHEN| |COMMON-LISP|::|WHEN| `(,|COMMON-LISP|::|WHEN|)))
    (|COMMON-LISP|::|HANDLER-BIND|
     ((|COMMON-LISP|::|STYLE-WARNING| #'|COMMON-LISP|::|MUFFLE-WARNING|))
     (|COMMON-LISP|::|EVAL|
      '(|COMMON-LISP|::|PROGN| ,@|ASDF/UPGRADE|::|BODY|))))))
(|COMMON-LISP|::|LET*|
 ((|ASDF/UPGRADE|::|ASDF-VERSION| "3.3.2")
  (|ASDF/UPGRADE|::|EXISTING-VERSION| (|ASDF/UPGRADE|::|ASDF-VERSION|)))
 (|COMMON-LISP|::|SETF| |ASDF/UPGRADE|::|*ASDF-VERSION*|
  |ASDF/UPGRADE|::|ASDF-VERSION|)
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|AND| |ASDF/UPGRADE|::|EXISTING-VERSION|
   (|COMMON-LISP|::|NOT|
    (|COMMON-LISP|::|EQUAL| |ASDF/UPGRADE|::|ASDF-VERSION|
     |ASDF/UPGRADE|::|EXISTING-VERSION|)))
  (|COMMON-LISP|::|PUSH| |ASDF/UPGRADE|::|EXISTING-VERSION|
   |ASDF/UPGRADE|::|*PREVIOUS-ASDF-VERSIONS*|)
  (|COMMON-LISP|::|WHEN|
   (|COMMON-LISP|::|OR| |ASDF/UPGRADE|::|*VERBOSE-OUT*|
    |COMMON-LISP|::|*LOAD-VERBOSE*|)
   (|COMMON-LISP|::|FORMAT|
    (|COMMON-LISP|::|OR| |ASDF/UPGRADE|::|*VERBOSE-OUT*|
     |COMMON-LISP|::|*TRACE-OUTPUT*|)
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~&~@<; ~@;Upgrading ASDF ~@[from version ~A ~]to version ~A~@:>~%")
    |ASDF/UPGRADE|::|EXISTING-VERSION| |ASDF/UPGRADE|::|ASDF-VERSION|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/UPGRADE|::|ASDF-VERSION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/UPGRADE|::|ASDF-VERSION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/UPGRADE|::|*PREVIOUS-ASDF-VERSIONS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/UPGRADE|::|*ASDF-VERSION*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/UPGRADE|::|*OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/UPGRADE|::|*VERBOSE-OUT*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/UPGRADE|::|ASDF-MESSAGE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/UPGRADE|::|ASDF-MESSAGE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/UPGRADE|::|FORMAT-STRING| |COMMON-LISP|::|&REST|
    |ASDF/UPGRADE|::|FORMAT-ARGS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/UPGRADE|::|*POST-UPGRADE-CLEANUP-HOOK*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/UPGRADE|::|UPGRADING-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/UPGRADE|::|UPGRADING-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL|
    (|ASDF/UPGRADE|::|OLDEST-COMPATIBLE-VERSION|
     |ASDF/UPGRADE|::|*OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|ASDF/UPGRADE|::|DEFPARAMETER*|)
(|SYSTEM|::|%PUTD| '|ASDF/UPGRADE|::|DEFPARAMETER*|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |ASDF/UPGRADE|::|DEFPARAMETER*|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 5.
       |COMMON-LISP|::|NIL|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|ASDF/UPGRADE|::|VAR|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|ASDF/UPGRADE|::|VALUE| (|COMMON-LISP|::|CADDR| . #1#))
       (|ASDF/UPGRADE|::|DOCSTRING| (|COMMON-LISP|::|CADDDR| . #1#))
       (|ASDF/UPGRADE|::|VERSION|
        (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CDDDDR| . #1#)
         (|COMMON-LISP|::|FIFTH| . #1#)
         |ASDF/UPGRADE|::|*OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*|)))
      (|COMMON-LISP|::|BLOCK| |ASDF/UPGRADE|::|DEFPARAMETER*|
       (|COMMON-LISP|::|LET*|
        ((|ASDF/UPGRADE|::|NAME|
          (|COMMON-LISP|::|STRING-TRIM| "*" |ASDF/UPGRADE|::|VAR|))
         (|ASDF/UPGRADE|::|VALFUN|
          (|COMMON-LISP|::|INTERN|
           (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "%~A-~A-~A" :|COMPUTE|
            |ASDF/UPGRADE|::|NAME| :|VALUE|))))
        `(|COMMON-LISP|::|PROGN|
          (|COMMON-LISP|::|DEFUN| ,|ASDF/UPGRADE|::|VALFUN|
           |COMMON-LISP|::|NIL| ,|ASDF/UPGRADE|::|VALUE|)
          (|COMMON-LISP|::|DEFVAR| ,|ASDF/UPGRADE|::|VAR|
           (,|ASDF/UPGRADE|::|VALFUN|)
           ,@(|UIOP/UTILITY|::|ENSURE-LIST| |ASDF/UPGRADE|::|DOCSTRING|))
          (|COMMON-LISP|::|WHEN|
           (|ASDF/UPGRADE|::|UPGRADING-P| ,|ASDF/UPGRADE|::|VERSION|)
           (|COMMON-LISP|::|SETF| ,|ASDF/UPGRADE|::|VAR|
            (,|ASDF/UPGRADE|::|VALFUN|))))))))))
  '(|ASDF/UPGRADE|::|VAR| |ASDF/UPGRADE|::|VALUE| |COMMON-LISP|::|&OPTIONAL|
    |ASDF/UPGRADE|::|DOCSTRING|
    (|ASDF/UPGRADE|::|VERSION|
     |ASDF/UPGRADE|::|*OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|ASDF/UPGRADE|::|WHEN-UPGRADING|)
(|SYSTEM|::|%PUTD| '|ASDF/UPGRADE|::|WHEN-UPGRADING|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |ASDF/UPGRADE|::|WHEN-UPGRADING|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "A wrapper macro for code that should only be run when upgrading a\n
previously-loaded version of ASDF."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G21763| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G21764| #1#) (#4=#:|G21765| #3#)
       (|ASDF/UPGRADE|::|VERSION|
        (|COMMON-LISP|::|LET|
         ((#5=#:|KWD-ARG-21766|
           (|COMMON-LISP|::|GETF| #4# ':|VERSION| '#6=(|COMMON-LISP|::|NIL|))))
         (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQ| #5# '#6#)
          (|COMMON-LISP|::|PROGN|
           |ASDF/UPGRADE|::|*OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*|)
          #5#)))
       (|ASDF/UPGRADE|::|UPGRADING-P|
        (|COMMON-LISP|::|LET|
         ((#7=#:|KWD-ARG-21767|
           (|COMMON-LISP|::|GETF| #4# ':|UPGRADING-P| '#6#)))
         (|COMMON-LISP|::|IF| (|COMMON-LISP|::|EQ| #7# '#6#)
          (|COMMON-LISP|::|PROGN|
           #8=`(|ASDF/UPGRADE|::|UPGRADING-P| ,|ASDF/UPGRADE|::|VERSION|))
          #7#)))
       (|COMMON-LISP|::|WHEN|
        (|COMMON-LISP|::|GETF| #4# ':|WHEN| |COMMON-LISP|::|NIL|))
       (|ASDF/UPGRADE|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|SYSTEM|::|KEYWORD-TEST| #4# '(:|WHEN| :|UPGRADING-P| :|VERSION|))
      (|COMMON-LISP|::|BLOCK| |ASDF/UPGRADE|::|WHEN-UPGRADING|
       `(|UIOP/UTILITY|::|WITH-UPGRADABILITY| |COMMON-LISP|::|NIL|
         (|COMMON-LISP|::|WHEN|
          (|COMMON-LISP|::|AND| ,|ASDF/UPGRADE|::|UPGRADING-P|
           ,@(|COMMON-LISP|::|WHEN| |COMMON-LISP|::|WHEN|
              `(,|COMMON-LISP|::|WHEN|)))
          (|COMMON-LISP|::|HANDLER-BIND|
           ((|COMMON-LISP|::|STYLE-WARNING| #'|COMMON-LISP|::|MUFFLE-WARNING|))
           (|COMMON-LISP|::|EVAL|
            '(|COMMON-LISP|::|PROGN| ,@|ASDF/UPGRADE|::|BODY|))))))))))
  '((|COMMON-LISP|::|&KEY|
     (|ASDF/UPGRADE|::|VERSION|
      |ASDF/UPGRADE|::|*OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*|)
     (|ASDF/UPGRADE|::|UPGRADING-P| #8#) |COMMON-LISP|::|WHEN|)
    |COMMON-LISP|::|&BODY| |ASDF/UPGRADE|::|BODY|)))
(|COMMON-LISP|::|WHEN|
 (|COMMON-LISP|::|AND| (|ASDF/UPGRADE|::|UPGRADING-P| "3.2.0.2"))
 (|COMMON-LISP|::|HANDLER-BIND|
  ((|COMMON-LISP|::|STYLE-WARNING| #'|COMMON-LISP|::|MUFFLE-WARNING|))
  (|COMMON-LISP|::|EVAL|
   '(|COMMON-LISP|::|PROGN|
     (|COMMON-LISP|::|LET*|
      ((|ASDF/UPGRADE|::|PREVIOUS-VERSION|
        (|COMMON-LISP|::|FIRST| |ASDF/UPGRADE|::|*PREVIOUS-ASDF-VERSIONS*|))
       (|ASDF/UPGRADE|::|REDEFINED-FUNCTIONS|
        `(,@(|COMMON-LISP|::|WHEN|
             (|UIOP/VERSION|::|VERSION<=| |ASDF/UPGRADE|::|PREVIOUS-VERSION|
              "3.1.2")
             '(#:|COMPONENT-DEPENDS-ON| #:|INPUT-FILES|))
          ,@(|COMMON-LISP|::|WHEN|
             (|UIOP/VERSION|::|VERSION<=| |ASDF/UPGRADE|::|PREVIOUS-VERSION|
              "3.1.7.20")
             '(#:|FIND-COMPONENT|))))
       (|ASDF/UPGRADE|::|REDEFINED-CLASSES| |COMMON-LISP|::|NIL|))
      (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/UPGRADE|::|NAME| :|IN|
       |ASDF/UPGRADE|::|REDEFINED-FUNCTIONS| :|FOR| |ASDF/UPGRADE|::|SYM|
       |COMMON-LISP|::|=|
       (|UIOP/PACKAGE|::|FIND-SYMBOL*| |ASDF/UPGRADE|::|NAME| :|ASDF|
        |COMMON-LISP|::|NIL|)
       :|DO|
       (|COMMON-LISP|::|WHEN| |ASDF/UPGRADE|::|SYM|
        (|COMMON-LISP|::|FMAKUNBOUND| |ASDF/UPGRADE|::|SYM|)))
      (|COMMON-LISP|::|LABELS|
       ((|ASDF/UPGRADE|::|ASYM| (|ASDF/UPGRADE|::|X|)
         (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
          (|ASDF/UPGRADE|::|S| |ASDF/UPGRADE|::|P|)
          (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CONSP| |ASDF/UPGRADE|::|X|)
           (|COMMON-LISP|::|VALUES| (|COMMON-LISP|::|CAR| |ASDF/UPGRADE|::|X|)
            (|COMMON-LISP|::|CADR| |ASDF/UPGRADE|::|X|))
           (|COMMON-LISP|::|VALUES| |ASDF/UPGRADE|::|X| :|ASDF|))
          (|UIOP/PACKAGE|::|FIND-SYMBOL*| |ASDF/UPGRADE|::|S|
           |ASDF/UPGRADE|::|P| |COMMON-LISP|::|NIL|)))
        (|ASDF/UPGRADE|::|ASYMS| (|ASDF/UPGRADE|::|L|)
         (|COMMON-LISP|::|MAPCAR| #'|ASDF/UPGRADE|::|ASYM|
          |ASDF/UPGRADE|::|L|)))
       (|UIOP/COMMON-LISP|::|LOOP*| :|FOR|
        (|ASDF/UPGRADE|::|NAME| |ASDF/UPGRADE|::|SUPERCLASSES|
         |ASDF/UPGRADE|::|SLOTS|)
        :|IN| |ASDF/UPGRADE|::|REDEFINED-CLASSES| :|FOR| |ASDF/UPGRADE|::|SYM|
        |COMMON-LISP|::|=|
        (|UIOP/PACKAGE|::|FIND-SYMBOL*| |ASDF/UPGRADE|::|NAME| :|ASDF|
         |COMMON-LISP|::|NIL|)
        :|WHEN|
        (|COMMON-LISP|::|AND| |ASDF/UPGRADE|::|SYM|
         (|CLOS|::|FIND-CLASS| |ASDF/UPGRADE|::|SYM|))
        :|DO|
        (|COMMON-LISP|::|EVAL|
         `(|CLOS|::|DEFCLASS| ,|ASDF/UPGRADE|::|SYM|
           ,(|ASDF/UPGRADE|::|ASYMS| |ASDF/UPGRADE|::|SUPERCLASSES|)
           ,(|ASDF/UPGRADE|::|ASYMS| |ASDF/UPGRADE|::|SLOTS|))))))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/UPGRADE|::|CLEANUP-UPGRADED-ASDF|
 (|COMMON-LISP|::|&OPTIONAL|
  (|ASDF/UPGRADE|::|OLD-VERSION|
   (|COMMON-LISP|::|FIRST| |ASDF/UPGRADE|::|*PREVIOUS-ASDF-VERSIONS*|)))
 (|COMMON-LISP|::|LET|
  ((|ASDF/UPGRADE|::|NEW-VERSION| (|ASDF/UPGRADE|::|ASDF-VERSION|)))
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|EQUAL| |ASDF/UPGRADE|::|OLD-VERSION|
    |ASDF/UPGRADE|::|NEW-VERSION|)
   (|COMMON-LISP|::|PUSH| |ASDF/UPGRADE|::|NEW-VERSION|
    |ASDF/UPGRADE|::|*PREVIOUS-ASDF-VERSIONS*|)
   (|COMMON-LISP|::|WHEN| |ASDF/UPGRADE|::|OLD-VERSION|
    (|COMMON-LISP|::|IF|
     (|UIOP/VERSION|::|VERSION<=| |ASDF/UPGRADE|::|NEW-VERSION|
      |ASDF/UPGRADE|::|OLD-VERSION|)
     (|COMMON-LISP|::|ERROR|
      (|UIOP/COMMON-LISP|::|COMPATFMT|
       "~&~@<; ~@;Downgraded ASDF from version ~A to version ~A~@:>~%")
      |ASDF/UPGRADE|::|OLD-VERSION| |ASDF/UPGRADE|::|NEW-VERSION|)
     (|ASDF/UPGRADE|::|ASDF-MESSAGE|
      (|UIOP/COMMON-LISP|::|COMPATFMT|
       "~&~@<; ~@;Upgraded ASDF from version ~A to version ~A~@:>~%")
      |ASDF/UPGRADE|::|OLD-VERSION| |ASDF/UPGRADE|::|NEW-VERSION|))
    (|COMMON-LISP|::|UNLESS|
     (|UIOP/VERSION|::|VERSION<=|
      |ASDF/UPGRADE|::|*OLDEST-FORWARD-COMPATIBLE-ASDF-VERSION*|
      |ASDF/UPGRADE|::|OLD-VERSION|)
     (|UIOP/UTILITY|::|CALL-FUNCTIONS|
      (|COMMON-LISP|::|REVERSE|
       |ASDF/UPGRADE|::|*POST-UPGRADE-CLEANUP-HOOK*|)))
    |COMMON-LISP|::|T|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/UPGRADE|::|UPGRADE-ASDF| |COMMON-LISP|::|NIL|
 "Try to upgrade of ASDF. If a different version was used, return T.\n
   We need do that before we operate on anything that may possibly depend on ASDF."
 (|COMMON-LISP|::|LET|
  ((|COMMON-LISP|::|*LOAD-PRINT*| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|*COMPILE-PRINT*| |COMMON-LISP|::|NIL|))
  (|COMMON-LISP|::|HANDLER-BIND|
   (((|COMMON-LISP|::|OR| |COMMON-LISP|::|STYLE-WARNING|)
     #'|COMMON-LISP|::|MUFFLE-WARNING|))
   (|UIOP/PACKAGE|::|SYMBOL-CALL| :|ASDF| :|LOAD-SYSTEM| :|ASDF| :|VERBOSE|
    |COMMON-LISP|::|NIL|))))
(|COMMON-LISP|::|DEFMACRO| |ASDF/UPGRADE|::|WITH-ASDF-DEPRECATION|
 ((|COMMON-LISP|::|&REST| |ASDF/UPGRADE|::|KEYS| |COMMON-LISP|::|&KEY|
   |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
  |COMMON-LISP|::|&BODY| |ASDF/UPGRADE|::|BODY|)
 `(|UIOP/UTILITY|::|WITH-UPGRADABILITY| |COMMON-LISP|::|NIL|
   (|UIOP/VERSION|::|WITH-DEPRECATION|
    ((|UIOP/VERSION|::|VERSION-DEPRECATION| |ASDF/UPGRADE|::|*ASDF-VERSION*|
      ,@|ASDF/UPGRADE|::|KEYS|))
    ,@|ASDF/UPGRADE|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/UPGRADE|::|CLEANUP-UPGRADED-ASDF|))
(|SYSTEM|::|C-DEFUN| '|ASDF/UPGRADE|::|CLEANUP-UPGRADED-ASDF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL|
    (|ASDF/UPGRADE|::|OLD-VERSION|
     (|COMMON-LISP|::|FIRST| |ASDF/UPGRADE|::|*PREVIOUS-ASDF-VERSIONS*|)))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/UPGRADE|::|UPGRADE-ASDF|))
(|SYSTEM|::|C-DEFUN| '|ASDF/UPGRADE|::|UPGRADE-ASDF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|ASDF/UPGRADE|::|WITH-ASDF-DEPRECATION|)
(|SYSTEM|::|%PUTD| '|ASDF/UPGRADE|::|WITH-ASDF-DEPRECATION|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |ASDF/UPGRADE|::|WITH-ASDF-DEPRECATION|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G21860| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G21861| #1#) (|ASDF/UPGRADE|::|KEYS| #3#)
       (|ASDF/UPGRADE|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |ASDF/UPGRADE|::|WITH-ASDF-DEPRECATION|
       `(|UIOP/UTILITY|::|WITH-UPGRADABILITY| |COMMON-LISP|::|NIL|
         (|UIOP/VERSION|::|WITH-DEPRECATION|
          ((|UIOP/VERSION|::|VERSION-DEPRECATION|
            |ASDF/UPGRADE|::|*ASDF-VERSION*| ,@|ASDF/UPGRADE|::|KEYS|))
          ,@|ASDF/UPGRADE|::|BODY|)))))))
  '((|COMMON-LISP|::|&REST| |ASDF/UPGRADE|::|KEYS| |COMMON-LISP|::|&KEY|
     |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
    |COMMON-LISP|::|&BODY| |ASDF/UPGRADE|::|BODY|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/SESSION|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE| '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE|) :|SHADOW|
  '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM| '|COMMON-LISP|::|NIL|
  :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|GET-FILE-STAMP| #:|COMPUTE-FILE-STAMP| #:|REGISTER-FILE-STAMP|
    #:|ASDF-CACHE| #:|SET-ASDF-CACHE-ENTRY| #:|UNSET-ASDF-CACHE-ENTRY|
    #:|CONSULT-ASDF-CACHE| #:|DO-ASDF-CACHE| #:|NORMALIZE-NAMESTRING|
    #:|CALL-WITH-ASDF-SESSION| #:|WITH-ASDF-SESSION| #:|*ASDF-SESSION*|
    #:|*ASDF-SESSION-CLASS*| #:|SESSION| #:|TOPLEVEL-ASDF-SESSION|
    #:|SESSION-CACHE| #:|FORCING| #:|ASDF-UPGRADED-P| #:|VISITED-ACTIONS|
    #:|VISITING-ACTION-SET| #:|VISITING-ACTION-LIST| #:|TOTAL-ACTION-COUNT|
    #:|PLANNED-ACTION-COUNT| #:|PLANNED-OUTPUT-ACTION-COUNT|
    #:|CLEAR-CONFIGURATION-AND-RETRY| #:|RETRY| #:|OPERATE-LEVEL|
    #:|SYSTEM-DEFINITION-ERROR| #:|FORMATTED-SYSTEM-DEFINITION-ERROR|
    #:|FORMAT-CONTROL| #:|FORMAT-ARGUMENTS| #:|SYSDEF-ERROR|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/SESSION| :|ASDF/CACHE| :|ASDF/COMPONENT| :|ASDF/ACTION|
    :|ASDF/FIND-SYSTEM| :|ASDF/PLAN| :|ASDF|)
  :|MIX| '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/SESSION"))
(|COMMON-LISP|::|DEFVAR| |ASDF/SESSION|::|*ASDF-SESSION*| |COMMON-LISP|::|NIL|)
(|ASDF/UPGRADE|::|DEFPARAMETER*| |ASDF/SESSION|::|*ASDF-SESSION-CLASS*|
 '|ASDF/SESSION|::|SESSION| "The default class for sessions")
(|CLOS|::|DEFCLASS| |ASDF/SESSION|::|SESSION| |COMMON-LISP|::|NIL|
 ((|ASDF/SESSION|::|ANCESTOR| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|ANCESTOR| :|READER| |ASDF/SESSION|::|SESSION-ANCESTOR| :|DOCUMENTATION|
   "Top level session that this is part of")
  (|ASDF/SESSION|::|SESSION-CACHE| :|INITFORM|
   (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)
   :|INITARG| :|SESSION-CACHE| :|READER| |ASDF/SESSION|::|SESSION-CACHE|
   :|DOCUMENTATION| "Memoize expensive computations")
  (|ASDF/SESSION|::|OPERATE-LEVEL| :|INITFORM| 0. :|INITARG| :|OPERATE-LEVEL|
   :|ACCESSOR| |ASDF/SESSION|::|SESSION-OPERATE-LEVEL| :|DOCUMENTATION|
   "Number of nested calls to operate we're under (for toplevel session only)")
  (|ASDF/SESSION|::|ASDF-UPGRADED-P| :|INITFORM| |COMMON-LISP|::|NIL|
   :|INITARG| :|ASDF-UPGRADED-P| :|ACCESSOR| |ASDF/SESSION|::|ASDF-UPGRADED-P|
   :|DOCUMENTATION|
   "Was ASDF already upgraded in this session - only valid for toplevel-asdf-session.")
  (|ASDF/SESSION|::|FORCING| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|FORCING| :|ACCESSOR| |ASDF/SESSION|::|FORCING| :|DOCUMENTATION|
   "Forcing parameters for the session")
  (|ASDF/SESSION|::|VISITED-ACTIONS| :|INITFORM|
   (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)
   :|ACCESSOR| |ASDF/SESSION|::|VISITED-ACTIONS|)
  (|ASDF/SESSION|::|VISITING-ACTION-SET| :|INITFORM|
   (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)
   :|ACCESSOR| |ASDF/SESSION|::|VISITING-ACTION-SET|)
  (|ASDF/SESSION|::|VISITING-ACTION-LIST| :|INITFORM| |COMMON-LISP|::|NIL|
   :|ACCESSOR| |ASDF/SESSION|::|VISITING-ACTION-LIST|)
  (|ASDF/SESSION|::|TOTAL-ACTION-COUNT| :|INITFORM| 0. :|ACCESSOR|
   |ASDF/SESSION|::|TOTAL-ACTION-COUNT|)
  (|ASDF/SESSION|::|PLANNED-ACTION-COUNT| :|INITFORM| 0. :|ACCESSOR|
   |ASDF/SESSION|::|PLANNED-ACTION-COUNT|)
  (|ASDF/SESSION|::|PLANNED-OUTPUT-ACTION-COUNT| :|INITFORM| 0. :|ACCESSOR|
   |ASDF/SESSION|::|PLANNED-OUTPUT-ACTION-COUNT|))
 (:|DOCUMENTATION|
  "An ASDF session with a cache to memoize some computations"))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SESSION|::|TOPLEVEL-ASDF-SESSION|
 |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|WHEN| |ASDF/SESSION|::|*ASDF-SESSION*|
  (|COMMON-LISP|::|OR|
   (|ASDF/SESSION|::|SESSION-ANCESTOR| |ASDF/SESSION|::|*ASDF-SESSION*|)
   |ASDF/SESSION|::|*ASDF-SESSION*|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SESSION|::|OPERATE-LEVEL| |COMMON-LISP|::|NIL|
 (|ASDF/SESSION|::|SESSION-OPERATE-LEVEL|
  (|ASDF/SESSION|::|TOPLEVEL-ASDF-SESSION|)))
(|UIOP/UTILITY|::|DEFUN*|
 (|COMMON-LISP|::|SETF| |ASDF/SESSION|::|OPERATE-LEVEL|)
 (|ASDF/SESSION|::|NEW-LEVEL|)
 (|COMMON-LISP|::|SETF|
  (|ASDF/SESSION|::|SESSION-OPERATE-LEVEL|
   (|ASDF/SESSION|::|TOPLEVEL-ASDF-SESSION|))
  |ASDF/SESSION|::|NEW-LEVEL|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SESSION|::|ASDF-CACHE| |COMMON-LISP|::|NIL|
 (|ASDF/SESSION|::|SESSION-CACHE| |ASDF/SESSION|::|*ASDF-SESSION*|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SESSION|::|SET-ASDF-CACHE-ENTRY|
 (|ASDF/SESSION|::|KEY| |ASDF/SESSION|::|VALUE-LIST|)
 (|COMMON-LISP|::|VALUES-LIST|
  (|COMMON-LISP|::|IF| |ASDF/SESSION|::|*ASDF-SESSION*|
   (|COMMON-LISP|::|SETF|
    (|COMMON-LISP|::|GETHASH| |ASDF/SESSION|::|KEY|
     (|ASDF/SESSION|::|ASDF-CACHE|))
    |ASDF/SESSION|::|VALUE-LIST|)
   |ASDF/SESSION|::|VALUE-LIST|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SESSION|::|UNSET-ASDF-CACHE-ENTRY|
 (|ASDF/SESSION|::|KEY|)
 (|COMMON-LISP|::|WHEN| |ASDF/SESSION|::|*ASDF-SESSION*|
  (|COMMON-LISP|::|REMHASH| |ASDF/SESSION|::|KEY|
   (|ASDF/SESSION|::|SESSION-CACHE| |ASDF/SESSION|::|*ASDF-SESSION*|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SESSION|::|CONSULT-ASDF-CACHE|
 (|ASDF/SESSION|::|KEY| |COMMON-LISP|::|&OPTIONAL| |ASDF/SESSION|::|THUNK|)
 (|COMMON-LISP|::|IF| |ASDF/SESSION|::|*ASDF-SESSION*|
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|ASDF/SESSION|::|RESULTS| |ASDF/SESSION|::|FOUNDP|)
   (|COMMON-LISP|::|GETHASH| |ASDF/SESSION|::|KEY|
    (|ASDF/SESSION|::|SESSION-CACHE| |ASDF/SESSION|::|*ASDF-SESSION*|))
   (|COMMON-LISP|::|IF| |ASDF/SESSION|::|FOUNDP|
    (|COMMON-LISP|::|VALUES-LIST| |ASDF/SESSION|::|RESULTS|)
    (|ASDF/SESSION|::|SET-ASDF-CACHE-ENTRY| |ASDF/SESSION|::|KEY|
     (|COMMON-LISP|::|MULTIPLE-VALUE-LIST|
      (|UIOP/UTILITY|::|CALL-FUNCTION| |ASDF/SESSION|::|THUNK|)))))
  (|UIOP/UTILITY|::|CALL-FUNCTION| |ASDF/SESSION|::|THUNK|)))
(|COMMON-LISP|::|DEFMACRO| |ASDF/SESSION|::|DO-ASDF-CACHE|
 (|ASDF/SESSION|::|KEY| |COMMON-LISP|::|&BODY| |ASDF/SESSION|::|BODY|)
 `(|ASDF/SESSION|::|CONSULT-ASDF-CACHE| ,|ASDF/SESSION|::|KEY|
   #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| ,@|ASDF/SESSION|::|BODY|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SESSION|::|CALL-WITH-ASDF-SESSION|
 (|ASDF/SESSION|::|THUNK| |COMMON-LISP|::|&KEY| |ASDF/SESSION|::|OVERRIDE|
  |ASDF/SESSION|::|KEY| |ASDF/SESSION|::|OVERRIDE-CACHE|
  |ASDF/SESSION|::|OVERRIDE-FORCING|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/SESSION|::|FUN|
    (|COMMON-LISP|::|IF| |ASDF/SESSION|::|KEY|
     #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
        (|ASDF/SESSION|::|CONSULT-ASDF-CACHE| |ASDF/SESSION|::|KEY|
         |ASDF/SESSION|::|THUNK|))
     |ASDF/SESSION|::|THUNK|)))
  (|COMMON-LISP|::|IF|
   (|COMMON-LISP|::|AND| (|COMMON-LISP|::|NOT| |ASDF/SESSION|::|OVERRIDE|)
    |ASDF/SESSION|::|*ASDF-SESSION*|)
   (|COMMON-LISP|::|FUNCALL| |ASDF/SESSION|::|FUN|)
   (|COMMON-LISP|::|LOOP|
    (|COMMON-LISP|::|RESTART-CASE|
     (|COMMON-LISP|::|LET|
      ((|ASDF/SESSION|::|*ASDF-SESSION*|
        (|COMMON-LISP|::|APPLY| '|CLOS|::|MAKE-INSTANCE|
         |ASDF/SESSION|::|*ASDF-SESSION-CLASS*|
         (|COMMON-LISP|::|WHEN| |ASDF/SESSION|::|*ASDF-SESSION*|
          `(:|ANCESTOR| ,(|ASDF/SESSION|::|TOPLEVEL-ASDF-SESSION|)
            ,@(|COMMON-LISP|::|UNLESS| |ASDF/SESSION|::|OVERRIDE-FORCING|
               `(:|FORCING|
                 ,(|ASDF/SESSION|::|FORCING|
                   |ASDF/SESSION|::|*ASDF-SESSION*|)))
            ,@(|COMMON-LISP|::|UNLESS| |ASDF/SESSION|::|OVERRIDE-CACHE|
               `(:|SESSION-CACHE|
                 ,(|ASDF/SESSION|::|SESSION-CACHE|
                   |ASDF/SESSION|::|*ASDF-SESSION*|))))))))
      (|COMMON-LISP|::|RETURN|
       (|COMMON-LISP|::|FUNCALL| |ASDF/SESSION|::|FUN|)))
     (|ASDF/SESSION|::|RETRY| |COMMON-LISP|::|NIL| :|REPORT|
      (|COMMON-LISP|::|LAMBDA| (|ASDF/SESSION|::|S|)
       (|COMMON-LISP|::|FORMAT| |ASDF/SESSION|::|S|
        (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<Retry ASDF operation.~@:>"))))
     (|ASDF/SESSION|::|CLEAR-CONFIGURATION-AND-RETRY| |COMMON-LISP|::|NIL|
      :|REPORT|
      (|COMMON-LISP|::|LAMBDA| (|ASDF/SESSION|::|S|)
       (|COMMON-LISP|::|FORMAT| |ASDF/SESSION|::|S|
        (|UIOP/COMMON-LISP|::|COMPATFMT|
         "~@<Retry ASDF operation after resetting the configuration.~@:>")))
      (|COMMON-LISP|::|CLRHASH|
       (|ASDF/SESSION|::|SESSION-CACHE| |ASDF/SESSION|::|*ASDF-SESSION*|))
      (|UIOP/CONFIGURATION|::|CLEAR-CONFIGURATION|)))))))
(|COMMON-LISP|::|DEFMACRO| |ASDF/SESSION|::|WITH-ASDF-SESSION|
 ((|COMMON-LISP|::|&KEY| |ASDF/SESSION|::|KEY| |ASDF/SESSION|::|OVERRIDE|
   |ASDF/SESSION|::|OVERRIDE-CACHE| |ASDF/SESSION|::|OVERRIDE-FORCING|)
  |COMMON-LISP|::|&BODY| |ASDF/SESSION|::|BODY|)
 `(|ASDF/SESSION|::|CALL-WITH-ASDF-SESSION|
   #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| ,@|ASDF/SESSION|::|BODY|)
   :|OVERRIDE| ,|ASDF/SESSION|::|OVERRIDE| :|KEY| ,|ASDF/SESSION|::|KEY|
   :|OVERRIDE-CACHE| ,|ASDF/SESSION|::|OVERRIDE-CACHE| :|OVERRIDE-FORCING|
   ,|ASDF/SESSION|::|OVERRIDE-FORCING|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SESSION|::|NORMALIZE-NAMESTRING|
 (|COMMON-LISP|::|PATHNAME|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/SESSION|::|RESOLVED|
    (|UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS*|
     (|UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME|
      (|UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME| |COMMON-LISP|::|PATHNAME|)
      '|UIOP/FILESYSTEM|::|GET-PATHNAME-DEFAULTS|))))
  (|UIOP/PATHNAME|::|WITH-PATHNAME-DEFAULTS| |COMMON-LISP|::|NIL|
   (|COMMON-LISP|::|NAMESTRING| |ASDF/SESSION|::|RESOLVED|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SESSION|::|COMPUTE-FILE-STAMP|
 (|ASDF/SESSION|::|NORMALIZED-NAMESTRING|)
 (|UIOP/PATHNAME|::|WITH-PATHNAME-DEFAULTS| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|OR|
   (|UIOP/FILESYSTEM|::|SAFE-FILE-WRITE-DATE|
    |ASDF/SESSION|::|NORMALIZED-NAMESTRING|)
   |COMMON-LISP|::|T|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SESSION|::|REGISTER-FILE-STAMP|
 (|ASDF/SESSION|::|FILE| |COMMON-LISP|::|&OPTIONAL|
  (|ASDF/SESSION|::|STAMP| |COMMON-LISP|::|NIL| |ASDF/SESSION|::|STAMPP|))
 (|COMMON-LISP|::|LET*|
  ((|COMMON-LISP|::|NAMESTRING|
    (|ASDF/SESSION|::|NORMALIZE-NAMESTRING| |ASDF/SESSION|::|FILE|))
   (|ASDF/SESSION|::|STAMP|
    (|COMMON-LISP|::|IF| |ASDF/SESSION|::|STAMPP| |ASDF/SESSION|::|STAMP|
     (|ASDF/SESSION|::|COMPUTE-FILE-STAMP| |COMMON-LISP|::|NAMESTRING|))))
  (|ASDF/SESSION|::|SET-ASDF-CACHE-ENTRY|
   `(|ASDF/SESSION|::|GET-FILE-STAMP| ,|COMMON-LISP|::|NAMESTRING|)
   (|COMMON-LISP|::|LIST| |ASDF/SESSION|::|STAMP|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SESSION|::|GET-FILE-STAMP|
 (|ASDF/SESSION|::|FILE|)
 (|COMMON-LISP|::|WHEN| |ASDF/SESSION|::|FILE|
  (|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|NAMESTRING|
     (|ASDF/SESSION|::|NORMALIZE-NAMESTRING| |ASDF/SESSION|::|FILE|)))
   (|ASDF/SESSION|::|DO-ASDF-CACHE|
    `(|ASDF/SESSION|::|GET-FILE-STAMP| ,|COMMON-LISP|::|NAMESTRING|)
    (|ASDF/SESSION|::|COMPUTE-FILE-STAMP| |COMMON-LISP|::|NAMESTRING|)))))
(|COMMON-LISP|::|DEFINE-CONDITION| |ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|
 (|COMMON-LISP|::|ERROR|) |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|DEFINE-CONDITION|
 |ASDF/SESSION|::|FORMATTED-SYSTEM-DEFINITION-ERROR|
 (|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
 ((|ASDF/SESSION|::|FORMAT-CONTROL| :|INITARG| :|FORMAT-CONTROL| :|READER|
   |ASDF/SESSION|::|FORMAT-CONTROL|)
  (|ASDF/SESSION|::|FORMAT-ARGUMENTS| :|INITARG| :|FORMAT-ARGUMENTS| :|READER|
   |ASDF/SESSION|::|FORMAT-ARGUMENTS|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA| (|ASDF/SESSION|::|C| |ASDF/SESSION|::|S|)
   (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|FORMAT| |ASDF/SESSION|::|S|
    (|ASDF/SESSION|::|FORMAT-CONTROL| |ASDF/SESSION|::|C|)
    (|ASDF/SESSION|::|FORMAT-ARGUMENTS| |ASDF/SESSION|::|C|)))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SESSION|::|SYSDEF-ERROR|
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|&REST| |ASDF/SESSION|::|ARGUMENTS|)
 (|COMMON-LISP|::|ERROR| '|ASDF/SESSION|::|FORMATTED-SYSTEM-DEFINITION-ERROR|
  :|FORMAT-CONTROL| |COMMON-LISP|::|FORMAT| :|FORMAT-ARGUMENTS|
  |ASDF/SESSION|::|ARGUMENTS|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/SESSION|::|*ASDF-SESSION*|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|%COMPUTE-ASDF-SESSION-CLASS-VALUE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/SESSION|::|*ASDF-SESSION-CLASS*|))
(|COMMON-LISP|::|LET*| ((#1=#:|G22084| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/SESSION|::|SESSION|
  :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|ANCESTOR| :|READERS|
    '(|ASDF/SESSION|::|SESSION-ANCESTOR|) :|INITARGS| '(:|ANCESTOR|)
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)
    :|DOCUMENTATION| '"Top level session that this is part of")
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|SESSION-CACHE| :|READERS|
    '(|ASDF/SESSION|::|SESSION-CACHE|) :|INITARGS| '(:|SESSION-CACHE|)
    :|INITFORM|
    '#2=(|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)
    :|INITFUNCTION|
    (|COMMON-LISP|::|FUNCTION| |ASDF/SESSION|::|DEFAULT-SESSION-CACHE|
     (|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| #2#))
    :|DOCUMENTATION| '"Memoize expensive computations")
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|OPERATE-LEVEL| :|READERS|
    '(|ASDF/SESSION|::|SESSION-OPERATE-LEVEL|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SESSION|::|SESSION-OPERATE-LEVEL|))
    :|INITARGS| '(:|OPERATE-LEVEL|) :|INITFORM| '0. :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| 0.) :|DOCUMENTATION|
    '"Number of nested calls to operate we're under (for toplevel session only)")
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|ASDF-UPGRADED-P| :|READERS|
    '(|ASDF/SESSION|::|ASDF-UPGRADED-P|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SESSION|::|ASDF-UPGRADED-P|)) :|INITARGS|
    '(:|ASDF-UPGRADED-P|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)
    :|DOCUMENTATION|
    '"Was ASDF already upgraded in this session - only valid for toplevel-asdf-session.")
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|FORCING| :|READERS|
    '(|ASDF/SESSION|::|FORCING|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SESSION|::|FORCING|)) :|INITARGS|
    '(:|FORCING|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)
    :|DOCUMENTATION| '"Forcing parameters for the session")
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|VISITED-ACTIONS| :|READERS|
    '(|ASDF/SESSION|::|VISITED-ACTIONS|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SESSION|::|VISITED-ACTIONS|)) :|INITFORM|
    '#3=(|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)
    :|INITFUNCTION|
    (|COMMON-LISP|::|FUNCTION| |ASDF/SESSION|::|DEFAULT-VISITED-ACTIONS|
     (|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| #3#)))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|VISITING-ACTION-SET|
    :|READERS| '(|ASDF/SESSION|::|VISITING-ACTION-SET|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SESSION|::|VISITING-ACTION-SET|))
    :|INITFORM|
    '#4=(|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)
    :|INITFUNCTION|
    (|COMMON-LISP|::|FUNCTION| |ASDF/SESSION|::|DEFAULT-VISITING-ACTION-SET|
     (|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| #4#)))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|VISITING-ACTION-LIST|
    :|READERS| '(|ASDF/SESSION|::|VISITING-ACTION-LIST|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SESSION|::|VISITING-ACTION-LIST|))
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|TOTAL-ACTION-COUNT|
    :|READERS| '(|ASDF/SESSION|::|TOTAL-ACTION-COUNT|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SESSION|::|TOTAL-ACTION-COUNT|)) :|INITFORM|
    '0. :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| 0.))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|PLANNED-ACTION-COUNT|
    :|READERS| '(|ASDF/SESSION|::|PLANNED-ACTION-COUNT|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SESSION|::|PLANNED-ACTION-COUNT|))
    :|INITFORM| '0. :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| 0.))
   (|COMMON-LISP|::|LIST| :|NAME|
    '|ASDF/SESSION|::|PLANNED-OUTPUT-ACTION-COUNT| :|READERS|
    '(|ASDF/SESSION|::|PLANNED-OUTPUT-ACTION-COUNT|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SESSION|::|PLANNED-OUTPUT-ACTION-COUNT|))
    :|INITFORM| '0. :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| 0.)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"An ASDF session with a cache to memoize some computations"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|SESSION-ANCESTOR|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|SESSION-CACHE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|SESSION-OPERATE-LEVEL|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SESSION|::|SESSION-OPERATE-LEVEL|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|ASDF-UPGRADED-P|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/SESSION|::|ASDF-UPGRADED-P|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|FORCING|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/SESSION|::|FORCING|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|VISITED-ACTIONS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/SESSION|::|VISITED-ACTIONS|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|VISITING-ACTION-SET|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SESSION|::|VISITING-ACTION-SET|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|VISITING-ACTION-LIST|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SESSION|::|VISITING-ACTION-LIST|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|TOTAL-ACTION-COUNT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SESSION|::|TOTAL-ACTION-COUNT|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|PLANNED-ACTION-COUNT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SESSION|::|PLANNED-ACTION-COUNT|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|PLANNED-OUTPUT-ACTION-COUNT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SESSION|::|PLANNED-OUTPUT-ACTION-COUNT|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SESSION|::|TOPLEVEL-ASDF-SESSION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|TOPLEVEL-ASDF-SESSION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SESSION|::|OPERATE-LEVEL|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|OPERATE-LEVEL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   (|COMMON-LISP|::|SETF| |ASDF/SESSION|::|OPERATE-LEVEL|)))
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/SESSION|::|OPERATE-LEVEL|)
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SESSION|::|NEW-LEVEL|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SESSION|::|ASDF-CACHE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|ASDF-CACHE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SESSION|::|SET-ASDF-CACHE-ENTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|SET-ASDF-CACHE-ENTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SESSION|::|KEY| |ASDF/SESSION|::|VALUE-LIST|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SESSION|::|UNSET-ASDF-CACHE-ENTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|UNSET-ASDF-CACHE-ENTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SESSION|::|KEY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SESSION|::|CONSULT-ASDF-CACHE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|CONSULT-ASDF-CACHE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SESSION|::|KEY| |COMMON-LISP|::|&OPTIONAL| |ASDF/SESSION|::|THUNK|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|ASDF/SESSION|::|DO-ASDF-CACHE|)
(|SYSTEM|::|%PUTD| '|ASDF/SESSION|::|DO-ASDF-CACHE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |ASDF/SESSION|::|DO-ASDF-CACHE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|ASDF/SESSION|::|KEY|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|ASDF/SESSION|::|BODY| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |ASDF/SESSION|::|DO-ASDF-CACHE|
       `(|ASDF/SESSION|::|CONSULT-ASDF-CACHE| ,|ASDF/SESSION|::|KEY|
         #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
            ,@|ASDF/SESSION|::|BODY|)))))))
  '(|ASDF/SESSION|::|KEY| |COMMON-LISP|::|&BODY| |ASDF/SESSION|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SESSION|::|CALL-WITH-ASDF-SESSION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|CALL-WITH-ASDF-SESSION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SESSION|::|THUNK| |COMMON-LISP|::|&KEY| |ASDF/SESSION|::|OVERRIDE|
    |ASDF/SESSION|::|KEY| |ASDF/SESSION|::|OVERRIDE-CACHE|
    |ASDF/SESSION|::|OVERRIDE-FORCING|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|ASDF/SESSION|::|WITH-ASDF-SESSION|)
(|SYSTEM|::|%PUTD| '|ASDF/SESSION|::|WITH-ASDF-SESSION|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |ASDF/SESSION|::|WITH-ASDF-SESSION|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G22287| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G22288| #1#) (#4=#:|G22289| #3#)
       (|ASDF/SESSION|::|KEY|
        (|COMMON-LISP|::|GETF| #4# ':|KEY| . #5=(|COMMON-LISP|::|NIL|)))
       (|ASDF/SESSION|::|OVERRIDE|
        (|COMMON-LISP|::|GETF| #4# ':|OVERRIDE| . #5#))
       (|ASDF/SESSION|::|OVERRIDE-CACHE|
        (|COMMON-LISP|::|GETF| #4# ':|OVERRIDE-CACHE| . #5#))
       (|ASDF/SESSION|::|OVERRIDE-FORCING|
        (|COMMON-LISP|::|GETF| #4# ':|OVERRIDE-FORCING| . #5#))
       (|ASDF/SESSION|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|SYSTEM|::|KEYWORD-TEST| #4#
       '(:|OVERRIDE-FORCING| :|OVERRIDE-CACHE| :|OVERRIDE| :|KEY|))
      (|COMMON-LISP|::|BLOCK| |ASDF/SESSION|::|WITH-ASDF-SESSION|
       `(|ASDF/SESSION|::|CALL-WITH-ASDF-SESSION|
         #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
            ,@|ASDF/SESSION|::|BODY|)
         :|OVERRIDE| ,|ASDF/SESSION|::|OVERRIDE| :|KEY| ,|ASDF/SESSION|::|KEY|
         :|OVERRIDE-CACHE| ,|ASDF/SESSION|::|OVERRIDE-CACHE|
         :|OVERRIDE-FORCING| ,|ASDF/SESSION|::|OVERRIDE-FORCING|))))))
  '((|COMMON-LISP|::|&KEY| |ASDF/SESSION|::|KEY| |ASDF/SESSION|::|OVERRIDE|
     |ASDF/SESSION|::|OVERRIDE-CACHE| |ASDF/SESSION|::|OVERRIDE-FORCING|)
    |COMMON-LISP|::|&BODY| |ASDF/SESSION|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SESSION|::|NORMALIZE-NAMESTRING|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|NORMALIZE-NAMESTRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SESSION|::|COMPUTE-FILE-STAMP|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|COMPUTE-FILE-STAMP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SESSION|::|NORMALIZED-NAMESTRING|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SESSION|::|REGISTER-FILE-STAMP|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|REGISTER-FILE-STAMP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SESSION|::|FILE| |COMMON-LISP|::|&OPTIONAL|
    (|ASDF/SESSION|::|STAMP| |COMMON-LISP|::|NIL| |ASDF/SESSION|::|STAMPP|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SESSION|::|GET-FILE-STAMP|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|GET-FILE-STAMP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SESSION|::|FILE|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G22334| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|ERROR|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G22337| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/SESSION|::|FORMATTED-SYSTEM-DEFINITION-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|FORMAT-CONTROL| :|READERS|
    '(|ASDF/SESSION|::|FORMAT-CONTROL|) :|INITARGS| '(:|FORMAT-CONTROL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|FORMAT-ARGUMENTS|
    :|READERS| '(|ASDF/SESSION|::|FORMAT-ARGUMENTS|) :|INITARGS|
    '(:|FORMAT-ARGUMENTS|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|FORMAT-CONTROL|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|FORMAT-ARGUMENTS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SESSION|::|SYSDEF-ERROR|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|SYSDEF-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|&REST|
    |ASDF/SESSION|::|ARGUMENTS|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/COMPONENT|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE| '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|COMPONENT| #:|COMPONENT-FIND-PATH| #:|FIND-COMPONENT| #:|COMPONENT-NAME|
    #:|COMPONENT-PATHNAME| #:|COMPONENT-RELATIVE-PATHNAME| #:|COMPONENT-PARENT|
    #:|COMPONENT-SYSTEM| #:|COMPONENT-PARENT-PATHNAME| #:|CHILD-COMPONENT|
    #:|PARENT-COMPONENT| #:|MODULE| #:|FILE-COMPONENT| #:|SOURCE-FILE|
    #:|C-SOURCE-FILE| #:|JAVA-SOURCE-FILE| #:|STATIC-FILE| #:|DOC-FILE|
    #:|HTML-FILE| #:|FILE-TYPE| #:|SOURCE-FILE-TYPE|
    #:|SOURCE-FILE-EXPLICIT-TYPE| #:|COMPONENT-IN-ORDER-TO|
    #:|COMPONENT-SIDEWAY-DEPENDENCIES| #:|COMPONENT-IF-FEATURE|
    #:|AROUND-COMPILE-HOOK| #:|COMPONENT-DESCRIPTION|
    #:|COMPONENT-LONG-DESCRIPTION| #:|COMPONENT-VERSION| #:|VERSION-SATISFIES|
    #:|COMPONENT-INLINE-METHODS| #:|COMPONENT-OPERATION-TIMES|
    #:|COMPONENT-EXTERNAL-FORMAT| #:|COMPONENT-ENCODING|
    #:|COMPONENT-CHILDREN-BY-NAME| #:|COMPONENT-CHILDREN|
    #:|COMPUTE-CHILDREN-BY-NAME| #:|COMPONENT-BUILD-OPERATION|
    #:|MODULE-DEFAULT-COMPONENT-CLASS| #:|MODULE-COMPONENTS| #:|SUB-COMPONENTS|
    #:|DUPLICATE-NAMES| #:|NAME| #:|VERSION| #:|DESCRIPTION|
    #:|LONG-DESCRIPTION| #:|AUTHOR| #:|MAINTAINER| #:|LICENCE|
    #:|COMPONENTS-BY-NAME| #:|COMPONENTS| #:|CHILDREN| #:|CHILDREN-BY-NAME|
    #:|DEFAULT-COMPONENT-CLASS| #:|SOURCE-FILE| #:|DEFSYSTEM-DEPENDS-ON|
    #:|SIDEWAY-DEPENDENCIES| #:|IF-FEATURE| #:|IN-ORDER-TO| #:|INLINE-METHODS|
    #:|RELATIVE-PATHNAME| #:|ABSOLUTE-PATHNAME| #:|OPERATION-TIMES|
    #:|AROUND-COMPILE| #:|%ENCODING| #:|PROPERTIES| #:|COMPONENT-PROPERTIES|
    #:|PARENT|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/COMPONENT| :|ASDF/FIND-COMPONENT| :|ASDF|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/COMPONENT"))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|COMPONENT-NAME|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION| "Name of the COMPONENT, unique relative to its parent"))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|COMPONENT-SYSTEM|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION| "Top-level system containing the COMPONENT"))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|COMPONENT-PATHNAME|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION| "Pathname of the COMPONENT if any, or NIL."))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|COMPONENT-RELATIVE-PATHNAME|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Specified pathname of the COMPONENT,\n
intended to be merged with the pathname of that component's parent if any, using merged-pathnames*.\n
Despite the function's name, the return value can be an absolute pathname, in which case the merge\n
will leave it unmodified."))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|COMPONENT-EXTERNAL-FORMAT|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "The external-format of the COMPONENT.\n
By default, deduced from the COMPONENT-ENCODING."))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|COMPONENT-ENCODING|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "The encoding of the COMPONENT. By default, only :utf-8 is supported.\n
Use asdf-encodings to support more encodings."))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|VERSION-SATISFIES|
 (|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|VERSION|)
 (:|DOCUMENTATION|
  "Check whether a COMPONENT satisfies the constraint of being at least as recent\n
as the specified VERSION, which must be a string of dot-separated natural numbers, or NIL."))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|COMPONENT-VERSION|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Return the version of a COMPONENT, which must be a string of dot-separated\n
natural numbers, or NIL."))
(|UIOP/UTILITY|::|DEFGENERIC*|
 (|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-VERSION|)
 (|ASDF/COMPONENT|::|NEW-VERSION| |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Updates the version of a COMPONENT, which must be a string of dot-separated\n
natural numbers, or NIL."))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|COMPONENT-PARENT|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "The parent of a child COMPONENT,\n
or NIL for top-level components (a.k.a. systems)"))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|COMPONENT-PARENT|
 ((|ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|NULL|)) |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|SOURCE-FILE-TYPE|
 (|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|SYSTEM|)
 (:|DOCUMENTATION| "DEPRECATED. Use the FILE-TYPE of a COMPONENT instead."))
(|COMMON-LISP|::|DEFINE-CONDITION| |ASDF/COMPONENT|::|DUPLICATE-NAMES|
 (|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
 ((|ASDF/COMPONENT|::|NAME| :|INITARG| :|NAME| :|READER|
   |ASDF/COMPONENT|::|DUPLICATE-NAMES-NAME|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA| (|ASDF/COMPONENT|::|C| |ASDF/COMPONENT|::|S|)
   (|COMMON-LISP|::|FORMAT| |ASDF/COMPONENT|::|S|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<Error while defining system: multiple components are given same name ~S~@:>")
    (|ASDF/COMPONENT|::|DUPLICATE-NAMES-NAME| |ASDF/COMPONENT|::|C|)))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|COMPONENT-NAME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-NAME|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|COMPONENT-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-SYSTEM|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|COMPONENT-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-PATHNAME|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|COMPONENT-RELATIVE-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-RELATIVE-PATHNAME|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|COMPONENT-EXTERNAL-FORMAT|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-EXTERNAL-FORMAT|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|COMPONENT-ENCODING|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-ENCODING|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|VERSION-SATISFIES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|VERSION-SATISFIES|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|COMPONENT-VERSION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-VERSION|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   (|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-VERSION|)))
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-VERSION|)
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|COMPONENT-PARENT|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-PARENT|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-PARENT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|SOURCE-FILE-TYPE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|SOURCE-FILE-TYPE|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|COMMON-LISP|::|LET*| ((#1=#:|G22705| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/COMPONENT|::|DUPLICATE-NAMES| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|NAME| :|READERS|
    '(|ASDF/COMPONENT|::|DUPLICATE-NAMES-NAME|) :|INITARGS| '(:|NAME|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|DUPLICATE-NAMES-NAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFCLASS| |ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|NIL|
 ((|ASDF/COMPONENT|::|NAME| :|ACCESSOR| |ASDF/COMPONENT|::|COMPONENT-NAME|
   :|INITARG| :|NAME| :|TYPE| |COMMON-LISP|::|STRING| :|DOCUMENTATION|
   "Component name: designator for a string composed of portable pathname characters")
  (|ASDF/COMPONENT|::|VERSION| :|ACCESSOR|
   |ASDF/COMPONENT|::|COMPONENT-VERSION| :|INITARG| :|VERSION| :|INITFORM|
   |COMMON-LISP|::|NIL|)
  (|ASDF/COMPONENT|::|DESCRIPTION| :|ACCESSOR|
   |ASDF/COMPONENT|::|COMPONENT-DESCRIPTION| :|INITARG| :|DESCRIPTION|
   :|INITFORM| |COMMON-LISP|::|NIL|)
  (|ASDF/COMPONENT|::|LONG-DESCRIPTION| :|ACCESSOR|
   |ASDF/COMPONENT|::|COMPONENT-LONG-DESCRIPTION| :|INITARG|
   :|LONG-DESCRIPTION| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|ASDF/COMPONENT|::|SIDEWAY-DEPENDENCIES| :|ACCESSOR|
   |ASDF/COMPONENT|::|COMPONENT-SIDEWAY-DEPENDENCIES| :|INITFORM|
   |COMMON-LISP|::|NIL|)
  (|ASDF/COMPONENT|::|IF-FEATURE| :|ACCESSOR|
   |ASDF/COMPONENT|::|COMPONENT-IF-FEATURE| :|INITFORM| |COMMON-LISP|::|NIL|
   :|INITARG| :|IF-FEATURE|)
  (|ASDF/COMPONENT|::|IN-ORDER-TO| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|IN-ORDER-TO| :|ACCESSOR| |ASDF/COMPONENT|::|COMPONENT-IN-ORDER-TO|)
  (|ASDF/COMPONENT|::|INLINE-METHODS| :|ACCESSOR|
   |ASDF/COMPONENT|::|COMPONENT-INLINE-METHODS| :|INITFORM|
   |COMMON-LISP|::|NIL|)
  (|ASDF/COMPONENT|::|RELATIVE-PATHNAME| :|INITARG| :|PATHNAME|)
  (|ASDF/COMPONENT|::|ABSOLUTE-PATHNAME|)
  (|ASDF/COMPONENT|::|OPERATION-TIMES| :|INITFORM|
   (|COMMON-LISP|::|MAKE-HASH-TABLE|) :|ACCESSOR|
   |ASDF/COMPONENT|::|COMPONENT-OPERATION-TIMES|)
  (|ASDF/COMPONENT|::|AROUND-COMPILE| :|INITARG| :|AROUND-COMPILE|)
  (|ASDF/COMPONENT|::|PROPERTIES| :|ACCESSOR|
   |ASDF/COMPONENT|::|COMPONENT-PROPERTIES| :|INITARG| :|PROPERTIES|
   :|INITFORM| |COMMON-LISP|::|NIL|)
  (|ASDF/COMPONENT|::|%ENCODING| :|ACCESSOR|
   |ASDF/COMPONENT|::|%COMPONENT-ENCODING| :|INITFORM| |COMMON-LISP|::|NIL|
   :|INITARG| :|ENCODING|)
  (|ASDF/COMPONENT|::|PARENT| :|INITARG| :|PARENT| :|INITFORM|
   |COMMON-LISP|::|NIL| :|READER| |ASDF/COMPONENT|::|COMPONENT-PARENT|)
  (|ASDF/COMPONENT|::|BUILD-OPERATION| :|INITARG| :|BUILD-OPERATION|
   :|INITFORM| |COMMON-LISP|::|NIL| :|READER|
   |ASDF/COMPONENT|::|COMPONENT-BUILD-OPERATION|)
  (|ASDF/COMPONENT|::|ADDITIONAL-INPUT-FILES| :|ACCESSOR|
   |ASDF/COMPONENT|::|%ADDITIONAL-INPUT-FILES| :|INITFORM|
   |COMMON-LISP|::|NIL|))
 (:|DOCUMENTATION| "Base class for all components of a build"))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|FIND-COMPONENT|
 (|ASDF/COMPONENT|::|BASE| |ASDF/COMPONENT|::|PATH| |COMMON-LISP|::|&KEY|
  |ASDF/COMPONENT|::|REGISTERED|)
 (:|DOCUMENTATION|
  "Find a component by resolving the PATH starting from BASE parent.\n
If REGISTERED is true, only search currently registered systems."))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/COMPONENT|::|COMPONENT-FIND-PATH|
 (|ASDF/COMPONENT|::|COMPONENT|)
 "Return a path from a root system to the COMPONENT.\n
The return value is a list of component NAMES; a list of strings."
 (|COMMON-LISP|::|CHECK-TYPE| |ASDF/COMPONENT|::|COMPONENT|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|REVERSE|
  (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/COMPONENT|::|C| |COMMON-LISP|::|=|
   |ASDF/COMPONENT|::|COMPONENT| :|THEN|
   (|ASDF/COMPONENT|::|COMPONENT-PARENT| |ASDF/COMPONENT|::|C|) :|WHILE|
   |ASDF/COMPONENT|::|C| :|COLLECT|
   (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/COMPONENT|::|C|))))
(|CLOS|::|DEFMETHOD| |CLOS|::|PRINT-OBJECT|
 ((|ASDF/COMPONENT|::|C| |ASDF/COMPONENT|::|COMPONENT|)
  |COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|PRINT-UNREADABLE-OBJECT|
  (|ASDF/COMPONENT|::|C| |COMMON-LISP|::|STREAM| :|TYPE| |COMMON-LISP|::|T|
   :|IDENTITY| |COMMON-LISP|::|NIL|)
  (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|STREAM| "~{~S~^ ~}"
   (|ASDF/COMPONENT|::|COMPONENT-FIND-PATH| |ASDF/COMPONENT|::|C|))))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|COMPONENT-SYSTEM|
 ((|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|COMPONENT|))
 (|UIOP/UTILITY|::|IF-LET|
  (|ASDF/COMPONENT|::|SYSTEM|
   (|ASDF/COMPONENT|::|COMPONENT-PARENT| |ASDF/COMPONENT|::|COMPONENT|))
  (|ASDF/COMPONENT|::|COMPONENT-SYSTEM| |ASDF/COMPONENT|::|SYSTEM|)
  |ASDF/COMPONENT|::|COMPONENT|))
(|COMMON-LISP|::|LET*| ((#1=#:|G22968| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/COMPONENT|::|COMPONENT| :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|NAME| :|READERS|
    '(|ASDF/COMPONENT|::|COMPONENT-NAME|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-NAME|)) :|INITARGS|
    '(:|NAME|) :|TYPE| '|COMMON-LISP|::|STRING| :|DOCUMENTATION|
    '"Component name: designator for a string composed of portable pathname characters")
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|VERSION| :|READERS|
    '(|ASDF/COMPONENT|::|COMPONENT-VERSION|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-VERSION|))
    :|INITARGS| '(:|VERSION|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|DESCRIPTION| :|READERS|
    '(|ASDF/COMPONENT|::|COMPONENT-DESCRIPTION|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-DESCRIPTION|))
    :|INITARGS| '(:|DESCRIPTION|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|LONG-DESCRIPTION|
    :|READERS| '(|ASDF/COMPONENT|::|COMPONENT-LONG-DESCRIPTION|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-LONG-DESCRIPTION|))
    :|INITARGS| '(:|LONG-DESCRIPTION|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|SIDEWAY-DEPENDENCIES|
    :|READERS| '(|ASDF/COMPONENT|::|COMPONENT-SIDEWAY-DEPENDENCIES|) :|WRITERS|
    '((|COMMON-LISP|::|SETF|
       |ASDF/COMPONENT|::|COMPONENT-SIDEWAY-DEPENDENCIES|))
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|IF-FEATURE| :|READERS|
    '(|ASDF/COMPONENT|::|COMPONENT-IF-FEATURE|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-IF-FEATURE|))
    :|INITARGS| '(:|IF-FEATURE|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|IN-ORDER-TO| :|READERS|
    '(|ASDF/COMPONENT|::|COMPONENT-IN-ORDER-TO|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-IN-ORDER-TO|))
    :|INITARGS| '(:|IN-ORDER-TO|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|INLINE-METHODS|
    :|READERS| '(|ASDF/COMPONENT|::|COMPONENT-INLINE-METHODS|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-INLINE-METHODS|))
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|RELATIVE-PATHNAME|
    :|INITARGS| '(:|PATHNAME|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|ABSOLUTE-PATHNAME|)
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|OPERATION-TIMES|
    :|READERS| '(|ASDF/COMPONENT|::|COMPONENT-OPERATION-TIMES|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-OPERATION-TIMES|))
    :|INITFORM| '#2=(|COMMON-LISP|::|MAKE-HASH-TABLE|) :|INITFUNCTION|
    (|COMMON-LISP|::|FUNCTION| |ASDF/COMPONENT|::|DEFAULT-OPERATION-TIMES|
     (|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| #2#)))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|AROUND-COMPILE|
    :|INITARGS| '(:|AROUND-COMPILE|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|PROPERTIES| :|READERS|
    '(|ASDF/COMPONENT|::|COMPONENT-PROPERTIES|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-PROPERTIES|))
    :|INITARGS| '(:|PROPERTIES|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|%ENCODING| :|READERS|
    '(|ASDF/COMPONENT|::|%COMPONENT-ENCODING|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|%COMPONENT-ENCODING|))
    :|INITARGS| '(:|ENCODING|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|PARENT| :|READERS|
    '(|ASDF/COMPONENT|::|COMPONENT-PARENT|) :|INITARGS| '(:|PARENT|)
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|BUILD-OPERATION|
    :|READERS| '(|ASDF/COMPONENT|::|COMPONENT-BUILD-OPERATION|) :|INITARGS|
    '(:|BUILD-OPERATION|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|ADDITIONAL-INPUT-FILES|
    :|READERS| '(|ASDF/COMPONENT|::|%ADDITIONAL-INPUT-FILES|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|%ADDITIONAL-INPUT-FILES|))
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1# :|DOCUMENTATION| '"Base class for all components of a build"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-NAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-NAME|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-VERSION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-VERSION|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-DESCRIPTION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-DESCRIPTION|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-LONG-DESCRIPTION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-LONG-DESCRIPTION|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-SIDEWAY-DEPENDENCIES|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-SIDEWAY-DEPENDENCIES|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-IF-FEATURE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-IF-FEATURE|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-IN-ORDER-TO|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-IN-ORDER-TO|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-INLINE-METHODS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-INLINE-METHODS|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-OPERATION-TIMES|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-OPERATION-TIMES|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-PROPERTIES|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-PROPERTIES|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|%COMPONENT-ENCODING|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|%COMPONENT-ENCODING|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-PARENT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-BUILD-OPERATION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|%ADDITIONAL-INPUT-FILES|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|%ADDITIONAL-INPUT-FILES|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|FIND-COMPONENT|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|FIND-COMPONENT|
 '#(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|REGISTERED|)
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|COMPONENT-FIND-PATH|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-FIND-PATH|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/COMPONENT|::|COMPONENT|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-SYSTEM|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFCLASS| |ASDF/COMPONENT|::|CHILD-COMPONENT|
 (|ASDF/COMPONENT|::|COMPONENT|) |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "A CHILD-COMPONENT is a COMPONENT that may be part of\n
a PARENT-COMPONENT."))
(|CLOS|::|DEFCLASS| |ASDF/COMPONENT|::|FILE-COMPONENT|
 (|ASDF/COMPONENT|::|CHILD-COMPONENT|)
 ((|COMMON-LISP|::|TYPE| :|ACCESSOR| |ASDF/COMPONENT|::|FILE-TYPE| :|INITARG|
   :|TYPE|))
 (:|DOCUMENTATION| "a COMPONENT that represents a file"))
(|CLOS|::|DEFCLASS| |ASDF/COMPONENT|::|SOURCE-FILE|
 (|ASDF/COMPONENT|::|FILE-COMPONENT|)
 ((|COMMON-LISP|::|TYPE| :|ACCESSOR|
   |ASDF/COMPONENT|::|SOURCE-FILE-EXPLICIT-TYPE| :|INITFORM|
   |COMMON-LISP|::|NIL|)))
(|CLOS|::|DEFCLASS| |ASDF/COMPONENT|::|C-SOURCE-FILE|
 (|ASDF/COMPONENT|::|SOURCE-FILE|) ((|COMMON-LISP|::|TYPE| :|INITFORM| "c")))
(|CLOS|::|DEFCLASS| |ASDF/COMPONENT|::|JAVA-SOURCE-FILE|
 (|ASDF/COMPONENT|::|SOURCE-FILE|)
 ((|COMMON-LISP|::|TYPE| :|INITFORM| "java")))
(|CLOS|::|DEFCLASS| |ASDF/COMPONENT|::|STATIC-FILE|
 (|ASDF/COMPONENT|::|SOURCE-FILE|)
 ((|COMMON-LISP|::|TYPE| :|INITFORM| |COMMON-LISP|::|NIL|))
 (:|DOCUMENTATION|
  "Component for a file to be included as is in the build output"))
(|CLOS|::|DEFCLASS| |ASDF/COMPONENT|::|DOC-FILE|
 (|ASDF/COMPONENT|::|STATIC-FILE|) |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFCLASS| |ASDF/COMPONENT|::|HTML-FILE|
 (|ASDF/COMPONENT|::|DOC-FILE|) ((|COMMON-LISP|::|TYPE| :|INITFORM| "html")))
(|CLOS|::|DEFCLASS| |ASDF/COMPONENT|::|PARENT-COMPONENT|
 (|ASDF/COMPONENT|::|COMPONENT|)
 ((|ASDF/COMPONENT|::|CHILDREN| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|COMPONENTS| :|READER| |ASDF/COMPONENT|::|MODULE-COMPONENTS| :|ACCESSOR|
   |ASDF/COMPONENT|::|COMPONENT-CHILDREN|)
  (|ASDF/COMPONENT|::|CHILDREN-BY-NAME| :|READER|
   |ASDF/COMPONENT|::|MODULE-COMPONENTS-BY-NAME| :|ACCESSOR|
   |ASDF/COMPONENT|::|COMPONENT-CHILDREN-BY-NAME|)
  (|ASDF/COMPONENT|::|DEFAULT-COMPONENT-CLASS| :|INITFORM| |COMMON-LISP|::|NIL|
   :|INITARG| :|DEFAULT-COMPONENT-CLASS| :|ACCESSOR|
   |ASDF/COMPONENT|::|MODULE-DEFAULT-COMPONENT-CLASS|))
 (:|DOCUMENTATION|
  "A PARENT-COMPONENT is a component that may have children."))
(|COMMON-LISP|::|LET*| ((#1=#:|G23304| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/COMPONENT|::|CHILD-COMPONENT| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|COMPONENT|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"A CHILD-COMPONENT is a COMPONENT that may be part of\n
a PARENT-COMPONENT."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G23307| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/COMPONENT|::|FILE-COMPONENT| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|CHILD-COMPONENT|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|TYPE| :|READERS|
    '(|ASDF/COMPONENT|::|FILE-TYPE|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|FILE-TYPE|)) :|INITARGS|
    '(:|TYPE|)))
  :|METACLASS| #1# :|DOCUMENTATION| '"a COMPONENT that represents a file"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|FILE-TYPE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|FILE-TYPE|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G23317| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/COMPONENT|::|SOURCE-FILE| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|FILE-COMPONENT|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|TYPE| :|READERS|
    '(|ASDF/COMPONENT|::|SOURCE-FILE-EXPLICIT-TYPE|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|SOURCE-FILE-EXPLICIT-TYPE|))
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|SOURCE-FILE-EXPLICIT-TYPE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|SOURCE-FILE-EXPLICIT-TYPE|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G23327| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/COMPONENT|::|C-SOURCE-FILE| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|SOURCE-FILE|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|TYPE| :|INITFORM| '#2="c"
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G23330| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/COMPONENT|::|JAVA-SOURCE-FILE| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|SOURCE-FILE|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|TYPE| :|INITFORM| '#2="java"
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G23333| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/COMPONENT|::|STATIC-FILE| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|SOURCE-FILE|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|TYPE| :|INITFORM|
    '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Component for a file to be included as is in the build output"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G23336| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/COMPONENT|::|DOC-FILE|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|STATIC-FILE|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G23339| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/COMPONENT|::|HTML-FILE| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|DOC-FILE|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|TYPE| :|INITFORM| '#2="html"
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G23342| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/COMPONENT|::|PARENT-COMPONENT| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|COMPONENT|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|CHILDREN| :|READERS|
    '(|ASDF/COMPONENT|::|MODULE-COMPONENTS|
      |ASDF/COMPONENT|::|COMPONENT-CHILDREN|)
    :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-CHILDREN|))
    :|INITARGS| '(:|COMPONENTS|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|CHILDREN-BY-NAME|
    :|READERS|
    '(|ASDF/COMPONENT|::|MODULE-COMPONENTS-BY-NAME|
      |ASDF/COMPONENT|::|COMPONENT-CHILDREN-BY-NAME|)
    :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-CHILDREN-BY-NAME|)))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|DEFAULT-COMPONENT-CLASS|
    :|READERS| '(|ASDF/COMPONENT|::|MODULE-DEFAULT-COMPONENT-CLASS|) :|WRITERS|
    '((|COMMON-LISP|::|SETF|
       |ASDF/COMPONENT|::|MODULE-DEFAULT-COMPONENT-CLASS|))
    :|INITARGS| '(:|DEFAULT-COMPONENT-CLASS|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"A PARENT-COMPONENT is a component that may have children."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|MODULE-COMPONENTS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-CHILDREN|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-CHILDREN|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|MODULE-COMPONENTS-BY-NAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-CHILDREN-BY-NAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT-CHILDREN-BY-NAME|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|MODULE-DEFAULT-COMPONENT-CLASS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|MODULE-DEFAULT-COMPONENT-CLASS|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/COMPONENT|::|COMPUTE-CHILDREN-BY-NAME|
 (|ASDF/COMPONENT|::|PARENT| |COMMON-LISP|::|&KEY|
  |ASDF/COMPONENT|::|ONLY-IF-NEEDED-P|)
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|AND| |ASDF/COMPONENT|::|ONLY-IF-NEEDED-P|
   (|CLOS|::|SLOT-BOUNDP| |ASDF/COMPONENT|::|PARENT|
    '|ASDF/COMPONENT|::|CHILDREN-BY-NAME|))
  (|COMMON-LISP|::|LET|
   ((|ASDF/COMPONENT|::|HASH|
     (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)))
   (|COMMON-LISP|::|SETF|
    (|ASDF/COMPONENT|::|COMPONENT-CHILDREN-BY-NAME| |ASDF/COMPONENT|::|PARENT|)
    |ASDF/COMPONENT|::|HASH|)
   (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/COMPONENT|::|C| :|IN|
    (|ASDF/COMPONENT|::|COMPONENT-CHILDREN| |ASDF/COMPONENT|::|PARENT|) :|FOR|
    |ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|=|
    (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/COMPONENT|::|C|) :|FOR|
    |ASDF/COMPONENT|::|PREVIOUS| |COMMON-LISP|::|=|
    (|COMMON-LISP|::|GETHASH| |ASDF/COMPONENT|::|NAME|
     |ASDF/COMPONENT|::|HASH|)
    :|DO|
    (|COMMON-LISP|::|WHEN| |ASDF/COMPONENT|::|PREVIOUS|
     (|COMMON-LISP|::|ERROR| '|ASDF/COMPONENT|::|DUPLICATE-NAMES| :|NAME|
      |ASDF/COMPONENT|::|NAME|))
    (|COMMON-LISP|::|SETF|
     (|COMMON-LISP|::|GETHASH| |ASDF/COMPONENT|::|NAME|
      |ASDF/COMPONENT|::|HASH|)
     |ASDF/COMPONENT|::|C|))
   |ASDF/COMPONENT|::|HASH|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|COMPUTE-CHILDREN-BY-NAME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPUTE-CHILDREN-BY-NAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/COMPONENT|::|PARENT| |COMMON-LISP|::|&KEY|
    |ASDF/COMPONENT|::|ONLY-IF-NEEDED-P|)))
(|CLOS|::|DEFCLASS| |ASDF/COMPONENT|::|MODULE|
 (|ASDF/COMPONENT|::|CHILD-COMPONENT| |ASDF/COMPONENT|::|PARENT-COMPONENT|)
 ((|ASDF/COMPONENT|::|COMPONENTS|))
 (:|DOCUMENTATION|
  "A module is a intermediate component with both a parent and children,\n
typically but not necessarily representing the files in a subdirectory of the build source."))
(|COMMON-LISP|::|LET*| ((#1=#:|G23408| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/COMPONENT|::|MODULE|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|CHILD-COMPONENT|
   '|ASDF/COMPONENT|::|PARENT-COMPONENT|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|COMPONENTS|))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"A module is a intermediate component with both a parent and children,\n
typically but not necessarily representing the files in a subdirectory of the build source."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|COMPONENT-PARENT-PATHNAME|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION| "The pathname of the COMPONENT's parent, if any, or NIL"))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|COMPONENT-PARENT-PATHNAME|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (|ASDF/COMPONENT|::|COMPONENT-PATHNAME|
  (|ASDF/COMPONENT|::|COMPONENT-PARENT| |ASDF/COMPONENT|::|COMPONENT|)))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|COMPONENT-PATHNAME|
 ((|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|IF|
  (|CLOS|::|SLOT-BOUNDP| |ASDF/COMPONENT|::|COMPONENT|
   '|ASDF/COMPONENT|::|ABSOLUTE-PATHNAME|)
  (|CLOS|::|SLOT-VALUE| |ASDF/COMPONENT|::|COMPONENT|
   '|ASDF/COMPONENT|::|ABSOLUTE-PATHNAME|)
  (|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|PATHNAME|
     (|UIOP/PATHNAME|::|MERGE-PATHNAMES*|
      (|ASDF/COMPONENT|::|COMPONENT-RELATIVE-PATHNAME|
       |ASDF/COMPONENT|::|COMPONENT|)
      (|UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME|
       (|ASDF/COMPONENT|::|COMPONENT-PARENT-PATHNAME|
        |ASDF/COMPONENT|::|COMPONENT|)))))
   (|COMMON-LISP|::|UNLESS|
    (|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |COMMON-LISP|::|PATHNAME|)
     (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |COMMON-LISP|::|PATHNAME|))
    (|COMMON-LISP|::|ERROR|
     (|UIOP/COMMON-LISP|::|COMPATFMT|
      "~@<Invalid relative pathname ~S for component ~S~@:>")
     |COMMON-LISP|::|PATHNAME|
     (|ASDF/COMPONENT|::|COMPONENT-FIND-PATH| |ASDF/COMPONENT|::|COMPONENT|)))
   (|COMMON-LISP|::|SETF|
    (|CLOS|::|SLOT-VALUE| |ASDF/COMPONENT|::|COMPONENT|
     '|ASDF/COMPONENT|::|ABSOLUTE-PATHNAME|)
    |COMMON-LISP|::|PATHNAME|)
   |COMMON-LISP|::|PATHNAME|)))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|COMPONENT-RELATIVE-PATHNAME|
 ((|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|COMPONENT|))
 (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING|
  (|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|AND|
    (|CLOS|::|SLOT-BOUNDP| |ASDF/COMPONENT|::|COMPONENT|
     '|ASDF/COMPONENT|::|RELATIVE-PATHNAME|)
    (|CLOS|::|SLOT-VALUE| |ASDF/COMPONENT|::|COMPONENT|
     '|ASDF/COMPONENT|::|RELATIVE-PATHNAME|))
   (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/COMPONENT|::|COMPONENT|))
  :|WANT-RELATIVE| |COMMON-LISP|::|T| :|TYPE|
  (|ASDF/COMPONENT|::|SOURCE-FILE-TYPE| |ASDF/COMPONENT|::|COMPONENT|
   (|ASDF/COMPONENT|::|COMPONENT-SYSTEM| |ASDF/COMPONENT|::|COMPONENT|))
  :|DEFAULTS|
  (|ASDF/COMPONENT|::|COMPONENT-PARENT-PATHNAME|
   |ASDF/COMPONENT|::|COMPONENT|)))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|SOURCE-FILE-TYPE|
 ((|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|PARENT-COMPONENT|)
  (|ASDF/COMPONENT|::|SYSTEM| |ASDF/COMPONENT|::|PARENT-COMPONENT|))
 :|DIRECTORY|)
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|SOURCE-FILE-TYPE|
 ((|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|FILE-COMPONENT|)
  (|ASDF/COMPONENT|::|SYSTEM| |ASDF/COMPONENT|::|PARENT-COMPONENT|))
 (|ASDF/COMPONENT|::|FILE-TYPE| |ASDF/COMPONENT|::|COMPONENT|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|COMPONENT-PARENT-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-PARENT-PATHNAME|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-PARENT-PATHNAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-PATHNAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-RELATIVE-PATHNAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|SOURCE-FILE-TYPE|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|SOURCE-FILE-TYPE|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|COMPONENT-ENCODING|
 ((|ASDF/COMPONENT|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|OR|
  (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/COMPONENT|::|X| |COMMON-LISP|::|=|
   |ASDF/COMPONENT|::|C| :|THEN|
   (|ASDF/COMPONENT|::|COMPONENT-PARENT| |ASDF/COMPONENT|::|X|) :|WHILE|
   |ASDF/COMPONENT|::|X| :|THEREIS|
   (|ASDF/COMPONENT|::|%COMPONENT-ENCODING| |ASDF/COMPONENT|::|X|))
  (|UIOP/STREAM|::|DETECT-ENCODING|
   (|ASDF/COMPONENT|::|COMPONENT-PATHNAME| |ASDF/COMPONENT|::|C|))))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|COMPONENT-EXTERNAL-FORMAT|
 ((|ASDF/COMPONENT|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|UIOP/STREAM|::|ENCODING-EXTERNAL-FORMAT|
  (|ASDF/COMPONENT|::|COMPONENT-ENCODING| |ASDF/COMPONENT|::|C|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-ENCODING|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-EXTERNAL-FORMAT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/COMPONENT|::|AROUND-COMPILE-HOOK|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "An optional hook function that will be called with one argument, a thunk.\n
The hook function must call the thunk, that will compile code from the component, and may or may not\n
also evaluate the compiled results. The hook function may establish dynamic variable bindings around\n
this compilation, or check its results, etc."))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|AROUND-COMPILE-HOOK|
 ((|ASDF/COMPONENT|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|COND|
  ((|CLOS|::|SLOT-BOUNDP| |ASDF/COMPONENT|::|C|
    '|ASDF/COMPONENT|::|AROUND-COMPILE|)
   (|CLOS|::|SLOT-VALUE| |ASDF/COMPONENT|::|C|
    '|ASDF/COMPONENT|::|AROUND-COMPILE|))
  ((|ASDF/COMPONENT|::|COMPONENT-PARENT| |ASDF/COMPONENT|::|C|)
   (|ASDF/COMPONENT|::|AROUND-COMPILE-HOOK|
    (|ASDF/COMPONENT|::|COMPONENT-PARENT| |ASDF/COMPONENT|::|C|)))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|AROUND-COMPILE-HOOK|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|AROUND-COMPILE-HOOK|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|AROUND-COMPILE-HOOK|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|VERSION-SATISFIES| :|AROUND|
 ((|ASDF/COMPONENT|::|C| |COMMON-LISP|::|T|)
  (|ASDF/COMPONENT|::|VERSION| |COMMON-LISP|::|NULL|))
 |COMMON-LISP|::|T|)
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|VERSION-SATISFIES|
 ((|ASDF/COMPONENT|::|C| |ASDF/COMPONENT|::|COMPONENT|)
  |ASDF/COMPONENT|::|VERSION|)
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|AND| |ASDF/COMPONENT|::|VERSION|
   (|CLOS|::|SLOT-BOUNDP| |ASDF/COMPONENT|::|C| '|ASDF/COMPONENT|::|VERSION|)
   (|ASDF/COMPONENT|::|COMPONENT-VERSION| |ASDF/COMPONENT|::|C|))
  (|COMMON-LISP|::|WHEN| |ASDF/COMPONENT|::|VERSION|
   (|COMMON-LISP|::|WARN| "Requested version ~S but ~S has no version"
    |ASDF/COMPONENT|::|VERSION| |ASDF/COMPONENT|::|C|))
  (|COMMON-LISP|::|RETURN-FROM| |ASDF/COMPONENT|::|VERSION-SATISFIES|
   |COMMON-LISP|::|NIL|))
 (|ASDF/COMPONENT|::|VERSION-SATISFIES|
  (|ASDF/COMPONENT|::|COMPONENT-VERSION| |ASDF/COMPONENT|::|C|)
  |ASDF/COMPONENT|::|VERSION|))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|VERSION-SATISFIES|
 ((|ASDF/COMPONENT|::|CVER| |COMMON-LISP|::|STRING|)
  |ASDF/COMPONENT|::|VERSION|)
 (|UIOP/VERSION|::|VERSION<=| |ASDF/COMPONENT|::|VERSION|
  |ASDF/COMPONENT|::|CVER|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|VERSION-SATISFIES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|VERSION-SATISFIES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|VERSION-SATISFIES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/COMPONENT|::|SUB-COMPONENTS|
 (|ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|&KEY|
  (|COMMON-LISP|::|TYPE| |COMMON-LISP|::|T|))
 "Compute the transitive sub-components of given COMPONENT that are of given TYPE"
 (|UIOP/UTILITY|::|WHILE-COLLECTING| (|ASDF/COMPONENT|::|C|)
  (|COMMON-LISP|::|LABELS|
   ((|ASDF/COMPONENT|::|RECURSE| (|ASDF/COMPONENT|::|X|)
     (|COMMON-LISP|::|WHEN|
      (|UIOP/UTILITY|::|IF-LET|
       (|ASDF/COMPONENT|::|IT|
        (|ASDF/COMPONENT|::|COMPONENT-IF-FEATURE| |ASDF/COMPONENT|::|X|))
       (|UIOP/OS|::|FEATUREP| |ASDF/COMPONENT|::|IT|) |COMMON-LISP|::|T|)
      (|COMMON-LISP|::|WHEN|
       (|COMMON-LISP|::|TYPEP| |ASDF/COMPONENT|::|X| |COMMON-LISP|::|TYPE|)
       (|ASDF/COMPONENT|::|C| |ASDF/COMPONENT|::|X|))
      (|COMMON-LISP|::|WHEN|
       (|COMMON-LISP|::|TYPEP| |ASDF/COMPONENT|::|X|
        '|ASDF/COMPONENT|::|PARENT-COMPONENT|)
       (|COMMON-LISP|::|MAP| |COMMON-LISP|::|NIL| #'|ASDF/COMPONENT|::|RECURSE|
        (|ASDF/COMPONENT|::|COMPONENT-CHILDREN| |ASDF/COMPONENT|::|X|))))))
   (|ASDF/COMPONENT|::|RECURSE| |ASDF/COMPONENT|::|COMPONENT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/COMPONENT|::|SUB-COMPONENTS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|SUB-COMPONENTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|&KEY|
    (|COMMON-LISP|::|TYPE| |COMMON-LISP|::|T|))))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/OPERATION|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE| '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|OPERATION| #:|*OPERATIONS*| #:|MAKE-OPERATION| #:|FIND-OPERATION|
    #:|FEATURE|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/OPERATION| :|ASDF/ACTION| :|ASDF|) :|MIX| '|COMMON-LISP|::|NIL|
  :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/OPERATION"))
(|COMMON-LISP|::|WHEN|
 (|COMMON-LISP|::|AND| (|ASDF/UPGRADE|::|UPGRADING-P| "2.27")
  (|CLOS|::|FIND-CLASS| '|ASDF/OPERATION|::|OPERATION| |COMMON-LISP|::|NIL|))
 (|COMMON-LISP|::|HANDLER-BIND|
  ((|COMMON-LISP|::|STYLE-WARNING| #'|COMMON-LISP|::|MUFFLE-WARNING|))
  (|COMMON-LISP|::|EVAL|
   '(|COMMON-LISP|::|PROGN|
     (|CLOS|::|DEFMETHOD| |CLOS|::|SHARED-INITIALIZE| :|AFTER|
      ((|ASDF/OPERATION|::|O| |ASDF/OPERATION|::|OPERATION|)
       (|ASDF/OPERATION|::|SLOT-NAMES| |COMMON-LISP|::|T|)
       |COMMON-LISP|::|&KEY|)
      (|COMMON-LISP|::|VALUES|))))))
(|CLOS|::|DEFCLASS| |ASDF/OPERATION|::|OPERATION| |COMMON-LISP|::|NIL|
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "The base class for all ASDF operations.\n\n
ASDF does NOT and never did distinguish between multiple operations of the same class.\n
Therefore, all slots of all operations MUST have :allocation :class and no initargs. No exceptions.\n"))
(|COMMON-LISP|::|DEFVAR| |ASDF/OPERATION|::|*IN-MAKE-OPERATION*|
 |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATION|::|CHECK-OPERATION-CONSTRUCTOR|
 |COMMON-LISP|::|NIL|
 "Enforce that OPERATION instances must be created with MAKE-OPERATION."
 (|COMMON-LISP|::|UNLESS| |ASDF/OPERATION|::|*IN-MAKE-OPERATION*|
  (|ASDF/SESSION|::|SYSDEF-ERROR|
   "OPERATION instances must only be created through MAKE-OPERATION.")))
(|CLOS|::|DEFMETHOD| |CLOS|::|PRINT-OBJECT|
 ((|ASDF/OPERATION|::|O| |ASDF/OPERATION|::|OPERATION|)
  |COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|PRINT-UNREADABLE-OBJECT|
  (|ASDF/OPERATION|::|O| |COMMON-LISP|::|STREAM| :|TYPE| |COMMON-LISP|::|T|
   :|IDENTITY| |COMMON-LISP|::|NIL|)))
(|CLOS|::|DEFMETHOD| |CLOS|::|INITIALIZE-INSTANCE| :|AFTER|
 ((|ASDF/OPERATION|::|O| |ASDF/OPERATION|::|OPERATION|) |COMMON-LISP|::|&REST|
  |ASDF/OPERATION|::|INITARGS| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|COMMON-LISP|::|UNLESS| (|COMMON-LISP|::|NULL| |ASDF/OPERATION|::|INITARGS|)
  (|UIOP/UTILITY|::|PARAMETER-ERROR| "~S does not accept initargs"
   '|ASDF/OPERATION|::|OPERATION|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G23877| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/OPERATION|::|OPERATION| :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"The base class for all ASDF operations.\n\n
ASDF does NOT and never did distinguish between multiple operations of the same class.\n
Therefore, all slots of all operations MUST have :allocation :class and no initargs. No exceptions.\n"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/OPERATION|::|*IN-MAKE-OPERATION*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATION|::|CHECK-OPERATION-CONSTRUCTOR|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATION|::|CHECK-OPERATION-CONSTRUCTOR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|INITIALIZE-INSTANCE|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|ASDF/UPGRADE|::|DEFPARAMETER*| |ASDF/OPERATION|::|*OPERATIONS*|
 (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATION|::|MAKE-OPERATION|
 (|ASDF/OPERATION|::|OPERATION-CLASS|)
 "This function creates and memoizes an instance of OPERATION-CLASS.\n
All operation instances MUST be created through this function.\n\n
Use of INITARGS is not supported at this time."
 (|COMMON-LISP|::|LET|
  ((|CLOS|::|CLASS|
    (|UIOP/UTILITY|::|COERCE-CLASS| |ASDF/OPERATION|::|OPERATION-CLASS|
     :|PACKAGE| :|ASDF/INTERFACE| :|SUPER| '|ASDF/OPERATION|::|OPERATION|
     :|ERROR| '|ASDF/SESSION|::|SYSDEF-ERROR|))
   (|ASDF/OPERATION|::|*IN-MAKE-OPERATION*| |COMMON-LISP|::|T|))
  (|UIOP/UTILITY|::|ENSURE-GETHASH| |CLOS|::|CLASS|
   |ASDF/OPERATION|::|*OPERATIONS*|
   `(|CLOS|::|MAKE-INSTANCE| ,|CLOS|::|CLASS|))))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/OPERATION|::|FIND-OPERATION|
 (|ASDF/OPERATION|::|CONTEXT| |ASDF/OPERATION|::|SPEC|)
 (:|DOCUMENTATION| "Find an operation by resolving the SPEC in the CONTEXT"))
(|CLOS|::|DEFMETHOD| |ASDF/OPERATION|::|FIND-OPERATION|
 ((|ASDF/OPERATION|::|CONTEXT| |COMMON-LISP|::|T|)
  (|ASDF/OPERATION|::|SPEC| |ASDF/OPERATION|::|OPERATION|))
 |ASDF/OPERATION|::|SPEC|)
(|CLOS|::|DEFMETHOD| |ASDF/OPERATION|::|FIND-OPERATION|
 ((|ASDF/OPERATION|::|CONTEXT| |COMMON-LISP|::|T|)
  (|ASDF/OPERATION|::|SPEC| |COMMON-LISP|::|SYMBOL|))
 (|COMMON-LISP|::|WHEN| |ASDF/OPERATION|::|SPEC|
  (|ASDF/OPERATION|::|MAKE-OPERATION| |ASDF/OPERATION|::|SPEC|)))
(|CLOS|::|DEFMETHOD| |ASDF/OPERATION|::|FIND-OPERATION|
 ((|ASDF/OPERATION|::|CONTEXT| |COMMON-LISP|::|T|)
  (|ASDF/OPERATION|::|SPEC| |COMMON-LISP|::|STRING|))
 (|ASDF/OPERATION|::|MAKE-OPERATION| |ASDF/OPERATION|::|SPEC|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATION|::|%COMPUTE-OPERATIONS-VALUE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/OPERATION|::|*OPERATIONS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATION|::|MAKE-OPERATION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATION|::|MAKE-OPERATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/OPERATION|::|OPERATION-CLASS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATION|::|FIND-OPERATION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATION|::|FIND-OPERATION|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATION|::|FIND-OPERATION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATION|::|FIND-OPERATION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATION|::|FIND-OPERATION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/SYSTEM|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|SYSTEM| #:|PROTO-SYSTEM| #:|UNDEFINED-SYSTEM| #:|RESET-SYSTEM-CLASS|
    #:|SYSTEM-SOURCE-FILE| #:|SYSTEM-SOURCE-DIRECTORY|
    #:|SYSTEM-RELATIVE-PATHNAME| #:|SYSTEM-DESCRIPTION|
    #:|SYSTEM-LONG-DESCRIPTION| #:|SYSTEM-AUTHOR| #:|SYSTEM-MAINTAINER|
    #:|SYSTEM-LICENCE| #:|SYSTEM-LICENSE| #:|DEFINITION-DEPENDENCY-LIST|
    #:|DEFINITION-DEPENDENCY-SET| #:|SYSTEM-DEFSYSTEM-DEPENDS-ON|
    #:|SYSTEM-DEPENDS-ON| #:|SYSTEM-WEAKLY-DEPENDS-ON|
    #:|COMPONENT-BUILD-PATHNAME| #:|BUILD-PATHNAME| #:|COMPONENT-ENTRY-POINT|
    #:|ENTRY-POINT| #:|HOMEPAGE| #:|SYSTEM-HOMEPAGE| #:|BUG-TRACKER|
    #:|SYSTEM-BUG-TRACKER| #:|MAILTO| #:|SYSTEM-MAILTO| #:|LONG-NAME|
    #:|SYSTEM-LONG-NAME| #:|SOURCE-CONTROL| #:|SYSTEM-SOURCE-CONTROL|
    #:|COERCE-NAME| #:|PRIMARY-SYSTEM-NAME| #:|PRIMARY-SYSTEM-P|
    #:|COERCE-FILENAME| #:|FIND-SYSTEM| #:|BUILTIN-SYSTEM-P|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF| :|ASDF/SYSTEM| :|ASDF/FIND-SYSTEM|) :|MIX| '|COMMON-LISP|::|NIL|
  :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/SYSTEM"))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/SYSTEM|::|FIND-SYSTEM|
 (|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&OPTIONAL| |ASDF/SYSTEM|::|ERROR-P|)
 (:|DOCUMENTATION|
  "Given a system designator, find the actual corresponding system object.\n
If no system is found, then signal an error if ERROR-P is true (the default), or else return NIL.\n
A system designator is usually a string (conventionally all lowercase) or a symbol, designating\n
the same system as its downcased name; it can also be a system object (designating itself)."))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
 (|ASDF/SYSTEM|::|SYSTEM|)
 (:|DOCUMENTATION| "Return the source file in which system is defined."))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/SYSTEM|::|COMPONENT-BUILD-PATHNAME|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "The COMPONENT-BUILD-PATHNAME, when defined and not null, specifies the\n
output pathname for the action using the COMPONENT-BUILD-OPERATION.\n\n
NB: This interface is subject to change. Please contact ASDF maintainers if you use it."))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/SYSTEM|::|COMPONENT-ENTRY-POINT|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "The COMPONENT-ENTRY-POINT, when defined, specifies what function to call\n
(with no argument) when running an image dumped from the COMPONENT.\n\n
NB: This interface is subject to change. Please contact ASDF maintainers if you use it."))
(|CLOS|::|DEFMETHOD| |ASDF/SYSTEM|::|COMPONENT-ENTRY-POINT|
 ((|ASDF/SYSTEM|::|C| |ASDF/COMPONENT|::|COMPONENT|)) |COMMON-LISP|::|NIL|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM|::|FIND-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|FIND-SYSTEM|
 '#(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM|::|COMPONENT-BUILD-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|COMPONENT-BUILD-PATHNAME|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM|::|COMPONENT-ENTRY-POINT|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|COMPONENT-ENTRY-POINT|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|COMPONENT-ENTRY-POINT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFCLASS| |ASDF/SYSTEM|::|PROTO-SYSTEM| |COMMON-LISP|::|NIL|
 ((|ASDF/COMPONENT|::|NAME|) (|ASDF/COMPONENT|::|SOURCE-FILE|)
  (|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-LIST| :|INITFORM| |COMMON-LISP|::|NIL|
   :|ACCESSOR| |ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-LIST|)
  (|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-SET| :|INITFORM|
   (|UIOP/UTILITY|::|LIST-TO-HASH-SET| |COMMON-LISP|::|NIL|) :|ACCESSOR|
   |ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-SET|))
 (:|DOCUMENTATION|
  "PROTO-SYSTEM defines the elements of identity that are preserved when\n
a SYSTEM is redefined and its class is modified."))
(|CLOS|::|DEFCLASS| |ASDF/SYSTEM|::|SYSTEM|
 (|ASDF/COMPONENT|::|MODULE| |ASDF/SYSTEM|::|PROTO-SYSTEM|)
 ((|ASDF/COMPONENT|::|DESCRIPTION| :|ACCESSOR|
   |ASDF/SYSTEM|::|SYSTEM-DESCRIPTION|)
  (|ASDF/COMPONENT|::|LONG-DESCRIPTION| :|ACCESSOR|
   |ASDF/SYSTEM|::|SYSTEM-LONG-DESCRIPTION|)
  (|ASDF/COMPONENT|::|AUTHOR| :|ACCESSOR| |ASDF/SYSTEM|::|SYSTEM-AUTHOR|
   :|INITARG| :|AUTHOR| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|ASDF/COMPONENT|::|MAINTAINER| :|ACCESSOR|
   |ASDF/SYSTEM|::|SYSTEM-MAINTAINER| :|INITARG| :|MAINTAINER| :|INITFORM|
   |COMMON-LISP|::|NIL|)
  (|ASDF/COMPONENT|::|LICENCE| :|ACCESSOR| |ASDF/SYSTEM|::|SYSTEM-LICENCE|
   :|INITARG| :|LICENCE| :|ACCESSOR| |ASDF/SYSTEM|::|SYSTEM-LICENSE| :|INITARG|
   :|LICENSE| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|ASDF/SYSTEM|::|HOMEPAGE| :|ACCESSOR| |ASDF/SYSTEM|::|SYSTEM-HOMEPAGE|
   :|INITARG| :|HOMEPAGE| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|ASDF/SYSTEM|::|BUG-TRACKER| :|ACCESSOR| |ASDF/SYSTEM|::|SYSTEM-BUG-TRACKER|
   :|INITARG| :|BUG-TRACKER| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|ASDF/SYSTEM|::|MAILTO| :|ACCESSOR| |ASDF/SYSTEM|::|SYSTEM-MAILTO|
   :|INITARG| :|MAILTO| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|ASDF/SYSTEM|::|LONG-NAME| :|ACCESSOR| |ASDF/SYSTEM|::|SYSTEM-LONG-NAME|
   :|INITARG| :|LONG-NAME| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|ASDF/SYSTEM|::|SOURCE-CONTROL| :|ACCESSOR|
   |ASDF/SYSTEM|::|SYSTEM-SOURCE-CONTROL| :|INITARG| :|SOURCE-CONTROL|
   :|INITFORM| |COMMON-LISP|::|NIL|)
  (|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P| :|ACCESSOR|
   |ASDF/SYSTEM|::|BUILTIN-SYSTEM-P| :|INITFORM| |COMMON-LISP|::|NIL|
   :|INITARG| :|BUILTIN-SYSTEM-P|)
  (|ASDF/SYSTEM|::|BUILD-PATHNAME| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|BUILD-PATHNAME| :|ACCESSOR| |ASDF/SYSTEM|::|COMPONENT-BUILD-PATHNAME|)
  (|ASDF/SYSTEM|::|ENTRY-POINT| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|ENTRY-POINT| :|ACCESSOR| |ASDF/SYSTEM|::|COMPONENT-ENTRY-POINT|)
  (|ASDF/COMPONENT|::|SOURCE-FILE| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|SOURCE-FILE| :|ACCESSOR| |ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|)
  (|ASDF/COMPONENT|::|DEFSYSTEM-DEPENDS-ON| :|READER|
   |ASDF/SYSTEM|::|SYSTEM-DEFSYSTEM-DEPENDS-ON| :|INITARG|
   :|DEFSYSTEM-DEPENDS-ON| :|INITFORM| |COMMON-LISP|::|NIL|)
  (|ASDF/SYSTEM|::|DEPENDS-ON| :|READER| |ASDF/SYSTEM|::|SYSTEM-DEPENDS-ON|
   :|INITFORM| |COMMON-LISP|::|NIL|)
  (|ASDF/SYSTEM|::|WEAKLY-DEPENDS-ON| :|READER|
   |ASDF/SYSTEM|::|SYSTEM-WEAKLY-DEPENDS-ON| :|INITFORM| |COMMON-LISP|::|NIL|))
 (:|DOCUMENTATION|
  "SYSTEM is the base class for top-level components that users may request\n
ASDF to build."))
(|CLOS|::|DEFCLASS| |ASDF/SYSTEM|::|UNDEFINED-SYSTEM| (|ASDF/SYSTEM|::|SYSTEM|)
 |COMMON-LISP|::|NIL| (:|DOCUMENTATION| "System that was not defined yet."))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM|::|RESET-SYSTEM-CLASS|
 (|ASDF/SYSTEM|::|SYSTEM| |ASDF/SYSTEM|::|NEW-CLASS| |COMMON-LISP|::|&REST|
  |ASDF/SYSTEM|::|KEYS| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Erase any data from a SYSTEM except its basic identity, then reinitialize it\n
based on supplied KEYS."
 (|CLOS|::|CHANGE-CLASS|
  (|CLOS|::|CHANGE-CLASS| |ASDF/SYSTEM|::|SYSTEM|
   '|ASDF/SYSTEM|::|PROTO-SYSTEM|)
  |ASDF/SYSTEM|::|NEW-CLASS|)
 (|COMMON-LISP|::|APPLY| '|CLOS|::|REINITIALIZE-INSTANCE|
  |ASDF/SYSTEM|::|SYSTEM| |ASDF/SYSTEM|::|KEYS|))
(|COMMON-LISP|::|LET*| ((#1=#:|G24513| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/SYSTEM|::|PROTO-SYSTEM| :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|NAME|)
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|SOURCE-FILE|)
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-LIST|
    :|READERS| '(|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-LIST|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-LIST|))
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-SET|
    :|READERS| '(|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-SET|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-SET|))
    :|INITFORM| '#2=(|UIOP/UTILITY|::|LIST-TO-HASH-SET| |COMMON-LISP|::|NIL|)
    :|INITFUNCTION|
    (|COMMON-LISP|::|FUNCTION|
     |ASDF/SYSTEM|::|DEFAULT-DEFINITION-DEPENDENCY-SET|
     (|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| #2#))))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"PROTO-SYSTEM defines the elements of identity that are preserved when\n
a SYSTEM is redefined and its class is modified."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-LIST|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-LIST|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-SET|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-SET|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G24531| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/SYSTEM|::|SYSTEM|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|MODULE|
   '|ASDF/SYSTEM|::|PROTO-SYSTEM|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|DESCRIPTION| :|READERS|
    '(|ASDF/SYSTEM|::|SYSTEM-DESCRIPTION|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-DESCRIPTION|)))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|LONG-DESCRIPTION|
    :|READERS| '(|ASDF/SYSTEM|::|SYSTEM-LONG-DESCRIPTION|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-LONG-DESCRIPTION|)))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|AUTHOR| :|READERS|
    '(|ASDF/SYSTEM|::|SYSTEM-AUTHOR|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-AUTHOR|)) :|INITARGS|
    '(:|AUTHOR|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|MAINTAINER| :|READERS|
    '(|ASDF/SYSTEM|::|SYSTEM-MAINTAINER|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-MAINTAINER|)) :|INITARGS|
    '(:|MAINTAINER|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|LICENCE| :|READERS|
    '(|ASDF/SYSTEM|::|SYSTEM-LICENCE| |ASDF/SYSTEM|::|SYSTEM-LICENSE|)
    :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-LICENCE|)
      (|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-LICENSE|))
    :|INITARGS| '(:|LICENCE| :|LICENSE|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|HOMEPAGE| :|READERS|
    '(|ASDF/SYSTEM|::|SYSTEM-HOMEPAGE|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-HOMEPAGE|)) :|INITARGS|
    '(:|HOMEPAGE|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|BUG-TRACKER| :|READERS|
    '(|ASDF/SYSTEM|::|SYSTEM-BUG-TRACKER|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-BUG-TRACKER|)) :|INITARGS|
    '(:|BUG-TRACKER|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|MAILTO| :|READERS|
    '(|ASDF/SYSTEM|::|SYSTEM-MAILTO|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-MAILTO|)) :|INITARGS|
    '(:|MAILTO|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|LONG-NAME| :|READERS|
    '(|ASDF/SYSTEM|::|SYSTEM-LONG-NAME|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-LONG-NAME|)) :|INITARGS|
    '(:|LONG-NAME|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|SOURCE-CONTROL| :|READERS|
    '(|ASDF/SYSTEM|::|SYSTEM-SOURCE-CONTROL|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-SOURCE-CONTROL|))
    :|INITARGS| '(:|SOURCE-CONTROL|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P| :|READERS|
    '(|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|BUILTIN-SYSTEM-P|)) :|INITARGS|
    '(:|BUILTIN-SYSTEM-P|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|BUILD-PATHNAME| :|READERS|
    '(|ASDF/SYSTEM|::|COMPONENT-BUILD-PATHNAME|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|COMPONENT-BUILD-PATHNAME|))
    :|INITARGS| '(:|BUILD-PATHNAME|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|ENTRY-POINT| :|READERS|
    '(|ASDF/SYSTEM|::|COMPONENT-ENTRY-POINT|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|COMPONENT-ENTRY-POINT|))
    :|INITARGS| '(:|ENTRY-POINT|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|SOURCE-FILE| :|READERS|
    '(|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|)) :|INITARGS|
    '(:|SOURCE-FILE|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|DEFSYSTEM-DEPENDS-ON|
    :|READERS| '(|ASDF/SYSTEM|::|SYSTEM-DEFSYSTEM-DEPENDS-ON|) :|INITARGS|
    '(:|DEFSYSTEM-DEPENDS-ON|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|DEPENDS-ON| :|READERS|
    '(|ASDF/SYSTEM|::|SYSTEM-DEPENDS-ON|) :|INITFORM| '|COMMON-LISP|::|NIL|
    :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|WEAKLY-DEPENDS-ON|
    :|READERS| '(|ASDF/SYSTEM|::|SYSTEM-WEAKLY-DEPENDS-ON|) :|INITFORM|
    '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"SYSTEM is the base class for top-level components that users may request\n
ASDF to build."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-DESCRIPTION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-DESCRIPTION|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-LONG-DESCRIPTION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-LONG-DESCRIPTION|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-AUTHOR|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-AUTHOR|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-MAINTAINER|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-MAINTAINER|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-LICENCE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-LICENSE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-LICENCE|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-LICENSE|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-HOMEPAGE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-HOMEPAGE|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-BUG-TRACKER|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-BUG-TRACKER|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-MAILTO|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-MAILTO|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-LONG-NAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-LONG-NAME|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-SOURCE-CONTROL|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-SOURCE-CONTROL|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|BUILTIN-SYSTEM-P|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|COMPONENT-BUILD-PATHNAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|COMPONENT-BUILD-PATHNAME|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|COMPONENT-ENTRY-POINT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|COMPONENT-ENTRY-POINT|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-DEFSYSTEM-DEPENDS-ON|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-DEPENDS-ON|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-WEAKLY-DEPENDS-ON|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G24648| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/SYSTEM|::|UNDEFINED-SYSTEM| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SYSTEM|::|SYSTEM|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"System that was not defined yet."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM|::|RESET-SYSTEM-CLASS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|RESET-SYSTEM-CLASS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SYSTEM|::|SYSTEM| |ASDF/SYSTEM|::|NEW-CLASS| |COMMON-LISP|::|&REST|
    |ASDF/SYSTEM|::|KEYS| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM|::|COERCE-NAME|
 (|ASDF/COMPONENT|::|NAME|)
 "Given a designator for a component NAME, return the name as a string.\n
The designator can be a COMPONENT (designing its name; note that a SYSTEM is a component),\n
a SYMBOL (designing its name, downcased), or a STRING (designing itself)."
 (|COMMON-LISP|::|TYPECASE| |ASDF/COMPONENT|::|NAME|
  (|ASDF/COMPONENT|::|COMPONENT|
   (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/COMPONENT|::|NAME|))
  (|COMMON-LISP|::|SYMBOL|
   (|COMMON-LISP|::|STRING-DOWNCASE| |ASDF/COMPONENT|::|NAME|))
  (|COMMON-LISP|::|STRING| |ASDF/COMPONENT|::|NAME|)
  (|COMMON-LISP|::|T|
   (|ASDF/SESSION|::|SYSDEF-ERROR|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<Invalid component designator: ~3i~_~A~@:>")
    |ASDF/COMPONENT|::|NAME|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME|
 (|ASDF/SYSTEM|::|SYSTEM-DESIGNATOR|)
 "Given a system designator NAME, return the name of the corresponding\n
primary system, after which the .asd file in which it is defined is named.\n
If given a string or symbol (to downcase), do it syntactically\n
 by stripping anything from the first slash on.\n
If given a component, do it semantically by extracting\n
the system-primary-system-name of its system."
 (|COMMON-LISP|::|ETYPECASE| |ASDF/SYSTEM|::|SYSTEM-DESIGNATOR|
  (|COMMON-LISP|::|STRING|
   (|UIOP/UTILITY|::|IF-LET|
    (|ASDF/SYSTEM|::|P|
     (|COMMON-LISP|::|POSITION| #\/ |ASDF/SYSTEM|::|SYSTEM-DESIGNATOR|))
    (|COMMON-LISP|::|SUBSEQ| |ASDF/SYSTEM|::|SYSTEM-DESIGNATOR| 0.
     |ASDF/SYSTEM|::|P|)
    |ASDF/SYSTEM|::|SYSTEM-DESIGNATOR|))
  (|COMMON-LISP|::|SYMBOL|
   (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME|
    (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/SYSTEM|::|SYSTEM-DESIGNATOR|)))
  (|ASDF/COMPONENT|::|COMPONENT|
   (|COMMON-LISP|::|LET*|
    ((|ASDF/SYSTEM|::|SYSTEM|
      (|ASDF/COMPONENT|::|COMPONENT-SYSTEM|
       |ASDF/SYSTEM|::|SYSTEM-DESIGNATOR|))
     (|ASDF/COMPONENT|::|SOURCE-FILE|
      (|UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME|
       (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/SYSTEM|::|SYSTEM|))))
    (|COMMON-LISP|::|AND| |ASDF/COMPONENT|::|SOURCE-FILE|
     (|COMMON-LISP|::|EQUAL|
      (|COMMON-LISP|::|PATHNAME-TYPE| |ASDF/COMPONENT|::|SOURCE-FILE|) "asd")
     (|COMMON-LISP|::|PATHNAME-NAME| |ASDF/COMPONENT|::|SOURCE-FILE|))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM|::|PRIMARY-SYSTEM-P|
 (|ASDF/SYSTEM|::|SYSTEM|)
 "Given a system designator SYSTEM, return T if it designates a primary system, or else NIL.\n
If given a string, do it syntactically and return true if the name does not contain a slash.\n
If given a symbol, downcase to a string then fallback to previous case (NB: for NIL return T).\n
If given a component, do it semantically and return T if it's a SYSTEM and its primary-system-name\n
is the same as its component-name."
 (|COMMON-LISP|::|ETYPECASE| |ASDF/SYSTEM|::|SYSTEM|
  (|COMMON-LISP|::|STRING|
   (|COMMON-LISP|::|NOT| (|COMMON-LISP|::|FIND| #\/ |ASDF/SYSTEM|::|SYSTEM|)))
  (|COMMON-LISP|::|SYMBOL|
   (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-P|
    (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/SYSTEM|::|SYSTEM|)))
  (|ASDF/COMPONENT|::|COMPONENT|
   (|COMMON-LISP|::|AND|
    (|COMMON-LISP|::|TYPEP| |ASDF/SYSTEM|::|SYSTEM| '|ASDF/SYSTEM|::|SYSTEM|)
    (|COMMON-LISP|::|EQUAL|
     (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/SYSTEM|::|SYSTEM|)
     (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME| |ASDF/SYSTEM|::|SYSTEM|))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM|::|COERCE-FILENAME|
 (|ASDF/COMPONENT|::|NAME|)
 "Coerce a system designator NAME into a string suitable as a filename component.\n
The (current) transformation is to replace characters /:\\ each by --,\n
the former being forbidden in a filename component.\n
NB: The onus is unhappily on the user to avoid clashes."
 (|UIOP/COMMON-LISP|::|FROB-SUBSTRINGS|
  (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/COMPONENT|::|NAME|) '("/" ":" "\\")
  "--"))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM|::|COERCE-NAME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|COERCE-NAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/COMPONENT|::|NAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM|::|SYSTEM-DESIGNATOR|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM|::|PRIMARY-SYSTEM-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|PRIMARY-SYSTEM-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM|::|SYSTEM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM|::|COERCE-FILENAME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|COERCE-FILENAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/COMPONENT|::|NAME|)))
(|CLOS|::|DEFMETHOD| |ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
 ((|ASDF/SYSTEM|::|SYSTEM-NAME| |COMMON-LISP|::|STRING|))
 (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
  (|ASDF/SYSTEM|::|FIND-SYSTEM| |ASDF/SYSTEM|::|SYSTEM-NAME|)))
(|CLOS|::|DEFMETHOD| |ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
 ((|ASDF/SYSTEM|::|SYSTEM-NAME| |COMMON-LISP|::|SYMBOL|))
 (|COMMON-LISP|::|WHEN| |ASDF/SYSTEM|::|SYSTEM-NAME|
  (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
   (|ASDF/SYSTEM|::|FIND-SYSTEM| |ASDF/SYSTEM|::|SYSTEM-NAME|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM|::|SYSTEM-SOURCE-DIRECTORY|
 (|ASDF/SYSTEM|::|SYSTEM-DESIGNATOR|)
 "Return a pathname object corresponding to the directory\n
in which the system specification (.asd file) is located."
 (|UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME|
  (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/SYSTEM|::|SYSTEM-DESIGNATOR|)))
(|UIOP/UTILITY|::|DEFUN*| (|ASDF/SYSTEM|::|SYSTEM-RELATIVE-PATHNAME|)
 (|ASDF/SYSTEM|::|SYSTEM| |ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|TYPE|)
 "Given a SYSTEM, and a (Unix-style relative path) NAME of a file (or directory) of given TYPE,\n
return the absolute pathname of a corresponding file under that system's source code pathname."
 (|UIOP/PATHNAME|::|SUBPATHNAME|
  (|ASDF/SYSTEM|::|SYSTEM-SOURCE-DIRECTORY| |ASDF/SYSTEM|::|SYSTEM|)
  |ASDF/COMPONENT|::|NAME| :|TYPE| |COMMON-LISP|::|TYPE|))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|COMPONENT-PATHNAME|
 ((|ASDF/SYSTEM|::|SYSTEM| |ASDF/SYSTEM|::|SYSTEM|))
 "Given a SYSTEM, and a (Unix-style relative path) NAME of a file (or directory) of given TYPE,\n
return the absolute pathname of a corresponding file under that system's source code pathname."
 (|COMMON-LISP|::|LET|
  ((|COMMON-LISP|::|PATHNAME|
    (|COMMON-LISP|::|OR| (|CLOS|::|CALL-NEXT-METHOD|)
     (|ASDF/SYSTEM|::|SYSTEM-SOURCE-DIRECTORY| |ASDF/SYSTEM|::|SYSTEM|))))
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|AND|
    (|CLOS|::|SLOT-BOUNDP| |ASDF/SYSTEM|::|SYSTEM|
     '|ASDF/COMPONENT|::|RELATIVE-PATHNAME|)
    (|CLOS|::|SLOT-VALUE| |ASDF/SYSTEM|::|SYSTEM|
     '|ASDF/COMPONENT|::|RELATIVE-PATHNAME|))
   (|COMMON-LISP|::|SETF|
    (|CLOS|::|SLOT-VALUE| |ASDF/SYSTEM|::|SYSTEM|
     '|ASDF/COMPONENT|::|RELATIVE-PATHNAME|)
    |COMMON-LISP|::|PATHNAME|))
  |COMMON-LISP|::|PATHNAME|))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|COMPONENT-RELATIVE-PATHNAME|
 ((|ASDF/SYSTEM|::|SYSTEM| |ASDF/SYSTEM|::|SYSTEM|))
 (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING|
  (|COMMON-LISP|::|AND|
   (|CLOS|::|SLOT-BOUNDP| |ASDF/SYSTEM|::|SYSTEM|
    '|ASDF/COMPONENT|::|RELATIVE-PATHNAME|)
   (|CLOS|::|SLOT-VALUE| |ASDF/SYSTEM|::|SYSTEM|
    '|ASDF/COMPONENT|::|RELATIVE-PATHNAME|))
  :|WANT-RELATIVE| |COMMON-LISP|::|T| :|TYPE| :|DIRECTORY| :|ENSURE-ABSOLUTE|
  |COMMON-LISP|::|T| :|DEFAULTS|
  (|ASDF/SYSTEM|::|SYSTEM-SOURCE-DIRECTORY| |ASDF/SYSTEM|::|SYSTEM|)))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|COMPONENT-PARENT-PATHNAME|
 ((|ASDF/SYSTEM|::|SYSTEM| |ASDF/SYSTEM|::|SYSTEM|))
 (|ASDF/SYSTEM|::|SYSTEM-SOURCE-DIRECTORY| |ASDF/SYSTEM|::|SYSTEM|))
(|CLOS|::|DEFMETHOD| |ASDF/SYSTEM|::|COMPONENT-BUILD-PATHNAME|
 ((|ASDF/SYSTEM|::|C| |ASDF/COMPONENT|::|COMPONENT|)) |COMMON-LISP|::|NIL|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM|::|SYSTEM-SOURCE-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-SOURCE-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM|::|SYSTEM-DESIGNATOR|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM|::|SYSTEM-RELATIVE-PATHNAME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-RELATIVE-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SYSTEM|::|SYSTEM| |ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-PATHNAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-RELATIVE-PATHNAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-PARENT-PATHNAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|COMPONENT-BUILD-PATHNAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|ASDF/SYSTEM-REGISTRY| :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT| :|ASDF/SYSTEM|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|REMOVE-ENTRY-FROM-REGISTRY| #:|COERCE-ENTRY-TO-DIRECTORY|
    #:|REGISTERED-SYSTEM| #:|REGISTER-SYSTEM| #:|REGISTERED-SYSTEMS*|
    #:|REGISTERED-SYSTEMS| #:|CLEAR-SYSTEM| #:|MAP-SYSTEMS|
    #:|*SYSTEM-DEFINITION-SEARCH-FUNCTIONS*| #:|SEARCH-FOR-SYSTEM-DEFINITION|
    #:|*CENTRAL-REGISTRY*| #:|PROBE-ASD| #:|SYSDEF-CENTRAL-REGISTRY-SEARCH|
    #:|CONTRIB-SYSDEF-SEARCH| #:|SYSDEF-FIND-ASDF|
    #:|SYSDEF-PRELOADED-SYSTEM-SEARCH| #:|REGISTER-PRELOADED-SYSTEM|
    #:|*PRELOADED-SYSTEMS*| #:|FIND-SYSTEM-IF-BEING-DEFINED|
    #:|MARK-COMPONENT-PRELOADED| #:|SYSDEF-IMMUTABLE-SYSTEM-SEARCH|
    #:|REGISTER-IMMUTABLE-SYSTEM| #:|*IMMUTABLE-SYSTEMS*|
    #:|*REGISTERED-SYSTEMS*| #:|CLEAR-REGISTERED-SYSTEMS|
    #:|SYSDEF-SOURCE-REGISTRY-SEARCH|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/SYSTEM-REGISTRY| :|ASDF/FIND-SYSTEM| :|ASDF|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/SYSTEM-REGISTRY"))
(|COMMON-LISP|::|DEFVAR| |ASDF/SYSTEM-REGISTRY|::|*REGISTERED-SYSTEMS*|
 (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)
 "This is a hash table whose keys are strings -- the names of systems --\n
and whose values are systems.\n
A system is referred to as \"registered\" if it is present in this table.")
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM|
 (|ASDF/COMPONENT|::|NAME|)
 "Return a system of given NAME that was registered already,\n
if such a system exists.  NAME is a system designator, to be\n
normalized by COERCE-NAME. The value returned is a system object,\n
or NIL if not found."
 (|COMMON-LISP|::|GETHASH|
  (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/COMPONENT|::|NAME|)
  |ASDF/SYSTEM-REGISTRY|::|*REGISTERED-SYSTEMS*|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEMS*|
 |COMMON-LISP|::|NIL|
 "Return a list containing every registered system (as a system object)."
 (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/SYSTEM-REGISTRY|::|REGISTERED| :|BEING|
  :|THE| :|HASH-VALUES| :|OF| |ASDF/SYSTEM-REGISTRY|::|*REGISTERED-SYSTEMS*|
  :|COLLECT| |ASDF/SYSTEM-REGISTRY|::|REGISTERED|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEMS|
 |COMMON-LISP|::|NIL| "Return a list of the names of every registered system."
 (|COMMON-LISP|::|MAPCAR| '|ASDF/SYSTEM|::|COERCE-NAME|
  (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEMS*|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM-REGISTRY|::|REGISTER-SYSTEM|
 (|ASDF/SYSTEM|::|SYSTEM|) "Given a SYSTEM object, register it."
 (|COMMON-LISP|::|CHECK-TYPE| |ASDF/SYSTEM|::|SYSTEM| |ASDF/SYSTEM|::|SYSTEM|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/COMPONENT|::|NAME|
    (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/SYSTEM|::|SYSTEM|)))
  (|COMMON-LISP|::|CHECK-TYPE| |ASDF/COMPONENT|::|NAME|
   |COMMON-LISP|::|STRING|)
  (|ASDF/UPGRADE|::|ASDF-MESSAGE|
   (|UIOP/COMMON-LISP|::|COMPATFMT|
    "~&~@<; ~@;Registering system ~3i~_~A~@:>~%")
   |ASDF/COMPONENT|::|NAME|)
  (|COMMON-LISP|::|SETF|
   (|COMMON-LISP|::|GETHASH| |ASDF/COMPONENT|::|NAME|
    |ASDF/SYSTEM-REGISTRY|::|*REGISTERED-SYSTEMS*|)
   |ASDF/SYSTEM|::|SYSTEM|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM-REGISTRY|::|MAP-SYSTEMS|
 (|ASDF/SYSTEM-REGISTRY|::|FN|)
 "Apply FN to each defined system.\n\n
FN should be a function of one argument. It will be\n
called with an object of type asdf:system."
 (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/SYSTEM-REGISTRY|::|REGISTERED| :|BEING|
  :|THE| :|HASH-VALUES| :|OF| |ASDF/SYSTEM-REGISTRY|::|*REGISTERED-SYSTEMS*|
  :|DO|
  (|COMMON-LISP|::|FUNCALL| |ASDF/SYSTEM-REGISTRY|::|FN|
   |ASDF/SYSTEM-REGISTRY|::|REGISTERED|)))
(|COMMON-LISP|::|DEFVAR| |ASDF/SYSTEM-REGISTRY|::|*PRELOADED-SYSTEMS*|
 (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)
 "Registration table for preloaded systems.")
(|COMMON-LISP|::|DECLAIM|
 (|COMMON-LISP|::|FTYPE|
  (|COMMON-LISP|::|FUNCTION| (|COMMON-LISP|::|T|) |COMMON-LISP|::|T|)
  |ASDF/SYSTEM-REGISTRY|::|MARK-COMPONENT-PRELOADED|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM-REGISTRY|::|MAKE-PRELOADED-SYSTEM|
 (|ASDF/COMPONENT|::|NAME| |ASDF/SYSTEM-REGISTRY|::|KEYS|)
 "Make a preloaded system of given NAME with build information from KEYS"
 (|COMMON-LISP|::|LET|
  ((|ASDF/SYSTEM|::|SYSTEM|
    (|COMMON-LISP|::|APPLY| '|CLOS|::|MAKE-INSTANCE|
     (|COMMON-LISP|::|GETF| |ASDF/SYSTEM-REGISTRY|::|KEYS| :|CLASS|
      '|ASDF/SYSTEM|::|SYSTEM|)
     :|NAME| |ASDF/COMPONENT|::|NAME| :|SOURCE-FILE|
     (|COMMON-LISP|::|GETF| |ASDF/SYSTEM-REGISTRY|::|KEYS| :|SOURCE-FILE|)
     (|UIOP/UTILITY|::|REMOVE-PLIST-KEYS| '(:|CLASS| :|NAME| :|SOURCE-FILE|)
      |ASDF/SYSTEM-REGISTRY|::|KEYS|))))
  (|ASDF/SYSTEM-REGISTRY|::|MARK-COMPONENT-PRELOADED| |ASDF/SYSTEM|::|SYSTEM|)
  |ASDF/SYSTEM|::|SYSTEM|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SYSTEM-REGISTRY|::|SYSDEF-PRELOADED-SYSTEM-SEARCH|
 (|ASDF/SYSTEM-REGISTRY|::|REQUESTED|)
 "If REQUESTED names a system registered as preloaded, return a new system\n
with its registration information."
 (|COMMON-LISP|::|LET|
  ((|ASDF/COMPONENT|::|NAME|
    (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/SYSTEM-REGISTRY|::|REQUESTED|)))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|ASDF/SYSTEM-REGISTRY|::|KEYS| |ASDF/SYSTEM-REGISTRY|::|FOUNDP|)
   (|COMMON-LISP|::|GETHASH| |ASDF/COMPONENT|::|NAME|
    |ASDF/SYSTEM-REGISTRY|::|*PRELOADED-SYSTEMS*|)
   (|COMMON-LISP|::|WHEN| |ASDF/SYSTEM-REGISTRY|::|FOUNDP|
    (|ASDF/SYSTEM-REGISTRY|::|MAKE-PRELOADED-SYSTEM| |ASDF/COMPONENT|::|NAME|
     |ASDF/SYSTEM-REGISTRY|::|KEYS|)))))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SYSTEM-REGISTRY|::|ENSURE-PRELOADED-SYSTEM-REGISTERED|
 (|ASDF/COMPONENT|::|NAME|)
 "If there isn't a registered _defined_ system of given NAME,\n
and a there is a registered _preloaded_ system of given NAME,\n
then define and register said preloaded system."
 (|UIOP/UTILITY|::|IF-LET|
  (|ASDF/SYSTEM|::|SYSTEM|
   (|COMMON-LISP|::|AND|
    (|COMMON-LISP|::|NOT|
     (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM| |ASDF/COMPONENT|::|NAME|))
    (|ASDF/SYSTEM-REGISTRY|::|SYSDEF-PRELOADED-SYSTEM-SEARCH|
     |ASDF/COMPONENT|::|NAME|)))
  (|ASDF/SYSTEM-REGISTRY|::|REGISTER-SYSTEM| |ASDF/SYSTEM|::|SYSTEM|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM-REGISTRY|::|REGISTER-PRELOADED-SYSTEM|
 (|ASDF/SYSTEM-REGISTRY|::|SYSTEM-NAME| |COMMON-LISP|::|&REST|
  |ASDF/SYSTEM-REGISTRY|::|KEYS| |COMMON-LISP|::|&KEY|
  (|ASDF/COMPONENT|::|VERSION| |COMMON-LISP|::|T|)
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Register a system as being preloaded. If the system has not been loaded from the filesystem\n
yet, or if its build information is later cleared with CLEAR-SYSTEM, a dummy system will be\n
registered without backing filesystem information, based on KEYS (e.g. to provide a VERSION).\n
If VERSION is the default T, and a system was already loaded, then its version will be preserved."
 (|COMMON-LISP|::|LET|
  ((|ASDF/COMPONENT|::|NAME|
    (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/SYSTEM-REGISTRY|::|SYSTEM-NAME|)))
  (|COMMON-LISP|::|WHEN|
   (|COMMON-LISP|::|EQL| |ASDF/COMPONENT|::|VERSION| |COMMON-LISP|::|T|)
   (|UIOP/UTILITY|::|IF-LET|
    (|ASDF/SYSTEM|::|SYSTEM|
     (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM| |ASDF/COMPONENT|::|NAME|))
    (|COMMON-LISP|::|SETF|
     (|COMMON-LISP|::|GETF| |ASDF/SYSTEM-REGISTRY|::|KEYS| :|VERSION|)
     (|ASDF/COMPONENT|::|COMPONENT-VERSION| |ASDF/SYSTEM|::|SYSTEM|))))
  (|COMMON-LISP|::|SETF|
   (|COMMON-LISP|::|GETHASH| |ASDF/COMPONENT|::|NAME|
    |ASDF/SYSTEM-REGISTRY|::|*PRELOADED-SYSTEMS*|)
   |ASDF/SYSTEM-REGISTRY|::|KEYS|)
  (|ASDF/SYSTEM-REGISTRY|::|ENSURE-PRELOADED-SYSTEM-REGISTERED|
   |ASDF/SYSTEM-REGISTRY|::|SYSTEM-NAME|)))
(|COMMON-LISP|::|DEFVAR| |ASDF/SYSTEM-REGISTRY|::|*IMMUTABLE-SYSTEMS*|
 |COMMON-LISP|::|NIL|
 "A hash-set (equal hash-table mapping keys to T) of systems that are immutable,\n
i.e. already loaded in memory and not to be refreshed from the filesystem.\n
They will be treated specially by find-system, and passed as :force-not argument to make-plan.\n\n
For instance, to can deliver an image with many systems precompiled, that *will not* check the\n
filesystem for them every time a user loads an extension, what more risk a problematic upgrade\n
 or catastrophic downgrade, before you dump an image, you may use:\n
   (map () 'asdf:register-immutable-system (asdf:already-loaded-systems))\n\n
Note that direct access to this variable from outside ASDF is not supported.\n
Please call REGISTER-IMMUTABLE-SYSTEM to add new immutable systems, and\n
contact maintainers if you need a stable API to do more than that.")
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SYSTEM-REGISTRY|::|SYSDEF-IMMUTABLE-SYSTEM-SEARCH|
 (|ASDF/SYSTEM-REGISTRY|::|REQUESTED|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/COMPONENT|::|NAME|
    (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/SYSTEM-REGISTRY|::|REQUESTED|)))
  (|COMMON-LISP|::|WHEN|
   (|COMMON-LISP|::|AND| |ASDF/SYSTEM-REGISTRY|::|*IMMUTABLE-SYSTEMS*|
    (|COMMON-LISP|::|GETHASH| |ASDF/COMPONENT|::|NAME|
     |ASDF/SYSTEM-REGISTRY|::|*IMMUTABLE-SYSTEMS*|))
   (|COMMON-LISP|::|OR|
    (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM|
     |ASDF/SYSTEM-REGISTRY|::|REQUESTED|)
    (|COMMON-LISP|::|ERROR|
     '|ASDF/SESSION|::|FORMATTED-SYSTEM-DEFINITION-ERROR| :|FORMAT-CONTROL|
     "Requested system ~A registered as an immutable-system, ~\n
but not even registered as defined"
     :|FORMAT-ARGUMENTS| (|COMMON-LISP|::|LIST| |ASDF/COMPONENT|::|NAME|))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM-REGISTRY|::|REGISTER-IMMUTABLE-SYSTEM|
 (|ASDF/SYSTEM-REGISTRY|::|SYSTEM-NAME| |COMMON-LISP|::|&REST|
  |ASDF/SYSTEM-REGISTRY|::|KEYS|)
 "Register SYSTEM-NAME as preloaded and immutable.\n
It will automatically be considered as passed to FORCE-NOT in a plan."
 (|COMMON-LISP|::|LET|
  ((|ASDF/SYSTEM-REGISTRY|::|SYSTEM-NAME|
    (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/SYSTEM-REGISTRY|::|SYSTEM-NAME|)))
  (|COMMON-LISP|::|APPLY| '|ASDF/SYSTEM-REGISTRY|::|REGISTER-PRELOADED-SYSTEM|
   |ASDF/SYSTEM-REGISTRY|::|SYSTEM-NAME| |ASDF/SYSTEM-REGISTRY|::|KEYS|)
  (|COMMON-LISP|::|UNLESS| |ASDF/SYSTEM-REGISTRY|::|*IMMUTABLE-SYSTEMS*|
   (|COMMON-LISP|::|SETF| |ASDF/SYSTEM-REGISTRY|::|*IMMUTABLE-SYSTEMS*|
    (|UIOP/UTILITY|::|LIST-TO-HASH-SET| |COMMON-LISP|::|NIL|)))
  (|COMMON-LISP|::|SETF|
   (|COMMON-LISP|::|GETHASH| |ASDF/SYSTEM-REGISTRY|::|SYSTEM-NAME|
    |ASDF/SYSTEM-REGISTRY|::|*IMMUTABLE-SYSTEMS*|)
   |COMMON-LISP|::|T|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM-REGISTRY|::|CLEAR-SYSTEM|
 (|ASDF/SYSTEM|::|SYSTEM|)
 "Clear the entry for a SYSTEM in the database of systems previously defined.\n
However if the system was registered as PRELOADED (which it is if it is IMMUTABLE),\n
then a new system with the same name will be defined and registered in its place\n
from which build details will have been cleared.\n
Note that this does NOT in any way cause any of the code of the system to be unloaded.\n
Returns T if system was or is now undefined, NIL if a new preloaded system was redefined."
 (|COMMON-LISP|::|LET|
  ((|ASDF/COMPONENT|::|NAME|
    (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/SYSTEM|::|SYSTEM|)))
  (|COMMON-LISP|::|REMHASH| |ASDF/COMPONENT|::|NAME|
   |ASDF/SYSTEM-REGISTRY|::|*REGISTERED-SYSTEMS*|)
  (|ASDF/SESSION|::|UNSET-ASDF-CACHE-ENTRY|
   `(|ASDF/SYSTEM|::|FIND-SYSTEM| ,|ASDF/COMPONENT|::|NAME|))
  (|COMMON-LISP|::|NOT|
   (|ASDF/SYSTEM-REGISTRY|::|ENSURE-PRELOADED-SYSTEM-REGISTERED|
    |ASDF/COMPONENT|::|NAME|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM-REGISTRY|::|CLEAR-REGISTERED-SYSTEMS|
 |COMMON-LISP|::|NIL|
 "Clear all currently registered defined systems.\n
Preloaded systems (including immutable ones) will be reset, other systems will be de-registered."
 (|COMMON-LISP|::|MAP| |COMMON-LISP|::|NIL|
  '|ASDF/SYSTEM-REGISTRY|::|CLEAR-SYSTEM|
  (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEMS|)))
(|COMMON-LISP|::|DEFVAR|
 |ASDF/SYSTEM-REGISTRY|::|*SYSTEM-DEFINITION-SEARCH-FUNCTIONS*|
 '|COMMON-LISP|::|NIL|
 "A list that controls the ways that ASDF looks for system definitions.\n
It contains symbols to be funcalled in order, with a requested system name as argument,\n
until one returns a non-NIL result (if any), which must then be a fully initialized system object\n
with that name.")
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SYSTEM-REGISTRY|::|CLEANUP-SYSTEM-DEFINITION-SEARCH-FUNCTIONS|
 |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|SETF|
  |ASDF/SYSTEM-REGISTRY|::|*SYSTEM-DEFINITION-SEARCH-FUNCTIONS*|
  (|COMMON-LISP|::|APPEND|
   (|COMMON-LISP|::|LET|
    ((|ASDF/SYSTEM-REGISTRY|::|OBSOLETE|
      '(|ASDF/SYSTEM-REGISTRY|::|CONTRIB-SYSDEF-SEARCH|
        |ASDF/SYSTEM-REGISTRY|::|SYSDEF-FIND-ASDF|
        |ASDF/SYSTEM-REGISTRY|::|SYSDEF-PRELOADED-SYSTEM-SEARCH|)))
    (|COMMON-LISP|::|REMOVE-IF|
     #'(|COMMON-LISP|::|LAMBDA| (|ASDF/SYSTEM-REGISTRY|::|X|)
        (|COMMON-LISP|::|MEMBER| |ASDF/SYSTEM-REGISTRY|::|X|
         |ASDF/SYSTEM-REGISTRY|::|OBSOLETE|))
     |ASDF/SYSTEM-REGISTRY|::|*SYSTEM-DEFINITION-SEARCH-FUNCTIONS*|))
   (|COMMON-LISP|::|REMOVE-IF|
    #'(|COMMON-LISP|::|LAMBDA| (|ASDF/SYSTEM-REGISTRY|::|X|)
       (|COMMON-LISP|::|MEMBER| |ASDF/SYSTEM-REGISTRY|::|X|
        |ASDF/SYSTEM-REGISTRY|::|*SYSTEM-DEFINITION-SEARCH-FUNCTIONS*|))
    '(|ASDF/SYSTEM-REGISTRY|::|SYSDEF-CENTRAL-REGISTRY-SEARCH|
      |ASDF/SYSTEM-REGISTRY|::|SYSDEF-SOURCE-REGISTRY-SEARCH|)))))
(|ASDF/SYSTEM-REGISTRY|::|CLEANUP-SYSTEM-DEFINITION-SEARCH-FUNCTIONS|)
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SYSTEM-REGISTRY|::|SEARCH-FOR-SYSTEM-DEFINITION|
 (|ASDF/SYSTEM|::|SYSTEM|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/COMPONENT|::|NAME|
    (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/SYSTEM|::|SYSTEM|)))
  (|COMMON-LISP|::|FLET|
   ((|ASDF/SYSTEM-REGISTRY|::|TRY| (|ASDF/SYSTEM-REGISTRY|::|F|)
     (|UIOP/UTILITY|::|IF-LET|
      ((|ASDF/SYSTEM-REGISTRY|::|X|
        (|COMMON-LISP|::|FUNCALL| |ASDF/SYSTEM-REGISTRY|::|F|
         |ASDF/COMPONENT|::|NAME|)))
      (|COMMON-LISP|::|RETURN-FROM|
       |ASDF/SYSTEM-REGISTRY|::|SEARCH-FOR-SYSTEM-DEFINITION|
       |ASDF/SYSTEM-REGISTRY|::|X|))))
   (|ASDF/SYSTEM-REGISTRY|::|TRY|
    '|ASDF/SYSTEM-REGISTRY|::|FIND-SYSTEM-IF-BEING-DEFINED|)
   (|ASDF/SYSTEM-REGISTRY|::|TRY|
    '|ASDF/SYSTEM-REGISTRY|::|SYSDEF-IMMUTABLE-SYSTEM-SEARCH|)
   (|COMMON-LISP|::|MAP| |COMMON-LISP|::|NIL| #'|ASDF/SYSTEM-REGISTRY|::|TRY|
    |ASDF/SYSTEM-REGISTRY|::|*SYSTEM-DEFINITION-SEARCH-FUNCTIONS*|))))
(|COMMON-LISP|::|DEFVAR| |ASDF/SYSTEM-REGISTRY|::|*CENTRAL-REGISTRY*|
 |COMMON-LISP|::|NIL|
 "A list of 'system directory designators' ASDF uses to find systems.\n\n
A 'system directory designator' is a pathname or an expression\n
which evaluates to a pathname. For example:\n\n
    (setf asdf:*central-registry*\n
          (list '*default-pathname-defaults*\n
                #p\"/home/me/cl/systems/\"\n
                #p\"/usr/share/common-lisp/systems/\"))\n\n
This variable is for backward compatibility.\n
Going forward, we recommend new users should be using the source-registry.")
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM-REGISTRY|::|PROBE-ASD|
 (|ASDF/COMPONENT|::|NAME| |ASDF/SYSTEM-REGISTRY|::|DEFAULTS|
  |COMMON-LISP|::|&KEY| |COMMON-LISP|::|TRUENAME|)
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|WHEN|
   (|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P| |ASDF/SYSTEM-REGISTRY|::|DEFAULTS|)
   (|UIOP/UTILITY|::|IF-LET|
    (|ASDF/SYSTEM-REGISTRY|::|FILE|
     (|UIOP/FILESYSTEM|::|PROBE-FILE*|
      (|UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME|
       (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING| |ASDF/COMPONENT|::|NAME|
        :|TYPE| "asd")
       #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
          (|UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME|
           |ASDF/SYSTEM-REGISTRY|::|DEFAULTS|
           '|UIOP/FILESYSTEM|::|GET-PATHNAME-DEFAULTS| |COMMON-LISP|::|NIL|))
       |COMMON-LISP|::|NIL|)
      :|TRUENAME| |COMMON-LISP|::|TRUENAME|))
    (|COMMON-LISP|::|RETURN| |ASDF/SYSTEM-REGISTRY|::|FILE|)))))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SYSTEM-REGISTRY|::|SYSDEF-CENTRAL-REGISTRY-SEARCH|
 (|ASDF/SYSTEM|::|SYSTEM|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/COMPONENT|::|NAME|
    (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME| |ASDF/SYSTEM|::|SYSTEM|))
   (|ASDF/SYSTEM-REGISTRY|::|TO-REMOVE| |COMMON-LISP|::|NIL|)
   (|ASDF/SYSTEM-REGISTRY|::|TO-REPLACE| |COMMON-LISP|::|NIL|))
  (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
   (|COMMON-LISP|::|UNWIND-PROTECT|
    (|COMMON-LISP|::|DOLIST|
     (|ASDF/SYSTEM-REGISTRY|::|DIR|
      |ASDF/SYSTEM-REGISTRY|::|*CENTRAL-REGISTRY*|)
     (|COMMON-LISP|::|LET|
      ((|ASDF/SYSTEM-REGISTRY|::|DEFAULTS|
        (|COMMON-LISP|::|EVAL| |ASDF/SYSTEM-REGISTRY|::|DIR|))
       |ASDF/SYSTEM-REGISTRY|::|DIRECTORIZED|)
      (|COMMON-LISP|::|WHEN| |ASDF/SYSTEM-REGISTRY|::|DEFAULTS|
       (|COMMON-LISP|::|COND|
        ((|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P|
          |ASDF/SYSTEM-REGISTRY|::|DEFAULTS|)
         (|COMMON-LISP|::|LET*|
          ((|ASDF/SYSTEM-REGISTRY|::|FILE|
            (|ASDF/SYSTEM-REGISTRY|::|PROBE-ASD| |ASDF/COMPONENT|::|NAME|
             |ASDF/SYSTEM-REGISTRY|::|DEFAULTS| :|TRUENAME|
             |UIOP/FILESYSTEM|::|*RESOLVE-SYMLINKS*|)))
          (|COMMON-LISP|::|WHEN| |ASDF/SYSTEM-REGISTRY|::|FILE|
           (|COMMON-LISP|::|RETURN| |ASDF/SYSTEM-REGISTRY|::|FILE|))))
        (|COMMON-LISP|::|T|
         (|COMMON-LISP|::|RESTART-CASE|
          (|COMMON-LISP|::|LET*|
           ((|COMMON-LISP|::|*PRINT-CIRCLE*| |COMMON-LISP|::|NIL|)
            (|ASDF/SYSTEM-REGISTRY|::|MESSAGE|
             (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
              (|UIOP/COMMON-LISP|::|COMPATFMT|
               "~@<While searching for system ~S: ~3i~_~S evaluated to ~S which is not an absolute directory.~@:>")
              |ASDF/SYSTEM|::|SYSTEM| |ASDF/SYSTEM-REGISTRY|::|DIR|
              |ASDF/SYSTEM-REGISTRY|::|DEFAULTS|)))
           (|COMMON-LISP|::|ERROR| |ASDF/SYSTEM-REGISTRY|::|MESSAGE|))
          (|ASDF/SYSTEM-REGISTRY|::|REMOVE-ENTRY-FROM-REGISTRY|
           |COMMON-LISP|::|NIL| :|REPORT|
           "Remove entry from *central-registry* and continue"
           (|COMMON-LISP|::|PUSH| |ASDF/SYSTEM-REGISTRY|::|DIR|
            |ASDF/SYSTEM-REGISTRY|::|TO-REMOVE|))
          (|ASDF/SYSTEM-REGISTRY|::|COERCE-ENTRY-TO-DIRECTORY|
           |COMMON-LISP|::|NIL| :|TEST|
           (|COMMON-LISP|::|LAMBDA| (|ASDF/SYSTEM-REGISTRY|::|C|)
            (|COMMON-LISP|::|DECLARE|
             (|COMMON-LISP|::|IGNORE| |ASDF/SYSTEM-REGISTRY|::|C|))
            (|COMMON-LISP|::|AND|
             (|COMMON-LISP|::|NOT|
              (|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P|
               |ASDF/SYSTEM-REGISTRY|::|DEFAULTS|))
             (|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P|
              (|COMMON-LISP|::|SETF| |ASDF/SYSTEM-REGISTRY|::|DIRECTORIZED|
               (|UIOP/PATHNAME|::|ENSURE-DIRECTORY-PATHNAME|
                |ASDF/SYSTEM-REGISTRY|::|DEFAULTS|)))))
           :|REPORT|
           (|COMMON-LISP|::|LAMBDA| (|ASDF/SYSTEM-REGISTRY|::|S|)
            (|COMMON-LISP|::|FORMAT| |ASDF/SYSTEM-REGISTRY|::|S|
             (|UIOP/COMMON-LISP|::|COMPATFMT|
              "~@<Coerce entry to ~a, replace ~a and continue.~@:>")
             |ASDF/SYSTEM-REGISTRY|::|DIRECTORIZED|
             |ASDF/SYSTEM-REGISTRY|::|DIR|))
           (|COMMON-LISP|::|PUSH|
            (|COMMON-LISP|::|CONS| |ASDF/SYSTEM-REGISTRY|::|DIR|
             |ASDF/SYSTEM-REGISTRY|::|DIRECTORIZED|)
            |ASDF/SYSTEM-REGISTRY|::|TO-REPLACE|))))))))
    (|COMMON-LISP|::|DOLIST|
     (|ASDF/SYSTEM-REGISTRY|::|DIR| |ASDF/SYSTEM-REGISTRY|::|TO-REMOVE|)
     (|COMMON-LISP|::|SETF| |ASDF/SYSTEM-REGISTRY|::|*CENTRAL-REGISTRY*|
      (|COMMON-LISP|::|REMOVE| |ASDF/SYSTEM-REGISTRY|::|DIR|
       |ASDF/SYSTEM-REGISTRY|::|*CENTRAL-REGISTRY*|)))
    (|COMMON-LISP|::|DOLIST|
     (|ASDF/SYSTEM-REGISTRY|::|PAIR| |ASDF/SYSTEM-REGISTRY|::|TO-REPLACE|)
     (|COMMON-LISP|::|LET*|
      ((|ASDF/SYSTEM-REGISTRY|::|CURRENT|
        (|COMMON-LISP|::|CAR| |ASDF/SYSTEM-REGISTRY|::|PAIR|))
       (|ASDF/SYSTEM-REGISTRY|::|NEW|
        (|COMMON-LISP|::|CDR| |ASDF/SYSTEM-REGISTRY|::|PAIR|))
       (|COMMON-LISP|::|POSITION|
        (|COMMON-LISP|::|POSITION| |ASDF/SYSTEM-REGISTRY|::|CURRENT|
         |ASDF/SYSTEM-REGISTRY|::|*CENTRAL-REGISTRY*|)))
      (|COMMON-LISP|::|SETF| |ASDF/SYSTEM-REGISTRY|::|*CENTRAL-REGISTRY*|
       (|COMMON-LISP|::|APPEND|
        (|COMMON-LISP|::|SUBSEQ| |ASDF/SYSTEM-REGISTRY|::|*CENTRAL-REGISTRY*|
         0. |COMMON-LISP|::|POSITION|)
        (|COMMON-LISP|::|LIST| |ASDF/SYSTEM-REGISTRY|::|NEW|)
        (|COMMON-LISP|::|SUBSEQ| |ASDF/SYSTEM-REGISTRY|::|*CENTRAL-REGISTRY*|
         (|COMMON-LISP|::|1+| |COMMON-LISP|::|POSITION|))))))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/SYSTEM-REGISTRY|::|*REGISTERED-SYSTEMS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/COMPONENT|::|NAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEMS*|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEMS*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEMS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEMS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM-REGISTRY|::|REGISTER-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|REGISTER-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM|::|SYSTEM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM-REGISTRY|::|MAP-SYSTEMS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|MAP-SYSTEMS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM-REGISTRY|::|FN|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/SYSTEM-REGISTRY|::|*PRELOADED-SYSTEMS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|FTYPE|
   (|COMMON-LISP|::|FUNCTION| (|COMMON-LISP|::|T|) |COMMON-LISP|::|T|)
   |ASDF/SYSTEM-REGISTRY|::|MARK-COMPONENT-PRELOADED|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM-REGISTRY|::|MAKE-PRELOADED-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|MAKE-PRELOADED-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/COMPONENT|::|NAME| |ASDF/SYSTEM-REGISTRY|::|KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SYSTEM-REGISTRY|::|SYSDEF-PRELOADED-SYSTEM-SEARCH|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|SYSDEF-PRELOADED-SYSTEM-SEARCH|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM-REGISTRY|::|REQUESTED|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SYSTEM-REGISTRY|::|ENSURE-PRELOADED-SYSTEM-REGISTERED|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/SYSTEM-REGISTRY|::|ENSURE-PRELOADED-SYSTEM-REGISTERED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/COMPONENT|::|NAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SYSTEM-REGISTRY|::|REGISTER-PRELOADED-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|REGISTER-PRELOADED-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SYSTEM-REGISTRY|::|SYSTEM-NAME| |COMMON-LISP|::|&REST|
    |ASDF/SYSTEM-REGISTRY|::|KEYS| |COMMON-LISP|::|&KEY|
    (|ASDF/COMPONENT|::|VERSION| |COMMON-LISP|::|T|)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/SYSTEM-REGISTRY|::|*IMMUTABLE-SYSTEMS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SYSTEM-REGISTRY|::|SYSDEF-IMMUTABLE-SYSTEM-SEARCH|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|SYSDEF-IMMUTABLE-SYSTEM-SEARCH|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM-REGISTRY|::|REQUESTED|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SYSTEM-REGISTRY|::|REGISTER-IMMUTABLE-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|REGISTER-IMMUTABLE-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SYSTEM-REGISTRY|::|SYSTEM-NAME| |COMMON-LISP|::|&REST|
    |ASDF/SYSTEM-REGISTRY|::|KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM-REGISTRY|::|CLEAR-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|CLEAR-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM|::|SYSTEM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SYSTEM-REGISTRY|::|CLEAR-REGISTERED-SYSTEMS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|CLEAR-REGISTERED-SYSTEMS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/SYSTEM-REGISTRY|::|*SYSTEM-DEFINITION-SEARCH-FUNCTIONS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SYSTEM-REGISTRY|::|CLEANUP-SYSTEM-DEFINITION-SEARCH-FUNCTIONS|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/SYSTEM-REGISTRY|::|CLEANUP-SYSTEM-DEFINITION-SEARCH-FUNCTIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SYSTEM-REGISTRY|::|SEARCH-FOR-SYSTEM-DEFINITION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|SEARCH-FOR-SYSTEM-DEFINITION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM|::|SYSTEM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/SYSTEM-REGISTRY|::|*CENTRAL-REGISTRY*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SYSTEM-REGISTRY|::|PROBE-ASD|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|PROBE-ASD|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/COMPONENT|::|NAME| |ASDF/SYSTEM-REGISTRY|::|DEFAULTS|
    |COMMON-LISP|::|&KEY| |COMMON-LISP|::|TRUENAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SYSTEM-REGISTRY|::|SYSDEF-CENTRAL-REGISTRY-SEARCH|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|SYSDEF-CENTRAL-REGISTRY-SEARCH|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM|::|SYSTEM|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/ACTION|
  :|NICKNAMES| '(:|ASDF-ACTION|) :|DOCUMENTATION| '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT| :|ASDF/OPERATION|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM|
  '((:|ASDF/OPERATION| #:|CHECK-OPERATION-CONSTRUCTOR|)
    (:|ASDF/COMPONENT| #:|%ADDITIONAL-INPUT-FILES|))
  :|EXPORT|
  '(#:|ACTION| #:|DEFINE-CONVENIENCE-ACTION-METHODS| #:|ACTION-DESCRIPTION|
    #:|FORMAT-ACTION| #:|DOWNWARD-OPERATION| #:|UPWARD-OPERATION|
    #:|SIDEWAY-OPERATION| #:|SELFWARD-OPERATION| #:|NON-PROPAGATING-OPERATION|
    #:|COMPONENT-DEPENDS-ON| #:|INPUT-FILES| #:|OUTPUT-FILES| #:|OUTPUT-FILE|
    #:|OPERATION-DONE-P| #:|ACTION-OPERATION| #:|ACTION-COMPONENT|
    #:|MAKE-ACTION| #:|COMPONENT-OPERATION-TIME| #:|MARK-OPERATION-DONE|
    #:|COMPUTE-ACTION-STAMP| #:|PERFORM| #:|PERFORM-WITH-RESTARTS| #:|RETRY|
    #:|ACCEPT| #:|ACTION-PATH| #:|FIND-ACTION| #:|OPERATION-DEFINITION-WARNING|
    #:|OPERATION-DEFINITION-ERROR| #:|ACTION-VALID-P| #:|CIRCULAR-DEPENDENCY|
    #:|CIRCULAR-DEPENDENCY-ACTIONS| #:|CALL-WHILE-VISITING-ACTION|
    #:|WHILE-VISITING-ACTION| #:|ADDITIONAL-INPUT-FILES|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/ACTION| :|ASDF/PLAN| :|ASDF|) :|MIX| '|COMMON-LISP|::|NIL|
  :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/ACTION"))
(|COMMON-LISP|::|DEFTYPE| |ASDF/ACTION|::|ACTION| |COMMON-LISP|::|NIL|
 "A pair of operation and component uniquely identifies a node in the dependency graph\n
of steps to be performed while building a system."
 '(|COMMON-LISP|::|CONS| |ASDF/OPERATION|::|OPERATION|
   |ASDF/COMPONENT|::|COMPONENT|))
(|COMMON-LISP|::|DEFTYPE| |ASDF/ACTION|::|OPERATION-DESIGNATOR|
 |COMMON-LISP|::|NIL|
 "An operation designates itself. NIL designates a context-dependent current operation,\n
and a class-name or class designates the canonical instance of the designated class."
 '(|COMMON-LISP|::|OR| |ASDF/OPERATION|::|OPERATION| |COMMON-LISP|::|NULL|
   |COMMON-LISP|::|SYMBOL| |CLOS|::|CLASS|))
(|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
 (|SYSTEM|::|%PUT| '|ASDF/ACTION|::|ACTION| '|SYSTEM|::|DEFTYPE-EXPANDER|
  (|COMMON-LISP|::|FUNCTION| #:|DEFTYPE-ACTION|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<DEFTYPE-FORM>|)
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<DEFTYPE-FORM>| 1.
       1.))
     (|SYSTEM|::|TYPE-CALL-ERROR| |SYSTEM|::|<DEFTYPE-FORM>|)
     (|COMMON-LISP|::|LET*| |COMMON-LISP|::|NIL|
      (|COMMON-LISP|::|BLOCK| |ASDF/ACTION|::|ACTION|
       '(|COMMON-LISP|::|CONS| |ASDF/OPERATION|::|OPERATION|
         |ASDF/COMPONENT|::|COMPONENT|)))))))
 (|SYSTEM|::|%SET-DOCUMENTATION| '|ASDF/ACTION|::|ACTION|
  '|COMMON-LISP|::|TYPE|
  '"A pair of operation and component uniquely identifies a node in the dependency graph\n
of steps to be performed while building a system.")
 '|ASDF/ACTION|::|ACTION|)
(|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
 (|SYSTEM|::|%PUT| '|ASDF/ACTION|::|OPERATION-DESIGNATOR|
  '|SYSTEM|::|DEFTYPE-EXPANDER|
  (|COMMON-LISP|::|FUNCTION| #:|DEFTYPE-OPERATION-DESIGNATOR|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<DEFTYPE-FORM>|)
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<DEFTYPE-FORM>| 1.
       1.))
     (|SYSTEM|::|TYPE-CALL-ERROR| |SYSTEM|::|<DEFTYPE-FORM>|)
     (|COMMON-LISP|::|LET*| |COMMON-LISP|::|NIL|
      (|COMMON-LISP|::|BLOCK| |ASDF/ACTION|::|OPERATION-DESIGNATOR|
       '(|COMMON-LISP|::|OR| |ASDF/OPERATION|::|OPERATION|
         |COMMON-LISP|::|NULL| |COMMON-LISP|::|SYMBOL| |CLOS|::|CLASS|)))))))
 (|SYSTEM|::|%SET-DOCUMENTATION| '|ASDF/ACTION|::|OPERATION-DESIGNATOR|
  '|COMMON-LISP|::|TYPE|
  '"An operation designates itself. NIL designates a context-dependent current operation,\n
and a class-name or class designates the canonical instance of the designated class.")
 '|ASDF/ACTION|::|OPERATION-DESIGNATOR|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|MAKE-ACTION|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (|COMMON-LISP|::|CONS| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|ACTION-OPERATION|
 (|ASDF/ACTION|::|ACTION|) (|COMMON-LISP|::|CAR| |ASDF/ACTION|::|ACTION|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|ACTION-COMPONENT|
 (|ASDF/ACTION|::|ACTION|) (|COMMON-LISP|::|CDR| |ASDF/ACTION|::|ACTION|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|MAKE-ACTION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|MAKE-ACTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|ACTION-OPERATION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-OPERATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/ACTION|::|ACTION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|ACTION-COMPONENT|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-COMPONENT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/ACTION|::|ACTION|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|ACTION-PATH|
 (|ASDF/ACTION|::|ACTION|)
 "A readable data structure that identifies the action."
 (|COMMON-LISP|::|WHEN| |ASDF/ACTION|::|ACTION|
  (|COMMON-LISP|::|LET|
   ((|ASDF/ACTION|::|O|
     (|ASDF/ACTION|::|ACTION-OPERATION| |ASDF/ACTION|::|ACTION|))
    (|ASDF/ACTION|::|C|
     (|ASDF/ACTION|::|ACTION-COMPONENT| |ASDF/ACTION|::|ACTION|)))
   (|COMMON-LISP|::|CONS| (|COMMON-LISP|::|TYPE-OF| |ASDF/ACTION|::|O|)
    (|ASDF/COMPONENT|::|COMPONENT-FIND-PATH| |ASDF/ACTION|::|C|)))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|FIND-ACTION| (|ASDF/ACTION|::|PATH|)
 "Reconstitute an action from its action-path"
 (|COMMON-LISP|::|DESTRUCTURING-BIND| (|ASDF/ACTION|::|O| . |ASDF/ACTION|::|C|)
  |ASDF/ACTION|::|PATH|
  (|ASDF/ACTION|::|MAKE-ACTION|
   (|ASDF/OPERATION|::|MAKE-OPERATION| |ASDF/ACTION|::|O|)
   (|ASDF/COMPONENT|::|FIND-COMPONENT| |COMMON-LISP|::|NIL|
    |ASDF/ACTION|::|C|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|ACTION-PATH|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-PATH|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/ACTION|::|ACTION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|FIND-ACTION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|FIND-ACTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/ACTION|::|PATH|)))
(|COMMON-LISP|::|DEFMACRO| |ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
 (|COMMON-LISP|::|FUNCTION| |ASDF/ACTION|::|FORMALS| |COMMON-LISP|::|&KEY|
  |ASDF/ACTION|::|IF-NO-OPERATION| |ASDF/ACTION|::|IF-NO-COMPONENT|)
 (|COMMON-LISP|::|LET*|
  ((|COMMON-LISP|::|REST| (|COMMON-LISP|::|GENSYM| "REST"))
   (|ASDF/ACTION|::|FOUND| (|COMMON-LISP|::|GENSYM| "FOUND"))
   (|ASDF/ACTION|::|KEYP|
    (|COMMON-LISP|::|EQUAL| (|COMMON-LISP|::|LAST| |ASDF/ACTION|::|FORMALS|)
     '(|COMMON-LISP|::|&KEY|)))
   (|ASDF/ACTION|::|FORMALS-NO-KEY|
    (|COMMON-LISP|::|IF| |ASDF/ACTION|::|KEYP|
     (|COMMON-LISP|::|BUTLAST| |ASDF/ACTION|::|FORMALS|)
     |ASDF/ACTION|::|FORMALS|))
   (|ASDF/ACTION|::|LEN|
    (|COMMON-LISP|::|LENGTH| |ASDF/ACTION|::|FORMALS-NO-KEY|))
   (|ASDF/OPERATION|::|OPERATION| '|ASDF/OPERATION|::|OPERATION|)
   (|ASDF/COMPONENT|::|COMPONENT| '|ASDF/COMPONENT|::|COMPONENT|)
   (|ASDF/ACTION|::|OPIX|
    (|COMMON-LISP|::|POSITION| |ASDF/OPERATION|::|OPERATION|
     |ASDF/ACTION|::|FORMALS|))
   (|ASDF/ACTION|::|COIX|
    (|COMMON-LISP|::|POSITION| |ASDF/COMPONENT|::|COMPONENT|
     |ASDF/ACTION|::|FORMALS|))
   (|ASDF/ACTION|::|PREFIX|
    (|COMMON-LISP|::|SUBSEQ| |ASDF/ACTION|::|FORMALS| 0.
     |ASDF/ACTION|::|OPIX|))
   (|ASDF/ACTION|::|SUFFIX|
    (|COMMON-LISP|::|SUBSEQ| |ASDF/ACTION|::|FORMALS|
     (|COMMON-LISP|::|1+| |ASDF/ACTION|::|COIX|) |ASDF/ACTION|::|LEN|))
   (|ASDF/ACTION|::|MORE-ARGS|
    (|COMMON-LISP|::|WHEN| |ASDF/ACTION|::|KEYP|
     `(|COMMON-LISP|::|&REST| ,|COMMON-LISP|::|REST| |COMMON-LISP|::|&KEY|
       |COMMON-LISP|::|&ALLOW-OTHER-KEYS|))))
  (|COMMON-LISP|::|ASSERT|
   (|COMMON-LISP|::|AND| (|COMMON-LISP|::|INTEGERP| |ASDF/ACTION|::|OPIX|)
    (|COMMON-LISP|::|INTEGERP| |ASDF/ACTION|::|COIX|)
    (|COMMON-LISP|::|=| |ASDF/ACTION|::|COIX|
     (|COMMON-LISP|::|1+| |ASDF/ACTION|::|OPIX|))))
  (|COMMON-LISP|::|FLET|
   ((|ASDF/ACTION|::|NEXT-METHOD| (|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)
     (|COMMON-LISP|::|IF| |ASDF/ACTION|::|KEYP|
      `(|COMMON-LISP|::|APPLY| ',|COMMON-LISP|::|FUNCTION|
        ,@|ASDF/ACTION|::|PREFIX| ,|ASDF/ACTION|::|O| ,|ASDF/ACTION|::|C|
        ,@|ASDF/ACTION|::|SUFFIX| ,|COMMON-LISP|::|REST|)
      `(,|COMMON-LISP|::|FUNCTION| ,@|ASDF/ACTION|::|PREFIX|
        ,|ASDF/ACTION|::|O| ,|ASDF/ACTION|::|C| ,@|ASDF/ACTION|::|SUFFIX|))))
   `(|COMMON-LISP|::|PROGN|
     (|CLOS|::|DEFMETHOD| ,|COMMON-LISP|::|FUNCTION|
      (,@|ASDF/ACTION|::|PREFIX|
       (,|ASDF/OPERATION|::|OPERATION| |COMMON-LISP|::|STRING|)
       ,|ASDF/COMPONENT|::|COMPONENT| ,@|ASDF/ACTION|::|SUFFIX|
       ,@|ASDF/ACTION|::|MORE-ARGS|)
      (|COMMON-LISP|::|DECLARE|
       (|COMMON-LISP|::|NOTINLINE| ,|COMMON-LISP|::|FUNCTION|))
      (|COMMON-LISP|::|LET|
       ((,|ASDF/COMPONENT|::|COMPONENT|
         (|ASDF/COMPONENT|::|FIND-COMPONENT| |COMMON-LISP|::|NIL|
          ,|ASDF/COMPONENT|::|COMPONENT|)))
       ,(|ASDF/ACTION|::|NEXT-METHOD|
         `(|UIOP/STREAM|::|SAFE-READ-FROM-STRING|
           ,|ASDF/OPERATION|::|OPERATION| :|PACKAGE| :|ASDF/INTERFACE|)
         |ASDF/COMPONENT|::|COMPONENT|)))
     (|CLOS|::|DEFMETHOD| ,|COMMON-LISP|::|FUNCTION|
      (,@|ASDF/ACTION|::|PREFIX|
       (,|ASDF/OPERATION|::|OPERATION| |COMMON-LISP|::|SYMBOL|)
       ,|ASDF/COMPONENT|::|COMPONENT| ,@|ASDF/ACTION|::|SUFFIX|
       ,@|ASDF/ACTION|::|MORE-ARGS|)
      (|COMMON-LISP|::|DECLARE|
       (|COMMON-LISP|::|NOTINLINE| ,|COMMON-LISP|::|FUNCTION|))
      (|COMMON-LISP|::|IF| ,|ASDF/OPERATION|::|OPERATION|
       ,(|ASDF/ACTION|::|NEXT-METHOD|
         `(|ASDF/OPERATION|::|MAKE-OPERATION| ,|ASDF/OPERATION|::|OPERATION|)
         `(|COMMON-LISP|::|OR|
           (|ASDF/COMPONENT|::|FIND-COMPONENT| |COMMON-LISP|::|NIL|
            ,|ASDF/COMPONENT|::|COMPONENT|)
           ,|ASDF/ACTION|::|IF-NO-COMPONENT|))
       ,|ASDF/ACTION|::|IF-NO-OPERATION|))
     (|CLOS|::|DEFMETHOD| ,|COMMON-LISP|::|FUNCTION|
      (,@|ASDF/ACTION|::|PREFIX|
       (,|ASDF/OPERATION|::|OPERATION| |ASDF/OPERATION|::|OPERATION|)
       ,|ASDF/COMPONENT|::|COMPONENT| ,@|ASDF/ACTION|::|SUFFIX|
       ,@|ASDF/ACTION|::|MORE-ARGS|)
      (|COMMON-LISP|::|DECLARE|
       (|COMMON-LISP|::|NOTINLINE| ,|COMMON-LISP|::|FUNCTION|))
      (|COMMON-LISP|::|IF|
       (|COMMON-LISP|::|TYPEP| ,|ASDF/COMPONENT|::|COMPONENT|
        '|ASDF/COMPONENT|::|COMPONENT|)
       (|COMMON-LISP|::|ERROR|
        "No defined method for ~S on ~/asdf-action:format-action/"
        ',|COMMON-LISP|::|FUNCTION|
        (|ASDF/ACTION|::|MAKE-ACTION| ,|ASDF/OPERATION|::|OPERATION|
         ,|ASDF/COMPONENT|::|COMPONENT|))
       (|UIOP/UTILITY|::|IF-LET|
        (,|ASDF/ACTION|::|FOUND|
         (|ASDF/COMPONENT|::|FIND-COMPONENT| |COMMON-LISP|::|NIL|
          ,|ASDF/COMPONENT|::|COMPONENT|))
        ,(|ASDF/ACTION|::|NEXT-METHOD| |ASDF/OPERATION|::|OPERATION|
          |ASDF/ACTION|::|FOUND|)
        ,|ASDF/ACTION|::|IF-NO-COMPONENT|)))))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS|
 '|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|)
(|SYSTEM|::|%PUTD| '|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3. 3.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      (#'(|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|))
       (|ASDF/ACTION|::|FORMALS| (|COMMON-LISP|::|CADDR| . #1#))
       (#2=#:|G25332| (|COMMON-LISP|::|CDDDR| . #1#))
       (|ASDF/ACTION|::|IF-NO-OPERATION|
        (|COMMON-LISP|::|GETF| #2# ':|IF-NO-OPERATION| .
         #3=(|COMMON-LISP|::|NIL|)))
       (|ASDF/ACTION|::|IF-NO-COMPONENT|
        (|COMMON-LISP|::|GETF| #2# ':|IF-NO-COMPONENT| . #3#)))
      (|SYSTEM|::|KEYWORD-TEST| #2# '(:|IF-NO-COMPONENT| :|IF-NO-OPERATION|))
      (|COMMON-LISP|::|BLOCK|
       |ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
       (|COMMON-LISP|::|LET*|
        ((|COMMON-LISP|::|REST| (|COMMON-LISP|::|GENSYM| "REST"))
         (|ASDF/ACTION|::|FOUND| (|COMMON-LISP|::|GENSYM| "FOUND"))
         (|ASDF/ACTION|::|KEYP|
          (|COMMON-LISP|::|EQUAL|
           (|COMMON-LISP|::|LAST| |ASDF/ACTION|::|FORMALS|)
           '(|COMMON-LISP|::|&KEY|)))
         (|ASDF/ACTION|::|FORMALS-NO-KEY|
          (|COMMON-LISP|::|IF| |ASDF/ACTION|::|KEYP|
           (|COMMON-LISP|::|BUTLAST| |ASDF/ACTION|::|FORMALS|)
           |ASDF/ACTION|::|FORMALS|))
         (|ASDF/ACTION|::|LEN|
          (|COMMON-LISP|::|LENGTH| |ASDF/ACTION|::|FORMALS-NO-KEY|))
         (|ASDF/OPERATION|::|OPERATION| '|ASDF/OPERATION|::|OPERATION|)
         (|ASDF/COMPONENT|::|COMPONENT| '|ASDF/COMPONENT|::|COMPONENT|)
         (|ASDF/ACTION|::|OPIX|
          (|COMMON-LISP|::|POSITION| |ASDF/OPERATION|::|OPERATION|
           |ASDF/ACTION|::|FORMALS|))
         (|ASDF/ACTION|::|COIX|
          (|COMMON-LISP|::|POSITION| |ASDF/COMPONENT|::|COMPONENT|
           |ASDF/ACTION|::|FORMALS|))
         (|ASDF/ACTION|::|PREFIX|
          (|COMMON-LISP|::|SUBSEQ| |ASDF/ACTION|::|FORMALS| 0.
           |ASDF/ACTION|::|OPIX|))
         (|ASDF/ACTION|::|SUFFIX|
          (|COMMON-LISP|::|SUBSEQ| |ASDF/ACTION|::|FORMALS|
           (|COMMON-LISP|::|1+| |ASDF/ACTION|::|COIX|) |ASDF/ACTION|::|LEN|))
         (|ASDF/ACTION|::|MORE-ARGS|
          (|COMMON-LISP|::|WHEN| |ASDF/ACTION|::|KEYP|
           `(|COMMON-LISP|::|&REST| ,|COMMON-LISP|::|REST|
             |COMMON-LISP|::|&KEY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|))))
        (|COMMON-LISP|::|ASSERT|
         (|COMMON-LISP|::|AND|
          (|COMMON-LISP|::|INTEGERP| |ASDF/ACTION|::|OPIX|)
          (|COMMON-LISP|::|INTEGERP| |ASDF/ACTION|::|COIX|)
          (|COMMON-LISP|::|=| |ASDF/ACTION|::|COIX|
           (|COMMON-LISP|::|1+| |ASDF/ACTION|::|OPIX|))))
        (|COMMON-LISP|::|FLET|
         ((|ASDF/ACTION|::|NEXT-METHOD| (|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)
           (|COMMON-LISP|::|IF| |ASDF/ACTION|::|KEYP|
            `(|COMMON-LISP|::|APPLY| ',|COMMON-LISP|::|FUNCTION|
              ,@|ASDF/ACTION|::|PREFIX| ,|ASDF/ACTION|::|O| ,|ASDF/ACTION|::|C|
              ,@|ASDF/ACTION|::|SUFFIX| ,|COMMON-LISP|::|REST|)
            `(,|COMMON-LISP|::|FUNCTION| ,@|ASDF/ACTION|::|PREFIX|
              ,|ASDF/ACTION|::|O| ,|ASDF/ACTION|::|C|
              ,@|ASDF/ACTION|::|SUFFIX|))))
         `(|COMMON-LISP|::|PROGN|
           (|CLOS|::|DEFMETHOD| ,|COMMON-LISP|::|FUNCTION|
            (,@|ASDF/ACTION|::|PREFIX|
             (,|ASDF/OPERATION|::|OPERATION| |COMMON-LISP|::|STRING|)
             ,|ASDF/COMPONENT|::|COMPONENT| ,@|ASDF/ACTION|::|SUFFIX|
             ,@|ASDF/ACTION|::|MORE-ARGS|)
            (|COMMON-LISP|::|DECLARE|
             (|COMMON-LISP|::|NOTINLINE| ,|COMMON-LISP|::|FUNCTION|))
            (|COMMON-LISP|::|LET|
             ((,|ASDF/COMPONENT|::|COMPONENT|
               (|ASDF/COMPONENT|::|FIND-COMPONENT| |COMMON-LISP|::|NIL|
                ,|ASDF/COMPONENT|::|COMPONENT|)))
             ,(|ASDF/ACTION|::|NEXT-METHOD|
               `(|UIOP/STREAM|::|SAFE-READ-FROM-STRING|
                 ,|ASDF/OPERATION|::|OPERATION| :|PACKAGE| :|ASDF/INTERFACE|)
               |ASDF/COMPONENT|::|COMPONENT|)))
           (|CLOS|::|DEFMETHOD| ,|COMMON-LISP|::|FUNCTION|
            (,@|ASDF/ACTION|::|PREFIX|
             (,|ASDF/OPERATION|::|OPERATION| |COMMON-LISP|::|SYMBOL|)
             ,|ASDF/COMPONENT|::|COMPONENT| ,@|ASDF/ACTION|::|SUFFIX|
             ,@|ASDF/ACTION|::|MORE-ARGS|)
            (|COMMON-LISP|::|DECLARE|
             (|COMMON-LISP|::|NOTINLINE| ,|COMMON-LISP|::|FUNCTION|))
            (|COMMON-LISP|::|IF| ,|ASDF/OPERATION|::|OPERATION|
             ,(|ASDF/ACTION|::|NEXT-METHOD|
               `(|ASDF/OPERATION|::|MAKE-OPERATION|
                 ,|ASDF/OPERATION|::|OPERATION|)
               `(|COMMON-LISP|::|OR|
                 (|ASDF/COMPONENT|::|FIND-COMPONENT| |COMMON-LISP|::|NIL|
                  ,|ASDF/COMPONENT|::|COMPONENT|)
                 ,|ASDF/ACTION|::|IF-NO-COMPONENT|))
             ,|ASDF/ACTION|::|IF-NO-OPERATION|))
           (|CLOS|::|DEFMETHOD| ,|COMMON-LISP|::|FUNCTION|
            (,@|ASDF/ACTION|::|PREFIX|
             (,|ASDF/OPERATION|::|OPERATION| |ASDF/OPERATION|::|OPERATION|)
             ,|ASDF/COMPONENT|::|COMPONENT| ,@|ASDF/ACTION|::|SUFFIX|
             ,@|ASDF/ACTION|::|MORE-ARGS|)
            (|COMMON-LISP|::|DECLARE|
             (|COMMON-LISP|::|NOTINLINE| ,|COMMON-LISP|::|FUNCTION|))
            (|COMMON-LISP|::|IF|
             (|COMMON-LISP|::|TYPEP| ,|ASDF/COMPONENT|::|COMPONENT|
              '|ASDF/COMPONENT|::|COMPONENT|)
             (|COMMON-LISP|::|ERROR|
              "No defined method for ~S on ~/asdf-action:format-action/"
              ',|COMMON-LISP|::|FUNCTION|
              (|ASDF/ACTION|::|MAKE-ACTION| ,|ASDF/OPERATION|::|OPERATION|
               ,|ASDF/COMPONENT|::|COMPONENT|))
             (|UIOP/UTILITY|::|IF-LET|
              (,|ASDF/ACTION|::|FOUND|
               (|ASDF/COMPONENT|::|FIND-COMPONENT| |COMMON-LISP|::|NIL|
                ,|ASDF/COMPONENT|::|COMPONENT|))
              ,(|ASDF/ACTION|::|NEXT-METHOD| |ASDF/OPERATION|::|OPERATION|
                |ASDF/ACTION|::|FOUND|)
              ,|ASDF/ACTION|::|IF-NO-COMPONENT|)))))))))))
  '(|COMMON-LISP|::|FUNCTION| |ASDF/ACTION|::|FORMALS| |COMMON-LISP|::|&KEY|
    |ASDF/ACTION|::|IF-NO-OPERATION| |ASDF/ACTION|::|IF-NO-COMPONENT|)))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/ACTION|::|ACTION-DESCRIPTION|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "returns a phrase that describes performing this operation\n
on this component, e.g. \"loading /a/b/c\".\n
You can put together sentences using this phrase."))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|ACTION-DESCRIPTION|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
  (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<~A on ~A~@:>")
  |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|FORMAT-ACTION|
 (|COMMON-LISP|::|STREAM| |ASDF/ACTION|::|ACTION| |COMMON-LISP|::|&OPTIONAL|
  |ASDF/ACTION|::|COLON-P| |ASDF/ACTION|::|AT-SIGN-P|)
 "FORMAT helper to display an action's action-description.\n
Use it in FORMAT control strings as ~/asdf-action:format-action/"
 (|COMMON-LISP|::|ASSERT| (|COMMON-LISP|::|NULL| |ASDF/ACTION|::|COLON-P|))
 (|COMMON-LISP|::|ASSERT| (|COMMON-LISP|::|NULL| |ASDF/ACTION|::|AT-SIGN-P|))
 (|COMMON-LISP|::|DESTRUCTURING-BIND|
  (|ASDF/OPERATION|::|OPERATION| . |ASDF/COMPONENT|::|COMPONENT|)
  |ASDF/ACTION|::|ACTION|
  (|COMMON-LISP|::|PRINC|
   (|ASDF/ACTION|::|ACTION-DESCRIPTION| |ASDF/OPERATION|::|OPERATION|
    |ASDF/COMPONENT|::|COMPONENT|)
   |COMMON-LISP|::|STREAM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|ACTION-DESCRIPTION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-DESCRIPTION|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-DESCRIPTION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|FORMAT-ACTION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|FORMAT-ACTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STREAM| |ASDF/ACTION|::|ACTION| |COMMON-LISP|::|&OPTIONAL|
    |ASDF/ACTION|::|COLON-P| |ASDF/ACTION|::|AT-SIGN-P|)))
(|UIOP/UTILITY|::|DEFUN*| (|ASDF/ACTION|::|ACTION-VALID-P|)
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 "Is this action valid to include amongst dependencies?"
 (|COMMON-LISP|::|AND| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|
  (|UIOP/UTILITY|::|IF-LET|
   (|ASDF/ACTION|::|IT|
    (|ASDF/COMPONENT|::|COMPONENT-IF-FEATURE| |ASDF/COMPONENT|::|COMPONENT|))
   (|UIOP/OS|::|FEATUREP| |ASDF/ACTION|::|IT|) |COMMON-LISP|::|T|)))
(|COMMON-LISP|::|DEFINE-CONDITION| |ASDF/ACTION|::|CIRCULAR-DEPENDENCY|
 (|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
 ((|ASDF/ACTION|::|ACTIONS| :|INITARG| :|ACTIONS| :|READER|
   |ASDF/ACTION|::|CIRCULAR-DEPENDENCY-ACTIONS|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA| (|ASDF/ACTION|::|C| |ASDF/ACTION|::|S|)
   (|COMMON-LISP|::|FORMAT| |ASDF/ACTION|::|S|
    (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<Circular dependency: ~3i~_~S~@:>")
    (|ASDF/ACTION|::|CIRCULAR-DEPENDENCY-ACTIONS| |ASDF/ACTION|::|C|)))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|CALL-WHILE-VISITING-ACTION|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
  |ASDF/ACTION|::|FUN|)
 "Detect circular dependencies"
 (|ASDF/SESSION|::|WITH-ASDF-SESSION| |COMMON-LISP|::|NIL|
  (|CLOS|::|WITH-ACCESSORS|
   ((|ASDF/ACTION|::|ACTION-SET| |ASDF/SESSION|::|VISITING-ACTION-SET|)
    (|ASDF/ACTION|::|ACTION-LIST| |ASDF/SESSION|::|VISITING-ACTION-LIST|))
   |ASDF/SESSION|::|*ASDF-SESSION*|
   (|COMMON-LISP|::|LET|
    ((|ASDF/ACTION|::|ACTION|
      (|COMMON-LISP|::|CONS| |ASDF/OPERATION|::|OPERATION|
       |ASDF/COMPONENT|::|COMPONENT|)))
    (|COMMON-LISP|::|WHEN|
     (|COMMON-LISP|::|GETHASH| |ASDF/ACTION|::|ACTION|
      |ASDF/ACTION|::|ACTION-SET|)
     (|COMMON-LISP|::|ERROR| '|ASDF/ACTION|::|CIRCULAR-DEPENDENCY| :|ACTIONS|
      (|COMMON-LISP|::|MEMBER| |ASDF/ACTION|::|ACTION|
       (|COMMON-LISP|::|REVERSE| |ASDF/ACTION|::|ACTION-LIST|) :|TEST|
       '|COMMON-LISP|::|EQUAL|)))
    (|COMMON-LISP|::|SETF|
     (|COMMON-LISP|::|GETHASH| |ASDF/ACTION|::|ACTION|
      |ASDF/ACTION|::|ACTION-SET|)
     |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|PUSH| |ASDF/ACTION|::|ACTION|
     |ASDF/ACTION|::|ACTION-LIST|)
    (|COMMON-LISP|::|UNWIND-PROTECT|
     (|COMMON-LISP|::|FUNCALL| |ASDF/ACTION|::|FUN|)
     (|COMMON-LISP|::|POP| |ASDF/ACTION|::|ACTION-LIST|)
     (|COMMON-LISP|::|SETF|
      (|COMMON-LISP|::|GETHASH| |ASDF/ACTION|::|ACTION|
       |ASDF/ACTION|::|ACTION-SET|)
      |COMMON-LISP|::|NIL|))))))
(|COMMON-LISP|::|DEFMACRO| |ASDF/ACTION|::|WHILE-VISITING-ACTION|
 ((|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|) |COMMON-LISP|::|&BODY|
  |ASDF/ACTION|::|BODY|)
 `(|ASDF/ACTION|::|CALL-WHILE-VISITING-ACTION| ,|ASDF/ACTION|::|O|
   ,|ASDF/ACTION|::|C|
   #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| ,@|ASDF/ACTION|::|BODY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|ACTION-VALID-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-VALID-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G25499| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/ACTION|::|CIRCULAR-DEPENDENCY| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|ACTIONS| :|READERS|
    '(|ASDF/ACTION|::|CIRCULAR-DEPENDENCY-ACTIONS|) :|INITARGS| '(:|ACTIONS|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|CIRCULAR-DEPENDENCY-ACTIONS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|CALL-WHILE-VISITING-ACTION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|CALL-WHILE-VISITING-ACTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
    |ASDF/ACTION|::|FUN|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|ASDF/ACTION|::|WHILE-VISITING-ACTION|)
(|SYSTEM|::|%PUTD| '|ASDF/ACTION|::|WHILE-VISITING-ACTION|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |ASDF/ACTION|::|WHILE-VISITING-ACTION|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G25565| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G25566|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 2. 2. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|ASDF/ACTION|::|WHILE-VISITING-ACTION| #1#
          '#4=(|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|))
         #1#))
       (|ASDF/ACTION|::|O| (|COMMON-LISP|::|CAR| #3#))
       (|ASDF/ACTION|::|C| (|COMMON-LISP|::|CADR| #3#))
       (|ASDF/ACTION|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |ASDF/ACTION|::|WHILE-VISITING-ACTION|
       `(|ASDF/ACTION|::|CALL-WHILE-VISITING-ACTION| ,|ASDF/ACTION|::|O|
         ,|ASDF/ACTION|::|C|
         #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
            ,@|ASDF/ACTION|::|BODY|)))))))
  '(#4# |COMMON-LISP|::|&BODY| |ASDF/ACTION|::|BODY|)))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Returns a list of dependencies needed by the component to perform\n
    the operation.  A dependency has one of the following forms:\n\n
      (<operation> <component>*), where <operation> is an operation designator\n
        with respect to FIND-OPERATION in the context of the OPERATION argument,\n
        and each <component> is a component designator with respect to\n
        FIND-COMPONENT in the context of the COMPONENT argument,\n
        and means that the component depends on\n
        <operation> having been performed on each <component>;\n\n
        [Note: an <operation> is an operation designator -- it can be either an\n
        operation name or an operation object.  Similarly, a <component> may be\n
        a component name or a component object.  Also note that, the degenerate\n
        case of (<operation>) is a no-op.]\n\n
    Methods specialized on subclasses of existing component types\n
    should usually append the results of CALL-NEXT-METHOD to the list."))
(|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
 |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON| :|AROUND|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|ASDF/SESSION|::|DO-ASDF-CACHE|
  `(|ASDF/ACTION|::|COMPONENT-DEPENDS-ON| ,|ASDF/ACTION|::|O|
    ,|ASDF/ACTION|::|C|)
  (|CLOS|::|CALL-NEXT-METHOD|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFCLASS| |ASDF/ACTION|::|DOWNWARD-OPERATION|
 (|ASDF/OPERATION|::|OPERATION|)
 ((|ASDF/ACTION|::|DOWNWARD-OPERATION| :|INITFORM| |COMMON-LISP|::|NIL|
   :|READER| |ASDF/ACTION|::|DOWNWARD-OPERATION| :|TYPE|
   |ASDF/ACTION|::|OPERATION-DESIGNATOR| :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "A DOWNWARD-OPERATION's dependencies propagate down the component hierarchy.\n
I.e., if O is a DOWNWARD-OPERATION and its DOWNWARD-OPERATION slot designates operation D, then\n
the action (O . M) of O on module M will depends on each of (D . C) for each child C of module M.\n
The default value for slot DOWNWARD-OPERATION is NIL, which designates the operation O itself.\n
E.g. in order for a MODULE to be loaded with LOAD-OP (resp. compiled with COMPILE-OP), all the\n
children of the MODULE must have been loaded with LOAD-OP (resp. compiled with COMPILE-OP."))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|DOWNWARD-OPERATION-DEPENDS-ON|
 (|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)
 `((,(|COMMON-LISP|::|OR|
      (|ASDF/ACTION|::|DOWNWARD-OPERATION| |ASDF/ACTION|::|O|)
      |ASDF/ACTION|::|O|)
    ,@(|ASDF/COMPONENT|::|COMPONENT-CHILDREN| |ASDF/ACTION|::|C|))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 ((|ASDF/ACTION|::|O| |ASDF/ACTION|::|DOWNWARD-OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|PARENT-COMPONENT|))
 `(,@(|ASDF/ACTION|::|DOWNWARD-OPERATION-DEPENDS-ON| |ASDF/ACTION|::|O|
      |ASDF/ACTION|::|C|)
   ,@(|CLOS|::|CALL-NEXT-METHOD|)))
(|CLOS|::|DEFCLASS| |ASDF/ACTION|::|UPWARD-OPERATION|
 (|ASDF/OPERATION|::|OPERATION|)
 ((|ASDF/ACTION|::|UPWARD-OPERATION| :|INITFORM| |COMMON-LISP|::|NIL| :|READER|
   |ASDF/ACTION|::|UPWARD-OPERATION| :|TYPE|
   |ASDF/ACTION|::|OPERATION-DESIGNATOR| :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "An UPWARD-OPERATION has dependencies that propagate up the component hierarchy.\n
I.e., if O is an instance of UPWARD-OPERATION, and its UPWARD-OPERATION slot designates operation U,\n
then the action (O . C) of O on a component C that has the parent P will depends on (U . P).\n
The default value for slot UPWARD-OPERATION is NIL, which designates the operation O itself.\n
E.g. in order for a COMPONENT to be prepared for loading or compiling with PREPARE-OP, its PARENT\n
must first be prepared for loading or compiling with PREPARE-OP."))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|UPWARD-OPERATION-DEPENDS-ON|
 (|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)
 (|UIOP/UTILITY|::|IF-LET|
  (|ASDF/ACTION|::|P|
   (|ASDF/COMPONENT|::|COMPONENT-PARENT| |ASDF/ACTION|::|C|))
  `((,(|COMMON-LISP|::|OR|
       (|ASDF/ACTION|::|UPWARD-OPERATION| |ASDF/ACTION|::|O|)
       |ASDF/ACTION|::|O|)
     ,|ASDF/ACTION|::|P|))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 ((|ASDF/ACTION|::|O| |ASDF/ACTION|::|UPWARD-OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|CHILD-COMPONENT|))
 `(,@(|ASDF/ACTION|::|UPWARD-OPERATION-DEPENDS-ON| |ASDF/ACTION|::|O|
      |ASDF/ACTION|::|C|)
   ,@(|CLOS|::|CALL-NEXT-METHOD|)))
(|CLOS|::|DEFCLASS| |ASDF/ACTION|::|SIDEWAY-OPERATION|
 (|ASDF/OPERATION|::|OPERATION|)
 ((|ASDF/ACTION|::|SIDEWAY-OPERATION| :|INITFORM| |COMMON-LISP|::|NIL|
   :|READER| |ASDF/ACTION|::|SIDEWAY-OPERATION| :|TYPE|
   |ASDF/ACTION|::|OPERATION-DESIGNATOR| :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "A SIDEWAY-OPERATION has dependencies that propagate \"sideway\" to siblings\n
that a component depends on. I.e. if O is a SIDEWAY-OPERATION, and its SIDEWAY-OPERATION slot\n
designates operation S (where NIL designates O itself), then the action (O . C) of O on component C\n
depends on each of (S . D) where D is a declared dependency of C.\n
E.g. in order for a COMPONENT to be prepared for loading or compiling with PREPARE-OP,\n
each of its declared dependencies must first be loaded as by LOAD-OP."))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|SIDEWAY-OPERATION-DEPENDS-ON|
 (|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)
 `((,(|COMMON-LISP|::|OR|
      (|ASDF/ACTION|::|SIDEWAY-OPERATION| |ASDF/ACTION|::|O|)
      |ASDF/ACTION|::|O|)
    ,@(|ASDF/COMPONENT|::|COMPONENT-SIDEWAY-DEPENDENCIES|
       |ASDF/ACTION|::|C|))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 ((|ASDF/ACTION|::|O| |ASDF/ACTION|::|SIDEWAY-OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 `(,@(|ASDF/ACTION|::|SIDEWAY-OPERATION-DEPENDS-ON| |ASDF/ACTION|::|O|
      |ASDF/ACTION|::|C|)
   ,@(|CLOS|::|CALL-NEXT-METHOD|)))
(|CLOS|::|DEFCLASS| |ASDF/ACTION|::|SELFWARD-OPERATION|
 (|ASDF/OPERATION|::|OPERATION|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|TYPE|
   (|COMMON-LISP|::|OR| |ASDF/ACTION|::|OPERATION-DESIGNATOR|
    |COMMON-LISP|::|LIST|)
   :|READER| |ASDF/ACTION|::|SELFWARD-OPERATION| :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "A SELFWARD-OPERATION depends on another operation on the same component.\n
I.e., if O is a SELFWARD-OPERATION, and its SELFWARD-OPERATION designates a list of operations L,\n
then the action (O . C) of O on component C depends on each (S . C) for S in L.\n
E.g. before a component may be loaded by LOAD-OP, it must have been compiled by COMPILE-OP.\n
A operation-designator designates a singleton list of the designated operation;\n
a list of operation-designators designates the list of designated operations;\n
NIL is not a valid operation designator in that context.  Note that any dependency\n
ordering between the operations in a list of SELFWARD-OPERATION should be specified separately\n
in the respective operation's COMPONENT-DEPENDS-ON methods so that they be scheduled properly."))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|SELFWARD-OPERATION-DEPENDS-ON|
 (|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)
 (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/ACTION|::|OP| :|IN|
  (|UIOP/UTILITY|::|ENSURE-LIST|
   (|ASDF/ACTION|::|SELFWARD-OPERATION| |ASDF/ACTION|::|O|))
  :|COLLECT| `(,|ASDF/ACTION|::|OP| ,|ASDF/ACTION|::|C|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 ((|ASDF/ACTION|::|O| |ASDF/ACTION|::|SELFWARD-OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 `(,@(|ASDF/ACTION|::|SELFWARD-OPERATION-DEPENDS-ON| |ASDF/ACTION|::|O|
      |ASDF/ACTION|::|C|)
   ,@(|CLOS|::|CALL-NEXT-METHOD|)))
(|CLOS|::|DEFCLASS| |ASDF/ACTION|::|NON-PROPAGATING-OPERATION|
 (|ASDF/OPERATION|::|OPERATION|) |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "A NON-PROPAGATING-OPERATION is an operation that propagates\n
no dependencies whatsoever.  It is supplied in order that the programmer be able\n
to specify that s/he is intentionally specifying an operation which invokes no\n
dependencies."))
(|COMMON-LISP|::|LET*| ((#1=#:|G25796| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/ACTION|::|DOWNWARD-OPERATION| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/OPERATION|::|OPERATION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|DOWNWARD-OPERATION|
    :|READERS| '(|ASDF/ACTION|::|DOWNWARD-OPERATION|) :|ALLOCATION| ':|CLASS|
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|) :|TYPE|
    '|ASDF/ACTION|::|OPERATION-DESIGNATOR|))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"A DOWNWARD-OPERATION's dependencies propagate down the component hierarchy.\n
I.e., if O is a DOWNWARD-OPERATION and its DOWNWARD-OPERATION slot designates operation D, then\n
the action (O . M) of O on module M will depends on each of (D . C) for each child C of module M.\n
The default value for slot DOWNWARD-OPERATION is NIL, which designates the operation O itself.\n
E.g. in order for a MODULE to be loaded with LOAD-OP (resp. compiled with COMPILE-OP), all the\n
children of the MODULE must have been loaded with LOAD-OP (resp. compiled with COMPILE-OP."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|DOWNWARD-OPERATION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|DOWNWARD-OPERATION-DEPENDS-ON|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|DOWNWARD-OPERATION-DEPENDS-ON|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G25840| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/ACTION|::|UPWARD-OPERATION| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/OPERATION|::|OPERATION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|UPWARD-OPERATION| :|READERS|
    '(|ASDF/ACTION|::|UPWARD-OPERATION|) :|ALLOCATION| ':|CLASS| :|INITFORM|
    '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|) :|TYPE|
    '|ASDF/ACTION|::|OPERATION-DESIGNATOR|))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"An UPWARD-OPERATION has dependencies that propagate up the component hierarchy.\n
I.e., if O is an instance of UPWARD-OPERATION, and its UPWARD-OPERATION slot designates operation U,\n
then the action (O . C) of O on a component C that has the parent P will depends on (U . P).\n
The default value for slot UPWARD-OPERATION is NIL, which designates the operation O itself.\n
E.g. in order for a COMPONENT to be prepared for loading or compiling with PREPARE-OP, its PARENT\n
must first be prepared for loading or compiling with PREPARE-OP."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|UPWARD-OPERATION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|UPWARD-OPERATION-DEPENDS-ON|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|UPWARD-OPERATION-DEPENDS-ON|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G25886| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/ACTION|::|SIDEWAY-OPERATION| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/OPERATION|::|OPERATION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SIDEWAY-OPERATION|
    :|READERS| '(|ASDF/ACTION|::|SIDEWAY-OPERATION|) :|ALLOCATION| ':|CLASS|
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|) :|TYPE|
    '|ASDF/ACTION|::|OPERATION-DESIGNATOR|))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"A SIDEWAY-OPERATION has dependencies that propagate \"sideway\" to siblings\n
that a component depends on. I.e. if O is a SIDEWAY-OPERATION, and its SIDEWAY-OPERATION slot\n
designates operation S (where NIL designates O itself), then the action (O . C) of O on component C\n
depends on each of (S . D) where D is a declared dependency of C.\n
E.g. in order for a COMPONENT to be prepared for loading or compiling with PREPARE-OP,\n
each of its declared dependencies must first be loaded as by LOAD-OP."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|SIDEWAY-OPERATION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|SIDEWAY-OPERATION-DEPENDS-ON|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|SIDEWAY-OPERATION-DEPENDS-ON|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G25930| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/ACTION|::|SELFWARD-OPERATION| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/OPERATION|::|OPERATION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|READERS| '(|ASDF/ACTION|::|SELFWARD-OPERATION|) :|ALLOCATION| ':|CLASS|
    :|TYPE|
    '(|COMMON-LISP|::|OR| |ASDF/ACTION|::|OPERATION-DESIGNATOR|
      |COMMON-LISP|::|LIST|)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"A SELFWARD-OPERATION depends on another operation on the same component.\n
I.e., if O is a SELFWARD-OPERATION, and its SELFWARD-OPERATION designates a list of operations L,\n
then the action (O . C) of O on component C depends on each (S . C) for S in L.\n
E.g. before a component may be loaded by LOAD-OP, it must have been compiled by COMPILE-OP.\n
A operation-designator designates a singleton list of the designated operation;\n
a list of operation-designators designates the list of designated operations;\n
NIL is not a valid operation designator in that context.  Note that any dependency\n
ordering between the operations in a list of SELFWARD-OPERATION should be specified separately\n
in the respective operation's COMPONENT-DEPENDS-ON methods so that they be scheduled properly."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|SELFWARD-OPERATION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|SELFWARD-OPERATION-DEPENDS-ON|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|SELFWARD-OPERATION-DEPENDS-ON|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G25981| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/ACTION|::|NON-PROPAGATING-OPERATION| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/OPERATION|::|OPERATION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"A NON-PROPAGATING-OPERATION is an operation that propagates\n
no dependencies whatsoever.  It is supplied in order that the programmer be able\n
to specify that s/he is intentionally specifying an operation which invokes no\n
dependencies."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|DEFINE-CONDITION|
 |ASDF/ACTION|::|OPERATION-DEFINITION-WARNING|
 (|COMMON-LISP|::|SIMPLE-WARNING|) |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Warning condition related to definition of obsolete OPERATION objects."))
(|COMMON-LISP|::|DEFINE-CONDITION| |ASDF/ACTION|::|OPERATION-DEFINITION-ERROR|
 (|COMMON-LISP|::|SIMPLE-ERROR|) |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Error condition related to definition of incorrect OPERATION objects."))
(|CLOS|::|DEFMETHOD| |CLOS|::|INITIALIZE-INSTANCE| :|BEFORE|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|) |COMMON-LISP|::|&KEY|)
 (|ASDF/OPERATION|::|CHECK-OPERATION-CONSTRUCTOR|)
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|TYPEP| |ASDF/ACTION|::|O|
   '(|COMMON-LISP|::|OR| |ASDF/ACTION|::|DOWNWARD-OPERATION|
     |ASDF/ACTION|::|UPWARD-OPERATION| |ASDF/ACTION|::|SIDEWAY-OPERATION|
     |ASDF/ACTION|::|SELFWARD-OPERATION|
     |ASDF/ACTION|::|NON-PROPAGATING-OPERATION|))
  (|COMMON-LISP|::|WARN| '|ASDF/ACTION|::|OPERATION-DEFINITION-WARNING|
   :|FORMAT-CONTROL|
   "No dependency propagating scheme specified for operation class ~S.\n
The class needs to be updated for ASDF 3.1 and specify appropriate propagation mixins."
   :|FORMAT-ARGUMENTS|
   (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|TYPE-OF| |ASDF/ACTION|::|O|)))))
(|CLOS|::|DEFMETHOD| |CLOS|::|INITIALIZE-INSTANCE| :|BEFORE|
 ((|ASDF/ACTION|::|O| |ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
  |COMMON-LISP|::|&KEY|)
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|TYPEP| |ASDF/ACTION|::|O|
   '(|COMMON-LISP|::|OR| |ASDF/ACTION|::|DOWNWARD-OPERATION|
     |ASDF/ACTION|::|UPWARD-OPERATION| |ASDF/ACTION|::|SIDEWAY-OPERATION|
     |ASDF/ACTION|::|SELFWARD-OPERATION|))
  (|COMMON-LISP|::|ERROR| '|ASDF/ACTION|::|OPERATION-DEFINITION-ERROR|
   :|FORMAT-CONTROL|
   "Inconsistent class: ~S\n
  NON-PROPAGATING-OPERATION is incompatible with propagating operation classes as superclasses."
   :|FORMAT-ARGUMENTS|
   (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|TYPE-OF| |ASDF/ACTION|::|O|)))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|BACKWARD-COMPATIBLE-DEPENDS-ON|
 (|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)
 "DEPRECATED: all subclasses of OPERATION used in ASDF should inherit from one of\n
 DOWNWARD-OPERATION UPWARD-OPERATION SIDEWAY-OPERATION SELFWARD-OPERATION NON-PROPAGATING-OPERATION.\n
 The function BACKWARD-COMPATIBLE-DEPENDS-ON temporarily provides ASDF2 behaviour for those that\n
 don't. In the future this functionality will be removed, and the default will be no propagation."
 (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION|
  (|UIOP/VERSION|::|VERSION-DEPRECATION| |ASDF/UPGRADE|::|*ASDF-VERSION*|
   :|STYLE-WARNING| "3.2")
  `(|ASDF/ACTION|::|BACKWARD-COMPATIBLE-DEPENDS-ON| :|FOR-OPERATION|
    ,|ASDF/ACTION|::|O|))
 `(,@(|ASDF/ACTION|::|SIDEWAY-OPERATION-DEPENDS-ON| |ASDF/ACTION|::|O|
      |ASDF/ACTION|::|C|)
   ,@(|COMMON-LISP|::|WHEN|
      (|COMMON-LISP|::|TYPEP| |ASDF/ACTION|::|C|
       '|ASDF/COMPONENT|::|PARENT-COMPONENT|)
      (|ASDF/ACTION|::|DOWNWARD-OPERATION-DEPENDS-ON| |ASDF/ACTION|::|O|
       |ASDF/ACTION|::|C|))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 `(,@(|COMMON-LISP|::|CDR|
      (|COMMON-LISP|::|ASSOC| (|COMMON-LISP|::|TYPE-OF| |ASDF/ACTION|::|O|)
       (|ASDF/COMPONENT|::|COMPONENT-IN-ORDER-TO| |ASDF/ACTION|::|C|)))
   ,@(|COMMON-LISP|::|UNLESS|
      (|COMMON-LISP|::|TYPEP| |ASDF/ACTION|::|O|
       '(|COMMON-LISP|::|OR| |ASDF/ACTION|::|DOWNWARD-OPERATION|
         |ASDF/ACTION|::|UPWARD-OPERATION| |ASDF/ACTION|::|SIDEWAY-OPERATION|
         |ASDF/ACTION|::|SELFWARD-OPERATION|
         |ASDF/ACTION|::|NON-PROPAGATING-OPERATION|))
      (|ASDF/ACTION|::|BACKWARD-COMPATIBLE-DEPENDS-ON| |ASDF/ACTION|::|O|
       |ASDF/ACTION|::|C|))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|DOWNWARD-OPERATION|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)) |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|SIDEWAY-OPERATION|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)) |COMMON-LISP|::|NIL|)
(|COMMON-LISP|::|LET*| ((#1=#:|G26006| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/ACTION|::|OPERATION-DEFINITION-WARNING| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|SIMPLE-WARNING|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Warning condition related to definition of obsolete OPERATION objects."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G26009| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/ACTION|::|OPERATION-DEFINITION-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|SIMPLE-ERROR|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Error condition related to definition of incorrect OPERATION objects."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|INITIALIZE-INSTANCE|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|INITIALIZE-INSTANCE|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|BACKWARD-COMPATIBLE-DEPENDS-ON|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|BACKWARD-COMPATIBLE-DEPENDS-ON|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|DOWNWARD-OPERATION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|SIDEWAY-OPERATION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/ACTION|::|OUTPUT-FILES|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Methods for this function return two values: a list of output files\n
corresponding to this action, and a boolean indicating if they have already been subjected\n
to relevant output translations and should not be further translated.\n\n
Methods on PERFORM *must* call this function to determine where their outputs are to be located.\n
They may rely on the order of the files to discriminate between outputs.\n"))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/ACTION|::|INPUT-FILES|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "A list of input files corresponding to this action.\n\n
Methods on PERFORM *must* call this function to determine where their inputs are located.\n
They may rely on the order of the files to discriminate between inputs.\n"))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/ACTION|::|OPERATION-DONE-P|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Returns a boolean which is NIL if the action must be performed (again)."))
(|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
 |ASDF/ACTION|::|OUTPUT-FILES|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|))
(|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
 |ASDF/ACTION|::|INPUT-FILES|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|))
(|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
 |ASDF/ACTION|::|OPERATION-DONE-P|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|OPERATION-DONE-P|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 |COMMON-LISP|::|T|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|OUTPUT-FILES| :|AROUND|
 ((|ASDF/OPERATION|::|OPERATION| |COMMON-LISP|::|T|)
  (|ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|T|))
 (|ASDF/SESSION|::|DO-ASDF-CACHE|
  `(|ASDF/ACTION|::|OUTPUT-FILES| ,|ASDF/OPERATION|::|OPERATION|
    ,|ASDF/COMPONENT|::|COMPONENT|)
  (|COMMON-LISP|::|VALUES|
   (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
    (|ASDF/ACTION|::|PATHNAMES| |ASDF/ACTION|::|FIXEDP|)
    (|CLOS|::|CALL-NEXT-METHOD|)
    (|COMMON-LISP|::|LET*|
     ((|COMMON-LISP|::|DIRECTORY|
       (|UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME|
        (|ASDF/COMPONENT|::|COMPONENT-PATHNAME|
         (|ASDF/COMPONENT|::|FIND-COMPONENT| |COMMON-LISP|::|NIL|
          |ASDF/COMPONENT|::|COMPONENT|))))
      (|ASDF/ACTION|::|ABSOLUTE-PATHNAMES|
       (|COMMON-LISP|::|LOOP| :|FOR| |COMMON-LISP|::|PATHNAME| :|IN|
        |ASDF/ACTION|::|PATHNAMES| :|COLLECT|
        (|UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME| |COMMON-LISP|::|PATHNAME|
         |COMMON-LISP|::|DIRECTORY|))))
     (|COMMON-LISP|::|IF| |ASDF/ACTION|::|FIXEDP|
      |ASDF/ACTION|::|ABSOLUTE-PATHNAMES|
      (|COMMON-LISP|::|MAPCAR| |UIOP/PATHNAME|::|*OUTPUT-TRANSLATION-FUNCTION*|
       |ASDF/ACTION|::|ABSOLUTE-PATHNAMES|))))
   |COMMON-LISP|::|T|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|OUTPUT-FILES|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/ACTION|::|OUTPUT-FILE|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 "The unique output file of performing OPERATION on COMPONENT"
 (|COMMON-LISP|::|LET|
  ((|ASDF/ACTION|::|FILES|
    (|ASDF/ACTION|::|OUTPUT-FILES| |ASDF/OPERATION|::|OPERATION|
     |ASDF/COMPONENT|::|COMPONENT|)))
  (|COMMON-LISP|::|ASSERT|
   (|UIOP/UTILITY|::|LENGTH=N-P| |ASDF/ACTION|::|FILES| 1.))
  (|COMMON-LISP|::|FIRST| |ASDF/ACTION|::|FILES|)))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/ACTION|::|ADDITIONAL-INPUT-FILES|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Additional input files for the operation on this\n
    component.  These are files that are inferred, rather than\n
    explicitly specified, and these are typically NOT files that\n
    undergo operations directly.  Instead, they are files that it is\n
    important for ASDF to know about in order to compute operation times,etc."))
(|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
 |ASDF/ACTION|::|ADDITIONAL-INPUT-FILES|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|ADDITIONAL-INPUT-FILES|
 ((|ASDF/ACTION|::|OP| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|COMP| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|CDR|
  (|COMMON-LISP|::|ASSOC| |ASDF/ACTION|::|OP|
   (|ASDF/COMPONENT|::|%ADDITIONAL-INPUT-FILES| |ASDF/ACTION|::|COMP|))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|INPUT-FILES| :|AROUND|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (|ASDF/SESSION|::|DO-ASDF-CACHE|
  `(|ASDF/ACTION|::|INPUT-FILES| ,|ASDF/OPERATION|::|OPERATION|
    ,|ASDF/COMPONENT|::|COMPONENT|)
  (|COMMON-LISP|::|APPEND| (|CLOS|::|CALL-NEXT-METHOD|)
   (|ASDF/ACTION|::|ADDITIONAL-INPUT-FILES| |ASDF/OPERATION|::|OPERATION|
    |ASDF/COMPONENT|::|COMPONENT|))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|INPUT-FILES|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|INPUT-FILES|
 ((|ASDF/ACTION|::|O| |ASDF/ACTION|::|SELFWARD-OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 `(,@(|COMMON-LISP|::|OR|
      (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/ACTION|::|DEP-O| :|IN|
       (|UIOP/UTILITY|::|ENSURE-LIST|
        (|ASDF/ACTION|::|SELFWARD-OPERATION| |ASDF/ACTION|::|O|))
       :|APPEND|
       (|COMMON-LISP|::|OR|
        (|ASDF/ACTION|::|OUTPUT-FILES| |ASDF/ACTION|::|DEP-O|
         |ASDF/ACTION|::|C|)
        (|ASDF/ACTION|::|INPUT-FILES| |ASDF/ACTION|::|DEP-O|
         |ASDF/ACTION|::|C|)))
      (|UIOP/UTILITY|::|IF-LET|
       ((|COMMON-LISP|::|PATHNAME|
         (|ASDF/COMPONENT|::|COMPONENT-PATHNAME| |ASDF/ACTION|::|C|)))
       (|COMMON-LISP|::|AND|
        (|UIOP/PATHNAME|::|FILE-PATHNAME-P| |COMMON-LISP|::|PATHNAME|)
        (|COMMON-LISP|::|LIST| |COMMON-LISP|::|PATHNAME|))))
   ,@(|CLOS|::|CALL-NEXT-METHOD|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|OUTPUT-FILES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILES|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|INPUT-FILES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|OPERATION-DONE-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OPERATION-DONE-P|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OPERATION-DONE-P|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OPERATION-DONE-P|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OPERATION-DONE-P|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OPERATION-DONE-P|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|OUTPUT-FILE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|ADDITIONAL-INPUT-FILES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ADDITIONAL-INPUT-FILES|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ADDITIONAL-INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ADDITIONAL-INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ADDITIONAL-INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ADDITIONAL-INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Return the timestamp for when an action was last performed"))
(|UIOP/UTILITY|::|DEFGENERIC*|
 (|COMMON-LISP|::|SETF| |ASDF/ACTION|::|COMPONENT-OPERATION-TIME|)
 (|COMMON-LISP|::|TIME| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Update the timestamp for when an action was last performed"))
(|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
 |ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/ACTION|::|MARK-OPERATION-DONE|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Mark a action as having been just done.\n\n
Updates the action's COMPONENT-OPERATION-TIME to match the COMPUTE-ACTION-STAMP\n
using the JUST-DONE flag."))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/ACTION|::|COMPUTE-ACTION-STAMP|
 (|ASDF/ACTION|::|PLAN-| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|&KEY|
  |ASDF/ACTION|::|JUST-DONE|)
 (:|DOCUMENTATION|
  "Has this action been successfully done already,\n
and at what known timestamp has it been done at or will it be done at?\n
* PLAN is a plan object modelling future effects of actions,\n
  or NIL to denote what actually happened.\n
* OPERATION and COMPONENT denote the action.\n
Takes keyword JUST-DONE:\n
* JUST-DONE is a boolean that is true if the action was just successfully performed,\n
  at which point we want compute the actual stamp and warn if files are missing;\n
  otherwise we are making plans, anticipating the effects of the action.\n
Returns two values:\n
* a STAMP saying when it was done or will be done,\n
  or T if the action involves files that need to be recomputed.\n
* a boolean DONE-P that indicates whether the action has actually been done,\n
  and both its output-files and its in-image side-effects are up to date."))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|GETHASH| |ASDF/ACTION|::|O|
  (|ASDF/COMPONENT|::|COMPONENT-OPERATION-TIMES| |ASDF/ACTION|::|C|)))
(|CLOS|::|DEFMETHOD|
 (|COMMON-LISP|::|SETF| |ASDF/ACTION|::|COMPONENT-OPERATION-TIME|)
 (|ASDF/ACTION|::|STAMP| (|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|ASSERT| |ASDF/ACTION|::|STAMP| |COMMON-LISP|::|NIL|
  "invalid null stamp for ~A"
  (|ASDF/ACTION|::|ACTION-DESCRIPTION| |ASDF/ACTION|::|O| |ASDF/ACTION|::|C|))
 (|COMMON-LISP|::|SETF|
  (|COMMON-LISP|::|GETHASH| |ASDF/ACTION|::|O|
   (|ASDF/COMPONENT|::|COMPONENT-OPERATION-TIMES| |ASDF/ACTION|::|C|))
  |ASDF/ACTION|::|STAMP|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|MARK-OPERATION-DONE|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|LET|
  ((|ASDF/ACTION|::|STAMP|
    (|ASDF/ACTION|::|COMPUTE-ACTION-STAMP| |COMMON-LISP|::|NIL|
     |ASDF/ACTION|::|O| |ASDF/ACTION|::|C| :|JUST-DONE| |COMMON-LISP|::|T|)))
  (|COMMON-LISP|::|ASSERT| |ASDF/ACTION|::|STAMP| |COMMON-LISP|::|NIL|
   "Failed to compute a stamp for completed action ~A"
   (|ASDF/ACTION|::|ACTION-DESCRIPTION| |ASDF/ACTION|::|O| |ASDF/ACTION|::|C|))
  1.
  (|COMMON-LISP|::|SETF|
   (|ASDF/ACTION|::|COMPONENT-OPERATION-TIME| |ASDF/ACTION|::|O|
    |ASDF/ACTION|::|C|)
   |ASDF/ACTION|::|STAMP|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|COMPONENT-OPERATION-TIME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   (|COMMON-LISP|::|SETF| |ASDF/ACTION|::|COMPONENT-OPERATION-TIME|)))
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/ACTION|::|COMPONENT-OPERATION-TIME|)
 '#(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|MARK-OPERATION-DONE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|MARK-OPERATION-DONE|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|COMPUTE-ACTION-STAMP|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPUTE-ACTION-STAMP|
 '#(3. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|JUST-DONE|)
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/ACTION|::|COMPONENT-OPERATION-TIME|)
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|MARK-OPERATION-DONE|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/ACTION|::|PERFORM|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "PERFORM an action, consuming its input-files and building its output-files"))
(|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS| |ASDF/ACTION|::|PERFORM|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM| :|AROUND|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|ASDF/ACTION|::|WHILE-VISITING-ACTION|
  (|ASDF/ACTION|::|O| |ASDF/ACTION|::|C|) (|CLOS|::|CALL-NEXT-METHOD|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM| :|BEFORE|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|UIOP/FILESYSTEM|::|ENSURE-ALL-DIRECTORIES-EXIST|
  (|ASDF/ACTION|::|OUTPUT-FILES| |ASDF/ACTION|::|O| |ASDF/ACTION|::|C|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM| :|AFTER|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|ASDF/ACTION|::|MARK-OPERATION-DONE| |ASDF/ACTION|::|O| |ASDF/ACTION|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|PARENT-COMPONENT|))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/ACTION|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/ACTION|::|C| |ASDF/COMPONENT|::|SOURCE-FILE|))
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|TYPEP| |ASDF/ACTION|::|O|
   '(|COMMON-LISP|::|OR| |ASDF/ACTION|::|DOWNWARD-OPERATION|
     |ASDF/ACTION|::|UPWARD-OPERATION| |ASDF/ACTION|::|SIDEWAY-OPERATION|
     |ASDF/ACTION|::|SELFWARD-OPERATION|
     |ASDF/ACTION|::|NON-PROPAGATING-OPERATION|))
  (|ASDF/SESSION|::|SYSDEF-ERROR|
   (|UIOP/COMMON-LISP|::|COMPATFMT|
    "~@<Required method ~S not implemented for ~/asdf-action:format-action/~@:>")
   '|ASDF/ACTION|::|PERFORM|
   (|ASDF/ACTION|::|MAKE-ACTION| |ASDF/ACTION|::|O| |ASDF/ACTION|::|C|))))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/ACTION|::|PERFORM-WITH-RESTARTS|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "PERFORM an action in a context where suitable restarts are in place."))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM-WITH-RESTARTS|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (|ASDF/ACTION|::|PERFORM| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM-WITH-RESTARTS| :|AROUND|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (|COMMON-LISP|::|LOOP|
  (|COMMON-LISP|::|RESTART-CASE|
   (|COMMON-LISP|::|RETURN| (|CLOS|::|CALL-NEXT-METHOD|))
   (|ASDF/SESSION|::|RETRY| |COMMON-LISP|::|NIL| :|REPORT|
    (|COMMON-LISP|::|LAMBDA| (|ASDF/ACTION|::|S|)
     (|COMMON-LISP|::|FORMAT| |ASDF/ACTION|::|S|
      (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<Retry ~A.~@:>")
      (|ASDF/ACTION|::|ACTION-DESCRIPTION| |ASDF/OPERATION|::|OPERATION|
       |ASDF/COMPONENT|::|COMPONENT|))))
   (|ASDF/ACTION|::|ACCEPT| |COMMON-LISP|::|NIL| :|REPORT|
    (|COMMON-LISP|::|LAMBDA| (|ASDF/ACTION|::|S|)
     (|COMMON-LISP|::|FORMAT| |ASDF/ACTION|::|S|
      (|UIOP/COMMON-LISP|::|COMPATFMT|
       "~@<Continue, treating ~A as having been successful.~@:>")
      (|ASDF/ACTION|::|ACTION-DESCRIPTION| |ASDF/OPERATION|::|OPERATION|
       |ASDF/COMPONENT|::|COMPONENT|)))
    (|ASDF/ACTION|::|MARK-OPERATION-DONE| |ASDF/OPERATION|::|OPERATION|
     |ASDF/COMPONENT|::|COMPONENT|)
    (|COMMON-LISP|::|RETURN|)))))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|PERFORM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/ACTION|::|PERFORM-WITH-RESTARTS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM-WITH-RESTARTS|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM-WITH-RESTARTS|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM-WITH-RESTARTS|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|ASDF/LISP-ACTION| :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT| :|ASDF/SYSTEM| :|ASDF/OPERATION| :|ASDF/ACTION|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|TRY-RECOMPILING| #:|CL-SOURCE-FILE| #:|CL-SOURCE-FILE.CL|
    #:|CL-SOURCE-FILE.LSP| #:|BASIC-LOAD-OP| #:|BASIC-COMPILE-OP| #:|LOAD-OP|
    #:|PREPARE-OP| #:|COMPILE-OP| #:|TEST-OP| #:|LOAD-SOURCE-OP|
    #:|PREPARE-SOURCE-OP| #:|CALL-WITH-AROUND-COMPILE-HOOK|
    #:|PERFORM-LISP-COMPILATION| #:|PERFORM-LISP-LOAD-FASL|
    #:|PERFORM-LISP-LOAD-SOURCE| #:|LISP-COMPILATION-OUTPUT-FILES|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|ASDF/LISP-ACTION| :|ASDF|)
  :|MIX| '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/LISP-ACTION"))
(|CLOS|::|DEFCLASS| |ASDF/LISP-ACTION|::|CL-SOURCE-FILE|
 (|ASDF/COMPONENT|::|SOURCE-FILE|) ((|COMMON-LISP|::|TYPE| :|INITFORM| "lisp"))
 (:|DOCUMENTATION|
  "Component class for a Common Lisp source file (using type \"lisp\")"))
(|CLOS|::|DEFCLASS| |ASDF/LISP-ACTION|::|CL-SOURCE-FILE.CL|
 (|ASDF/LISP-ACTION|::|CL-SOURCE-FILE|)
 ((|COMMON-LISP|::|TYPE| :|INITFORM| "cl"))
 (:|DOCUMENTATION|
  "Component class for a Common Lisp source file using type \"cl\""))
(|CLOS|::|DEFCLASS| |ASDF/LISP-ACTION|::|CL-SOURCE-FILE.LSP|
 (|ASDF/LISP-ACTION|::|CL-SOURCE-FILE|)
 ((|COMMON-LISP|::|TYPE| :|INITFORM| "lsp"))
 (:|DOCUMENTATION|
  "Component class for a Common Lisp source file using type \"lsp\""))
(|COMMON-LISP|::|LET*| ((#1=#:|G27703| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/LISP-ACTION|::|CL-SOURCE-FILE| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|SOURCE-FILE|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|TYPE| :|INITFORM| '#2="lisp"
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Component class for a Common Lisp source file (using type \"lisp\")"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G27706| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/LISP-ACTION|::|CL-SOURCE-FILE.CL| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/LISP-ACTION|::|CL-SOURCE-FILE|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|TYPE| :|INITFORM| '#2="cl"
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Component class for a Common Lisp source file using type \"cl\""
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G27709| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/LISP-ACTION|::|CL-SOURCE-FILE.LSP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/LISP-ACTION|::|CL-SOURCE-FILE|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|TYPE| :|INITFORM| '#2="lsp"
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Component class for a Common Lisp source file using type \"lsp\""
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|CLOS|::|DEFCLASS| |ASDF/LISP-ACTION|::|BASIC-LOAD-OP|
 (|ASDF/OPERATION|::|OPERATION|) |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Base class for operations that apply the load-time effects of a file"))
(|CLOS|::|DEFCLASS| |ASDF/LISP-ACTION|::|BASIC-COMPILE-OP|
 (|ASDF/OPERATION|::|OPERATION|) |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Base class for operations that apply the compile-time effects of a file"))
(|COMMON-LISP|::|LET*| ((#1=#:|G27716| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/LISP-ACTION|::|BASIC-LOAD-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/OPERATION|::|OPERATION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Base class for operations that apply the load-time effects of a file"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G27719| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/LISP-ACTION|::|BASIC-COMPILE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/OPERATION|::|OPERATION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Base class for operations that apply the compile-time effects of a file"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|CLOS|::|DEFCLASS| |ASDF/LISP-ACTION|::|PREPARE-OP|
 (|ASDF/ACTION|::|UPWARD-OPERATION| |ASDF/ACTION|::|SIDEWAY-OPERATION|)
 ((|ASDF/ACTION|::|SIDEWAY-OPERATION| :|INITFORM|
   '|ASDF/LISP-ACTION|::|LOAD-OP| :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "Load the dependencies for the COMPILE-OP or LOAD-OP of a given COMPONENT."))
(|CLOS|::|DEFCLASS| |ASDF/LISP-ACTION|::|LOAD-OP|
 (|ASDF/LISP-ACTION|::|BASIC-LOAD-OP| |ASDF/ACTION|::|DOWNWARD-OPERATION|
  |ASDF/ACTION|::|SELFWARD-OPERATION|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '(|ASDF/LISP-ACTION|::|PREPARE-OP| |ASDF/LISP-ACTION|::|COMPILE-OP|)
   :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION| "Operation for loading the compiled FASL for a Lisp file"))
(|CLOS|::|DEFCLASS| |ASDF/LISP-ACTION|::|COMPILE-OP|
 (|ASDF/LISP-ACTION|::|BASIC-COMPILE-OP| |ASDF/ACTION|::|DOWNWARD-OPERATION|
  |ASDF/ACTION|::|SELFWARD-OPERATION|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '|ASDF/LISP-ACTION|::|PREPARE-OP| :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION| "Operation for compiling a Lisp file to a FASL"))
(|CLOS|::|DEFCLASS| |ASDF/LISP-ACTION|::|PREPARE-SOURCE-OP|
 (|ASDF/ACTION|::|UPWARD-OPERATION| |ASDF/ACTION|::|SIDEWAY-OPERATION|)
 ((|ASDF/ACTION|::|SIDEWAY-OPERATION| :|INITFORM|
   '|ASDF/LISP-ACTION|::|LOAD-SOURCE-OP| :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "Operation for loading the dependencies of a Lisp file as source."))
(|CLOS|::|DEFCLASS| |ASDF/LISP-ACTION|::|LOAD-SOURCE-OP|
 (|ASDF/LISP-ACTION|::|BASIC-LOAD-OP| |ASDF/ACTION|::|DOWNWARD-OPERATION|
  |ASDF/ACTION|::|SELFWARD-OPERATION|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '|ASDF/LISP-ACTION|::|PREPARE-SOURCE-OP| :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION| "Operation for loading a Lisp file as source."))
(|CLOS|::|DEFCLASS| |ASDF/LISP-ACTION|::|TEST-OP|
 (|ASDF/ACTION|::|SELFWARD-OPERATION|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '|ASDF/LISP-ACTION|::|LOAD-OP| :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "Operation for running the tests for system.\n
If the tests fail, an error will be signaled."))
(|COMMON-LISP|::|LET*| ((#1=#:|G27734| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/LISP-ACTION|::|PREPARE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/ACTION|::|UPWARD-OPERATION|
   '|ASDF/ACTION|::|SIDEWAY-OPERATION|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SIDEWAY-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM| '#2='|ASDF/LISP-ACTION|::|LOAD-OP|
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Load the dependencies for the COMPILE-OP or LOAD-OP of a given COMPONENT."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G27737| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/LISP-ACTION|::|LOAD-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/LISP-ACTION|::|BASIC-LOAD-OP|
   '|ASDF/ACTION|::|DOWNWARD-OPERATION| '|ASDF/ACTION|::|SELFWARD-OPERATION|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='(|ASDF/LISP-ACTION|::|PREPARE-OP| |ASDF/LISP-ACTION|::|COMPILE-OP|)
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation for loading the compiled FASL for a Lisp file"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G27740| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/LISP-ACTION|::|COMPILE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/LISP-ACTION|::|BASIC-COMPILE-OP|
   '|ASDF/ACTION|::|DOWNWARD-OPERATION| '|ASDF/ACTION|::|SELFWARD-OPERATION|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM| '#2='|ASDF/LISP-ACTION|::|PREPARE-OP|
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation for compiling a Lisp file to a FASL"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G27743| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/LISP-ACTION|::|PREPARE-SOURCE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/ACTION|::|UPWARD-OPERATION|
   '|ASDF/ACTION|::|SIDEWAY-OPERATION|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SIDEWAY-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='|ASDF/LISP-ACTION|::|LOAD-SOURCE-OP| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation for loading the dependencies of a Lisp file as source."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G27746| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/LISP-ACTION|::|LOAD-SOURCE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/LISP-ACTION|::|BASIC-LOAD-OP|
   '|ASDF/ACTION|::|DOWNWARD-OPERATION| '|ASDF/ACTION|::|SELFWARD-OPERATION|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='|ASDF/LISP-ACTION|::|PREPARE-SOURCE-OP| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation for loading a Lisp file as source."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G27749| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/LISP-ACTION|::|TEST-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/ACTION|::|SELFWARD-OPERATION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM| '#2='|ASDF/LISP-ACTION|::|LOAD-OP|
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation for running the tests for system.\n
If the tests fail, an error will be signaled."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|ACTION-DESCRIPTION|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|PREPARE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
  (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<loading dependencies of ~3i~_~A~@:>")
  |ASDF/LISP-ACTION|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|PREPARE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|INPUT-FILES|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|PREPARE-OP|)
  (|ASDF/LISP-ACTION|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|UIOP/UTILITY|::|IF-LET|
  (|ASDF/LISP-ACTION|::|IT|
   (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/LISP-ACTION|::|S|))
  (|COMMON-LISP|::|LIST| |ASDF/LISP-ACTION|::|IT|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-DESCRIPTION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|ACTION-DESCRIPTION|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|COMPILE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
  (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<compiling ~3i~_~A~@:>")
  |ASDF/LISP-ACTION|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|ACTION-DESCRIPTION|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|COMPILE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|PARENT-COMPONENT|))
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
  (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<completing compilation for ~3i~_~A~@:>")
  |ASDF/LISP-ACTION|::|C|))
(|UIOP/UTILITY|::|DEFGENERIC*|
 |ASDF/LISP-ACTION|::|CALL-WITH-AROUND-COMPILE-HOOK|
 (|ASDF/COMPONENT|::|COMPONENT| |ASDF/LISP-ACTION|::|THUNK|)
 (:|DOCUMENTATION|
  "A method to be called around the PERFORM'ing of actions that apply the\n
compile-time side-effects of file (i.e., COMPILE-OP or LOAD-SOURCE-OP). This method can be used\n
to setup readtables and other variables that control reading, macroexpanding, and compiling, etc.\n
Note that it will NOT be called around the performing of LOAD-OP."))
(|CLOS|::|DEFMETHOD| |ASDF/LISP-ACTION|::|CALL-WITH-AROUND-COMPILE-HOOK|
 ((|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|)
  |COMMON-LISP|::|FUNCTION|)
 (|UIOP/LISP-BUILD|::|CALL-AROUND-HOOK|
  (|ASDF/COMPONENT|::|AROUND-COMPILE-HOOK| |ASDF/LISP-ACTION|::|C|)
  |COMMON-LISP|::|FUNCTION|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/LISP-ACTION|::|PERFORM-LISP-COMPILATION|
 (|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|C|)
 "Perform the compilation of the Lisp file associated to the specified action (O . C)."
 (|COMMON-LISP|::|LET|
  ((|ASDF/LISP-ACTION|::|INPUT-FILE|
    (|COMMON-LISP|::|FIRST|
     (|ASDF/ACTION|::|INPUT-FILES| |ASDF/LISP-ACTION|::|O|
      |ASDF/LISP-ACTION|::|C|)))
   (|ASDF/LISP-ACTION|::|OUTPUTS|
    (|ASDF/ACTION|::|OUTPUT-FILES| |ASDF/LISP-ACTION|::|O|
     |ASDF/LISP-ACTION|::|C|)))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|ASDF/LISP-ACTION|::|OUTPUT| |ASDF/LISP-ACTION|::|WARNINGS-P|
    |ASDF/LISP-ACTION|::|FAILURE-P|)
   (|COMMON-LISP|::|DESTRUCTURING-BIND|
    (|ASDF/ACTION|::|OUTPUT-FILE| |COMMON-LISP|::|&OPTIONAL|
     |ASDF/LISP-ACTION|::|LIB-FILE| |ASDF/LISP-ACTION|::|WARNINGS-FILE|
     |COMMON-LISP|::|&REST| |COMMON-LISP|::|REST|)
    |ASDF/LISP-ACTION|::|OUTPUTS|
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |COMMON-LISP|::|REST|))
    (|COMMON-LISP|::|WHEN| |ASDF/LISP-ACTION|::|WARNINGS-FILE|
     (|COMMON-LISP|::|UNLESS|
      (|COMMON-LISP|::|EQUAL|
       (|COMMON-LISP|::|PATHNAME-TYPE| |ASDF/LISP-ACTION|::|WARNINGS-FILE|)
       (|UIOP/LISP-BUILD|::|WARNINGS-FILE-TYPE|))
      (|COMMON-LISP|::|SETF| |ASDF/LISP-ACTION|::|WARNINGS-FILE|
       |COMMON-LISP|::|NIL|)))
    (|ASDF/LISP-ACTION|::|CALL-WITH-AROUND-COMPILE-HOOK|
     |ASDF/LISP-ACTION|::|C|
     #'(|COMMON-LISP|::|LAMBDA|
        (|COMMON-LISP|::|&REST| |ASDF/LISP-ACTION|::|FLAGS|)
        (|COMMON-LISP|::|APPLY| '|UIOP/LISP-BUILD|::|COMPILE-FILE*|
         |ASDF/LISP-ACTION|::|INPUT-FILE| :|OUTPUT-FILE|
         |ASDF/ACTION|::|OUTPUT-FILE| :|EXTERNAL-FORMAT|
         (|ASDF/COMPONENT|::|COMPONENT-EXTERNAL-FORMAT|
          |ASDF/LISP-ACTION|::|C|)
         :|WARNINGS-FILE| |ASDF/LISP-ACTION|::|WARNINGS-FILE|
         (|COMMON-LISP|::|APPEND|
          (|COMMON-LISP|::|LIST| :|LIB-FILE| |ASDF/LISP-ACTION|::|LIB-FILE|)
          |ASDF/LISP-ACTION|::|FLAGS|)))))
   (|UIOP/LISP-BUILD|::|CHECK-LISP-COMPILE-RESULTS|
    |ASDF/LISP-ACTION|::|OUTPUT| |ASDF/LISP-ACTION|::|WARNINGS-P|
    |ASDF/LISP-ACTION|::|FAILURE-P| "~/asdf-action::format-action/"
    (|COMMON-LISP|::|LIST|
     (|COMMON-LISP|::|CONS| |ASDF/LISP-ACTION|::|O|
      |ASDF/LISP-ACTION|::|C|))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/LISP-ACTION|::|REPORT-FILE-P|
 (|ASDF/LISP-ACTION|::|F|)
 "Is F a build report file containing, e.g., warnings to check?"
 (|COMMON-LISP|::|EQUALP|
  (|COMMON-LISP|::|PATHNAME-TYPE| |ASDF/LISP-ACTION|::|F|) "build-report"))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/LISP-ACTION|::|PERFORM-LISP-WARNINGS-CHECK|
 (|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|C|)
 "Check the warnings associated with the dependencies of an action."
 (|COMMON-LISP|::|LET*|
  ((|ASDF/LISP-ACTION|::|EXPECTED-WARNINGS-FILES|
    (|COMMON-LISP|::|REMOVE-IF-NOT| #'|UIOP/LISP-BUILD|::|WARNINGS-FILE-P|
     (|ASDF/ACTION|::|INPUT-FILES| |ASDF/LISP-ACTION|::|O|
      |ASDF/LISP-ACTION|::|C|)))
   (|ASDF/LISP-ACTION|::|ACTUAL-WARNINGS-FILES|
    (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/LISP-ACTION|::|W| :|IN|
     |ASDF/LISP-ACTION|::|EXPECTED-WARNINGS-FILES| :|WHEN|
     (|ASDF/SESSION|::|GET-FILE-STAMP| |ASDF/LISP-ACTION|::|W|) :|COLLECT|
     |ASDF/LISP-ACTION|::|W| :|ELSE| :|DO|
     (|COMMON-LISP|::|WARN| "Missing warnings file ~S while ~A"
      |ASDF/LISP-ACTION|::|W|
      (|ASDF/ACTION|::|ACTION-DESCRIPTION| |ASDF/LISP-ACTION|::|O|
       |ASDF/LISP-ACTION|::|C|)))))
  (|UIOP/LISP-BUILD|::|CHECK-DEFERRED-WARNINGS|
   |ASDF/LISP-ACTION|::|ACTUAL-WARNINGS-FILES|)
  (|COMMON-LISP|::|LET*|
   ((|ASDF/LISP-ACTION|::|OUTPUT|
     (|ASDF/ACTION|::|OUTPUT-FILES| |ASDF/LISP-ACTION|::|O|
      |ASDF/LISP-ACTION|::|C|))
    (|ASDF/LISP-ACTION|::|REPORT|
     (|COMMON-LISP|::|FIND-IF| #'|ASDF/LISP-ACTION|::|REPORT-FILE-P|
      |ASDF/LISP-ACTION|::|OUTPUT|)))
   (|COMMON-LISP|::|WHEN| |ASDF/LISP-ACTION|::|REPORT|
    (|COMMON-LISP|::|WITH-OPEN-FILE|
     (|ASDF/LISP-ACTION|::|S| |ASDF/LISP-ACTION|::|REPORT| :|DIRECTION|
      :|OUTPUT| :|IF-EXISTS| :|SUPERSEDE|)
     (|COMMON-LISP|::|FORMAT| |ASDF/LISP-ACTION|::|S| ":success~%"))))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|COMPILE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/LISP-ACTION|::|CL-SOURCE-FILE|))
 (|ASDF/LISP-ACTION|::|PERFORM-LISP-COMPILATION| |ASDF/LISP-ACTION|::|O|
  |ASDF/LISP-ACTION|::|C|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/LISP-ACTION|::|LISP-COMPILATION-OUTPUT-FILES|
 (|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|C|)
 "Compute the output-files for compiling the Lisp file for the specified action (O . C),\n
an OPERATION and a COMPONENT."
 (|COMMON-LISP|::|LET*|
  ((|ASDF/LISP-ACTION|::|I|
    (|COMMON-LISP|::|FIRST|
     (|ASDF/ACTION|::|INPUT-FILES| |ASDF/LISP-ACTION|::|O|
      |ASDF/LISP-ACTION|::|C|)))
   (|ASDF/LISP-ACTION|::|F|
    (|COMMON-LISP|::|COMPILE-FILE-PATHNAME| |ASDF/LISP-ACTION|::|I|)))
  `(,|ASDF/LISP-ACTION|::|F|
    ,@`(,(|COMMON-LISP|::|MAKE-PATHNAME| :|TYPE| "lib" :|DEFAULTS|
          |ASDF/LISP-ACTION|::|F|))
    ,@(|COMMON-LISP|::|WHEN|
       (|COMMON-LISP|::|AND| |UIOP/LISP-BUILD|::|*WARNINGS-FILE-TYPE*|
        (|COMMON-LISP|::|NOT|
         (|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P|
          (|ASDF/COMPONENT|::|COMPONENT-SYSTEM| |ASDF/LISP-ACTION|::|C|))))
       `(,(|COMMON-LISP|::|MAKE-PATHNAME| :|TYPE|
           |UIOP/LISP-BUILD|::|*WARNINGS-FILE-TYPE*| :|DEFAULTS|
           |ASDF/LISP-ACTION|::|F|))))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|OUTPUT-FILES|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|COMPILE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/LISP-ACTION|::|CL-SOURCE-FILE|))
 (|ASDF/LISP-ACTION|::|LISP-COMPILATION-OUTPUT-FILES| |ASDF/LISP-ACTION|::|O|
  |ASDF/LISP-ACTION|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|COMPILE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|STATIC-FILE|))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|COMPILE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|AND| |UIOP/LISP-BUILD|::|*WARNINGS-FILE-TYPE*|
   (|COMMON-LISP|::|NOT|
    (|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P| |ASDF/LISP-ACTION|::|C|)))
  (|ASDF/LISP-ACTION|::|PERFORM-LISP-WARNINGS-CHECK| |ASDF/LISP-ACTION|::|O|
   |ASDF/LISP-ACTION|::|C|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|INPUT-FILES|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|COMPILE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|AND| |UIOP/LISP-BUILD|::|*WARNINGS-FILE-TYPE*|
   (|COMMON-LISP|::|NOT|
    (|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P| |ASDF/LISP-ACTION|::|C|)))
  (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/LISP-ACTION|::|SUB| :|IN|
   (|ASDF/COMPONENT|::|SUB-COMPONENTS| |ASDF/LISP-ACTION|::|C| :|TYPE|
    '|ASDF/LISP-ACTION|::|CL-SOURCE-FILE|)
   :|NCONC|
   (|COMMON-LISP|::|REMOVE-IF-NOT| '|UIOP/LISP-BUILD|::|WARNINGS-FILE-P|
    (|ASDF/ACTION|::|OUTPUT-FILES| |ASDF/LISP-ACTION|::|O|
     |ASDF/LISP-ACTION|::|SUB|)))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|OUTPUT-FILES|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|COMPILE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|WHEN|
  (|COMMON-LISP|::|AND| |UIOP/LISP-BUILD|::|*WARNINGS-FILE-TYPE*|
   (|COMMON-LISP|::|NOT|
    (|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P| |ASDF/LISP-ACTION|::|C|)))
  (|UIOP/UTILITY|::|IF-LET|
   ((|COMMON-LISP|::|PATHNAME|
     (|ASDF/COMPONENT|::|COMPONENT-PATHNAME| |ASDF/LISP-ACTION|::|C|)))
   (|COMMON-LISP|::|LIST|
    (|UIOP/PATHNAME|::|SUBPATHNAME| |COMMON-LISP|::|PATHNAME|
     (|ASDF/SYSTEM|::|COERCE-FILENAME| |ASDF/LISP-ACTION|::|C|) :|TYPE|
     "build-report")))))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-DESCRIPTION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-DESCRIPTION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/LISP-ACTION|::|CALL-WITH-AROUND-COMPILE-HOOK|))
(|SYSTEM|::|C-DEFUN| '|ASDF/LISP-ACTION|::|CALL-WITH-AROUND-COMPILE-HOOK|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/LISP-ACTION|::|CALL-WITH-AROUND-COMPILE-HOOK|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/LISP-ACTION|::|PERFORM-LISP-COMPILATION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/LISP-ACTION|::|PERFORM-LISP-COMPILATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|C|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/LISP-ACTION|::|REPORT-FILE-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/LISP-ACTION|::|REPORT-FILE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/LISP-ACTION|::|F|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/LISP-ACTION|::|PERFORM-LISP-WARNINGS-CHECK|))
(|SYSTEM|::|C-DEFUN| '|ASDF/LISP-ACTION|::|PERFORM-LISP-WARNINGS-CHECK|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|C|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/LISP-ACTION|::|LISP-COMPILATION-OUTPUT-FILES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/LISP-ACTION|::|LISP-COMPILATION-OUTPUT-FILES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|C|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|ACTION-DESCRIPTION|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|LOAD-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/LISP-ACTION|::|CL-SOURCE-FILE|))
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
  (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<loading FASL for ~3i~_~A~@:>")
  |ASDF/LISP-ACTION|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|ACTION-DESCRIPTION|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|LOAD-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|PARENT-COMPONENT|))
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
  (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<completing load for ~3i~_~A~@:>")
  |ASDF/LISP-ACTION|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|ACTION-DESCRIPTION|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|LOAD-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
  (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<loading ~3i~_~A~@:>")
  |ASDF/LISP-ACTION|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM-WITH-RESTARTS|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|LOAD-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/LISP-ACTION|::|CL-SOURCE-FILE|))
 (|COMMON-LISP|::|LOOP|
  (|COMMON-LISP|::|RESTART-CASE|
   (|COMMON-LISP|::|RETURN| (|CLOS|::|CALL-NEXT-METHOD|))
   (|ASDF/LISP-ACTION|::|TRY-RECOMPILING| |COMMON-LISP|::|NIL| :|REPORT|
    (|COMMON-LISP|::|LAMBDA| (|ASDF/LISP-ACTION|::|S|)
     (|COMMON-LISP|::|FORMAT| |ASDF/LISP-ACTION|::|S|
      "Recompile ~a and try loading it again"
      (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/LISP-ACTION|::|C|)))
    (|ASDF/ACTION|::|PERFORM|
     (|ASDF/OPERATION|::|FIND-OPERATION| |ASDF/LISP-ACTION|::|O|
      '|ASDF/LISP-ACTION|::|COMPILE-OP|)
     |ASDF/LISP-ACTION|::|C|)))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-FASL|
 (|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|C|)
 "Perform the loading of a FASL associated to specified action (O . C),\n
an OPERATION and a COMPONENT."
 (|UIOP/UTILITY|::|IF-LET|
  (|ASDF/LISP-ACTION|::|FASL|
   (|COMMON-LISP|::|FIRST|
    (|ASDF/ACTION|::|INPUT-FILES| |ASDF/LISP-ACTION|::|O|
     |ASDF/LISP-ACTION|::|C|)))
  (|UIOP/LISP-BUILD|::|LOAD*| |ASDF/LISP-ACTION|::|FASL|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|LOAD-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/LISP-ACTION|::|CL-SOURCE-FILE|))
 (|ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-FASL| |ASDF/LISP-ACTION|::|O|
  |ASDF/LISP-ACTION|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|LOAD-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|STATIC-FILE|))
 |COMMON-LISP|::|NIL|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-DESCRIPTION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-DESCRIPTION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-DESCRIPTION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM-WITH-RESTARTS|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-FASL|))
(|SYSTEM|::|C-DEFUN| '|ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-FASL|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|C|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|ACTION-DESCRIPTION|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|PREPARE-SOURCE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
  (|UIOP/COMMON-LISP|::|COMPATFMT|
   "~@<loading source for dependencies of ~3i~_~A~@:>")
  |ASDF/LISP-ACTION|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|INPUT-FILES|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|PREPARE-SOURCE-OP|)
  (|ASDF/LISP-ACTION|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|UIOP/UTILITY|::|IF-LET|
  (|ASDF/LISP-ACTION|::|IT|
   (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/LISP-ACTION|::|S|))
  (|COMMON-LISP|::|LIST| |ASDF/LISP-ACTION|::|IT|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|PREPARE-SOURCE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 |COMMON-LISP|::|NIL|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-DESCRIPTION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|ACTION-DESCRIPTION|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|LOAD-SOURCE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
  (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<Loading source of ~3i~_~A~@:>")
  |ASDF/LISP-ACTION|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|ACTION-DESCRIPTION|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|LOAD-SOURCE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|PARENT-COMPONENT|))
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
  (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<Loaded source of ~3i~_~A~@:>")
  |ASDF/LISP-ACTION|::|C|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-SOURCE|
 (|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|C|)
 "Perform the loading of a Lisp file as associated to specified action (O . C)"
 (|ASDF/LISP-ACTION|::|CALL-WITH-AROUND-COMPILE-HOOK| |ASDF/LISP-ACTION|::|C|
  #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
     (|UIOP/LISP-BUILD|::|LOAD*|
      (|COMMON-LISP|::|FIRST|
       (|ASDF/ACTION|::|INPUT-FILES| |ASDF/LISP-ACTION|::|O|
        |ASDF/LISP-ACTION|::|C|))
      :|EXTERNAL-FORMAT|
      (|ASDF/COMPONENT|::|COMPONENT-EXTERNAL-FORMAT|
       |ASDF/LISP-ACTION|::|C|)))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|LOAD-SOURCE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/LISP-ACTION|::|CL-SOURCE-FILE|))
 (|ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-SOURCE| |ASDF/LISP-ACTION|::|O|
  |ASDF/LISP-ACTION|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|LOAD-SOURCE-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|STATIC-FILE|))
 |COMMON-LISP|::|NIL|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-DESCRIPTION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|ACTION-DESCRIPTION|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-SOURCE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-SOURCE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|C|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|TEST-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|OPERATION-DONE-P|
 ((|ASDF/LISP-ACTION|::|O| |ASDF/LISP-ACTION|::|TEST-OP|)
  (|ASDF/LISP-ACTION|::|C| |ASDF/SYSTEM|::|SYSTEM|))
 "Testing a system is _never_ done." |COMMON-LISP|::|NIL|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OPERATION-DONE-P|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|ASDF/FIND-COMPONENT| :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT| :|ASDF/SYSTEM| :|ASDF/SYSTEM-REGISTRY|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|FIND-COMPONENT| #:|RESOLVE-DEPENDENCY-NAME| #:|RESOLVE-DEPENDENCY-SPEC|
    #:|RESOLVE-DEPENDENCY-COMBINATION| #:|MISSING-COMPONENT|
    #:|MISSING-REQUIRES| #:|MISSING-PARENT| #:|MISSING-COMPONENT-OF-VERSION|
    #:|RETRY| #:|MISSING-DEPENDENCY| #:|MISSING-DEPENDENCY-OF-VERSION|
    #:|MISSING-REQUIRES| #:|MISSING-PARENT| #:|MISSING-REQUIRED-BY|
    #:|MISSING-VERSION|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/FIND-COMPONENT| :|ASDF/FIND-SYSTEM| :|ASDF|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/FIND-COMPONENT"))
(|COMMON-LISP|::|DEFINE-CONDITION| |ASDF/FIND-COMPONENT|::|MISSING-COMPONENT|
 (|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
 ((|ASDF/FIND-COMPONENT|::|REQUIRES| :|INITFORM| "(unnamed)" :|READER|
   |ASDF/FIND-COMPONENT|::|MISSING-REQUIRES| :|INITARG| :|REQUIRES|)
  (|ASDF/COMPONENT|::|PARENT| :|INITFORM| |COMMON-LISP|::|NIL| :|READER|
   |ASDF/FIND-COMPONENT|::|MISSING-PARENT| :|INITARG| :|PARENT|)))
(|COMMON-LISP|::|DEFINE-CONDITION|
 |ASDF/FIND-COMPONENT|::|MISSING-COMPONENT-OF-VERSION|
 (|ASDF/FIND-COMPONENT|::|MISSING-COMPONENT|)
 ((|ASDF/COMPONENT|::|VERSION| :|INITFORM| |COMMON-LISP|::|NIL| :|READER|
   |ASDF/FIND-COMPONENT|::|MISSING-VERSION| :|INITARG| :|VERSION|)))
(|COMMON-LISP|::|DEFINE-CONDITION| |ASDF/FIND-COMPONENT|::|MISSING-DEPENDENCY|
 (|ASDF/FIND-COMPONENT|::|MISSING-COMPONENT|)
 ((|ASDF/FIND-COMPONENT|::|REQUIRED-BY| :|INITARG| :|REQUIRED-BY| :|READER|
   |ASDF/FIND-COMPONENT|::|MISSING-REQUIRED-BY|)))
(|CLOS|::|DEFMETHOD| |CLOS|::|PRINT-OBJECT|
 ((|ASDF/FIND-COMPONENT|::|C| |ASDF/FIND-COMPONENT|::|MISSING-DEPENDENCY|)
  |ASDF/FIND-COMPONENT|::|S|)
 (|COMMON-LISP|::|FORMAT| |ASDF/FIND-COMPONENT|::|S|
  (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<~A, required by ~A~@:>")
  (|CLOS|::|CALL-NEXT-METHOD| |ASDF/FIND-COMPONENT|::|C| |COMMON-LISP|::|NIL|)
  (|ASDF/FIND-COMPONENT|::|MISSING-REQUIRED-BY| |ASDF/FIND-COMPONENT|::|C|)))
(|COMMON-LISP|::|DEFINE-CONDITION|
 |ASDF/FIND-COMPONENT|::|MISSING-DEPENDENCY-OF-VERSION|
 (|ASDF/FIND-COMPONENT|::|MISSING-DEPENDENCY|
  |ASDF/FIND-COMPONENT|::|MISSING-COMPONENT-OF-VERSION|)
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |CLOS|::|PRINT-OBJECT|
 ((|ASDF/FIND-COMPONENT|::|C| |ASDF/FIND-COMPONENT|::|MISSING-COMPONENT|)
  |ASDF/FIND-COMPONENT|::|S|)
 (|COMMON-LISP|::|FORMAT| |ASDF/FIND-COMPONENT|::|S|
  (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<Component ~S not found~@[ in ~A~]~@:>")
  (|ASDF/FIND-COMPONENT|::|MISSING-REQUIRES| |ASDF/FIND-COMPONENT|::|C|)
  (|COMMON-LISP|::|WHEN|
   (|ASDF/FIND-COMPONENT|::|MISSING-PARENT| |ASDF/FIND-COMPONENT|::|C|)
   (|ASDF/SYSTEM|::|COERCE-NAME|
    (|ASDF/FIND-COMPONENT|::|MISSING-PARENT| |ASDF/FIND-COMPONENT|::|C|)))))
(|CLOS|::|DEFMETHOD| |CLOS|::|PRINT-OBJECT|
 ((|ASDF/FIND-COMPONENT|::|C|
   |ASDF/FIND-COMPONENT|::|MISSING-COMPONENT-OF-VERSION|)
  |ASDF/FIND-COMPONENT|::|S|)
 (|COMMON-LISP|::|FORMAT| |ASDF/FIND-COMPONENT|::|S|
  (|UIOP/COMMON-LISP|::|COMPATFMT|
   "~@<Component ~S does not match version ~A~@[ in ~A~]~@:>")
  (|ASDF/FIND-COMPONENT|::|MISSING-REQUIRES| |ASDF/FIND-COMPONENT|::|C|)
  (|ASDF/FIND-COMPONENT|::|MISSING-VERSION| |ASDF/FIND-COMPONENT|::|C|)
  (|COMMON-LISP|::|WHEN|
   (|ASDF/FIND-COMPONENT|::|MISSING-PARENT| |ASDF/FIND-COMPONENT|::|C|)
   (|ASDF/SYSTEM|::|COERCE-NAME|
    (|ASDF/FIND-COMPONENT|::|MISSING-PARENT| |ASDF/FIND-COMPONENT|::|C|)))))
(|COMMON-LISP|::|LET*| ((#1=#:|G28796| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/FIND-COMPONENT|::|MISSING-COMPONENT| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/FIND-COMPONENT|::|REQUIRES| :|READERS|
    '(|ASDF/FIND-COMPONENT|::|MISSING-REQUIRES|) :|INITARGS| '(:|REQUIRES|)
    :|INITFORM| '#2="(unnamed)" :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|PARENT| :|READERS|
    '(|ASDF/FIND-COMPONENT|::|MISSING-PARENT|) :|INITARGS| '(:|PARENT|)
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-COMPONENT|::|MISSING-REQUIRES|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-COMPONENT|::|MISSING-PARENT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G28805| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/FIND-COMPONENT|::|MISSING-COMPONENT-OF-VERSION| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/FIND-COMPONENT|::|MISSING-COMPONENT|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|VERSION| :|READERS|
    '(|ASDF/FIND-COMPONENT|::|MISSING-VERSION|) :|INITARGS| '(:|VERSION|)
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-COMPONENT|::|MISSING-VERSION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G28811| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/FIND-COMPONENT|::|MISSING-DEPENDENCY| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/FIND-COMPONENT|::|MISSING-COMPONENT|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/FIND-COMPONENT|::|REQUIRED-BY|
    :|READERS| '(|ASDF/FIND-COMPONENT|::|MISSING-REQUIRED-BY|) :|INITARGS|
    '(:|REQUIRED-BY|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-COMPONENT|::|MISSING-REQUIRED-BY|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G28846| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/FIND-COMPONENT|::|MISSING-DEPENDENCY-OF-VERSION|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/FIND-COMPONENT|::|MISSING-DEPENDENCY|
   '|ASDF/FIND-COMPONENT|::|MISSING-COMPONENT-OF-VERSION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|UIOP/UTILITY|::|DEFGENERIC*|
 |ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
 (|ASDF/COMPONENT|::|COMPONENT| |ASDF/FIND-COMPONENT|::|COMBINATOR|
  |ASDF/FIND-COMPONENT|::|ARGUMENTS|)
 (:|DOCUMENTATION|
  "Return a component satisfying the dependency specification (COMBINATOR . ARGUMENTS)\n
in the context of COMPONENT"))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|FIND-COMPONENT|
 ((|ASDF/FIND-COMPONENT|::|BASE| |COMMON-LISP|::|STRING|)
  |ASDF/FIND-COMPONENT|::|PATH| |COMMON-LISP|::|&KEY|
  |ASDF/FIND-COMPONENT|::|REGISTERED|)
 (|UIOP/UTILITY|::|IF-LET|
  ((|ASDF/FIND-COMPONENT|::|S|
    (|COMMON-LISP|::|IF| |ASDF/FIND-COMPONENT|::|REGISTERED|
     (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM|
      |ASDF/FIND-COMPONENT|::|BASE|)
     (|ASDF/SYSTEM|::|FIND-SYSTEM| |ASDF/FIND-COMPONENT|::|BASE|
      |COMMON-LISP|::|NIL|))))
  (|ASDF/COMPONENT|::|FIND-COMPONENT| |ASDF/FIND-COMPONENT|::|S|
   |ASDF/FIND-COMPONENT|::|PATH| :|REGISTERED|
   |ASDF/FIND-COMPONENT|::|REGISTERED|)))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|FIND-COMPONENT|
 ((|ASDF/FIND-COMPONENT|::|BASE| |COMMON-LISP|::|SYMBOL|)
  |ASDF/FIND-COMPONENT|::|PATH| |COMMON-LISP|::|&KEY|
  |ASDF/FIND-COMPONENT|::|REGISTERED|)
 (|COMMON-LISP|::|COND|
  (|ASDF/FIND-COMPONENT|::|BASE|
   (|ASDF/COMPONENT|::|FIND-COMPONENT|
    (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/FIND-COMPONENT|::|BASE|)
    |ASDF/FIND-COMPONENT|::|PATH| :|REGISTERED|
    |ASDF/FIND-COMPONENT|::|REGISTERED|))
  (|ASDF/FIND-COMPONENT|::|PATH|
   (|ASDF/COMPONENT|::|FIND-COMPONENT| |ASDF/FIND-COMPONENT|::|PATH|
    |COMMON-LISP|::|NIL| :|REGISTERED| |ASDF/FIND-COMPONENT|::|REGISTERED|))
  (|COMMON-LISP|::|T| |COMMON-LISP|::|NIL|)))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|FIND-COMPONENT|
 ((|ASDF/FIND-COMPONENT|::|BASE| |COMMON-LISP|::|CONS|)
  |ASDF/FIND-COMPONENT|::|PATH| |COMMON-LISP|::|&KEY|
  |ASDF/FIND-COMPONENT|::|REGISTERED|)
 (|ASDF/COMPONENT|::|FIND-COMPONENT|
  (|COMMON-LISP|::|CAR| |ASDF/FIND-COMPONENT|::|BASE|)
  (|COMMON-LISP|::|CONS| (|COMMON-LISP|::|CDR| |ASDF/FIND-COMPONENT|::|BASE|)
   |ASDF/FIND-COMPONENT|::|PATH|)
  :|REGISTERED| |ASDF/FIND-COMPONENT|::|REGISTERED|))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|FIND-COMPONENT|
 ((|ASDF/COMPONENT|::|PARENT| |ASDF/COMPONENT|::|PARENT-COMPONENT|)
  (|ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|STRING|) |COMMON-LISP|::|&KEY|
  |ASDF/FIND-COMPONENT|::|REGISTERED|)
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |ASDF/FIND-COMPONENT|::|REGISTERED|))
 (|ASDF/COMPONENT|::|COMPUTE-CHILDREN-BY-NAME| |ASDF/COMPONENT|::|PARENT|
  :|ONLY-IF-NEEDED-P| |COMMON-LISP|::|T|)
 (|COMMON-LISP|::|VALUES|
  (|COMMON-LISP|::|GETHASH| |ASDF/COMPONENT|::|NAME|
   (|ASDF/COMPONENT|::|COMPONENT-CHILDREN-BY-NAME|
    |ASDF/COMPONENT|::|PARENT|))))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|FIND-COMPONENT|
 (|ASDF/FIND-COMPONENT|::|BASE|
  (|ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|SYMBOL|) |COMMON-LISP|::|&KEY|
  |ASDF/FIND-COMPONENT|::|REGISTERED|)
 (|COMMON-LISP|::|IF| |ASDF/COMPONENT|::|NAME|
  (|ASDF/COMPONENT|::|FIND-COMPONENT| |ASDF/FIND-COMPONENT|::|BASE|
   (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/COMPONENT|::|NAME|) :|REGISTERED|
   |ASDF/FIND-COMPONENT|::|REGISTERED|)
  |ASDF/FIND-COMPONENT|::|BASE|))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|FIND-COMPONENT|
 ((|ASDF/FIND-COMPONENT|::|C| |ASDF/COMPONENT|::|COMPONENT|)
  (|ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|CONS|) |COMMON-LISP|::|&KEY|
  |ASDF/FIND-COMPONENT|::|REGISTERED|)
 (|ASDF/COMPONENT|::|FIND-COMPONENT|
  (|ASDF/COMPONENT|::|FIND-COMPONENT| |ASDF/FIND-COMPONENT|::|C|
   (|COMMON-LISP|::|CAR| |ASDF/COMPONENT|::|NAME|) :|REGISTERED|
   |ASDF/FIND-COMPONENT|::|REGISTERED|)
  (|COMMON-LISP|::|CDR| |ASDF/COMPONENT|::|NAME|) :|REGISTERED|
  |ASDF/FIND-COMPONENT|::|REGISTERED|))
(|CLOS|::|DEFMETHOD| |ASDF/COMPONENT|::|FIND-COMPONENT|
 ((|ASDF/FIND-COMPONENT|::|BASE| |COMMON-LISP|::|T|)
  (|ASDF/FIND-COMPONENT|::|ACTUAL| |ASDF/COMPONENT|::|COMPONENT|)
  |COMMON-LISP|::|&KEY| |ASDF/FIND-COMPONENT|::|REGISTERED|)
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORABLE| |ASDF/FIND-COMPONENT|::|REGISTERED|))
 |ASDF/FIND-COMPONENT|::|ACTUAL|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-NAME|
 (|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|NAME|
  |COMMON-LISP|::|&OPTIONAL| |ASDF/COMPONENT|::|VERSION|)
 (|COMMON-LISP|::|LOOP|
  (|COMMON-LISP|::|RESTART-CASE|
   (|COMMON-LISP|::|RETURN|
    (|COMMON-LISP|::|LET|
     ((|ASDF/FIND-COMPONENT|::|COMP|
       (|ASDF/COMPONENT|::|FIND-COMPONENT|
        (|ASDF/COMPONENT|::|COMPONENT-PARENT| |ASDF/COMPONENT|::|COMPONENT|)
        |ASDF/COMPONENT|::|NAME|)))
     (|COMMON-LISP|::|UNLESS| |ASDF/FIND-COMPONENT|::|COMP|
      (|COMMON-LISP|::|ERROR| '|ASDF/FIND-COMPONENT|::|MISSING-DEPENDENCY|
       :|REQUIRED-BY| |ASDF/COMPONENT|::|COMPONENT| :|REQUIRES|
       |ASDF/COMPONENT|::|NAME|))
     (|COMMON-LISP|::|WHEN| |ASDF/COMPONENT|::|VERSION|
      (|COMMON-LISP|::|UNLESS|
       (|ASDF/COMPONENT|::|VERSION-SATISFIES| |ASDF/FIND-COMPONENT|::|COMP|
        |ASDF/COMPONENT|::|VERSION|)
       (|COMMON-LISP|::|ERROR|
        '|ASDF/FIND-COMPONENT|::|MISSING-DEPENDENCY-OF-VERSION| :|REQUIRED-BY|
        |ASDF/COMPONENT|::|COMPONENT| :|VERSION| |ASDF/COMPONENT|::|VERSION|
        :|REQUIRES| |ASDF/COMPONENT|::|NAME|)))
     |ASDF/FIND-COMPONENT|::|COMP|))
   (|ASDF/SESSION|::|RETRY| |COMMON-LISP|::|NIL| :|REPORT|
    (|COMMON-LISP|::|LAMBDA| (|ASDF/FIND-COMPONENT|::|S|)
     (|COMMON-LISP|::|FORMAT| |ASDF/FIND-COMPONENT|::|S|
      (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<Retry loading ~3i~_~A.~@:>")
      |ASDF/COMPONENT|::|NAME|))
    :|TEST|
    (|COMMON-LISP|::|LAMBDA| (|ASDF/FIND-COMPONENT|::|C|)
     (|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |ASDF/FIND-COMPONENT|::|C|)
      (|COMMON-LISP|::|AND|
       (|COMMON-LISP|::|TYPEP| |ASDF/FIND-COMPONENT|::|C|
        '|ASDF/FIND-COMPONENT|::|MISSING-DEPENDENCY|)
       (|COMMON-LISP|::|EQ|
        (|ASDF/FIND-COMPONENT|::|MISSING-REQUIRED-BY|
         |ASDF/FIND-COMPONENT|::|C|)
        |ASDF/COMPONENT|::|COMPONENT|)
       (|COMMON-LISP|::|EQUAL|
        (|ASDF/FIND-COMPONENT|::|MISSING-REQUIRES| |ASDF/FIND-COMPONENT|::|C|)
        |ASDF/COMPONENT|::|NAME|))))
    (|COMMON-LISP|::|UNLESS|
     (|ASDF/COMPONENT|::|COMPONENT-PARENT| |ASDF/COMPONENT|::|COMPONENT|)
     (|COMMON-LISP|::|LET|
      ((|ASDF/COMPONENT|::|NAME|
        (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/COMPONENT|::|NAME|)))
      (|ASDF/SESSION|::|UNSET-ASDF-CACHE-ENTRY|
       `(|ASDF/SYSTEM|::|FIND-SYSTEM| ,|ASDF/COMPONENT|::|NAME|))))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-SPEC|
 (|ASDF/COMPONENT|::|COMPONENT| |ASDF/FIND-COMPONENT|::|DEP-SPEC|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/COMPONENT|::|COMPONENT|
    (|ASDF/COMPONENT|::|FIND-COMPONENT| |COMMON-LISP|::|NIL|
     |ASDF/COMPONENT|::|COMPONENT|)))
  (|COMMON-LISP|::|IF|
   (|COMMON-LISP|::|ATOM| |ASDF/FIND-COMPONENT|::|DEP-SPEC|)
   (|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-NAME|
    |ASDF/COMPONENT|::|COMPONENT| |ASDF/FIND-COMPONENT|::|DEP-SPEC|)
   (|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
    |ASDF/COMPONENT|::|COMPONENT|
    (|COMMON-LISP|::|CAR| |ASDF/FIND-COMPONENT|::|DEP-SPEC|)
    (|COMMON-LISP|::|CDR| |ASDF/FIND-COMPONENT|::|DEP-SPEC|)))))
(|CLOS|::|DEFMETHOD| |ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
 (|ASDF/COMPONENT|::|COMPONENT| |ASDF/FIND-COMPONENT|::|COMBINATOR|
  |ASDF/FIND-COMPONENT|::|ARGUMENTS|)
 (|UIOP/UTILITY|::|PARAMETER-ERROR|
  (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<In ~S, bad dependency ~S for ~S~@:>")
  '|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
  (|COMMON-LISP|::|CONS| |ASDF/FIND-COMPONENT|::|COMBINATOR|
   |ASDF/FIND-COMPONENT|::|ARGUMENTS|)
  |ASDF/COMPONENT|::|COMPONENT|))
(|CLOS|::|DEFMETHOD| |ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
 (|ASDF/COMPONENT|::|COMPONENT|
  (|ASDF/FIND-COMPONENT|::|COMBINATOR| (|COMMON-LISP|::|EQL| :|FEATURE|))
  |ASDF/FIND-COMPONENT|::|ARGUMENTS|)
 (|COMMON-LISP|::|WHEN|
  (|UIOP/OS|::|FEATUREP|
   (|COMMON-LISP|::|FIRST| |ASDF/FIND-COMPONENT|::|ARGUMENTS|))
  (|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-SPEC|
   |ASDF/COMPONENT|::|COMPONENT|
   (|COMMON-LISP|::|SECOND| |ASDF/FIND-COMPONENT|::|ARGUMENTS|))))
(|CLOS|::|DEFMETHOD| |ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
 (|ASDF/COMPONENT|::|COMPONENT|
  (|ASDF/FIND-COMPONENT|::|COMBINATOR| (|COMMON-LISP|::|EQL| :|VERSION|))
  |ASDF/FIND-COMPONENT|::|ARGUMENTS|)
 (|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-NAME|
  |ASDF/COMPONENT|::|COMPONENT|
  (|COMMON-LISP|::|FIRST| |ASDF/FIND-COMPONENT|::|ARGUMENTS|)
  (|COMMON-LISP|::|SECOND| |ASDF/FIND-COMPONENT|::|ARGUMENTS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
 '#(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|FIND-COMPONENT|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|REGISTERED|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|FIND-COMPONENT|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|REGISTERED|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|FIND-COMPONENT|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|REGISTERED|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|FIND-COMPONENT|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|REGISTERED|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|FIND-COMPONENT|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|REGISTERED|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|FIND-COMPONENT|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|REGISTERED|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|FIND-COMPONENT|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|REGISTERED|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-NAME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-NAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|NAME|
    |COMMON-LISP|::|&OPTIONAL| |ASDF/COMPONENT|::|VERSION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-SPEC|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-SPEC|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/COMPONENT|::|COMPONENT| |ASDF/FIND-COMPONENT|::|DEP-SPEC|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/FORCING|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT| :|ASDF/OPERATION| :|ASDF/SYSTEM| :|ASDF/SYSTEM-REGISTRY|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|FORCING| #:|MAKE-FORCING| #:|FORCED| #:|FORCED-NOT| #:|PERFORMABLE-P|
    #:|NORMALIZE-FORCED-SYSTEMS| #:|NORMALIZE-FORCED-NOT-SYSTEMS|
    #:|ACTION-FORCED-P| #:|ACTION-FORCED-NOT-P|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/FORCING| :|ASDF/PLAN| :|ASDF|) :|MIX| '|COMMON-LISP|::|NIL|
  :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/FORCING"))
(|CLOS|::|DEFCLASS| |ASDF/SESSION|::|FORCING| |COMMON-LISP|::|NIL|
 ((|ASDF/FORCING|::|PERFORMABLE-P| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|PERFORMABLE-P| :|READER| |ASDF/FORCING|::|PERFORMABLE-P|)
  (|ASDF/FORCING|::|PARAMETERS| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|PARAMETERS| :|READER| |ASDF/FORCING|::|PARAMETERS|)
  (|ASDF/FORCING|::|FORCED| :|INITARG| :|FORCED| :|READER|
   |ASDF/FORCING|::|FORCED|)
  (|ASDF/FORCING|::|FORCED-NOT| :|INITARG| :|FORCED-NOT| :|READER|
   |ASDF/FORCING|::|FORCED-NOT|)))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/FORCING|::|ACTION-FORCED-P|
 (|ASDF/SESSION|::|FORCING| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION| "Is this action forced to happen in this plan?"))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/FORCING|::|ACTION-FORCED-NOT-P|
 (|ASDF/SESSION|::|FORCING| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Is this action forced to not happen in this plan?\n
Takes precedence over action-forced-p."))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/FORCING|::|NORMALIZE-FORCED-SYSTEMS|
 (|ASDF/FORCING|::|FORCE| |ASDF/SYSTEM|::|SYSTEM|)
 "Given a SYSTEM on which operate is called and the specified FORCE argument,\n
extract a hash-set of systems that are forced, or a predicate on system names,\n
or NIL if none are forced, or :ALL if all are."
 (|COMMON-LISP|::|ETYPECASE| |ASDF/FORCING|::|FORCE|
  ((|COMMON-LISP|::|OR| (|COMMON-LISP|::|MEMBER| |COMMON-LISP|::|NIL| :|ALL|)
    |COMMON-LISP|::|HASH-TABLE| |COMMON-LISP|::|FUNCTION|)
   |ASDF/FORCING|::|FORCE|)
  (|COMMON-LISP|::|CONS|
   (|UIOP/UTILITY|::|LIST-TO-HASH-SET|
    (|COMMON-LISP|::|MAPCAR| #'|ASDF/SYSTEM|::|COERCE-NAME|
     |ASDF/FORCING|::|FORCE|)))
  ((|COMMON-LISP|::|EQL| |COMMON-LISP|::|T|)
   (|COMMON-LISP|::|WHEN| |ASDF/SYSTEM|::|SYSTEM|
    (|UIOP/UTILITY|::|LIST-TO-HASH-SET|
     (|COMMON-LISP|::|LIST|
      (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/SYSTEM|::|SYSTEM|)))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/FORCING|::|NORMALIZE-FORCED-NOT-SYSTEMS|
 (|ASDF/FORCING|::|FORCE-NOT| |ASDF/SYSTEM|::|SYSTEM|)
 "Given a SYSTEM on which operate is called, the specified FORCE-NOT argument,\n
and the set of IMMUTABLE systems, extract a hash-set of systems that are effectively forced-not,\n
or predicate on system names, or NIL if none are forced, or :ALL if all are."
 (|COMMON-LISP|::|LET|
  ((|ASDF/FORCING|::|REQUESTED|
    (|COMMON-LISP|::|ETYPECASE| |ASDF/FORCING|::|FORCE-NOT|
     ((|COMMON-LISP|::|OR|
       (|COMMON-LISP|::|MEMBER| |COMMON-LISP|::|NIL| :|ALL|)
       |COMMON-LISP|::|HASH-TABLE| |COMMON-LISP|::|FUNCTION|)
      |ASDF/FORCING|::|FORCE-NOT|)
     (|COMMON-LISP|::|CONS|
      (|UIOP/UTILITY|::|LIST-TO-HASH-SET|
       (|COMMON-LISP|::|MAPCAR| #'|ASDF/SYSTEM|::|COERCE-NAME|
        |ASDF/FORCING|::|FORCE-NOT|)))
     ((|COMMON-LISP|::|EQL| |COMMON-LISP|::|T|)
      (|COMMON-LISP|::|IF| |ASDF/SYSTEM|::|SYSTEM|
       (|COMMON-LISP|::|LET|
        ((|ASDF/COMPONENT|::|NAME|
          (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/SYSTEM|::|SYSTEM|)))
        #'(|COMMON-LISP|::|LAMBDA| (|ASDF/FORCING|::|X|)
           (|COMMON-LISP|::|NOT|
            (|COMMON-LISP|::|EQUAL| |ASDF/FORCING|::|X|
             |ASDF/COMPONENT|::|NAME|))))
       :|ALL|)))))
  (|COMMON-LISP|::|IF|
   (|COMMON-LISP|::|AND| |ASDF/SYSTEM-REGISTRY|::|*IMMUTABLE-SYSTEMS*|
    |ASDF/FORCING|::|REQUESTED|)
   #'(|COMMON-LISP|::|LAMBDA| (|ASDF/FORCING|::|X|)
      (|COMMON-LISP|::|OR|
       (|UIOP/UTILITY|::|CALL-FUNCTION| |ASDF/FORCING|::|REQUESTED|
        |ASDF/FORCING|::|X|)
       (|UIOP/UTILITY|::|CALL-FUNCTION|
        |ASDF/SYSTEM-REGISTRY|::|*IMMUTABLE-SYSTEMS*| |ASDF/FORCING|::|X|)))
   (|COMMON-LISP|::|OR| |ASDF/SYSTEM-REGISTRY|::|*IMMUTABLE-SYSTEMS*|
    |ASDF/FORCING|::|REQUESTED|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/FORCING|::|ACTION-OVERRIDE-P|
 (|ASDF/SESSION|::|FORCING| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT| |ASDF/FORCING|::|OVERRIDE-ACCESSOR|)
 "Given a plan, an action, and a function that given the plan accesses a set of overrides,\n
i.e. force or force-not, see if the override applies to the current action."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORE| |ASDF/OPERATION|::|OPERATION|))
 (|UIOP/UTILITY|::|CALL-FUNCTION|
  (|COMMON-LISP|::|FUNCALL| |ASDF/FORCING|::|OVERRIDE-ACCESSOR|
   |ASDF/SESSION|::|FORCING|)
  (|ASDF/SYSTEM|::|COERCE-NAME|
   (|ASDF/COMPONENT|::|COMPONENT-SYSTEM|
    (|ASDF/COMPONENT|::|FIND-COMPONENT| |COMMON-LISP|::|NIL|
     |ASDF/COMPONENT|::|COMPONENT|)))))
(|CLOS|::|DEFMETHOD| |ASDF/FORCING|::|ACTION-FORCED-P|
 (|ASDF/SESSION|::|FORCING| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|)
 (|COMMON-LISP|::|AND|
  (|ASDF/FORCING|::|ACTION-OVERRIDE-P| |ASDF/SESSION|::|FORCING|
   |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
   '|ASDF/FORCING|::|FORCED|)
  (|COMMON-LISP|::|NOT|
   (|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P|
    (|ASDF/COMPONENT|::|COMPONENT-SYSTEM| |ASDF/COMPONENT|::|COMPONENT|)))))
(|CLOS|::|DEFMETHOD| |ASDF/FORCING|::|ACTION-FORCED-NOT-P|
 (|ASDF/SESSION|::|FORCING| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|)
 (|ASDF/FORCING|::|ACTION-OVERRIDE-P| |ASDF/SESSION|::|FORCING|
  |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
  '|ASDF/FORCING|::|FORCED-NOT|))
(|CLOS|::|DEFMETHOD| |ASDF/FORCING|::|ACTION-FORCED-P|
 ((|ASDF/SESSION|::|FORCING| |COMMON-LISP|::|NULL|)
  (|ASDF/OPERATION|::|OPERATION| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|COMPONENT|))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/FORCING|::|ACTION-FORCED-NOT-P|
 ((|ASDF/SESSION|::|FORCING| |COMMON-LISP|::|NULL|)
  (|ASDF/OPERATION|::|OPERATION| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|COMPONENT|))
 |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/FORCING|::|OR-FUNCTION|
 (|ASDF/FORCING|::|FUN1| |ASDF/FORCING|::|FUN2|)
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |ASDF/FORCING|::|FUN2|)
    (|COMMON-LISP|::|EQ| |ASDF/FORCING|::|FUN1| :|ALL|))
   |ASDF/FORCING|::|FUN1|)
  ((|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |ASDF/FORCING|::|FUN1|)
    (|COMMON-LISP|::|EQ| |ASDF/FORCING|::|FUN2| :|ALL|))
   |ASDF/FORCING|::|FUN2|)
  (|COMMON-LISP|::|T|
   #'(|COMMON-LISP|::|LAMBDA| (|ASDF/FORCING|::|X|)
      (|COMMON-LISP|::|OR|
       (|UIOP/UTILITY|::|CALL-FUNCTION| |ASDF/FORCING|::|FUN1|
        |ASDF/FORCING|::|X|)
       (|UIOP/UTILITY|::|CALL-FUNCTION| |ASDF/FORCING|::|FUN2|
        |ASDF/FORCING|::|X|))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/FORCING|::|MAKE-FORCING|
 (|COMMON-LISP|::|&KEY| |ASDF/FORCING|::|PERFORMABLE-P| |ASDF/SYSTEM|::|SYSTEM|
  (|ASDF/FORCING|::|FORCE| |COMMON-LISP|::|NIL| |ASDF/FORCING|::|FORCE-P|)
  (|ASDF/FORCING|::|FORCE-NOT| |COMMON-LISP|::|NIL|
   |ASDF/FORCING|::|FORCE-NOT-P|)
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|COMMON-LISP|::|LET*|
  ((|ASDF/FORCING|::|SESSION-FORCING|
    (|COMMON-LISP|::|WHEN| |ASDF/SESSION|::|*ASDF-SESSION*|
     (|ASDF/SESSION|::|FORCING| |ASDF/SESSION|::|*ASDF-SESSION*|)))
   (|ASDF/SYSTEM|::|SYSTEM|
    (|COMMON-LISP|::|AND| |ASDF/SYSTEM|::|SYSTEM|
     (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/SYSTEM|::|SYSTEM|)))
   (|ASDF/FORCING|::|FORCED|
    (|ASDF/FORCING|::|NORMALIZE-FORCED-SYSTEMS| |ASDF/FORCING|::|FORCE|
     |ASDF/SYSTEM|::|SYSTEM|))
   (|ASDF/FORCING|::|FORCED-NOT|
    (|ASDF/FORCING|::|NORMALIZE-FORCED-NOT-SYSTEMS| |ASDF/FORCING|::|FORCE-NOT|
     |ASDF/SYSTEM|::|SYSTEM|))
   (|ASDF/FORCING|::|PARAMETERS|
    `(,@(|COMMON-LISP|::|WHEN| |ASDF/FORCING|::|FORCE|
         `(:|FORCE| ,|ASDF/FORCING|::|FORCE|))
      ,@(|COMMON-LISP|::|WHEN| |ASDF/FORCING|::|FORCE-NOT|
         `(:|FORCE-NOT| ,|ASDF/FORCING|::|FORCE-NOT|))
      ,@(|COMMON-LISP|::|WHEN|
         (|COMMON-LISP|::|OR|
          (|COMMON-LISP|::|EQ| |ASDF/FORCING|::|FORCE| |COMMON-LISP|::|T|)
          (|COMMON-LISP|::|EQ| |ASDF/FORCING|::|FORCE-NOT| |COMMON-LISP|::|T|))
         `(:|SYSTEM| ,|ASDF/SYSTEM|::|SYSTEM|))
      ,@(|COMMON-LISP|::|WHEN| |ASDF/FORCING|::|PERFORMABLE-P|
         `(:|PERFORMABLE-P| |COMMON-LISP|::|T|))))
   |ASDF/SESSION|::|FORCING|)
  (|COMMON-LISP|::|COND|
   ((|COMMON-LISP|::|NOT| |ASDF/FORCING|::|SESSION-FORCING|)
    (|COMMON-LISP|::|SETF| |ASDF/SESSION|::|FORCING|
     (|CLOS|::|MAKE-INSTANCE| '|ASDF/SESSION|::|FORCING| :|PERFORMABLE-P|
      |ASDF/FORCING|::|PERFORMABLE-P| :|PARAMETERS|
      |ASDF/FORCING|::|PARAMETERS| :|FORCED| |ASDF/FORCING|::|FORCED|
      :|FORCED-NOT| |ASDF/FORCING|::|FORCED-NOT|))
    (|COMMON-LISP|::|WHEN|
     (|COMMON-LISP|::|AND| |ASDF/FORCING|::|PERFORMABLE-P|
      |ASDF/SESSION|::|*ASDF-SESSION*|)
     (|COMMON-LISP|::|SETF|
      (|ASDF/SESSION|::|FORCING| |ASDF/SESSION|::|*ASDF-SESSION*|)
      |ASDF/SESSION|::|FORCING|)))
   (|ASDF/FORCING|::|PERFORMABLE-P|
    (|COMMON-LISP|::|WHEN|
     (|COMMON-LISP|::|AND|
      (|COMMON-LISP|::|NOT|
       (|COMMON-LISP|::|EQUAL| |ASDF/FORCING|::|PARAMETERS|
        (|ASDF/FORCING|::|PARAMETERS| |ASDF/FORCING|::|SESSION-FORCING|)))
      (|COMMON-LISP|::|OR| |ASDF/FORCING|::|FORCE-P|
       |ASDF/FORCING|::|FORCE-NOT-P|))
     (|UIOP/UTILITY|::|PARAMETER-ERROR|
      "~*~S and ~S arguments not allowed in a nested call to ~3:*~S ~\n
unless identically to toplevel"
      (|UIOP/PACKAGE|::|FIND-SYMBOL*| :|OPERATE| :|ASDF|) :|FORCE|
      :|FORCE-NOT|))
    (|COMMON-LISP|::|SETF| |ASDF/SESSION|::|FORCING|
     |ASDF/FORCING|::|SESSION-FORCING|))
   (|COMMON-LISP|::|T|
    (|COMMON-LISP|::|SETF| |ASDF/SESSION|::|FORCING|
     (|CLOS|::|MAKE-INSTANCE| '|ASDF/SESSION|::|FORCING| :|PARAMETERS|
      `(,@|ASDF/FORCING|::|PARAMETERS| :|ON-TOP-OF|
        ,(|ASDF/FORCING|::|PARAMETERS| |ASDF/FORCING|::|SESSION-FORCING|))
      :|FORCED|
      (|ASDF/FORCING|::|OR-FUNCTION|
       (|ASDF/FORCING|::|FORCED| |ASDF/FORCING|::|SESSION-FORCING|)
       |ASDF/FORCING|::|FORCED|)
      :|FORCED-NOT|
      (|ASDF/FORCING|::|OR-FUNCTION|
       (|ASDF/FORCING|::|FORCED-NOT| |ASDF/FORCING|::|SESSION-FORCING|)
       |ASDF/FORCING|::|FORCED-NOT|)))))
  |ASDF/SESSION|::|FORCING|))
(|CLOS|::|DEFMETHOD| |CLOS|::|PRINT-OBJECT|
 ((|ASDF/SESSION|::|FORCING| |ASDF/SESSION|::|FORCING|)
  |COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|PRINT-UNREADABLE-OBJECT|
  (|ASDF/SESSION|::|FORCING| |COMMON-LISP|::|STREAM| :|TYPE|
   |COMMON-LISP|::|T|)
  (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|STREAM| "~{~S~^ ~}"
   (|ASDF/FORCING|::|PARAMETERS| |ASDF/SESSION|::|FORCING|))))
(|CLOS|::|DEFMETHOD| |ASDF/SESSION|::|FORCING|
 ((|ASDF/FORCING|::|X| |COMMON-LISP|::|NULL|))
 (|UIOP/UTILITY|::|IF-LET|
  (|ASDF/SESSION|::|SESSION| (|ASDF/SESSION|::|TOPLEVEL-ASDF-SESSION|))
  (|ASDF/SESSION|::|FORCING| |ASDF/SESSION|::|SESSION|)
  (|ASDF/FORCING|::|MAKE-FORCING| :|PERFORMABLE-P| |COMMON-LISP|::|T|)))
(|CLOS|::|DEFMETHOD| |ASDF/SESSION|::|FORCING|
 ((|ASDF/FORCING|::|X| |COMMON-LISP|::|CONS|))
 (|ASDF/SESSION|::|FORCING| (|ASDF/SESSION|::|TOPLEVEL-ASDF-SESSION|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G29442| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/SESSION|::|FORCING|
  :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/FORCING|::|PERFORMABLE-P| :|READERS|
    '(|ASDF/FORCING|::|PERFORMABLE-P|) :|INITARGS| '(:|PERFORMABLE-P|)
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/FORCING|::|PARAMETERS| :|READERS|
    '(|ASDF/FORCING|::|PARAMETERS|) :|INITARGS| '(:|PARAMETERS|) :|INITFORM|
    '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/FORCING|::|FORCED| :|READERS|
    '(|ASDF/FORCING|::|FORCED|) :|INITARGS| '(:|FORCED|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/FORCING|::|FORCED-NOT| :|READERS|
    '(|ASDF/FORCING|::|FORCED-NOT|) :|INITARGS| '(:|FORCED-NOT|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|PERFORMABLE-P|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|PARAMETERS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|FORCED|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|FORCED-NOT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/FORCING|::|ACTION-FORCED-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|ACTION-FORCED-P|
 '#(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/FORCING|::|ACTION-FORCED-NOT-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|ACTION-FORCED-NOT-P|
 '#(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/FORCING|::|NORMALIZE-FORCED-SYSTEMS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|NORMALIZE-FORCED-SYSTEMS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/FORCING|::|FORCE| |ASDF/SYSTEM|::|SYSTEM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/FORCING|::|NORMALIZE-FORCED-NOT-SYSTEMS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|NORMALIZE-FORCED-NOT-SYSTEMS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/FORCING|::|FORCE-NOT| |ASDF/SYSTEM|::|SYSTEM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/FORCING|::|ACTION-OVERRIDE-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|ACTION-OVERRIDE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SESSION|::|FORCING| |ASDF/OPERATION|::|OPERATION|
    |ASDF/COMPONENT|::|COMPONENT| |ASDF/FORCING|::|OVERRIDE-ACCESSOR|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|ACTION-FORCED-P|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|ACTION-FORCED-NOT-P|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|ACTION-FORCED-P|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|ACTION-FORCED-NOT-P|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/FORCING|::|OR-FUNCTION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|OR-FUNCTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/FORCING|::|FUN1| |ASDF/FORCING|::|FUN2|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/FORCING|::|MAKE-FORCING|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FORCING|::|MAKE-FORCING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| |ASDF/FORCING|::|PERFORMABLE-P|
    |ASDF/SYSTEM|::|SYSTEM|
    (|ASDF/FORCING|::|FORCE| |COMMON-LISP|::|NIL| |ASDF/FORCING|::|FORCE-P|)
    (|ASDF/FORCING|::|FORCE-NOT| |COMMON-LISP|::|NIL|
     |ASDF/FORCING|::|FORCE-NOT-P|)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|FORCING|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|FORCING|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/PLAN|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT| :|ASDF/OPERATION| :|ASDF/ACTION| :|ASDF/LISP-ACTION|
    :|ASDF/SYSTEM| :|ASDF/SYSTEM-REGISTRY| :|ASDF/FIND-COMPONENT|
    :|ASDF/FORCING|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|PLAN| #:|PLAN-TRAVERSAL| #:|SEQUENTIAL-PLAN| #:|*PLAN-CLASS*|
    #:|ACTION-STATUS| #:|STATUS-STAMP| #:|STATUS-INDEX| #:|STATUS-DONE-P|
    #:|STATUS-KEEP-P| #:|STATUS-NEED-P| #:|ACTION-ALREADY-DONE-P|
    #:|+STATUS-GOOD+| #:|+STATUS-TODO+| #:|+STATUS-VOID+|
    #:|SYSTEM-OUT-OF-DATE| #:|ACTION-UP-TO-DATE-P| #:|CIRCULAR-DEPENDENCY|
    #:|CIRCULAR-DEPENDENCY-ACTIONS| #:|NEEDED-IN-IMAGE-P|
    #:|MAP-DIRECT-DEPENDENCIES| #:|REDUCE-DIRECT-DEPENDENCIES|
    #:|DIRECT-DEPENDENCIES| #:|COMPUTE-ACTION-STAMP| #:|TRAVERSE-ACTION|
    #:|RECORD-DEPENDENCY| #:|MAKE-PLAN| #:|PLAN-ACTIONS| #:|PLAN-ACTIONS-R|
    #:|PERFORM-PLAN| #:|MARK-AS-DONE| #:|REQUIRED-COMPONENTS|
    #:|FILTERED-SEQUENTIAL-PLAN| #:|PLAN-COMPONENT-TYPE|
    #:|PLAN-KEEP-OPERATION| #:|PLAN-KEEP-COMPONENT|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/PLAN| :|ASDF/ACTION| :|ASDF|) :|MIX| '|COMMON-LISP|::|NIL|
  :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/PLAN"))
(|CLOS|::|DEFCLASS| |ASDF/PLAN|::|PLAN| |COMMON-LISP|::|NIL|
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Base class for a plan based on which ASDF can build a system"))
(|CLOS|::|DEFCLASS| |ASDF/PLAN|::|PLAN-TRAVERSAL| (|ASDF/PLAN|::|PLAN|)
 ((|ASDF/SESSION|::|FORCING| :|INITFORM|
   (|ASDF/SESSION|::|FORCING| (|ASDF/SESSION|::|TOPLEVEL-ASDF-SESSION|))
   :|INITARG| :|FORCING| :|READER| |ASDF/SESSION|::|FORCING|))
 (:|DOCUMENTATION| "Base class for plans that simply traverse dependencies"))
(|CLOS|::|DEFCLASS| |ASDF/PLAN|::|SEQUENTIAL-PLAN|
 (|ASDF/PLAN|::|PLAN-TRAVERSAL|)
 ((|ASDF/PLAN|::|ACTIONS-R| :|INITFORM| |COMMON-LISP|::|NIL| :|ACCESSOR|
   |ASDF/PLAN|::|PLAN-ACTIONS-R|))
 (:|DOCUMENTATION|
  "Simplest, default plan class, accumulating a sequence of actions"))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/PLAN|::|PLAN-ACTIONS|
 (|ASDF/PLAN|::|PLAN|)
 (:|DOCUMENTATION|
  "Extract from a plan a list of actions to perform in sequence"))
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|PLAN-ACTIONS|
 ((|ASDF/PLAN|::|PLAN| |COMMON-LISP|::|LIST|)) |ASDF/PLAN|::|PLAN|)
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|PLAN-ACTIONS|
 ((|ASDF/PLAN|::|PLAN| |ASDF/PLAN|::|SEQUENTIAL-PLAN|))
 (|COMMON-LISP|::|REVERSE|
  (|ASDF/PLAN|::|PLAN-ACTIONS-R| |ASDF/PLAN|::|PLAN|)))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/PLAN|::|RECORD-DEPENDENCY|
 (|ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION| "Record an action as a dependency in the current plan"))
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|RECORD-DEPENDENCY|
 ((|ASDF/PLAN|::|PLAN| |ASDF/PLAN|::|SEQUENTIAL-PLAN|)
  (|ASDF/PLAN|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/PLAN|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|VALUES|))
(|COMMON-LISP|::|LET*| ((#1=#:|G29915| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/PLAN|::|PLAN|
  :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Base class for a plan based on which ASDF can build a system"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G29918| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/PLAN|::|PLAN-TRAVERSAL| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/PLAN|::|PLAN|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SESSION|::|FORCING| :|READERS|
    '(|ASDF/SESSION|::|FORCING|) :|INITARGS| '(:|FORCING|) :|INITFORM|
    '#2=(|ASDF/SESSION|::|FORCING| (|ASDF/SESSION|::|TOPLEVEL-ASDF-SESSION|))
    :|INITFUNCTION|
    (|COMMON-LISP|::|FUNCTION| |ASDF/PLAN|::|DEFAULT-FORCING|
     (|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| #2#))))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Base class for plans that simply traverse dependencies"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/SESSION|::|FORCING|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G29925| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/PLAN|::|SEQUENTIAL-PLAN| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/PLAN|::|PLAN-TRAVERSAL|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/PLAN|::|ACTIONS-R| :|READERS|
    '(|ASDF/PLAN|::|PLAN-ACTIONS-R|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/PLAN|::|PLAN-ACTIONS-R|)) :|INITFORM|
    '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Simplest, default plan class, accumulating a sequence of actions"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|PLAN-ACTIONS-R|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/PLAN|::|PLAN-ACTIONS-R|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|PLAN-ACTIONS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|PLAN-ACTIONS|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|PLAN-ACTIONS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|PLAN-ACTIONS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|RECORD-DEPENDENCY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|RECORD-DEPENDENCY|
 '#(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|RECORD-DEPENDENCY|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|WHEN|
 (|COMMON-LISP|::|AND| (|ASDF/UPGRADE|::|UPGRADING-P| "3.3.0"))
 (|COMMON-LISP|::|HANDLER-BIND|
  ((|COMMON-LISP|::|STYLE-WARNING| #'|COMMON-LISP|::|MUFFLE-WARNING|))
  (|COMMON-LISP|::|EVAL|
   '(|COMMON-LISP|::|PROGN|
     (|CLOS|::|DEFMETHOD| |CLOS|::|INITIALIZE-INSTANCE| :|AFTER|
      ((|ASDF/PLAN|::|PLAN| |ASDF/PLAN|::|PLAN-TRAVERSAL|)
       |COMMON-LISP|::|&KEY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|))))))
(|CLOS|::|DEFCLASS| |ASDF/PLAN|::|ACTION-STATUS| |COMMON-LISP|::|NIL|
 ((|ASDF/PLAN|::|BITS| :|TYPE| |COMMON-LISP|::|FIXNUM| :|INITARG| :|BITS|
   :|READER| |ASDF/PLAN|::|STATUS-BITS| :|DOCUMENTATION|
   "bitmap describing the status of the action.")
  (|ASDF/PLAN|::|STAMP| :|TYPE|
   (|COMMON-LISP|::|OR| |COMMON-LISP|::|INTEGER| |COMMON-LISP|::|BOOLEAN|)
   :|INITARG| :|STAMP| :|READER| |ASDF/PLAN|::|STATUS-STAMP| :|DOCUMENTATION|
   "STAMP associated with the ACTION if it has been completed already in some\n
previous session or image, T if it was done and builtin the image, or NIL if it needs to be done.")
  (|ASDF/PLAN|::|LEVEL| :|TYPE| |COMMON-LISP|::|FIXNUM| :|INITARG| :|LEVEL|
   :|INITFORM| 0. :|READER| |ASDF/PLAN|::|STATUS-LEVEL| :|DOCUMENTATION|
   "the highest (operate-level) at which the action was needed")
  (|ASDF/PLAN|::|INDEX| :|TYPE|
   (|COMMON-LISP|::|OR| |COMMON-LISP|::|INTEGER| |COMMON-LISP|::|NULL|)
   :|INITARG| :|INDEX| :|INITFORM| |COMMON-LISP|::|NIL| :|READER|
   |ASDF/PLAN|::|STATUS-INDEX| :|DOCUMENTATION|
   "INDEX associated with the ACTION in the current session,\n
or NIL if no the status is considered outside of a specific plan."))
 (:|DOCUMENTATION| "Status of an action in a plan"))
(|COMMON-LISP|::|DEFPARAMETER| |ASDF/PLAN|::|+KEEP-BIT+| 4.)
(|COMMON-LISP|::|DEFPARAMETER| |ASDF/PLAN|::|+DONE-BIT+| 2.)
(|COMMON-LISP|::|DEFPARAMETER| |ASDF/PLAN|::|+NEED-BIT+| 1.)
(|COMMON-LISP|::|DEFPARAMETER| |ASDF/PLAN|::|+GOOD-BITS+| 7.)
(|COMMON-LISP|::|DEFPARAMETER| |ASDF/PLAN|::|+TODO-BITS+| 1.)
(|COMMON-LISP|::|DEFPARAMETER| |ASDF/PLAN|::|+VOID-BITS+| 0.)
(|COMMON-LISP|::|DEFPARAMETER| |ASDF/PLAN|::|+STATUS-GOOD+|
 (|CLOS|::|MAKE-INSTANCE| '|ASDF/PLAN|::|ACTION-STATUS| :|BITS|
  |ASDF/PLAN|::|+GOOD-BITS+| :|STAMP| |COMMON-LISP|::|T|))
(|COMMON-LISP|::|DEFPARAMETER| |ASDF/PLAN|::|+STATUS-TODO+|
 (|CLOS|::|MAKE-INSTANCE| '|ASDF/PLAN|::|ACTION-STATUS| :|BITS|
  |ASDF/PLAN|::|+TODO-BITS+| :|STAMP| |COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|DEFPARAMETER| |ASDF/PLAN|::|+STATUS-VOID+|
 (|CLOS|::|MAKE-INSTANCE| '|ASDF/PLAN|::|ACTION-STATUS| :|BITS|
  |ASDF/PLAN|::|+VOID-BITS+| :|STAMP| |COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|LET*| ((#1=#:|G30109| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/PLAN|::|ACTION-STATUS|
  :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/PLAN|::|BITS| :|READERS|
    '(|ASDF/PLAN|::|STATUS-BITS|) :|INITARGS| '(:|BITS|) :|TYPE|
    '|COMMON-LISP|::|FIXNUM| :|DOCUMENTATION|
    '"bitmap describing the status of the action.")
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/PLAN|::|STAMP| :|READERS|
    '(|ASDF/PLAN|::|STATUS-STAMP|) :|INITARGS| '(:|STAMP|) :|TYPE|
    '(|COMMON-LISP|::|OR| |COMMON-LISP|::|INTEGER| |COMMON-LISP|::|BOOLEAN|)
    :|DOCUMENTATION|
    '"STAMP associated with the ACTION if it has been completed already in some\n
previous session or image, T if it was done and builtin the image, or NIL if it needs to be done.")
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/PLAN|::|LEVEL| :|READERS|
    '(|ASDF/PLAN|::|STATUS-LEVEL|) :|INITARGS| '(:|LEVEL|) :|INITFORM| '0.
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| 0.) :|TYPE|
    '|COMMON-LISP|::|FIXNUM| :|DOCUMENTATION|
    '"the highest (operate-level) at which the action was needed")
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/PLAN|::|INDEX| :|READERS|
    '(|ASDF/PLAN|::|STATUS-INDEX|) :|INITARGS| '(:|INDEX|) :|INITFORM|
    '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|) :|TYPE|
    '(|COMMON-LISP|::|OR| |COMMON-LISP|::|INTEGER| |COMMON-LISP|::|NULL|)
    :|DOCUMENTATION|
    '"INDEX associated with the ACTION in the current session,\n
or NIL if no the status is considered outside of a specific plan."))
  :|METACLASS| #1# :|DOCUMENTATION| '"Status of an action in a plan"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|STATUS-BITS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|STATUS-STAMP|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|STATUS-LEVEL|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|STATUS-INDEX|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |ASDF/PLAN|::|+KEEP-BIT+|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |ASDF/PLAN|::|+DONE-BIT+|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |ASDF/PLAN|::|+NEED-BIT+|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |ASDF/PLAN|::|+GOOD-BITS+|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |ASDF/PLAN|::|+TODO-BITS+|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |ASDF/PLAN|::|+VOID-BITS+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/PLAN|::|+STATUS-GOOD+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/PLAN|::|+STATUS-TODO+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/PLAN|::|+STATUS-VOID+|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PLAN|::|MAKE-ACTION-STATUS|
 (|COMMON-LISP|::|&KEY| |ASDF/PLAN|::|BITS| |ASDF/PLAN|::|STAMP|
  (|ASDF/PLAN|::|LEVEL| 0.) |ASDF/PLAN|::|INDEX|)
 (|COMMON-LISP|::|CHECK-TYPE| |ASDF/PLAN|::|BITS|
  (|COMMON-LISP|::|INTEGER| 0. 7.))
 (|COMMON-LISP|::|CHECK-TYPE| |ASDF/PLAN|::|STAMP|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|INTEGER| |COMMON-LISP|::|BOOLEAN|))
 (|COMMON-LISP|::|CHECK-TYPE| |ASDF/PLAN|::|LEVEL|
  (|COMMON-LISP|::|INTEGER| 0. 16777215.))
 (|COMMON-LISP|::|CHECK-TYPE| |ASDF/PLAN|::|INDEX|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|INTEGER| |COMMON-LISP|::|NULL|))
 (|COMMON-LISP|::|ASSERT|
  (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|NULL| |ASDF/PLAN|::|STAMP|)
   (|COMMON-LISP|::|ZEROP| (|COMMON-LISP|::|LOGAND| |ASDF/PLAN|::|BITS| 6.)))
  |COMMON-LISP|::|NIL| "Bad action-status :bits ~S :stamp ~S"
  |ASDF/PLAN|::|BITS| |ASDF/PLAN|::|STAMP|)
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|WHEN|
   (|COMMON-LISP|::|AND| (|COMMON-LISP|::|NULL| |ASDF/PLAN|::|INDEX|)
    (|COMMON-LISP|::|ZEROP| |ASDF/PLAN|::|LEVEL|))
   (|COMMON-LISP|::|CASE| |ASDF/PLAN|::|BITS|
    (0. (|COMMON-LISP|::|RETURN| |ASDF/PLAN|::|+STATUS-VOID+|))
    (1. (|COMMON-LISP|::|RETURN| |ASDF/PLAN|::|+STATUS-TODO+|))
    (7.
     (|COMMON-LISP|::|WHEN|
      (|COMMON-LISP|::|EQ| |ASDF/PLAN|::|STAMP| |COMMON-LISP|::|T|)
      (|COMMON-LISP|::|RETURN| |ASDF/PLAN|::|+STATUS-GOOD+|)))))
  (|CLOS|::|MAKE-INSTANCE| '|ASDF/PLAN|::|ACTION-STATUS| :|BITS|
   |ASDF/PLAN|::|BITS| :|STAMP| |ASDF/PLAN|::|STAMP| :|LEVEL|
   |ASDF/PLAN|::|LEVEL| :|INDEX| |ASDF/PLAN|::|INDEX|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PLAN|::|STATUS-KEEP-P| (|ASDF/PLAN|::|STATUS|)
 (|COMMON-LISP|::|PLUSP|
  (|COMMON-LISP|::|LOGAND| (|ASDF/PLAN|::|STATUS-BITS| |ASDF/PLAN|::|STATUS|)
   4.)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PLAN|::|STATUS-DONE-P| (|ASDF/PLAN|::|STATUS|)
 (|COMMON-LISP|::|PLUSP|
  (|COMMON-LISP|::|LOGAND| (|ASDF/PLAN|::|STATUS-BITS| |ASDF/PLAN|::|STATUS|)
   2.)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PLAN|::|STATUS-NEED-P| (|ASDF/PLAN|::|STATUS|)
 (|COMMON-LISP|::|PLUSP|
  (|COMMON-LISP|::|LOGAND| (|ASDF/PLAN|::|STATUS-BITS| |ASDF/PLAN|::|STATUS|)
   1.)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PLAN|::|MERGE-ACTION-STATUS|
 (|ASDF/PLAN|::|STATUS1| |ASDF/PLAN|::|STATUS2|)
 "Return the earliest status later than both status1 and status2"
 (|ASDF/PLAN|::|MAKE-ACTION-STATUS| :|BITS|
  (|COMMON-LISP|::|LOGAND| (|ASDF/PLAN|::|STATUS-BITS| |ASDF/PLAN|::|STATUS1|)
   (|ASDF/PLAN|::|STATUS-BITS| |ASDF/PLAN|::|STATUS2|))
  :|STAMP|
  (|UIOP/UTILITY|::|LATEST-TIMESTAMP|
   (|ASDF/PLAN|::|STATUS-STAMP| |ASDF/PLAN|::|STATUS1|)
   (|ASDF/PLAN|::|STATUS-STAMP| |ASDF/PLAN|::|STATUS2|))
  :|LEVEL|
  (|COMMON-LISP|::|MIN| (|ASDF/PLAN|::|STATUS-LEVEL| |ASDF/PLAN|::|STATUS1|)
   (|ASDF/PLAN|::|STATUS-LEVEL| |ASDF/PLAN|::|STATUS2|))
  :|INDEX|
  (|COMMON-LISP|::|OR| (|ASDF/PLAN|::|STATUS-INDEX| |ASDF/PLAN|::|STATUS1|)
   (|ASDF/PLAN|::|STATUS-INDEX| |ASDF/PLAN|::|STATUS2|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PLAN|::|MARK-STATUS-NEEDED|
 (|ASDF/PLAN|::|STATUS| |COMMON-LISP|::|&OPTIONAL|
  (|ASDF/PLAN|::|LEVEL| (|ASDF/SESSION|::|OPERATE-LEVEL|)))
 "Return the same status but with the need bit set, for the given level"
 (|COMMON-LISP|::|IF|
  (|COMMON-LISP|::|AND| (|ASDF/PLAN|::|STATUS-NEED-P| |ASDF/PLAN|::|STATUS|)
   (|COMMON-LISP|::|>=| (|ASDF/PLAN|::|STATUS-LEVEL| |ASDF/PLAN|::|STATUS|)
    |ASDF/PLAN|::|LEVEL|))
  |ASDF/PLAN|::|STATUS|
  (|ASDF/PLAN|::|MAKE-ACTION-STATUS| :|BITS|
   (|COMMON-LISP|::|LOGIOR| (|ASDF/PLAN|::|STATUS-BITS| |ASDF/PLAN|::|STATUS|)
    |ASDF/PLAN|::|+NEED-BIT+|)
   :|LEVEL|
   (|COMMON-LISP|::|MAX| |ASDF/PLAN|::|LEVEL|
    (|ASDF/PLAN|::|STATUS-LEVEL| |ASDF/PLAN|::|STATUS|))
   :|STAMP| (|ASDF/PLAN|::|STATUS-STAMP| |ASDF/PLAN|::|STATUS|) :|INDEX|
   (|ASDF/PLAN|::|STATUS-INDEX| |ASDF/PLAN|::|STATUS|))))
(|CLOS|::|DEFMETHOD| |CLOS|::|PRINT-OBJECT|
 ((|ASDF/PLAN|::|STATUS| |ASDF/PLAN|::|ACTION-STATUS|) |COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|PRINT-UNREADABLE-OBJECT|
  (|ASDF/PLAN|::|STATUS| |COMMON-LISP|::|STREAM| :|TYPE| |COMMON-LISP|::|T|)
  (|CLOS|::|WITH-SLOTS|
   (|ASDF/PLAN|::|BITS| |ASDF/PLAN|::|STAMP| |ASDF/PLAN|::|LEVEL|
    |ASDF/PLAN|::|INDEX|)
   |ASDF/PLAN|::|STATUS|
   (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|STREAM| "~{~S~^ ~}"
    `(:|BITS| ,|ASDF/PLAN|::|BITS| :|STAMP| ,|ASDF/PLAN|::|STAMP| :|LEVEL|
      ,|ASDF/PLAN|::|LEVEL| :|INDEX| ,|ASDF/PLAN|::|INDEX|)))))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/PLAN|::|ACTION-STATUS|
 (|ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Returns the ACTION-STATUS associated to the action of OPERATION on COMPONENT\n
in the PLAN, or NIL if the action wasn't visited yet as part of the PLAN."))
(|UIOP/UTILITY|::|DEFGENERIC*|
 (|COMMON-LISP|::|SETF| |ASDF/PLAN|::|ACTION-STATUS|)
 (|ASDF/PLAN|::|NEW-STATUS| |ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Sets the ACTION-STATUS associated to\n
the action of OPERATION on COMPONENT in the PLAN"))
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|ACTION-STATUS|
 ((|ASDF/PLAN|::|PLAN| |COMMON-LISP|::|NULL|)
  (|ASDF/PLAN|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/PLAN|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
  (|ASDF/PLAN|::|STAMP| |ASDF/PLAN|::|DONE-P|)
  (|ASDF/ACTION|::|COMPONENT-OPERATION-TIME| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)
  (|COMMON-LISP|::|IF| |ASDF/PLAN|::|DONE-P|
   (|ASDF/PLAN|::|MAKE-ACTION-STATUS| :|BITS| 4. :|STAMP| |ASDF/PLAN|::|STAMP|)
   |ASDF/PLAN|::|+STATUS-VOID+|)))
(|CLOS|::|DEFMETHOD| (|COMMON-LISP|::|SETF| |ASDF/PLAN|::|ACTION-STATUS|)
 (|ASDF/PLAN|::|NEW-STATUS| (|ASDF/PLAN|::|PLAN| |COMMON-LISP|::|NULL|)
  (|ASDF/PLAN|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/PLAN|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|LET|
  ((|ASDF/PLAN|::|TIMES|
    (|ASDF/COMPONENT|::|COMPONENT-OPERATION-TIMES| |ASDF/PLAN|::|C|)))
  (|COMMON-LISP|::|IF| (|ASDF/PLAN|::|STATUS-DONE-P| |ASDF/PLAN|::|NEW-STATUS|)
   (|COMMON-LISP|::|SETF|
    (|COMMON-LISP|::|GETHASH| |ASDF/PLAN|::|O| |ASDF/PLAN|::|TIMES|)
    (|ASDF/PLAN|::|STATUS-STAMP| |ASDF/PLAN|::|NEW-STATUS|))
   (|COMMON-LISP|::|REMHASH| |ASDF/PLAN|::|O| |ASDF/PLAN|::|TIMES|)))
 |ASDF/PLAN|::|NEW-STATUS|)
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|ACTION-STATUS|
 ((|ASDF/PLAN|::|P| |ASDF/PLAN|::|PLAN|)
  (|ASDF/PLAN|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/PLAN|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|OR|
  (|COMMON-LISP|::|GETHASH|
   (|ASDF/ACTION|::|MAKE-ACTION| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)
   (|ASDF/SESSION|::|VISITED-ACTIONS| |ASDF/SESSION|::|*ASDF-SESSION*|))
  (|COMMON-LISP|::|WHEN|
   (|ASDF/FORCING|::|ACTION-FORCED-NOT-P|
    (|ASDF/SESSION|::|FORCING| |ASDF/PLAN|::|P|) |ASDF/PLAN|::|O|
    |ASDF/PLAN|::|C|)
   (|COMMON-LISP|::|LET|
    ((|ASDF/PLAN|::|STATUS|
      (|ASDF/PLAN|::|ACTION-STATUS| |COMMON-LISP|::|NIL| |ASDF/PLAN|::|O|
       |ASDF/PLAN|::|C|)))
    (|COMMON-LISP|::|SETF|
     (|COMMON-LISP|::|GETHASH|
      (|ASDF/ACTION|::|MAKE-ACTION| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)
      (|ASDF/SESSION|::|VISITED-ACTIONS| |ASDF/SESSION|::|*ASDF-SESSION*|))
     (|ASDF/PLAN|::|MAKE-ACTION-STATUS| :|BITS| |ASDF/PLAN|::|+GOOD-BITS+|
      :|STAMP|
      (|COMMON-LISP|::|OR|
       (|COMMON-LISP|::|AND| |ASDF/PLAN|::|STATUS|
        (|ASDF/PLAN|::|STATUS-STAMP| |ASDF/PLAN|::|STATUS|))
       |COMMON-LISP|::|T|)
      :|INDEX|
      (|COMMON-LISP|::|INCF|
       (|ASDF/SESSION|::|TOTAL-ACTION-COUNT|
        |ASDF/SESSION|::|*ASDF-SESSION*|))))))))
(|CLOS|::|DEFMETHOD| (|COMMON-LISP|::|SETF| |ASDF/PLAN|::|ACTION-STATUS|)
 (|ASDF/PLAN|::|NEW-STATUS| (|ASDF/PLAN|::|P| |ASDF/PLAN|::|PLAN|)
  (|ASDF/PLAN|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/PLAN|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|SETF|
  (|COMMON-LISP|::|GETHASH|
   (|ASDF/ACTION|::|MAKE-ACTION| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)
   (|ASDF/SESSION|::|VISITED-ACTIONS| |ASDF/SESSION|::|*ASDF-SESSION*|))
  |ASDF/PLAN|::|NEW-STATUS|))
(|CLOS|::|DEFMETHOD| (|COMMON-LISP|::|SETF| |ASDF/PLAN|::|ACTION-STATUS|)
 :|AFTER|
 (|ASDF/PLAN|::|NEW-STATUS| (|ASDF/PLAN|::|P| |ASDF/PLAN|::|SEQUENTIAL-PLAN|)
  (|ASDF/PLAN|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/PLAN|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|UNLESS|
  (|ASDF/PLAN|::|STATUS-DONE-P| |ASDF/PLAN|::|NEW-STATUS|)
  (|COMMON-LISP|::|PUSH|
   (|ASDF/ACTION|::|MAKE-ACTION| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)
   (|ASDF/PLAN|::|PLAN-ACTIONS-R| |ASDF/PLAN|::|P|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|MAKE-ACTION-STATUS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MAKE-ACTION-STATUS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| |ASDF/PLAN|::|BITS| |ASDF/PLAN|::|STAMP|
    (|ASDF/PLAN|::|LEVEL| 0.) |ASDF/PLAN|::|INDEX|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|STATUS-KEEP-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|STATUS-KEEP-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/PLAN|::|STATUS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|STATUS-DONE-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|STATUS-DONE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/PLAN|::|STATUS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|STATUS-NEED-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|STATUS-NEED-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/PLAN|::|STATUS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|MERGE-ACTION-STATUS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MERGE-ACTION-STATUS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PLAN|::|STATUS1| |ASDF/PLAN|::|STATUS2|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|MARK-STATUS-NEEDED|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MARK-STATUS-NEEDED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PLAN|::|STATUS| |COMMON-LISP|::|&OPTIONAL|
    (|ASDF/PLAN|::|LEVEL| (|ASDF/SESSION|::|OPERATE-LEVEL|)))))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|ACTION-STATUS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|ACTION-STATUS|
 '#(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   (|COMMON-LISP|::|SETF| |ASDF/PLAN|::|ACTION-STATUS|)))
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/PLAN|::|ACTION-STATUS|)
 '#(4. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|ACTION-STATUS|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/PLAN|::|ACTION-STATUS|)
 #(4. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|ACTION-STATUS|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/PLAN|::|ACTION-STATUS|)
 #(4. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/PLAN|::|ACTION-STATUS|)
 #(4. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/PLAN|::|NEEDED-IN-IMAGE-P|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION|
  "Is the action of OPERATION on COMPONENT needed in the current image\n
to be meaningful, or could it just as well have been done in another Lisp image?"))
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|NEEDED-IN-IMAGE-P|
 ((|ASDF/PLAN|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/PLAN|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|NOT|
  (|ASDF/ACTION|::|OUTPUT-FILES| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|NEEDED-IN-IMAGE-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|NEEDED-IN-IMAGE-P|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|NEEDED-IN-IMAGE-P|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|UIOP/UTILITY|::|DEFUN*| (|ASDF/PLAN|::|MAP-DIRECT-DEPENDENCIES|)
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
  |ASDF/PLAN|::|FUN|)
 "Call FUN on all the valid dependencies of the given action in the given plan"
 (|UIOP/COMMON-LISP|::|LOOP*| :|FOR|
  (|ASDF/PLAN|::|DEP-O-SPEC| . |ASDF/PLAN|::|DEP-C-SPECS|) :|IN|
  (|ASDF/ACTION|::|COMPONENT-DEPENDS-ON| |ASDF/OPERATION|::|OPERATION|
   |ASDF/COMPONENT|::|COMPONENT|)
  :|FOR| |ASDF/PLAN|::|DEP-O| |COMMON-LISP|::|=|
  (|ASDF/OPERATION|::|FIND-OPERATION| |ASDF/OPERATION|::|OPERATION|
   |ASDF/PLAN|::|DEP-O-SPEC|)
  :|WHEN| |ASDF/PLAN|::|DEP-O| :|DO|
  (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/PLAN|::|DEP-C-SPEC| :|IN|
   |ASDF/PLAN|::|DEP-C-SPECS| :|FOR| |ASDF/PLAN|::|DEP-C| |COMMON-LISP|::|=|
   (|COMMON-LISP|::|AND| |ASDF/PLAN|::|DEP-C-SPEC|
    (|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-SPEC|
     |ASDF/COMPONENT|::|COMPONENT| |ASDF/PLAN|::|DEP-C-SPEC|))
   :|WHEN|
   (|ASDF/ACTION|::|ACTION-VALID-P| |ASDF/PLAN|::|DEP-O| |ASDF/PLAN|::|DEP-C|)
   :|DO|
   (|COMMON-LISP|::|FUNCALL| |ASDF/PLAN|::|FUN| |ASDF/PLAN|::|DEP-O|
    |ASDF/PLAN|::|DEP-C|))))
(|UIOP/UTILITY|::|DEFUN*| (|ASDF/PLAN|::|REDUCE-DIRECT-DEPENDENCIES|)
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
  |ASDF/PLAN|::|COMBINATOR| |ASDF/PLAN|::|SEED|)
 "Reduce the direct dependencies to a value computed by iteratively calling COMBINATOR\n
for each dependency action on the dependency's operation and component and an accumulator\n
initialized with SEED."
 (|ASDF/PLAN|::|MAP-DIRECT-DEPENDENCIES| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|
  #'(|COMMON-LISP|::|LAMBDA| (|ASDF/PLAN|::|DEP-O| |ASDF/PLAN|::|DEP-C|)
     (|COMMON-LISP|::|SETF| |ASDF/PLAN|::|SEED|
      (|COMMON-LISP|::|FUNCALL| |ASDF/PLAN|::|COMBINATOR| |ASDF/PLAN|::|DEP-O|
       |ASDF/PLAN|::|DEP-C| |ASDF/PLAN|::|SEED|))))
 |ASDF/PLAN|::|SEED|)
(|UIOP/UTILITY|::|DEFUN*| (|ASDF/PLAN|::|DIRECT-DEPENDENCIES|)
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
 "Compute a list of the direct dependencies of the action within the plan"
 (|COMMON-LISP|::|REVERSE|
  (|ASDF/PLAN|::|REDUCE-DIRECT-DEPENDENCIES| |ASDF/OPERATION|::|OPERATION|
   |ASDF/COMPONENT|::|COMPONENT| #'|COMMON-LISP|::|ACONS|
   |COMMON-LISP|::|NIL|)))
(|COMMON-LISP|::|DEFINE-CONDITION| |ASDF/PLAN|::|DEPENDENCY-NOT-DONE|
 (|COMMON-LISP|::|WARNING|)
 ((|ASDF/PLAN|::|OP| :|INITARG| :|OP|)
  (|ASDF/COMPONENT|::|COMPONENT| :|INITARG| :|COMPONENT|)
  (|ASDF/PLAN|::|DEP-OP| :|INITARG| :|DEP-OP|)
  (|ASDF/PLAN|::|DEP-COMPONENT| :|INITARG| :|DEP-COMPONENT|)
  (|ASDF/PLAN|::|PLAN| :|INITARG| :|PLAN| :|INITFORM| |COMMON-LISP|::|NIL|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA| (|COMMON-LISP|::|CONDITION| |COMMON-LISP|::|STREAM|)
   (|CLOS|::|WITH-SLOTS|
    (|ASDF/PLAN|::|OP| |ASDF/COMPONENT|::|COMPONENT| |ASDF/PLAN|::|DEP-OP|
     |ASDF/PLAN|::|DEP-COMPONENT| |ASDF/PLAN|::|PLAN|)
    |COMMON-LISP|::|CONDITION|
    (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|STREAM|
     "Computing just-done stamp ~@[in plan ~S~] for action ~S, but dependency ~S wasn't done yet!"
     |ASDF/PLAN|::|PLAN|
     (|ASDF/ACTION|::|ACTION-PATH|
      (|ASDF/ACTION|::|MAKE-ACTION| |ASDF/PLAN|::|OP|
       |ASDF/COMPONENT|::|COMPONENT|))
     (|ASDF/ACTION|::|ACTION-PATH|
      (|ASDF/ACTION|::|MAKE-ACTION| |ASDF/PLAN|::|DEP-OP|
       |ASDF/PLAN|::|DEP-COMPONENT|)))))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPUTE-ACTION-STAMP|
 (|ASDF/PLAN|::|PLAN| (|ASDF/PLAN|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/PLAN|::|C| |ASDF/COMPONENT|::|COMPONENT|) |COMMON-LISP|::|&KEY|
  |ASDF/PLAN|::|JUST-DONE|)
 (|UIOP/UTILITY|::|NEST| (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|)
  (|COMMON-LISP|::|LET*|
   ((|ASDF/PLAN|::|DEP-STATUS|
     (|ASDF/PLAN|::|REDUCE-DIRECT-DEPENDENCIES| |ASDF/PLAN|::|O|
      |ASDF/PLAN|::|C|
      #'(|COMMON-LISP|::|LAMBDA|
         (|COMMON-LISP|::|DO| |ASDF/PLAN|::|DC| |ASDF/PLAN|::|STATUS|)
         (|COMMON-LISP|::|LET|
          ((|ASDF/PLAN|::|ACTION-STATUS|
            (|ASDF/PLAN|::|ACTION-STATUS| |ASDF/PLAN|::|PLAN|
             |COMMON-LISP|::|DO| |ASDF/PLAN|::|DC|)))
          (|COMMON-LISP|::|COND|
           ((|COMMON-LISP|::|AND| |ASDF/PLAN|::|ACTION-STATUS|
             (|COMMON-LISP|::|OR|
              (|ASDF/PLAN|::|STATUS-KEEP-P| |ASDF/PLAN|::|ACTION-STATUS|)
              (|COMMON-LISP|::|AND| |ASDF/PLAN|::|JUST-DONE|
               (|ASDF/PLAN|::|STATUS-STAMP| |ASDF/PLAN|::|ACTION-STATUS|))))
            (|ASDF/PLAN|::|MERGE-ACTION-STATUS| |ASDF/PLAN|::|ACTION-STATUS|
             |ASDF/PLAN|::|STATUS|))
           (|ASDF/PLAN|::|JUST-DONE|
            (|COMMON-LISP|::|UNLESS|
             (|COMMON-LISP|::|EQUAL| "asdf"
              (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME| |ASDF/PLAN|::|DC|))
             (|COMMON-LISP|::|WARN| '|ASDF/PLAN|::|DEPENDENCY-NOT-DONE| :|PLAN|
              |ASDF/PLAN|::|PLAN| :|OP| |ASDF/PLAN|::|O| :|COMPONENT|
              |ASDF/PLAN|::|C| :|DEP-OP| |COMMON-LISP|::|DO| :|DEP-COMPONENT|
              |ASDF/PLAN|::|DC|))
            |ASDF/PLAN|::|STATUS|)
           (|COMMON-LISP|::|T|
            (|COMMON-LISP|::|RETURN|
             (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL|
              |COMMON-LISP|::|NIL|))))))
      |ASDF/PLAN|::|+STATUS-GOOD+|))
    (|ASDF/PLAN|::|DEP-STAMP|
     (|ASDF/PLAN|::|STATUS-STAMP| |ASDF/PLAN|::|DEP-STATUS|))))
  (|COMMON-LISP|::|LET*|
   ((|ASDF/PLAN|::|IN-FILES|
     (|ASDF/ACTION|::|INPUT-FILES| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|))
    (|ASDF/PLAN|::|IN-STAMPS|
     (|COMMON-LISP|::|MAPCAR| #'|ASDF/SESSION|::|GET-FILE-STAMP|
      |ASDF/PLAN|::|IN-FILES|))
    (|ASDF/PLAN|::|MISSING-IN|
     (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/PLAN|::|F| :|IN|
      |ASDF/PLAN|::|IN-FILES| :|FOR| |ASDF/PLAN|::|S| :|IN|
      |ASDF/PLAN|::|IN-STAMPS| :|UNLESS| |ASDF/PLAN|::|S| :|COLLECT|
      |ASDF/PLAN|::|F|))
    (|ASDF/PLAN|::|LATEST-IN|
     (|UIOP/UTILITY|::|TIMESTAMPS-LATEST|
      (|COMMON-LISP|::|CONS| |ASDF/PLAN|::|DEP-STAMP|
       |ASDF/PLAN|::|IN-STAMPS|))))
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|AND| |ASDF/PLAN|::|MISSING-IN|
     (|COMMON-LISP|::|NOT| |ASDF/PLAN|::|JUST-DONE|))
    (|COMMON-LISP|::|RETURN|
     (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))))
  (|COMMON-LISP|::|LET*|
   ((|ASDF/PLAN|::|OUT-FILES|
     (|COMMON-LISP|::|REMOVE-IF| '|COMMON-LISP|::|NULL|
      (|ASDF/ACTION|::|OUTPUT-FILES| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)))
    (|ASDF/PLAN|::|OUT-STAMPS|
     (|COMMON-LISP|::|MAPCAR|
      (|COMMON-LISP|::|IF| |ASDF/PLAN|::|JUST-DONE|
       '|ASDF/SESSION|::|REGISTER-FILE-STAMP|
       '|ASDF/SESSION|::|GET-FILE-STAMP|)
      |ASDF/PLAN|::|OUT-FILES|))
    (|ASDF/PLAN|::|MISSING-OUT|
     (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/PLAN|::|F| :|IN|
      |ASDF/PLAN|::|OUT-FILES| :|FOR| |ASDF/PLAN|::|S| :|IN|
      |ASDF/PLAN|::|OUT-STAMPS| :|UNLESS| |ASDF/PLAN|::|S| :|COLLECT|
      |ASDF/PLAN|::|F|))
    (|ASDF/PLAN|::|EARLIEST-OUT|
     (|UIOP/UTILITY|::|TIMESTAMPS-EARLIEST| |ASDF/PLAN|::|OUT-STAMPS|)))
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|AND| |ASDF/PLAN|::|MISSING-OUT|
     (|COMMON-LISP|::|NOT| |ASDF/PLAN|::|JUST-DONE|))
    (|COMMON-LISP|::|RETURN|
     (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))))
  (|COMMON-LISP|::|LET|
   ((|ASDF/PLAN|::|ALL-PRESENT|
     (|COMMON-LISP|::|NOT|
      (|COMMON-LISP|::|OR| |ASDF/PLAN|::|MISSING-IN|
       |ASDF/PLAN|::|MISSING-OUT|)))
    (|ASDF/PLAN|::|UP-TO-DATE-P|
     (|UIOP/UTILITY|::|TIMESTAMP<=| |ASDF/PLAN|::|LATEST-IN|
      |ASDF/PLAN|::|EARLIEST-OUT|))
    (|ASDF/PLAN|::|DONE-STAMP|
     (|UIOP/UTILITY|::|TIMESTAMPS-LATEST|
      (|COMMON-LISP|::|CONS| |ASDF/PLAN|::|LATEST-IN|
       |ASDF/PLAN|::|OUT-STAMPS|))))
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|AND| |ASDF/PLAN|::|JUST-DONE|
     (|COMMON-LISP|::|NOT| |ASDF/PLAN|::|ALL-PRESENT|))
    (|COMMON-LISP|::|WARN|
     "~A completed without ~:[~*~;~*its input file~:p~2:*~{ ~S~}~*~]~\n
                ~:[~; or ~]~:[~*~;~*its output file~:p~2:*~{ ~S~}~*~]"
     (|ASDF/ACTION|::|ACTION-DESCRIPTION| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)
     |ASDF/PLAN|::|MISSING-IN|
     (|COMMON-LISP|::|LENGTH| |ASDF/PLAN|::|MISSING-IN|)
     (|COMMON-LISP|::|AND| |ASDF/PLAN|::|MISSING-IN|
      |ASDF/PLAN|::|MISSING-OUT|)
     |ASDF/PLAN|::|MISSING-OUT|
     (|COMMON-LISP|::|LENGTH| |ASDF/PLAN|::|MISSING-OUT|))))
  (|COMMON-LISP|::|LET|
   ((|ASDF/PLAN|::|OUT-OP|
     (|COMMON-LISP|::|AND| |ASDF/PLAN|::|OUT-FILES| |COMMON-LISP|::|T|))))
  (|COMMON-LISP|::|IF|
   (|COMMON-LISP|::|OR| |ASDF/PLAN|::|JUST-DONE|
    (|COMMON-LISP|::|AND| |ASDF/PLAN|::|ALL-PRESENT|
     |ASDF/PLAN|::|UP-TO-DATE-P|
     (|ASDF/ACTION|::|OPERATION-DONE-P| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)
     (|COMMON-LISP|::|NOT|
      (|ASDF/FORCING|::|ACTION-FORCED-P|
       (|ASDF/SESSION|::|FORCING|
        (|COMMON-LISP|::|OR| |ASDF/PLAN|::|PLAN|
         |ASDF/SESSION|::|*ASDF-SESSION*|))
       |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|))))
   (|COMMON-LISP|::|VALUES| |ASDF/PLAN|::|DONE-STAMP|
    (|COMMON-LISP|::|OR| |ASDF/PLAN|::|JUST-DONE| |ASDF/PLAN|::|OUT-OP|
     (|COMMON-LISP|::|AND|
      (|ASDF/PLAN|::|STATUS-DONE-P| |ASDF/PLAN|::|DEP-STATUS|)
      (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
       (|ASDF/PLAN|::|PERFORM-STAMP| |ASDF/PLAN|::|PERFORM-DONE-P|)
       (|ASDF/ACTION|::|COMPONENT-OPERATION-TIME| |ASDF/PLAN|::|O|
        |ASDF/PLAN|::|C|)
       (|COMMON-LISP|::|AND| |ASDF/PLAN|::|PERFORM-DONE-P|
        (|COMMON-LISP|::|EQUAL| |ASDF/PLAN|::|PERFORM-STAMP|
         |ASDF/PLAN|::|DONE-STAMP|))))))
   (|COMMON-LISP|::|VALUES| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|MAP-DIRECT-DEPENDENCIES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MAP-DIRECT-DEPENDENCIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
    |ASDF/PLAN|::|FUN|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|REDUCE-DIRECT-DEPENDENCIES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|REDUCE-DIRECT-DEPENDENCIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
    |ASDF/PLAN|::|COMBINATOR| |ASDF/PLAN|::|SEED|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|DIRECT-DEPENDENCIES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|DIRECT-DEPENDENCIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G30749| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/PLAN|::|DEPENDENCY-NOT-DONE| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|WARNING|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/PLAN|::|OP| :|INITARGS| '(:|OP|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|COMPONENT| :|INITARGS|
    '(:|COMPONENT|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/PLAN|::|DEP-OP| :|INITARGS|
    '(:|DEP-OP|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/PLAN|::|DEP-COMPONENT| :|INITARGS|
    '(:|DEP-COMPONENT|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/PLAN|::|PLAN| :|INITARGS| '(:|PLAN|)
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPUTE-ACTION-STAMP|
 #(3. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|JUST-DONE|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PLAN|::|COMPUTE-ACTION-STATUS|
 (|ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT| |ASDF/PLAN|::|NEED-P|)
 (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
  (|ASDF/PLAN|::|STAMP| |ASDF/PLAN|::|DONE-P|)
  (|ASDF/ACTION|::|COMPUTE-ACTION-STAMP| |ASDF/PLAN|::|PLAN|
   |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
  (|COMMON-LISP|::|ASSERT|
   (|COMMON-LISP|::|OR| |ASDF/PLAN|::|STAMP|
    (|COMMON-LISP|::|NOT| |ASDF/PLAN|::|DONE-P|)))
  (|ASDF/PLAN|::|MAKE-ACTION-STATUS| :|BITS|
   (|COMMON-LISP|::|LOGIOR| (|COMMON-LISP|::|IF| |ASDF/PLAN|::|STAMP| 4. 0.)
    (|COMMON-LISP|::|IF| |ASDF/PLAN|::|DONE-P| 2. 0.)
    (|COMMON-LISP|::|IF| |ASDF/PLAN|::|NEED-P| 1. 0.))
   :|STAMP| |ASDF/PLAN|::|STAMP| :|LEVEL| (|ASDF/SESSION|::|OPERATE-LEVEL|)
   :|INDEX|
   (|COMMON-LISP|::|INCF|
    (|ASDF/SESSION|::|TOTAL-ACTION-COUNT| |ASDF/SESSION|::|*ASDF-SESSION*|)))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PLAN|::|TRAVERSE-ACTION|
 (|ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT| |ASDF/PLAN|::|NEEDED-IN-IMAGE-P|)
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|UNLESS|
   (|ASDF/ACTION|::|ACTION-VALID-P| |ASDF/OPERATION|::|OPERATION|
    |ASDF/COMPONENT|::|COMPONENT|)
   (|COMMON-LISP|::|RETURN|))
  (|ASDF/PLAN|::|RECORD-DEPENDENCY| |ASDF/PLAN|::|PLAN|
   |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
  (|ASDF/ACTION|::|WHILE-VISITING-ACTION|
   (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
   (|COMMON-LISP|::|LET*|
    ((|ASDF/PLAN|::|ANIIP|
      (|ASDF/PLAN|::|NEEDED-IN-IMAGE-P| |ASDF/OPERATION|::|OPERATION|
       |ASDF/COMPONENT|::|COMPONENT|))
     (|ASDF/PLAN|::|ENIIP|
      (|COMMON-LISP|::|AND| |ASDF/PLAN|::|ANIIP|
       |ASDF/PLAN|::|NEEDED-IN-IMAGE-P|))
     (|ASDF/PLAN|::|STATUS|
      (|ASDF/PLAN|::|ACTION-STATUS| |ASDF/PLAN|::|PLAN|
       |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|))
     (|ASDF/PLAN|::|LEVEL| (|ASDF/SESSION|::|OPERATE-LEVEL|)))
    (|COMMON-LISP|::|WHEN|
     (|COMMON-LISP|::|AND| |ASDF/PLAN|::|STATUS|
      (|COMMON-LISP|::|OR| (|ASDF/PLAN|::|STATUS-DONE-P| |ASDF/PLAN|::|STATUS|)
       (|COMMON-LISP|::|AND|
        (|ASDF/PLAN|::|STATUS-NEED-P| |ASDF/PLAN|::|STATUS|)
        (|COMMON-LISP|::|<=| |ASDF/PLAN|::|LEVEL|
         (|ASDF/PLAN|::|STATUS-LEVEL| |ASDF/PLAN|::|STATUS|)))
       (|COMMON-LISP|::|AND|
        (|ASDF/PLAN|::|STATUS-KEEP-P| |ASDF/PLAN|::|STATUS|)
        (|COMMON-LISP|::|NOT| |ASDF/PLAN|::|ENIIP|))))
     (|COMMON-LISP|::|RETURN|))
    (|COMMON-LISP|::|LABELS|
     ((|ASDF/PLAN|::|VISIT-ACTION| (|ASDF/PLAN|::|NIIP|)
       (|ASDF/PLAN|::|MAP-DIRECT-DEPENDENCIES| |ASDF/OPERATION|::|OPERATION|
        |ASDF/COMPONENT|::|COMPONENT|
        #'(|COMMON-LISP|::|LAMBDA| (|ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)
           (|ASDF/PLAN|::|TRAVERSE-ACTION| |ASDF/PLAN|::|PLAN| |ASDF/PLAN|::|O|
            |ASDF/PLAN|::|C| |ASDF/PLAN|::|NIIP|)))
       (|COMMON-LISP|::|LET*|
        ((|ASDF/PLAN|::|STATUS|
          (|COMMON-LISP|::|IF| |ASDF/PLAN|::|STATUS|
           (|ASDF/PLAN|::|MARK-STATUS-NEEDED| |ASDF/PLAN|::|STATUS|
            |ASDF/PLAN|::|LEVEL|)
           (|ASDF/PLAN|::|COMPUTE-ACTION-STATUS| |ASDF/PLAN|::|PLAN|
            |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
            |COMMON-LISP|::|T|)))
         (|ASDF/PLAN|::|OUT-OF-DATE-P|
          (|COMMON-LISP|::|NOT|
           (|ASDF/PLAN|::|STATUS-KEEP-P| |ASDF/PLAN|::|STATUS|)))
         (|ASDF/PLAN|::|TO-PERFORM-P|
          (|COMMON-LISP|::|OR| |ASDF/PLAN|::|OUT-OF-DATE-P|
           (|COMMON-LISP|::|AND| |ASDF/PLAN|::|NIIP|
            (|COMMON-LISP|::|NOT|
             (|ASDF/PLAN|::|STATUS-DONE-P| |ASDF/PLAN|::|STATUS|))))))
        (|COMMON-LISP|::|COND|
         ((|COMMON-LISP|::|AND| |ASDF/PLAN|::|OUT-OF-DATE-P|
           (|COMMON-LISP|::|NOT| |ASDF/PLAN|::|NIIP|))
          (|ASDF/PLAN|::|VISIT-ACTION| |COMMON-LISP|::|T|))
         (|COMMON-LISP|::|T|
          (|COMMON-LISP|::|SETF|
           (|ASDF/PLAN|::|ACTION-STATUS| |ASDF/PLAN|::|PLAN|
            |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
           |ASDF/PLAN|::|STATUS|)
          (|COMMON-LISP|::|WHEN|
           (|ASDF/PLAN|::|STATUS-DONE-P| |ASDF/PLAN|::|STATUS|)
           (|COMMON-LISP|::|SETF|
            (|ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
             |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
            (|ASDF/PLAN|::|STATUS-STAMP| |ASDF/PLAN|::|STATUS|)))
          (|COMMON-LISP|::|WHEN| |ASDF/PLAN|::|TO-PERFORM-P|
           (|COMMON-LISP|::|INCF|
            (|ASDF/SESSION|::|PLANNED-ACTION-COUNT|
             |ASDF/SESSION|::|*ASDF-SESSION*|))
           (|COMMON-LISP|::|UNLESS| |ASDF/PLAN|::|ANIIP|
            (|COMMON-LISP|::|INCF|
             (|ASDF/SESSION|::|PLANNED-OUTPUT-ACTION-COUNT|
              |ASDF/SESSION|::|*ASDF-SESSION*|)))))))))
     (|ASDF/PLAN|::|VISIT-ACTION| |ASDF/PLAN|::|ENIIP|))))))
(|COMMON-LISP|::|DEFINE-CONDITION| |ASDF/PLAN|::|SYSTEM-OUT-OF-DATE|
 (|COMMON-LISP|::|CONDITION|)
 ((|ASDF/COMPONENT|::|NAME| :|INITARG| :|NAME| :|READER|
   |ASDF/COMPONENT|::|COMPONENT-NAME|))
 (:|DOCUMENTATION|
  "condition signaled when a system is detected as being out of date")
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA| (|ASDF/PLAN|::|C| |ASDF/PLAN|::|S|)
   (|COMMON-LISP|::|FORMAT| |ASDF/PLAN|::|S| "system ~A is out of date"
    (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/PLAN|::|C|)))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PLAN|::|ACTION-UP-TO-DATE-P|
 (|ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|)
 "Check whether an action was up-to-date at the beginning of the session.\n
Update the VISITED-ACTIONS table with the known status, but don't add anything to the PLAN."
 (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|UNLESS|
   (|ASDF/ACTION|::|ACTION-VALID-P| |ASDF/OPERATION|::|OPERATION|
    |ASDF/COMPONENT|::|COMPONENT|)
   (|COMMON-LISP|::|RETURN| |COMMON-LISP|::|T|))
  (|ASDF/ACTION|::|WHILE-VISITING-ACTION|
   (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
   (|COMMON-LISP|::|LET|
    ((|ASDF/PLAN|::|STATUS|
      (|COMMON-LISP|::|OR|
       (|ASDF/PLAN|::|ACTION-STATUS| |ASDF/PLAN|::|PLAN|
        |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
       (|COMMON-LISP|::|SETF|
        (|ASDF/PLAN|::|ACTION-STATUS| |ASDF/PLAN|::|PLAN|
         |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
        (|COMMON-LISP|::|LET|
         ((|ASDF/PLAN|::|DEPENDENCIES-UP-TO-DATE-P|
           (|COMMON-LISP|::|HANDLER-CASE|
            (|COMMON-LISP|::|BLOCK| |COMMON-LISP|::|NIL|
             (|ASDF/PLAN|::|MAP-DIRECT-DEPENDENCIES|
              |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
              #'(|COMMON-LISP|::|LAMBDA| (|ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)
                 (|COMMON-LISP|::|UNLESS|
                  (|ASDF/PLAN|::|ACTION-UP-TO-DATE-P| |ASDF/PLAN|::|PLAN|
                   |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)
                  (|COMMON-LISP|::|RETURN| |COMMON-LISP|::|NIL|))))
             |COMMON-LISP|::|T|)
            (|ASDF/PLAN|::|SYSTEM-OUT-OF-DATE| |COMMON-LISP|::|NIL|
             |COMMON-LISP|::|NIL|))))
         (|COMMON-LISP|::|IF| |ASDF/PLAN|::|DEPENDENCIES-UP-TO-DATE-P|
          (|ASDF/PLAN|::|COMPUTE-ACTION-STATUS| |ASDF/PLAN|::|PLAN|
           |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
           |COMMON-LISP|::|NIL|)
          |ASDF/PLAN|::|+STATUS-VOID+|))))))
    (|COMMON-LISP|::|AND| (|ASDF/PLAN|::|STATUS-KEEP-P| |ASDF/PLAN|::|STATUS|)
     (|ASDF/PLAN|::|STATUS-STAMP| |ASDF/PLAN|::|STATUS|))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|COMPUTE-ACTION-STATUS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|COMPUTE-ACTION-STATUS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
    |ASDF/COMPONENT|::|COMPONENT| |ASDF/PLAN|::|NEED-P|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|TRAVERSE-ACTION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|TRAVERSE-ACTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
    |ASDF/COMPONENT|::|COMPONENT| |ASDF/PLAN|::|NEEDED-IN-IMAGE-P|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G31068| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/PLAN|::|SYSTEM-OUT-OF-DATE| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|CONDITION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|NAME| :|READERS|
    '(|ASDF/COMPONENT|::|COMPONENT-NAME|) :|INITARGS| '(:|NAME|)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"condition signaled when a system is detected as being out of date"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-NAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|ACTION-UP-TO-DATE-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|ACTION-UP-TO-DATE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
    |ASDF/COMPONENT|::|COMPONENT|)))
(|CLOS|::|DEFCLASS| |ASDF/PLAN|::|FILTERED-SEQUENTIAL-PLAN|
 (|ASDF/PLAN|::|SEQUENTIAL-PLAN|)
 ((|ASDF/PLAN|::|COMPONENT-TYPE| :|INITFORM| |COMMON-LISP|::|T| :|INITARG|
   :|COMPONENT-TYPE| :|READER| |ASDF/PLAN|::|PLAN-COMPONENT-TYPE|)
  (|ASDF/PLAN|::|KEEP-OPERATION| :|INITFORM| |COMMON-LISP|::|T| :|INITARG|
   :|KEEP-OPERATION| :|READER| |ASDF/PLAN|::|PLAN-KEEP-OPERATION|)
  (|ASDF/PLAN|::|KEEP-COMPONENT| :|INITFORM| |COMMON-LISP|::|T| :|INITARG|
   :|KEEP-COMPONENT| :|READER| |ASDF/PLAN|::|PLAN-KEEP-COMPONENT|))
 (:|DOCUMENTATION|
  "A variant of SEQUENTIAL-PLAN that only records a subset of actions."))
(|CLOS|::|DEFMETHOD| |CLOS|::|INITIALIZE-INSTANCE| :|AFTER|
 ((|ASDF/PLAN|::|PLAN| |ASDF/PLAN|::|FILTERED-SEQUENTIAL-PLAN|)
  |COMMON-LISP|::|&KEY| |ASDF/SYSTEM|::|SYSTEM| |ASDF/PLAN|::|OTHER-SYSTEMS|)
 (|COMMON-LISP|::|SETF|
  (|CLOS|::|SLOT-VALUE| |ASDF/PLAN|::|PLAN| '|ASDF/SESSION|::|FORCING|)
  (|ASDF/FORCING|::|MAKE-FORCING| :|SYSTEM| |ASDF/SYSTEM|::|SYSTEM| :|FORCE|
   :|ALL| :|FORCE-NOT|
   (|COMMON-LISP|::|IF| |ASDF/PLAN|::|OTHER-SYSTEMS| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|T|))))
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|PLAN-ACTIONS|
 ((|ASDF/PLAN|::|PLAN| |ASDF/PLAN|::|FILTERED-SEQUENTIAL-PLAN|))
 (|CLOS|::|WITH-SLOTS|
  (|ASDF/PLAN|::|KEEP-OPERATION| |ASDF/PLAN|::|KEEP-COMPONENT|)
  |ASDF/PLAN|::|PLAN|
  (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/ACTION|::|ACTION| :|IN|
   (|CLOS|::|CALL-NEXT-METHOD|) :|AS| |ASDF/PLAN|::|O| |COMMON-LISP|::|=|
   (|ASDF/ACTION|::|ACTION-OPERATION| |ASDF/ACTION|::|ACTION|) :|AS|
   |ASDF/PLAN|::|C| |COMMON-LISP|::|=|
   (|ASDF/ACTION|::|ACTION-COMPONENT| |ASDF/ACTION|::|ACTION|) :|WHEN|
   (|COMMON-LISP|::|AND|
    (|COMMON-LISP|::|TYPEP| |ASDF/PLAN|::|O| |ASDF/PLAN|::|KEEP-OPERATION|)
    (|COMMON-LISP|::|TYPEP| |ASDF/PLAN|::|C| |ASDF/PLAN|::|KEEP-COMPONENT|))
   :|COLLECT|
   (|ASDF/ACTION|::|MAKE-ACTION| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PLAN|::|COLLECT-ACTION-DEPENDENCIES|
 (|ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|)
 (|COMMON-LISP|::|WHEN|
  (|ASDF/ACTION|::|ACTION-VALID-P| |ASDF/OPERATION|::|OPERATION|
   |ASDF/COMPONENT|::|COMPONENT|)
  (|ASDF/ACTION|::|WHILE-VISITING-ACTION|
   (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
   (|COMMON-LISP|::|LET|
    ((|ASDF/ACTION|::|ACTION|
      (|ASDF/ACTION|::|MAKE-ACTION| |ASDF/OPERATION|::|OPERATION|
       |ASDF/COMPONENT|::|COMPONENT|)))
    (|COMMON-LISP|::|UNLESS|
     (|COMMON-LISP|::|NTH-VALUE| 1.
      (|COMMON-LISP|::|GETHASH| |ASDF/ACTION|::|ACTION|
       (|ASDF/SESSION|::|VISITED-ACTIONS| |ASDF/SESSION|::|*ASDF-SESSION*|)))
     (|COMMON-LISP|::|SETF|
      (|COMMON-LISP|::|GETHASH| |ASDF/ACTION|::|ACTION|
       (|ASDF/SESSION|::|VISITED-ACTIONS| |ASDF/SESSION|::|*ASDF-SESSION*|))
      |COMMON-LISP|::|NIL|)
     (|COMMON-LISP|::|WHEN|
      (|COMMON-LISP|::|AND|
       (|COMMON-LISP|::|TYPEP| |ASDF/COMPONENT|::|COMPONENT|
        (|ASDF/PLAN|::|PLAN-COMPONENT-TYPE| |ASDF/PLAN|::|PLAN|))
       (|COMMON-LISP|::|NOT|
        (|ASDF/FORCING|::|ACTION-FORCED-NOT-P|
         (|ASDF/SESSION|::|FORCING| |ASDF/PLAN|::|PLAN|)
         |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)))
      (|ASDF/PLAN|::|MAP-DIRECT-DEPENDENCIES| |ASDF/OPERATION|::|OPERATION|
       |ASDF/COMPONENT|::|COMPONENT|
       #'(|COMMON-LISP|::|LAMBDA| (|ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)
          (|ASDF/PLAN|::|COLLECT-ACTION-DEPENDENCIES| |ASDF/PLAN|::|PLAN|
           |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)))
      (|COMMON-LISP|::|PUSH| |ASDF/ACTION|::|ACTION|
       (|ASDF/PLAN|::|PLAN-ACTIONS-R| |ASDF/PLAN|::|PLAN|))))))))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/PLAN|::|COLLECT-DEPENDENCIES|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
  |COMMON-LISP|::|&KEY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (:|DOCUMENTATION|
  "Given an action, build a plan for all of its dependencies."))
(|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
 |ASDF/PLAN|::|COLLECT-DEPENDENCIES|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
  |COMMON-LISP|::|&KEY|))
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|COLLECT-DEPENDENCIES|
 ((|ASDF/OPERATION|::|OPERATION| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|COMPONENT|)
  |COMMON-LISP|::|&REST| |ASDF/PLAN|::|KEYS| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/PLAN|::|PLAN|
    (|COMMON-LISP|::|APPLY| '|CLOS|::|MAKE-INSTANCE|
     '|ASDF/PLAN|::|FILTERED-SEQUENTIAL-PLAN| :|SYSTEM|
     (|ASDF/COMPONENT|::|COMPONENT-SYSTEM| |ASDF/COMPONENT|::|COMPONENT|)
     |ASDF/PLAN|::|KEYS|)))
  (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/ACTION|::|ACTION| :|IN|
   (|ASDF/PLAN|::|DIRECT-DEPENDENCIES| |ASDF/OPERATION|::|OPERATION|
    |ASDF/COMPONENT|::|COMPONENT|)
   :|DO|
   (|ASDF/PLAN|::|COLLECT-ACTION-DEPENDENCIES| |ASDF/PLAN|::|PLAN|
    (|ASDF/ACTION|::|ACTION-OPERATION| |ASDF/ACTION|::|ACTION|)
    (|ASDF/ACTION|::|ACTION-COMPONENT| |ASDF/ACTION|::|ACTION|)))
  (|ASDF/PLAN|::|PLAN-ACTIONS| |ASDF/PLAN|::|PLAN|)))
(|UIOP/UTILITY|::|DEFUN*| (|ASDF/PLAN|::|REQUIRED-COMPONENTS|)
 (|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&REST| |ASDF/PLAN|::|KEYS|
  |COMMON-LISP|::|&KEY|
  (|ASDF/PLAN|::|GOAL-OPERATION| '|ASDF/LISP-ACTION|::|LOAD-OP|)
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Given a SYSTEM and a GOAL-OPERATION (default LOAD-OP), traverse the dependencies and\n
return a list of the components involved in building the desired action."
 (|ASDF/SESSION|::|WITH-ASDF-SESSION| (:|OVERRIDE| |COMMON-LISP|::|T|)
  (|COMMON-LISP|::|REMOVE-DUPLICATES|
   (|COMMON-LISP|::|MAPCAR| '|ASDF/ACTION|::|ACTION-COMPONENT|
    (|COMMON-LISP|::|APPLY| '|ASDF/PLAN|::|COLLECT-DEPENDENCIES|
     |ASDF/PLAN|::|GOAL-OPERATION| |ASDF/SYSTEM|::|SYSTEM|
     (|UIOP/UTILITY|::|REMOVE-PLIST-KEY| :|GOAL-OPERATION|
      |ASDF/PLAN|::|KEYS|)))
   :|FROM-END| |COMMON-LISP|::|T|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G31233| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/PLAN|::|FILTERED-SEQUENTIAL-PLAN| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/PLAN|::|SEQUENTIAL-PLAN|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/PLAN|::|COMPONENT-TYPE| :|READERS|
    '(|ASDF/PLAN|::|PLAN-COMPONENT-TYPE|) :|INITARGS| '(:|COMPONENT-TYPE|)
    :|INITFORM| '|COMMON-LISP|::|T| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|T|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/PLAN|::|KEEP-OPERATION| :|READERS|
    '(|ASDF/PLAN|::|PLAN-KEEP-OPERATION|) :|INITARGS| '(:|KEEP-OPERATION|)
    :|INITFORM| '|COMMON-LISP|::|T| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|T|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/PLAN|::|KEEP-COMPONENT| :|READERS|
    '(|ASDF/PLAN|::|PLAN-KEEP-COMPONENT|) :|INITARGS| '(:|KEEP-COMPONENT|)
    :|INITFORM| '|COMMON-LISP|::|T| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|T|)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"A variant of SEQUENTIAL-PLAN that only records a subset of actions."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|PLAN-COMPONENT-TYPE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|PLAN-KEEP-OPERATION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|PLAN-KEEP-COMPONENT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|INITIALIZE-INSTANCE|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|SYSTEM| :|OTHER-SYSTEMS|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|PLAN-ACTIONS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|COLLECT-ACTION-DEPENDENCIES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|COLLECT-ACTION-DEPENDENCIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
    |ASDF/COMPONENT|::|COMPONENT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|COLLECT-DEPENDENCIES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|COLLECT-DEPENDENCIES|
 '#(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|COLLECT-DEPENDENCIES|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|COLLECT-DEPENDENCIES|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|COLLECT-DEPENDENCIES|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|COLLECT-DEPENDENCIES|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|REQUIRED-COMPONENTS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|REQUIRED-COMPONENTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&REST| |ASDF/PLAN|::|KEYS|
    |COMMON-LISP|::|&KEY|
    (|ASDF/PLAN|::|GOAL-OPERATION| '|ASDF/LISP-ACTION|::|LOAD-OP|)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/PLAN|::|MAKE-PLAN|
 (|ASDF/PLAN|::|PLAN-CLASS| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (:|DOCUMENTATION|
  "Generate and return a plan for performing OPERATION on COMPONENT."))
(|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS| |ASDF/PLAN|::|MAKE-PLAN|
 (|ASDF/PLAN|::|PLAN-CLASS| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|&KEY|))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/PLAN|::|MARK-AS-DONE|
 (|ASDF/PLAN|::|PLAN-CLASS| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|)
 (:|DOCUMENTATION| "Mark an action as done in a plan, after performing it."))
(|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS| |ASDF/PLAN|::|MARK-AS-DONE|
 (|ASDF/PLAN|::|PLAN-CLASS| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/PLAN|::|PERFORM-PLAN|
 (|ASDF/PLAN|::|PLAN| |COMMON-LISP|::|&KEY|)
 (:|DOCUMENTATION| "Actually perform a plan and build the requested actions"))
(|ASDF/UPGRADE|::|DEFPARAMETER*| |ASDF/PLAN|::|*PLAN-CLASS*|
 '|ASDF/PLAN|::|SEQUENTIAL-PLAN|
 "The default plan class to use when building with ASDF")
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|MAKE-PLAN|
 (|ASDF/PLAN|::|PLAN-CLASS| (|ASDF/PLAN|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/PLAN|::|C| |ASDF/COMPONENT|::|COMPONENT|) |COMMON-LISP|::|&REST|
  |ASDF/PLAN|::|KEYS| |COMMON-LISP|::|&KEY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|ASDF/SESSION|::|WITH-ASDF-SESSION| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|LET|
   ((|ASDF/PLAN|::|PLAN|
     (|COMMON-LISP|::|APPLY| '|CLOS|::|MAKE-INSTANCE|
      (|COMMON-LISP|::|OR| |ASDF/PLAN|::|PLAN-CLASS|
       |ASDF/PLAN|::|*PLAN-CLASS*|)
      |ASDF/PLAN|::|KEYS|)))
   (|ASDF/PLAN|::|TRAVERSE-ACTION| |ASDF/PLAN|::|PLAN| |ASDF/PLAN|::|O|
    |ASDF/PLAN|::|C| |COMMON-LISP|::|T|)
   |ASDF/PLAN|::|PLAN|)))
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|PERFORM-PLAN| :|AROUND|
 ((|ASDF/PLAN|::|PLAN| |COMMON-LISP|::|T|) |COMMON-LISP|::|&KEY|)
 (|COMMON-LISP|::|ASSERT|
  (|ASDF/FORCING|::|PERFORMABLE-P|
   (|ASDF/SESSION|::|FORCING| |ASDF/PLAN|::|PLAN|))
  |COMMON-LISP|::|NIL| "plan not performable")
 (|COMMON-LISP|::|LET|
  ((|COMMON-LISP|::|*PACKAGE*| |COMMON-LISP|::|*PACKAGE*|)
   (|COMMON-LISP|::|*READTABLE*| |COMMON-LISP|::|*READTABLE*|))
  (|COMMON-LISP|::|WITH-COMPILATION-UNIT| |COMMON-LISP|::|NIL|
   (|CLOS|::|CALL-NEXT-METHOD|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PLAN|::|ACTION-ALREADY-DONE-P|
 (|ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
  |ASDF/COMPONENT|::|COMPONENT|)
 (|UIOP/UTILITY|::|IF-LET|
  (|ASDF/PLAN|::|STATUS|
   (|ASDF/PLAN|::|ACTION-STATUS| |ASDF/PLAN|::|PLAN|
    |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|))
  (|ASDF/PLAN|::|STATUS-DONE-P| |ASDF/PLAN|::|STATUS|)))
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|PERFORM-PLAN|
 ((|ASDF/PLAN|::|PLAN| |COMMON-LISP|::|T|) |COMMON-LISP|::|&KEY|)
 (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/ACTION|::|ACTION| :|IN|
  (|ASDF/PLAN|::|PLAN-ACTIONS| |ASDF/PLAN|::|PLAN|) :|AS| |ASDF/PLAN|::|O|
  |COMMON-LISP|::|=|
  (|ASDF/ACTION|::|ACTION-OPERATION| |ASDF/ACTION|::|ACTION|) :|AS|
  |ASDF/PLAN|::|C| |COMMON-LISP|::|=|
  (|ASDF/ACTION|::|ACTION-COMPONENT| |ASDF/ACTION|::|ACTION|) :|DO|
  (|COMMON-LISP|::|UNLESS|
   (|ASDF/PLAN|::|ACTION-ALREADY-DONE-P| |ASDF/PLAN|::|PLAN| |ASDF/PLAN|::|O|
    |ASDF/PLAN|::|C|)
   (|ASDF/ACTION|::|PERFORM-WITH-RESTARTS| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|)
   (|ASDF/PLAN|::|MARK-AS-DONE| |ASDF/PLAN|::|PLAN| |ASDF/PLAN|::|O|
    |ASDF/PLAN|::|C|))))
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|MARK-AS-DONE|
 ((|ASDF/PLAN|::|PLAN| |ASDF/PLAN|::|PLAN|)
  (|ASDF/PLAN|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/PLAN|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 (|COMMON-LISP|::|LET|
  ((|ASDF/PLAN|::|PLAN-STATUS|
    (|ASDF/PLAN|::|ACTION-STATUS| |ASDF/PLAN|::|PLAN| |ASDF/PLAN|::|O|
     |ASDF/PLAN|::|C|))
   (|ASDF/PLAN|::|PERFORM-STATUS|
    (|ASDF/PLAN|::|ACTION-STATUS| |COMMON-LISP|::|NIL| |ASDF/PLAN|::|O|
     |ASDF/PLAN|::|C|)))
  (|COMMON-LISP|::|ASSERT|
   (|COMMON-LISP|::|AND|
    (|ASDF/PLAN|::|STATUS-STAMP| |ASDF/PLAN|::|PERFORM-STATUS|)
    (|ASDF/PLAN|::|STATUS-KEEP-P| |ASDF/PLAN|::|PERFORM-STATUS|))
   |COMMON-LISP|::|NIL| "Just performed ~A but failed to mark it done"
   (|ASDF/ACTION|::|ACTION-DESCRIPTION| |ASDF/PLAN|::|O| |ASDF/PLAN|::|C|))
  (|COMMON-LISP|::|SETF|
   (|ASDF/PLAN|::|ACTION-STATUS| |ASDF/PLAN|::|PLAN| |ASDF/PLAN|::|O|
    |ASDF/PLAN|::|C|)
   (|ASDF/PLAN|::|MAKE-ACTION-STATUS| :|BITS|
    (|COMMON-LISP|::|LOGIOR|
     (|ASDF/PLAN|::|STATUS-BITS| |ASDF/PLAN|::|PLAN-STATUS|)
     |ASDF/PLAN|::|+DONE-BIT+|)
    :|STAMP| (|ASDF/PLAN|::|STATUS-STAMP| |ASDF/PLAN|::|PERFORM-STATUS|)
    :|LEVEL| (|ASDF/PLAN|::|STATUS-LEVEL| |ASDF/PLAN|::|PLAN-STATUS|) :|INDEX|
    (|ASDF/PLAN|::|STATUS-INDEX| |ASDF/PLAN|::|PLAN-STATUS|)))))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|MAKE-PLAN|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MAKE-PLAN|
 '#(3. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MAKE-PLAN|
 #(3. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MAKE-PLAN|
 #(3. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MAKE-PLAN|
 #(3. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|MARK-AS-DONE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MARK-AS-DONE|
 '#(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MARK-AS-DONE|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MARK-AS-DONE|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MARK-AS-DONE|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|PERFORM-PLAN|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|PERFORM-PLAN|
 '#(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|%COMPUTE-PLAN-CLASS-VALUE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/PLAN|::|*PLAN-CLASS*|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MAKE-PLAN|
 #(3. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|PERFORM-PLAN|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PLAN|::|ACTION-ALREADY-DONE-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|ACTION-ALREADY-DONE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PLAN|::|PLAN| |ASDF/OPERATION|::|OPERATION|
    |ASDF/COMPONENT|::|COMPONENT|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|PERFORM-PLAN|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|MARK-AS-DONE|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/OPERATE|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT| :|ASDF/SYSTEM| :|ASDF/SYSTEM-REGISTRY|
    :|ASDF/FIND-COMPONENT| :|ASDF/OPERATION| :|ASDF/ACTION| :|ASDF/LISP-ACTION|
    :|ASDF/FORCING| :|ASDF/PLAN|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|OPERATE| #:|OOS| #:|BUILD-OP| #:|MAKE| #:|LOAD-SYSTEM| #:|LOAD-SYSTEMS|
    #:|LOAD-SYSTEMS*| #:|COMPILE-SYSTEM| #:|TEST-SYSTEM| #:|REQUIRE-SYSTEM|
    #:|MODULE-PROVIDE-ASDF| #:|COMPONENT-LOADED-P| #:|ALREADY-LOADED-SYSTEMS|
    #:|RECURSIVE-OPERATE|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|ASDF/OPERATE| :|ASDF|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/OPERATE"))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/OPERATE|::|OPERATE|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
  |COMMON-LISP|::|&KEY|)
 (:|DOCUMENTATION|
  "Operate does mainly four things for the user:\n\n
1. Resolves the OPERATION designator into an operation object.\n
   OPERATION is typically a symbol denoting an operation class, instantiated with MAKE-OPERATION.\n
2. Resolves the COMPONENT designator into a component object.\n
   COMPONENT is typically a string or symbol naming a system, loaded from disk using FIND-SYSTEM.\n
3. It then calls MAKE-PLAN with the operation and system as arguments.\n
4. Finally calls PERFORM-PLAN on the resulting plan to actually build the system.\n\n
The entire computation is wrapped in WITH-COMPILATION-UNIT and error handling code.\n
If a VERSION argument is supplied, then operate also ensures that the system found satisfies it\n
using the VERSION-SATISFIES method.\n
If a PLAN-CLASS argument is supplied, that class is used for the plan.\n
If a PLAN-OPTIONS argument is supplied, the options are passed to the plan.\n\n
The :FORCE or :FORCE-NOT argument to OPERATE can be:\n
  T to force the inside of the specified system to be rebuilt (resp. not),\n
    without recursively forcing the other systems we depend on.\n
  :ALL to force all systems including other systems we depend on to be rebuilt (resp. not).\n
  (SYSTEM1 SYSTEM2 ... SYSTEMN) to force systems named in a given list\n
:FORCE-NOT has precedence over :FORCE; builtin systems cannot be forced.\n\n
For backward compatibility, all keyword arguments are passed to MAKE-OPERATION\n
when instantiating a new operation, that will in turn be inherited by new operations.\n
But do NOT depend on it, for this is deprecated behavior."))
(|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS| |ASDF/OPERATE|::|OPERATE|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
  |COMMON-LISP|::|&KEY|)
 :|IF-NO-COMPONENT|
 (|COMMON-LISP|::|ERROR| '|ASDF/FIND-COMPONENT|::|MISSING-COMPONENT|
  :|REQUIRES| |ASDF/COMPONENT|::|COMPONENT|))
(|CLOS|::|DEFMETHOD| |ASDF/OPERATE|::|OPERATE| :|AROUND|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
  |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|KEYS| |COMMON-LISP|::|&KEY|
  |ASDF/OPERATE|::|VERBOSE|
  (|ASDF/OPERATE|::|ON-WARNINGS|
   |UIOP/LISP-BUILD|::|*COMPILE-FILE-WARNINGS-BEHAVIOUR*|)
  (|ASDF/OPERATE|::|ON-FAILURE|
   |UIOP/LISP-BUILD|::|*COMPILE-FILE-FAILURE-BEHAVIOUR*|))
 (|UIOP/UTILITY|::|NEST|
  (|ASDF/SESSION|::|WITH-ASDF-SESSION| |COMMON-LISP|::|NIL|)
  (|COMMON-LISP|::|LET*|
   ((|ASDF/OPERATE|::|OPERATION-REMAKER|
     (|COMMON-LISP|::|ETYPECASE| |ASDF/OPERATION|::|OPERATION|
      (|ASDF/OPERATION|::|OPERATION|
       (|COMMON-LISP|::|LET|
        ((|ASDF/COMPONENT|::|NAME|
          (|COMMON-LISP|::|TYPE-OF| |ASDF/OPERATION|::|OPERATION|)))
        #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
           (|ASDF/OPERATION|::|MAKE-OPERATION| |ASDF/COMPONENT|::|NAME|))))
      ((|COMMON-LISP|::|OR| |COMMON-LISP|::|SYMBOL| |COMMON-LISP|::|STRING|)
       (|COMMON-LISP|::|CONSTANTLY| |ASDF/OPERATION|::|OPERATION|))))
    (|ASDF/OPERATE|::|COMPONENT-PATH|
     (|COMMON-LISP|::|TYPECASE| |ASDF/COMPONENT|::|COMPONENT|
      (|ASDF/COMPONENT|::|COMPONENT|
       (|ASDF/COMPONENT|::|COMPONENT-FIND-PATH| |ASDF/COMPONENT|::|COMPONENT|))
      (|COMMON-LISP|::|T| |ASDF/COMPONENT|::|COMPONENT|)))
    (|ASDF/OPERATE|::|SYSTEM-NAME|
     (|COMMON-LISP|::|LABELS|
      ((|ASDF/OPERATE|::|FIRST-NAME| (|ASDF/OPERATE|::|X|)
        (|COMMON-LISP|::|ETYPECASE| |ASDF/OPERATE|::|X|
         ((|COMMON-LISP|::|OR| |COMMON-LISP|::|STRING| |COMMON-LISP|::|SYMBOL|)
          |ASDF/OPERATE|::|X|)
         (|COMMON-LISP|::|CONS|
          (|COMMON-LISP|::|OR|
           (|ASDF/OPERATE|::|FIRST-NAME|
            (|COMMON-LISP|::|CAR| |ASDF/OPERATE|::|X|))
           (|ASDF/OPERATE|::|FIRST-NAME|
            (|COMMON-LISP|::|CDR| |ASDF/OPERATE|::|X|)))))))
      (|ASDF/SYSTEM|::|COERCE-NAME|
       (|ASDF/OPERATE|::|FIRST-NAME| |ASDF/OPERATE|::|COMPONENT-PATH|)))))
   (|COMMON-LISP|::|APPLY| '|ASDF/FORCING|::|MAKE-FORCING| :|PERFORMABLE-P|
    |COMMON-LISP|::|T| :|SYSTEM| |ASDF/OPERATE|::|SYSTEM-NAME|
    |ASDF/OPERATE|::|KEYS|)
   (|COMMON-LISP|::|UNLESS|
    (|ASDF/SESSION|::|ASDF-UPGRADED-P|
     (|ASDF/SESSION|::|TOPLEVEL-ASDF-SESSION|))
    (|COMMON-LISP|::|SETF|
     (|ASDF/SESSION|::|ASDF-UPGRADED-P|
      (|ASDF/SESSION|::|TOPLEVEL-ASDF-SESSION|))
     |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|WHEN| (|ASDF/UPGRADE|::|UPGRADE-ASDF|)
     (|COMMON-LISP|::|RETURN-FROM| |ASDF/OPERATE|::|OPERATE|
      (|ASDF/SESSION|::|WITH-ASDF-SESSION|
       (:|OVERRIDE| |COMMON-LISP|::|T| :|OVERRIDE-CACHE| |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|APPLY| '|ASDF/OPERATE|::|OPERATE|
        (|COMMON-LISP|::|FUNCALL| |ASDF/OPERATE|::|OPERATION-REMAKER|)
        |ASDF/OPERATE|::|COMPONENT-PATH| |ASDF/OPERATE|::|KEYS|))))))
  (|COMMON-LISP|::|LET*|
   ((|ASDF/UPGRADE|::|*VERBOSE-OUT*|
     (|COMMON-LISP|::|AND| |ASDF/OPERATE|::|VERBOSE|
      |COMMON-LISP|::|*STANDARD-OUTPUT*|))
    (|UIOP/LISP-BUILD|::|*COMPILE-FILE-WARNINGS-BEHAVIOUR*|
     |ASDF/OPERATE|::|ON-WARNINGS|)
    (|UIOP/LISP-BUILD|::|*COMPILE-FILE-FAILURE-BEHAVIOUR*|
     |ASDF/OPERATE|::|ON-FAILURE|)))
  (|COMMON-LISP|::|UNWIND-PROTECT|
   (|COMMON-LISP|::|PROGN|
    (|COMMON-LISP|::|INCF| (|ASDF/SESSION|::|OPERATE-LEVEL|))
    (|CLOS|::|CALL-NEXT-METHOD|))
   (|COMMON-LISP|::|DECF| (|ASDF/SESSION|::|OPERATE-LEVEL|)))))
(|CLOS|::|DEFMETHOD| |ASDF/OPERATE|::|OPERATE| :|BEFORE|
 ((|ASDF/OPERATION|::|OPERATION| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|COMPONENT|)
  |COMMON-LISP|::|&KEY| |ASDF/COMPONENT|::|VERSION|)
 (|COMMON-LISP|::|UNLESS|
  (|ASDF/COMPONENT|::|VERSION-SATISFIES| |ASDF/COMPONENT|::|COMPONENT|
   |ASDF/COMPONENT|::|VERSION|)
  (|COMMON-LISP|::|ERROR|
   '|ASDF/FIND-COMPONENT|::|MISSING-COMPONENT-OF-VERSION| :|REQUIRES|
   |ASDF/COMPONENT|::|COMPONENT| :|VERSION| |ASDF/COMPONENT|::|VERSION|))
 (|ASDF/PLAN|::|RECORD-DEPENDENCY| |COMMON-LISP|::|NIL|
  |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|))
(|CLOS|::|DEFMETHOD| |ASDF/OPERATE|::|OPERATE|
 ((|ASDF/OPERATION|::|OPERATION| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/COMPONENT|::|COMPONENT| |ASDF/COMPONENT|::|COMPONENT|)
  |COMMON-LISP|::|&KEY| |ASDF/OPERATE|::|PLAN-CLASS|
  |ASDF/OPERATE|::|PLAN-OPTIONS|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/PLAN|::|PLAN|
    (|COMMON-LISP|::|APPLY| '|ASDF/PLAN|::|MAKE-PLAN|
     |ASDF/OPERATE|::|PLAN-CLASS| |ASDF/OPERATION|::|OPERATION|
     |ASDF/COMPONENT|::|COMPONENT| :|FORCING|
     (|ASDF/SESSION|::|FORCING| |ASDF/SESSION|::|*ASDF-SESSION*|)
     |ASDF/OPERATE|::|PLAN-OPTIONS|)))
  (|ASDF/PLAN|::|PERFORM-PLAN| |ASDF/PLAN|::|PLAN|)
  (|COMMON-LISP|::|VALUES| |ASDF/OPERATION|::|OPERATION| |ASDF/PLAN|::|PLAN|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATE|::|OOS|
 (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
  |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|ARGS| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|COMMON-LISP|::|APPLY| '|ASDF/OPERATE|::|OPERATE|
  |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
  |ASDF/OPERATE|::|ARGS|))
(|COMMON-LISP|::|SETF|
 (|CLOS|::|DOCUMENTATION| '|ASDF/OPERATE|::|OOS| '|COMMON-LISP|::|FUNCTION|)
 (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
  "Short for _operate on system_ and an alias for the OPERATE function.~%~%~a"
  (|CLOS|::|DOCUMENTATION| '|ASDF/OPERATE|::|OPERATE|
   '|COMMON-LISP|::|FUNCTION|)))
(|COMMON-LISP|::|DEFINE-CONDITION| |ASDF/OPERATE|::|RECURSIVE-OPERATE|
 (|COMMON-LISP|::|WARNING|)
 ((|ASDF/OPERATION|::|OPERATION| :|INITARG| :|OPERATION| :|READER|
   |ASDF/OPERATE|::|CONDITION-OPERATION|)
  (|ASDF/COMPONENT|::|COMPONENT| :|INITARG| :|COMPONENT| :|READER|
   |ASDF/OPERATE|::|CONDITION-COMPONENT|)
  (|ASDF/ACTION|::|ACTION| :|INITARG| :|ACTION| :|READER|
   |ASDF/OPERATE|::|CONDITION-ACTION|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA| (|ASDF/OPERATE|::|C| |ASDF/OPERATE|::|S|)
   (|COMMON-LISP|::|FORMAT| |ASDF/OPERATE|::|S|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<Deprecated recursive use of (~S '~S '~S) while visiting ~S ~\n
- please use proper dependencies instead~@:>")
    '|ASDF/OPERATE|::|OPERATE|
    (|COMMON-LISP|::|TYPE-OF|
     (|ASDF/OPERATE|::|CONDITION-OPERATION| |ASDF/OPERATE|::|C|))
    (|ASDF/COMPONENT|::|COMPONENT-FIND-PATH|
     (|ASDF/OPERATE|::|CONDITION-COMPONENT| |ASDF/OPERATE|::|C|))
    (|ASDF/ACTION|::|ACTION-PATH|
     (|ASDF/OPERATE|::|CONDITION-ACTION| |ASDF/OPERATE|::|C|))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATE|::|OPERATE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|OPERATE|
 '#(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|OPERATE|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|OPERATE|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|OPERATE|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|OPERATE|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T|
   (:|VERBOSE| :|ON-WARNINGS| :|ON-FAILURE|) |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|OPERATE|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|VERSION|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|OPERATE|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|PLAN-CLASS| :|PLAN-OPTIONS|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATE|::|OOS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|OOS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
    |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|ARGS| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G32455| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/OPERATE|::|RECURSIVE-OPERATE| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|WARNING|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/OPERATION|::|OPERATION| :|READERS|
    '(|ASDF/OPERATE|::|CONDITION-OPERATION|) :|INITARGS| '(:|OPERATION|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|COMPONENT| :|READERS|
    '(|ASDF/OPERATE|::|CONDITION-COMPONENT|) :|INITARGS| '(:|COMPONENT|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|ACTION| :|READERS|
    '(|ASDF/OPERATE|::|CONDITION-ACTION|) :|INITARGS| '(:|ACTION|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|CONDITION-OPERATION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|CONDITION-COMPONENT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|CONDITION-ACTION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|WHEN|
 (|COMMON-LISP|::|AND| (|ASDF/UPGRADE|::|UPGRADING-P| "3.2.0.2"))
 (|COMMON-LISP|::|HANDLER-BIND|
  ((|COMMON-LISP|::|STYLE-WARNING| #'|COMMON-LISP|::|MUFFLE-WARNING|))
  (|COMMON-LISP|::|EVAL|
   '(|COMMON-LISP|::|PROGN|
     (|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
      ((|ASDF/OPERATE|::|O| |ASDF/LISP-ACTION|::|PREPARE-OP|)
       (|ASDF/OPERATE|::|S| |ASDF/SYSTEM|::|SYSTEM|))
      (|CLOS|::|CALL-NEXT-METHOD|))))))
(|CLOS|::|DEFCLASS| |ASDF/OPERATE|::|BUILD-OP|
 (|ASDF/ACTION|::|NON-PROPAGATING-OPERATION|) |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Since ASDF3, BUILD-OP is the recommended 'master' operation,\n
to operate by default on a system or component, via the function BUILD.\n
Its meaning is configurable via the :BUILD-OPERATION option of a component.\n
which typically specifies the name of a specific operation to which to delegate the build,\n
as a symbol or as a string later read as a symbol (after loading the defsystem-depends-on);\n
if NIL is specified (the default), BUILD-OP falls back to LOAD-OP,\n
that will load the system in the current image."))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 ((|ASDF/OPERATE|::|O| |ASDF/OPERATE|::|BUILD-OP|)
  (|ASDF/OPERATE|::|C| |ASDF/COMPONENT|::|COMPONENT|))
 `((,(|COMMON-LISP|::|OR|
      (|ASDF/COMPONENT|::|COMPONENT-BUILD-OPERATION| |ASDF/OPERATE|::|C|)
      '|ASDF/LISP-ACTION|::|LOAD-OP|)
    ,|ASDF/OPERATE|::|C|)
   ,@(|CLOS|::|CALL-NEXT-METHOD|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATE|::|MAKE|
 (|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|KEYS|)
 "The recommended way to interact with ASDF3.1 is via (ASDF:MAKE :FOO).\n
It will build system FOO using the operation BUILD-OP,\n
the meaning of which is configurable by the system, and\n
defaults to LOAD-OP, to load it in current image."
 (|COMMON-LISP|::|APPLY| '|ASDF/OPERATE|::|OPERATE| '|ASDF/OPERATE|::|BUILD-OP|
  |ASDF/SYSTEM|::|SYSTEM| |ASDF/OPERATE|::|KEYS|)
 |COMMON-LISP|::|T|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATE|::|LOAD-SYSTEM|
 (|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|KEYS|
  |COMMON-LISP|::|&KEY| |ASDF/OPERATE|::|FORCE| |ASDF/OPERATE|::|FORCE-NOT|
  |ASDF/OPERATE|::|VERBOSE| |ASDF/COMPONENT|::|VERSION|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Shorthand for `(operate 'asdf:load-op system)`. See OPERATE for details."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORE| |ASDF/OPERATE|::|FORCE| |ASDF/OPERATE|::|FORCE-NOT|
   |ASDF/OPERATE|::|VERBOSE| |ASDF/COMPONENT|::|VERSION|))
 (|COMMON-LISP|::|APPLY| '|ASDF/OPERATE|::|OPERATE|
  '|ASDF/LISP-ACTION|::|LOAD-OP| |ASDF/SYSTEM|::|SYSTEM|
  |ASDF/OPERATE|::|KEYS|)
 |COMMON-LISP|::|T|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATE|::|LOAD-SYSTEMS*|
 (|ASDF/OPERATE|::|SYSTEMS| |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|KEYS|)
 "Loading multiple systems at once."
 (|COMMON-LISP|::|DOLIST| (|ASDF/OPERATE|::|S| |ASDF/OPERATE|::|SYSTEMS|)
  (|COMMON-LISP|::|APPLY| '|ASDF/OPERATE|::|LOAD-SYSTEM| |ASDF/OPERATE|::|S|
   |ASDF/OPERATE|::|KEYS|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATE|::|LOAD-SYSTEMS|
 (|COMMON-LISP|::|&REST| |ASDF/OPERATE|::|SYSTEMS|)
 "Loading multiple systems at once."
 (|ASDF/OPERATE|::|LOAD-SYSTEMS*| |ASDF/OPERATE|::|SYSTEMS|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATE|::|COMPILE-SYSTEM|
 (|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|ARGS|
  |COMMON-LISP|::|&KEY| |ASDF/OPERATE|::|FORCE| |ASDF/OPERATE|::|FORCE-NOT|
  |ASDF/OPERATE|::|VERBOSE| |ASDF/COMPONENT|::|VERSION|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Shorthand for `(asdf:operate 'asdf:compile-op system)`. See OPERATE for details."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORE| |ASDF/OPERATE|::|FORCE| |ASDF/OPERATE|::|FORCE-NOT|
   |ASDF/OPERATE|::|VERBOSE| |ASDF/COMPONENT|::|VERSION|))
 (|COMMON-LISP|::|APPLY| '|ASDF/OPERATE|::|OPERATE|
  '|ASDF/LISP-ACTION|::|COMPILE-OP| |ASDF/SYSTEM|::|SYSTEM|
  |ASDF/OPERATE|::|ARGS|)
 |COMMON-LISP|::|T|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATE|::|TEST-SYSTEM|
 (|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|ARGS|
  |COMMON-LISP|::|&KEY| |ASDF/OPERATE|::|FORCE| |ASDF/OPERATE|::|FORCE-NOT|
  |ASDF/OPERATE|::|VERBOSE| |ASDF/COMPONENT|::|VERSION|
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 "Shorthand for `(asdf:operate 'asdf:test-op system)`. See OPERATE for details."
 (|COMMON-LISP|::|DECLARE|
  (|COMMON-LISP|::|IGNORE| |ASDF/OPERATE|::|FORCE| |ASDF/OPERATE|::|FORCE-NOT|
   |ASDF/OPERATE|::|VERBOSE| |ASDF/COMPONENT|::|VERSION|))
 (|COMMON-LISP|::|APPLY| '|ASDF/OPERATE|::|OPERATE|
  '|ASDF/LISP-ACTION|::|TEST-OP| |ASDF/SYSTEM|::|SYSTEM|
  |ASDF/OPERATE|::|ARGS|)
 |COMMON-LISP|::|T|)
(|COMMON-LISP|::|LET*| ((#1=#:|G32531| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/OPERATE|::|BUILD-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Since ASDF3, BUILD-OP is the recommended 'master' operation,\n
to operate by default on a system or component, via the function BUILD.\n
Its meaning is configurable via the :BUILD-OPERATION option of a component.\n
which typically specifies the name of a specific operation to which to delegate the build,\n
as a symbol or as a string later read as a symbol (after loading the defsystem-depends-on);\n
if NIL is specified (the default), BUILD-OP falls back to LOAD-OP,\n
that will load the system in the current image."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATE|::|MAKE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|MAKE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATE|::|LOAD-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|LOAD-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|KEYS|
    |COMMON-LISP|::|&KEY| |ASDF/OPERATE|::|FORCE| |ASDF/OPERATE|::|FORCE-NOT|
    |ASDF/OPERATE|::|VERBOSE| |ASDF/COMPONENT|::|VERSION|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATE|::|LOAD-SYSTEMS*|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|LOAD-SYSTEMS*|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OPERATE|::|SYSTEMS| |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATE|::|LOAD-SYSTEMS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|LOAD-SYSTEMS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |ASDF/OPERATE|::|SYSTEMS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATE|::|COMPILE-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|COMPILE-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|ARGS|
    |COMMON-LISP|::|&KEY| |ASDF/OPERATE|::|FORCE| |ASDF/OPERATE|::|FORCE-NOT|
    |ASDF/OPERATE|::|VERBOSE| |ASDF/COMPONENT|::|VERSION|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATE|::|TEST-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|TEST-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&REST| |ASDF/OPERATE|::|ARGS|
    |COMMON-LISP|::|&KEY| |ASDF/OPERATE|::|FORCE| |ASDF/OPERATE|::|FORCE-NOT|
    |ASDF/OPERATE|::|VERBOSE| |ASDF/COMPONENT|::|VERSION|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATE|::|COMPONENT-LOADED-P|
 (|ASDF/COMPONENT|::|COMPONENT|)
 "Has the given COMPONENT been successfully loaded in the current image (yet)?\n
Note that this returns true even if the component is not up to date."
 (|UIOP/UTILITY|::|IF-LET|
  ((|ASDF/COMPONENT|::|COMPONENT|
    (|ASDF/COMPONENT|::|FIND-COMPONENT| |ASDF/COMPONENT|::|COMPONENT|
     |COMMON-LISP|::|NIL| :|REGISTERED| |COMMON-LISP|::|T|)))
  (|COMMON-LISP|::|NTH-VALUE| 1.
   (|ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
    (|ASDF/OPERATION|::|MAKE-OPERATION| '|ASDF/LISP-ACTION|::|LOAD-OP|)
    |ASDF/COMPONENT|::|COMPONENT|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATE|::|ALREADY-LOADED-SYSTEMS|
 |COMMON-LISP|::|NIL|
 "return a list of the names of the systems that have been successfully loaded so far"
 (|COMMON-LISP|::|MAPCAR| '|ASDF/SYSTEM|::|COERCE-NAME|
  (|COMMON-LISP|::|REMOVE-IF-NOT| '|ASDF/OPERATE|::|COMPONENT-LOADED-P|
   (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEMS*|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATE|::|COMPONENT-LOADED-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|COMPONENT-LOADED-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/COMPONENT|::|COMPONENT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATE|::|ALREADY-LOADED-SYSTEMS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|ALREADY-LOADED-SYSTEMS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|DEFVAR| |ASDF/OPERATE|::|*MODULES-BEING-REQUIRED*|
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFCLASS| |ASDF/OPERATE|::|REQUIRE-SYSTEM| (|ASDF/SYSTEM|::|SYSTEM|)
 ((|ASDF/COMPONENT|::|MODULE| :|INITARG| :|MODULE| :|INITFORM|
   |COMMON-LISP|::|NIL| :|ACCESSOR| |ASDF/OPERATE|::|REQUIRED-MODULE|))
 (:|DOCUMENTATION|
  "A SYSTEM subclass whose processing is handled by\n
the implementation's REQUIRE rather than by internal ASDF mechanisms."))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/OPERATE|::|O| |ASDF/LISP-ACTION|::|COMPILE-OP|)
  (|ASDF/OPERATE|::|C| |ASDF/OPERATE|::|REQUIRE-SYSTEM|))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/OPERATE|::|O| |ASDF/LISP-ACTION|::|LOAD-OP|)
  (|ASDF/OPERATE|::|S| |ASDF/OPERATE|::|REQUIRE-SYSTEM|))
 (|COMMON-LISP|::|LET*|
  ((|ASDF/COMPONENT|::|MODULE|
    (|COMMON-LISP|::|OR|
     (|ASDF/OPERATE|::|REQUIRED-MODULE| |ASDF/OPERATE|::|S|)
     (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/OPERATE|::|S|)))
   (|ASDF/OPERATE|::|*MODULES-BEING-REQUIRED*|
    (|COMMON-LISP|::|CONS| |ASDF/COMPONENT|::|MODULE|
     |ASDF/OPERATE|::|*MODULES-BEING-REQUIRED*|)))
  (|COMMON-LISP|::|ASSERT|
   (|COMMON-LISP|::|NULL|
    (|ASDF/COMPONENT|::|COMPONENT-CHILDREN| |ASDF/OPERATE|::|S|)))
  (|COMMON-LISP|::|REQUIRE| |ASDF/COMPONENT|::|MODULE|)))
(|CLOS|::|DEFMETHOD| |ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
 (|ASDF/COMPONENT|::|COMPONENT|
  (|ASDF/OPERATE|::|COMBINATOR| (|COMMON-LISP|::|EQL| :|REQUIRE|))
  |ASDF/OPERATE|::|ARGUMENTS|)
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|AND|
   (|UIOP/UTILITY|::|LENGTH=N-P| |ASDF/OPERATE|::|ARGUMENTS| 1.)
   (|COMMON-LISP|::|TYPEP| (|COMMON-LISP|::|CAR| |ASDF/OPERATE|::|ARGUMENTS|)
    '(|COMMON-LISP|::|OR| |COMMON-LISP|::|STRING|
      (|COMMON-LISP|::|AND| |COMMON-LISP|::|SYMBOL|
       (|COMMON-LISP|::|NOT| |COMMON-LISP|::|NULL|)))))
  (|UIOP/UTILITY|::|PARAMETER-ERROR|
   (|UIOP/COMMON-LISP|::|COMPATFMT|
    "~@<In ~S, bad dependency ~S for ~S. ~S takes one argument, a string or non-null symbol~@:>")
   '|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
   (|COMMON-LISP|::|CONS| |ASDF/OPERATE|::|COMBINATOR|
    |ASDF/OPERATE|::|ARGUMENTS|)
   |ASDF/COMPONENT|::|COMPONENT| |ASDF/OPERATE|::|COMBINATOR|))
 (|COMMON-LISP|::|LET*|
  ((|ASDF/COMPONENT|::|MODULE|
    (|COMMON-LISP|::|CAR| |ASDF/OPERATE|::|ARGUMENTS|))
   (|ASDF/OPERATE|::|MODULE-NAME|
    (|COMMON-LISP|::|STRING| |ASDF/COMPONENT|::|MODULE|))
   (|ASDF/OPERATE|::|SYSTEM-NAME|
    (|COMMON-LISP|::|STRING-DOWNCASE| |ASDF/COMPONENT|::|MODULE|))
   (|ASDF/SYSTEM|::|SYSTEM|
    (|ASDF/SYSTEM|::|FIND-SYSTEM| |ASDF/OPERATE|::|SYSTEM-NAME|
     |COMMON-LISP|::|NIL|)))
  (|COMMON-LISP|::|OR| |ASDF/SYSTEM|::|SYSTEM|
   (|COMMON-LISP|::|LET|
    ((|ASDF/SYSTEM|::|SYSTEM|
      (|CLOS|::|MAKE-INSTANCE| '|ASDF/OPERATE|::|REQUIRE-SYSTEM| :|NAME|
       |ASDF/OPERATE|::|SYSTEM-NAME| :|MODULE| |ASDF/OPERATE|::|MODULE-NAME|)))
    (|ASDF/SYSTEM-REGISTRY|::|REGISTER-SYSTEM| |ASDF/SYSTEM|::|SYSTEM|)
    |ASDF/SYSTEM|::|SYSTEM|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATE|::|MODULE-PROVIDE-ASDF|
 (|ASDF/COMPONENT|::|NAME|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/OPERATE|::|MODULE-NAME|
    (|COMMON-LISP|::|STRING| |ASDF/COMPONENT|::|NAME|))
   (|ASDF/OPERATE|::|SYSTEM-NAME|
    (|COMMON-LISP|::|STRING-DOWNCASE| |ASDF/COMPONENT|::|NAME|)))
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|MEMBER| |ASDF/OPERATE|::|MODULE-NAME|
    |ASDF/OPERATE|::|*MODULES-BEING-REQUIRED*| :|TEST| '|COMMON-LISP|::|EQUAL|)
   (|COMMON-LISP|::|LET|
    ((|ASDF/OPERATE|::|*MODULES-BEING-REQUIRED*|
      (|COMMON-LISP|::|CONS| |ASDF/OPERATE|::|MODULE-NAME|
       |ASDF/OPERATE|::|*MODULES-BEING-REQUIRED*|)))
    (|COMMON-LISP|::|HANDLER-BIND|
     (((|COMMON-LISP|::|OR| |COMMON-LISP|::|STYLE-WARNING|
        |ASDF/OPERATE|::|RECURSIVE-OPERATE|)
       #'|COMMON-LISP|::|MUFFLE-WARNING|)
      (|ASDF/FIND-COMPONENT|::|MISSING-COMPONENT|
       (|COMMON-LISP|::|CONSTANTLY| |COMMON-LISP|::|NIL|))
      (|UIOP/IMAGE|::|FATAL-CONDITION|
       #'(|COMMON-LISP|::|LAMBDA| (|ASDF/OPERATE|::|E|)
          (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|*ERROR-OUTPUT*|
           (|UIOP/COMMON-LISP|::|COMPATFMT|
            "~@<ASDF could not load ~(~A~) because ~A.~@:>~%")
           |ASDF/COMPONENT|::|NAME| |ASDF/OPERATE|::|E|))))
     (|COMMON-LISP|::|LET|
      ((|ASDF/UPGRADE|::|*VERBOSE-OUT*|
        (|COMMON-LISP|::|MAKE-BROADCAST-STREAM|)))
      (|COMMON-LISP|::|LET|
       ((|ASDF/SYSTEM|::|SYSTEM|
         (|ASDF/SYSTEM|::|FIND-SYSTEM| |ASDF/OPERATE|::|SYSTEM-NAME|
          |COMMON-LISP|::|NIL|)))
       (|COMMON-LISP|::|WHEN| |ASDF/SYSTEM|::|SYSTEM|
        (|ASDF/OPERATE|::|LOAD-SYSTEM| |ASDF/SYSTEM|::|SYSTEM| :|VERBOSE|
         |COMMON-LISP|::|NIL|)
        |COMMON-LISP|::|T|))))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/OPERATE|::|*MODULES-BEING-REQUIRED*|))
(|COMMON-LISP|::|LET*| ((#1=#:|G32701| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/OPERATE|::|REQUIRE-SYSTEM| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SYSTEM|::|SYSTEM|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|MODULE| :|READERS|
    '(|ASDF/OPERATE|::|REQUIRED-MODULE|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/OPERATE|::|REQUIRED-MODULE|)) :|INITARGS|
    '(:|MODULE|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"A SYSTEM subclass whose processing is handled by\n
the implementation's REQUIRE rather than by internal ASDF mechanisms."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|REQUIRED-MODULE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/OPERATE|::|REQUIRED-MODULE|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-COMBINATION|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATE|::|MODULE-PROVIDE-ASDF|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|MODULE-PROVIDE-ASDF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/COMPONENT|::|NAME|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OPERATE|::|RESTART-UPGRADED-ASDF|
 |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|LET|
  ((|ASDF/OPERATE|::|SYSTEMS-BEING-DEFINED|
    (|COMMON-LISP|::|WHEN| |ASDF/SESSION|::|*ASDF-SESSION*|
     (|COMMON-LISP|::|PROG1|
      (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/OPERATE|::|K| :|BEING| :|THE|
       |ASDF/OPERATE|::|HASH-KEYS| :|OF| (|ASDF/SESSION|::|ASDF-CACHE|) :|WHEN|
       (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|FIRST| |ASDF/OPERATE|::|K|)
        '|ASDF/SYSTEM|::|FIND-SYSTEM|)
       :|COLLECT| (|COMMON-LISP|::|SECOND| |ASDF/OPERATE|::|K|))
      (|COMMON-LISP|::|CLRHASH| (|ASDF/SESSION|::|ASDF-CACHE|))))))
  (|ASDF/SYSTEM-REGISTRY|::|CLEAR-REGISTERED-SYSTEMS|)
  (|UIOP/CONFIGURATION|::|UPGRADE-CONFIGURATION|)
  (|COMMON-LISP|::|DOLIST|
   (|ASDF/OPERATE|::|S| |ASDF/OPERATE|::|SYSTEMS-BEING-DEFINED|)
   (|ASDF/SYSTEM|::|FIND-SYSTEM| |ASDF/OPERATE|::|S| |COMMON-LISP|::|NIL|))))
(|UIOP/UTILITY|::|REGISTER-HOOK-FUNCTION|
 '|ASDF/UPGRADE|::|*POST-UPGRADE-CLEANUP-HOOK*|
 '|ASDF/OPERATE|::|RESTART-UPGRADED-ASDF|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/OPERATE|::|RESTART-UPGRADED-ASDF|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|RESTART-UPGRADED-ASDF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|ASDF/FIND-SYSTEM| :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT| :|ASDF/SYSTEM| :|ASDF/OPERATION| :|ASDF/ACTION|
    :|ASDF/LISP-ACTION| :|ASDF/FIND-COMPONENT| :|ASDF/SYSTEM-REGISTRY|
    :|ASDF/PLAN| :|ASDF/OPERATE|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM|
  '((#:|ASDF/COMPONENT| #:|%ADDITIONAL-INPUT-FILES|)) :|EXPORT|
  '(#:|FIND-SYSTEM| #:|LOCATE-SYSTEM| #:|LOAD-ASD| #:|DEFINE-OP|
    #:|LOAD-SYSTEM-DEFINITION-ERROR| #:|ERROR-NAME| #:|ERROR-PATHNAME|
    #:|ERROR-CONDITION|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|ASDF/FIND-SYSTEM| :|ASDF|)
  :|MIX| '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/FIND-SYSTEM"))
(|COMMON-LISP|::|DEFINE-CONDITION|
 |ASDF/FIND-SYSTEM|::|LOAD-SYSTEM-DEFINITION-ERROR|
 (|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
 ((|ASDF/COMPONENT|::|NAME| :|INITARG| :|NAME| :|READER|
   |ASDF/FIND-SYSTEM|::|ERROR-NAME|)
  (|COMMON-LISP|::|PATHNAME| :|INITARG| :|PATHNAME| :|READER|
   |ASDF/FIND-SYSTEM|::|ERROR-PATHNAME|)
  (|COMMON-LISP|::|CONDITION| :|INITARG| :|CONDITION| :|READER|
   |ASDF/FIND-SYSTEM|::|ERROR-CONDITION|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA| (|ASDF/FIND-SYSTEM|::|C| |ASDF/FIND-SYSTEM|::|S|)
   (|COMMON-LISP|::|FORMAT| |ASDF/FIND-SYSTEM|::|S|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<Error while trying to load definition for system ~A from pathname ~A: ~3i~_~A~@:>")
    (|ASDF/FIND-SYSTEM|::|ERROR-NAME| |ASDF/FIND-SYSTEM|::|C|)
    (|ASDF/FIND-SYSTEM|::|ERROR-PATHNAME| |ASDF/FIND-SYSTEM|::|C|)
    (|ASDF/FIND-SYSTEM|::|ERROR-CONDITION| |ASDF/FIND-SYSTEM|::|C|)))))
(|CLOS|::|DEFMETHOD| |ASDF/SYSTEM|::|FIND-SYSTEM|
 ((|ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|NULL|) |COMMON-LISP|::|&OPTIONAL|
  (|ASDF/FIND-SYSTEM|::|ERROR-P| |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|WHEN| |ASDF/FIND-SYSTEM|::|ERROR-P|
  (|ASDF/SESSION|::|SYSDEF-ERROR|
   (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<NIL is not a valid system name~@:>"))))
(|CLOS|::|DEFMETHOD| |ASDF/SYSTEM|::|FIND-SYSTEM|
 (|ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|&OPTIONAL|
  (|ASDF/FIND-SYSTEM|::|ERROR-P| |COMMON-LISP|::|T|))
 (|ASDF/SYSTEM|::|FIND-SYSTEM|
  (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/COMPONENT|::|NAME|)
  |ASDF/FIND-SYSTEM|::|ERROR-P|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SYSTEM-REGISTRY|::|FIND-SYSTEM-IF-BEING-DEFINED|
 (|ASDF/COMPONENT|::|NAME|)
 (|COMMON-LISP|::|FIRST|
  (|COMMON-LISP|::|GETHASH|
   `(|ASDF/SYSTEM|::|FIND-SYSTEM|
     ,(|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/COMPONENT|::|NAME|))
   (|ASDF/SESSION|::|ASDF-CACHE|))))
(|CLOS|::|DEFCLASS| |ASDF/FIND-SYSTEM|::|DEFINE-OP|
 (|ASDF/ACTION|::|NON-PROPAGATING-OPERATION|) |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "An operation to record dependencies on loading a .asd file."))
(|CLOS|::|DEFMETHOD| |ASDF/PLAN|::|RECORD-DEPENDENCY|
 ((|ASDF/PLAN|::|PLAN| |COMMON-LISP|::|NULL|)
  (|ASDF/OPERATION|::|OPERATION| |COMMON-LISP|::|T|)
  (|ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|T|))
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|TYPEP| |ASDF/OPERATION|::|OPERATION|
    '|ASDF/FIND-SYSTEM|::|DEFINE-OP|)
   (|COMMON-LISP|::|AND|
    (|COMMON-LISP|::|TYPEP| |ASDF/OPERATION|::|OPERATION|
     '|ASDF/LISP-ACTION|::|LOAD-OP|)
    (|COMMON-LISP|::|TYPEP| |ASDF/COMPONENT|::|COMPONENT|
     '|ASDF/SYSTEM|::|SYSTEM|)
    (|COMMON-LISP|::|EQUAL| "asdf"
     (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/COMPONENT|::|COMPONENT|))))
  (|UIOP/UTILITY|::|IF-LET|
   ((|ASDF/ACTION|::|ACTION|
     (|COMMON-LISP|::|FIRST|
      (|ASDF/SESSION|::|VISITING-ACTION-LIST|
       |ASDF/SESSION|::|*ASDF-SESSION*|))))
   (|COMMON-LISP|::|LET|
    ((|ASDF/FIND-SYSTEM|::|PARENT-OPERATION|
      (|ASDF/ACTION|::|ACTION-OPERATION| |ASDF/ACTION|::|ACTION|))
     (|ASDF/COMPONENT|::|PARENT-COMPONENT|
      (|ASDF/ACTION|::|ACTION-COMPONENT| |ASDF/ACTION|::|ACTION|)))
    (|COMMON-LISP|::|COND|
     ((|COMMON-LISP|::|AND|
       (|COMMON-LISP|::|TYPEP| |ASDF/FIND-SYSTEM|::|PARENT-OPERATION|
        '|ASDF/FIND-SYSTEM|::|DEFINE-OP|)
       (|COMMON-LISP|::|TYPEP| |ASDF/COMPONENT|::|PARENT-COMPONENT|
        '|ASDF/SYSTEM|::|SYSTEM|))
      (|COMMON-LISP|::|LET|
       ((|ASDF/ACTION|::|ACTION|
         (|COMMON-LISP|::|CONS| |ASDF/OPERATION|::|OPERATION|
          |ASDF/COMPONENT|::|COMPONENT|)))
       (|COMMON-LISP|::|UNLESS|
        (|COMMON-LISP|::|GETHASH| |ASDF/ACTION|::|ACTION|
         (|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-SET|
          |ASDF/COMPONENT|::|PARENT-COMPONENT|))
        (|COMMON-LISP|::|PUSH|
         (|COMMON-LISP|::|CONS| |ASDF/OPERATION|::|OPERATION|
          |ASDF/COMPONENT|::|COMPONENT|)
         (|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-LIST|
          |ASDF/COMPONENT|::|PARENT-COMPONENT|))
        (|COMMON-LISP|::|SETF|
         (|COMMON-LISP|::|GETHASH| |ASDF/ACTION|::|ACTION|
          (|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-SET|
           |ASDF/COMPONENT|::|PARENT-COMPONENT|))
         |COMMON-LISP|::|T|))))
     (|COMMON-LISP|::|T|
      (|COMMON-LISP|::|WARN| '|ASDF/OPERATE|::|RECURSIVE-OPERATE| :|OPERATION|
       |ASDF/OPERATION|::|OPERATION| :|COMPONENT| |ASDF/COMPONENT|::|COMPONENT|
       :|ACTION| |ASDF/ACTION|::|ACTION|)))))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 ((|ASDF/FIND-SYSTEM|::|O| |ASDF/FIND-SYSTEM|::|DEFINE-OP|)
  (|ASDF/FIND-SYSTEM|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 `(,@(|UIOP/COMMON-LISP|::|LOOP*| :|FOR|
      (|ASDF/FIND-SYSTEM|::|O| . |ASDF/FIND-SYSTEM|::|C|) :|IN|
      (|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-LIST| |ASDF/FIND-SYSTEM|::|S|)
      :|COLLECT|
      (|COMMON-LISP|::|LIST| |ASDF/FIND-SYSTEM|::|O|
       |ASDF/FIND-SYSTEM|::|C|))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 ((|ASDF/FIND-SYSTEM|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/FIND-SYSTEM|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 `(,@(|COMMON-LISP|::|WHEN|
      (|COMMON-LISP|::|AND|
       (|COMMON-LISP|::|NOT|
        (|COMMON-LISP|::|TYPEP| |ASDF/FIND-SYSTEM|::|O|
         '|ASDF/FIND-SYSTEM|::|DEFINE-OP|))
       (|COMMON-LISP|::|OR|
        (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/FIND-SYSTEM|::|S|)
        (|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-LIST| |ASDF/FIND-SYSTEM|::|S|)))
      `((|ASDF/FIND-SYSTEM|::|DEFINE-OP|
         ,(|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME| |ASDF/FIND-SYSTEM|::|S|))))
   ,@(|CLOS|::|CALL-NEXT-METHOD|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/FIND-SYSTEM|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/FIND-SYSTEM|::|C| |ASDF/SYSTEM|::|UNDEFINED-SYSTEM|))
 (|ASDF/SESSION|::|SYSDEF-ERROR|
  "Trying to use undefined or incompletely defined system ~A"
  (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/FIND-SYSTEM|::|C|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|INPUT-FILES|
 ((|ASDF/FIND-SYSTEM|::|O| |ASDF/FIND-SYSTEM|::|DEFINE-OP|)
  (|ASDF/FIND-SYSTEM|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|UIOP/UTILITY|::|IF-LET|
  ((|ASDF/FIND-SYSTEM|::|ASD|
    (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/FIND-SYSTEM|::|S|)))
  (|COMMON-LISP|::|LIST| |ASDF/FIND-SYSTEM|::|ASD|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/FIND-SYSTEM|::|O| |ASDF/FIND-SYSTEM|::|DEFINE-OP|)
  (|ASDF/FIND-SYSTEM|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|UIOP/UTILITY|::|NEST|
  (|UIOP/UTILITY|::|IF-LET|
   ((|COMMON-LISP|::|PATHNAME|
     (|COMMON-LISP|::|FIRST|
      (|ASDF/ACTION|::|INPUT-FILES| |ASDF/FIND-SYSTEM|::|O|
       |ASDF/FIND-SYSTEM|::|S|)))))
  (|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|READTABLE| |COMMON-LISP|::|*READTABLE*|)
    (|ASDF/FIND-SYSTEM|::|PRINT-PPRINT-DISPATCH|
     |COMMON-LISP|::|*PRINT-PPRINT-DISPATCH*|)))
  (|COMMON-LISP|::|WITH-STANDARD-IO-SYNTAX|)
  (|COMMON-LISP|::|LET|
   ((|COMMON-LISP|::|*PRINT-READABLY*| |COMMON-LISP|::|NIL|)
    (|COMMON-LISP|::|*READTABLE*| |COMMON-LISP|::|READTABLE|)
    (|COMMON-LISP|::|*PRINT-PPRINT-DISPATCH*|
     |ASDF/FIND-SYSTEM|::|PRINT-PPRINT-DISPATCH|)
    (|COMMON-LISP|::|*PACKAGE*| (|COMMON-LISP|::|FIND-PACKAGE| :|ASDF-USER|))
    (|COMMON-LISP|::|*DEFAULT-PATHNAME-DEFAULTS*|
     (|UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME|
      (|UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME| |COMMON-LISP|::|PATHNAME|)))))
  (|COMMON-LISP|::|HANDLER-BIND|
   (((|COMMON-LISP|::|AND| |COMMON-LISP|::|ERROR|
      (|COMMON-LISP|::|NOT| |ASDF/FIND-COMPONENT|::|MISSING-COMPONENT|))
     #'(|COMMON-LISP|::|LAMBDA| (|COMMON-LISP|::|CONDITION|)
        (|COMMON-LISP|::|ERROR|
         '|ASDF/FIND-SYSTEM|::|LOAD-SYSTEM-DEFINITION-ERROR| :|NAME|
         (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/FIND-SYSTEM|::|S|) :|PATHNAME|
         |COMMON-LISP|::|PATHNAME| :|CONDITION| |COMMON-LISP|::|CONDITION|))))
   (|ASDF/UPGRADE|::|ASDF-MESSAGE|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~&~@<; ~@;Loading system definition~@[ for ~A~] from ~A~@:>~%")
    (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/FIND-SYSTEM|::|S|)
    |COMMON-LISP|::|PATHNAME|)
   (|ASDF/SESSION|::|UNSET-ASDF-CACHE-ENTRY|
    `(|ASDF/ACTION|::|COMPONENT-DEPENDS-ON| ,|ASDF/FIND-SYSTEM|::|O|
      ,|ASDF/FIND-SYSTEM|::|S|))
   (|ASDF/SESSION|::|UNSET-ASDF-CACHE-ENTRY|
    `(|ASDF/ACTION|::|INPUT-FILES| ,|ASDF/FIND-SYSTEM|::|O|
      ,|ASDF/FIND-SYSTEM|::|S|)))
  (|UIOP/LISP-BUILD|::|LOAD*| |COMMON-LISP|::|PATHNAME| :|EXTERNAL-FORMAT|
   (|UIOP/STREAM|::|ENCODING-EXTERNAL-FORMAT|
    (|UIOP/STREAM|::|DETECT-ENCODING| |COMMON-LISP|::|PATHNAME|)))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/FIND-SYSTEM|::|LOAD-ASD|
 (|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|&KEY| |ASDF/COMPONENT|::|NAME|)
 "Load system definitions from PATHNAME.\n
NAME if supplied is the name of a system expected to be defined in that file.\n\n
Do NOT try to load a .asd file directly with CL:LOAD. Always use ASDF:LOAD-ASD."
 (|ASDF/SESSION|::|WITH-ASDF-SESSION| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|FLET|
   ((|ASDF/FIND-SYSTEM|::|DO-IT|
     (|ASDF/FIND-SYSTEM|::|O| |ASDF/FIND-SYSTEM|::|C|)
     (|ASDF/OPERATE|::|OPERATE| |ASDF/FIND-SYSTEM|::|O|
      |ASDF/FIND-SYSTEM|::|C|)))
   (|COMMON-LISP|::|LET|
    ((|ASDF/FIND-SYSTEM|::|PRIMARY-NAME|
      (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME|
       (|COMMON-LISP|::|OR| |ASDF/COMPONENT|::|NAME|
        (|COMMON-LISP|::|PATHNAME-NAME| |COMMON-LISP|::|PATHNAME|))))
     (|ASDF/OPERATION|::|OPERATION|
      (|ASDF/OPERATION|::|MAKE-OPERATION| '|ASDF/FIND-SYSTEM|::|DEFINE-OP|)))
    (|UIOP/UTILITY|::|IF-LET|
     (|ASDF/SYSTEM|::|SYSTEM|
      (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM|
       |ASDF/FIND-SYSTEM|::|PRIMARY-NAME|))
     (|COMMON-LISP|::|PROGN|
      (|COMMON-LISP|::|SETF|
       (|ASDF/ACTION|::|COMPONENT-OPERATION-TIME| |ASDF/OPERATION|::|OPERATION|
        |ASDF/SYSTEM|::|SYSTEM|)
       |COMMON-LISP|::|T|
       (|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-LIST| |ASDF/SYSTEM|::|SYSTEM|)
       |COMMON-LISP|::|NIL|
       (|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-SET| |ASDF/SYSTEM|::|SYSTEM|)
       (|UIOP/UTILITY|::|LIST-TO-HASH-SET| |COMMON-LISP|::|NIL|))
      (|ASDF/FIND-SYSTEM|::|DO-IT| |ASDF/OPERATION|::|OPERATION|
       |ASDF/SYSTEM|::|SYSTEM|))
     (|COMMON-LISP|::|LET|
      ((|ASDF/SYSTEM|::|SYSTEM|
        (|CLOS|::|MAKE-INSTANCE| '|ASDF/SYSTEM|::|UNDEFINED-SYSTEM| :|NAME|
         |ASDF/FIND-SYSTEM|::|PRIMARY-NAME| :|SOURCE-FILE|
         |COMMON-LISP|::|PATHNAME|)))
      (|ASDF/SYSTEM-REGISTRY|::|REGISTER-SYSTEM| |ASDF/SYSTEM|::|SYSTEM|)
      (|COMMON-LISP|::|UNWIND-PROTECT|
       (|ASDF/FIND-SYSTEM|::|DO-IT| |ASDF/OPERATION|::|OPERATION|
        |ASDF/SYSTEM|::|SYSTEM|)
       (|COMMON-LISP|::|WHEN|
        (|COMMON-LISP|::|TYPEP| |ASDF/SYSTEM|::|SYSTEM|
         '|ASDF/SYSTEM|::|UNDEFINED-SYSTEM|)
        (|ASDF/SYSTEM-REGISTRY|::|CLEAR-SYSTEM|
         |ASDF/SYSTEM|::|SYSTEM|)))))))))
(|COMMON-LISP|::|DEFVAR| |ASDF/FIND-SYSTEM|::|*OLD-ASDF-SYSTEMS*|
 (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/FIND-SYSTEM|::|CHECK-NOT-OLD-ASDF-SYSTEM|
 (|ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|PATHNAME|)
 (|COMMON-LISP|::|OR|
  (|COMMON-LISP|::|NOT|
   (|COMMON-LISP|::|MEMBER| |ASDF/COMPONENT|::|NAME| '("asdf" "uiop") :|TEST|
    '|COMMON-LISP|::|EQUAL|))
  (|COMMON-LISP|::|NULL| |COMMON-LISP|::|PATHNAME|)
  (|COMMON-LISP|::|LET*|
   ((|ASDF/FIND-SYSTEM|::|ASDFP|
     (|COMMON-LISP|::|EQUAL| |ASDF/COMPONENT|::|NAME| "asdf"))
    (|ASDF/FIND-SYSTEM|::|VERSION-PATHNAME|
     (|UIOP/PATHNAME|::|SUBPATHNAME| |COMMON-LISP|::|PATHNAME| "version"
      :|TYPE|
      (|COMMON-LISP|::|IF| |ASDF/FIND-SYSTEM|::|ASDFP| "lisp-expr" "lisp")))
    (|ASDF/COMPONENT|::|VERSION|
     (|COMMON-LISP|::|AND|
      (|UIOP/FILESYSTEM|::|PROBE-FILE*| |ASDF/FIND-SYSTEM|::|VERSION-PATHNAME|
       :|TRUENAME| |COMMON-LISP|::|NIL|)
      (|UIOP/STREAM|::|READ-FILE-FORM| |ASDF/FIND-SYSTEM|::|VERSION-PATHNAME|
       :|AT|
       (|COMMON-LISP|::|IF| |ASDF/FIND-SYSTEM|::|ASDFP| '(0.) '(2. 2. 2.)))))
    (|ASDF/FIND-SYSTEM|::|OLD-VERSION| (|ASDF/UPGRADE|::|ASDF-VERSION|)))
   (|COMMON-LISP|::|COND|
    ((|COMMON-LISP|::|AND|
      (|COMMON-LISP|::|EQUAL| |ASDF/FIND-SYSTEM|::|OLD-VERSION|
       |ASDF/COMPONENT|::|VERSION|)
      (|COMMON-LISP|::|EQUAL| |ASDF/COMPONENT|::|NAME| "uiop"))
     |COMMON-LISP|::|NIL|)
    ((|UIOP/VERSION|::|VERSION<=| |ASDF/FIND-SYSTEM|::|OLD-VERSION|
      |ASDF/COMPONENT|::|VERSION|)
     |COMMON-LISP|::|T|)
    (|COMMON-LISP|::|T|
     (|UIOP/UTILITY|::|ENSURE-GETHASH|
      (|COMMON-LISP|::|LIST|
       (|COMMON-LISP|::|NAMESTRING| |COMMON-LISP|::|PATHNAME|)
       |ASDF/COMPONENT|::|VERSION|)
      |ASDF/FIND-SYSTEM|::|*OLD-ASDF-SYSTEMS*|
      #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
         (|COMMON-LISP|::|LET|
          ((|ASDF/FIND-SYSTEM|::|OLD-PATHNAME|
            (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
             (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM| "asdf"))))
          (|COMMON-LISP|::|IF| |ASDF/FIND-SYSTEM|::|ASDFP|
           (|COMMON-LISP|::|WARN|
            "~@<~\n
        You are using ASDF version ~A ~:[(probably from (require \"asdf\") ~\n
        or loaded by quicklisp)~;from ~:*~S~] and have an older version of ASDF ~\n
        ~:[(and older than 2.27 at that)~;~:*~A~] registered at ~S. ~\n
        Having an ASDF installed and registered is the normal way of configuring ASDF to upgrade itself, ~\n
        and having an old version registered is a configuration error. ~\n
        ASDF will ignore this configured system rather than downgrade itself. ~\n
        In the future, you may want to either: ~\n
        (a) upgrade this configured ASDF to a newer version, ~\n
        (b) install a newer ASDF and register it in front of the former in your configuration, or ~\n
        (c) uninstall or unregister this and any other old version of ASDF from your configuration. ~\n
        Note that the older ASDF might be registered implicitly through configuration inherited ~\n
        from your system installation, in which case you might have to specify ~\n
        :ignore-inherited-configuration in your in your ~~/.config/common-lisp/source-registry.conf ~\n
        or other source-registry configuration file, environment variable or lisp parameter. ~\n
        Indeed, a likely offender is an obsolete version of the cl-asdf debian or ubuntu package, ~\n
        that you might want to upgrade (if a recent enough version is available) ~\n
        or else remove altogether (since most implementations ship with a recent asdf); ~\n
        if you lack the system administration rights to upgrade or remove this package, ~\n
        then you might indeed want to either install and register a more recent version, ~\n
        or use :ignore-inherited-configuration to avoid registering the old one. ~\n
        Please consult ASDF documentation and/or experts.~@:>~%"
            |ASDF/FIND-SYSTEM|::|OLD-VERSION|
            |ASDF/FIND-SYSTEM|::|OLD-PATHNAME| |ASDF/COMPONENT|::|VERSION|
            |COMMON-LISP|::|PATHNAME|)
           (|COMMON-LISP|::|WARN| "ASDF ~A (from ~A), UIOP ~A (from ~A)"
            |ASDF/FIND-SYSTEM|::|OLD-VERSION|
            |ASDF/FIND-SYSTEM|::|OLD-PATHNAME| |ASDF/COMPONENT|::|VERSION|
            |COMMON-LISP|::|PATHNAME|)))))
     |COMMON-LISP|::|NIL|)))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/FIND-SYSTEM|::|LOCATE-SYSTEM|
 (|ASDF/COMPONENT|::|NAME|)
 "Given a system NAME designator, try to locate where to load the system from.\n
Returns six values: FOUNDP FOUND-SYSTEM PATHNAME PREVIOUS PREVIOUS-TIME PREVIOUS-PRIMARY\n
FOUNDP is true when a system was found,\n
either a new unregistered one or a previously registered one.\n
FOUND-SYSTEM when not null is a SYSTEM object that may be REGISTER-SYSTEM'ed.\n
PATHNAME when not null is a path from which to load the system,\n
either associated with FOUND-SYSTEM, or with the PREVIOUS system.\n
PREVIOUS when not null is a previously loaded SYSTEM object of same name.\n
PREVIOUS-TIME when not null is the time at which the PREVIOUS system was loaded.\n
PREVIOUS-PRIMARY when not null is the primary system for the PREVIOUS system."
 (|ASDF/SESSION|::|WITH-ASDF-SESSION| |COMMON-LISP|::|NIL|
  (|COMMON-LISP|::|LET*|
   ((|ASDF/COMPONENT|::|NAME|
     (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/COMPONENT|::|NAME|))
    (|ASDF/FIND-SYSTEM|::|PREVIOUS|
     (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM| |ASDF/COMPONENT|::|NAME|))
    (|ASDF/FIND-SYSTEM|::|PREVIOUS-PRIMARY-NAME|
     (|COMMON-LISP|::|AND| |ASDF/FIND-SYSTEM|::|PREVIOUS|
      (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME| |ASDF/FIND-SYSTEM|::|PREVIOUS|)))
    (|ASDF/FIND-SYSTEM|::|PREVIOUS-PRIMARY-SYSTEM|
     (|COMMON-LISP|::|AND| |ASDF/FIND-SYSTEM|::|PREVIOUS-PRIMARY-NAME|
      (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM|
       |ASDF/FIND-SYSTEM|::|PREVIOUS-PRIMARY-NAME|)))
    (|ASDF/FIND-SYSTEM|::|PREVIOUS-TIME|
     (|COMMON-LISP|::|AND| |ASDF/FIND-SYSTEM|::|PREVIOUS-PRIMARY-SYSTEM|
      (|ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
       '|ASDF/FIND-SYSTEM|::|DEFINE-OP|
       |ASDF/FIND-SYSTEM|::|PREVIOUS-PRIMARY-SYSTEM|)))
    (|ASDF/FIND-SYSTEM|::|FOUND|
     (|ASDF/SYSTEM-REGISTRY|::|SEARCH-FOR-SYSTEM-DEFINITION|
      |ASDF/COMPONENT|::|NAME|))
    (|ASDF/FIND-SYSTEM|::|FOUND-SYSTEM|
     (|COMMON-LISP|::|AND|
      (|COMMON-LISP|::|TYPEP| |ASDF/FIND-SYSTEM|::|FOUND|
       '|ASDF/SYSTEM|::|SYSTEM|)
      |ASDF/FIND-SYSTEM|::|FOUND|))
    (|COMMON-LISP|::|PATHNAME|
     (|UIOP/PATHNAME|::|ENSURE-PATHNAME|
      (|COMMON-LISP|::|OR|
       (|COMMON-LISP|::|AND|
        (|COMMON-LISP|::|TYPEP| |ASDF/FIND-SYSTEM|::|FOUND|
         '(|COMMON-LISP|::|OR| |COMMON-LISP|::|PATHNAME|
           |COMMON-LISP|::|STRING|))
        (|COMMON-LISP|::|PATHNAME| |ASDF/FIND-SYSTEM|::|FOUND|))
       (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/FIND-SYSTEM|::|FOUND-SYSTEM|)
       (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/FIND-SYSTEM|::|PREVIOUS|))
      :|WANT-ABSOLUTE| |COMMON-LISP|::|T| :|RESOLVE-SYMLINKS|
      |UIOP/FILESYSTEM|::|*RESOLVE-SYMLINKS*|))
    (|ASDF/FIND-SYSTEM|::|FOUNDP|
     (|COMMON-LISP|::|AND|
      (|COMMON-LISP|::|OR| |ASDF/FIND-SYSTEM|::|FOUND-SYSTEM|
       |COMMON-LISP|::|PATHNAME| |ASDF/FIND-SYSTEM|::|PREVIOUS|)
      |COMMON-LISP|::|T|)))
   (|COMMON-LISP|::|CHECK-TYPE| |ASDF/FIND-SYSTEM|::|FOUND|
    (|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|PATHNAME|
     |ASDF/SYSTEM|::|SYSTEM|))
   (|COMMON-LISP|::|UNLESS|
    (|ASDF/FIND-SYSTEM|::|CHECK-NOT-OLD-ASDF-SYSTEM| |ASDF/COMPONENT|::|NAME|
     |COMMON-LISP|::|PATHNAME|)
    (|COMMON-LISP|::|CHECK-TYPE| |ASDF/FIND-SYSTEM|::|PREVIOUS|
     |ASDF/SYSTEM|::|SYSTEM|)
    (|COMMON-LISP|::|SETF| |ASDF/FIND-SYSTEM|::|FOUND-SYSTEM|
     |COMMON-LISP|::|NIL| |COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|VALUES| |ASDF/FIND-SYSTEM|::|FOUNDP|
    |ASDF/FIND-SYSTEM|::|FOUND-SYSTEM| |COMMON-LISP|::|PATHNAME|
    |ASDF/FIND-SYSTEM|::|PREVIOUS| |ASDF/FIND-SYSTEM|::|PREVIOUS-TIME|
    |ASDF/FIND-SYSTEM|::|PREVIOUS-PRIMARY-SYSTEM|))))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/FIND-SYSTEM|::|DEFINITION-DEPENDENCIES-UP-TO-DATE-P|
 (|ASDF/SYSTEM|::|SYSTEM|)
 (|COMMON-LISP|::|CHECK-TYPE| |ASDF/SYSTEM|::|SYSTEM| |ASDF/SYSTEM|::|SYSTEM|)
 (|COMMON-LISP|::|OR|
  (|COMMON-LISP|::|NOT|
   (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-P| |ASDF/SYSTEM|::|SYSTEM|))
  (|COMMON-LISP|::|HANDLER-CASE|
   (|COMMON-LISP|::|LOOP| :|WITH| |ASDF/PLAN|::|PLAN| |COMMON-LISP|::|=|
    (|CLOS|::|MAKE-INSTANCE| |ASDF/PLAN|::|*PLAN-CLASS*|) :|FOR|
    |ASDF/ACTION|::|ACTION| :|IN|
    (|ASDF/SYSTEM|::|DEFINITION-DEPENDENCY-LIST| |ASDF/SYSTEM|::|SYSTEM|)
    :|ALWAYS|
    (|ASDF/PLAN|::|ACTION-UP-TO-DATE-P| |ASDF/PLAN|::|PLAN|
     (|ASDF/ACTION|::|ACTION-OPERATION| |ASDF/ACTION|::|ACTION|)
     (|ASDF/ACTION|::|ACTION-COMPONENT| |ASDF/ACTION|::|ACTION|))
    :|FINALLY|
    (|COMMON-LISP|::|LET|
     ((|ASDF/FIND-SYSTEM|::|O|
       (|ASDF/OPERATION|::|MAKE-OPERATION| '|ASDF/FIND-SYSTEM|::|DEFINE-OP|)))
     (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
      (|ASDF/FIND-SYSTEM|::|STAMP| |ASDF/FIND-SYSTEM|::|DONE-P|)
      (|ASDF/ACTION|::|COMPUTE-ACTION-STAMP| |ASDF/PLAN|::|PLAN|
       |ASDF/FIND-SYSTEM|::|O| |ASDF/SYSTEM|::|SYSTEM|)
      (|COMMON-LISP|::|RETURN|
       (|COMMON-LISP|::|AND|
        (|UIOP/UTILITY|::|TIMESTAMP<=| |ASDF/FIND-SYSTEM|::|STAMP|
         (|ASDF/ACTION|::|COMPONENT-OPERATION-TIME| |ASDF/FIND-SYSTEM|::|O|
          |ASDF/SYSTEM|::|SYSTEM|))
        |ASDF/FIND-SYSTEM|::|DONE-P|)))))
   (|ASDF/PLAN|::|SYSTEM-OUT-OF-DATE| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|))))
(|CLOS|::|DEFMETHOD| |ASDF/SYSTEM|::|FIND-SYSTEM|
 ((|ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|STRING|) |COMMON-LISP|::|&OPTIONAL|
  (|ASDF/FIND-SYSTEM|::|ERROR-P| |COMMON-LISP|::|T|))
 (|UIOP/UTILITY|::|NEST|
  (|ASDF/SESSION|::|WITH-ASDF-SESSION|
   (:|KEY| `(|ASDF/SYSTEM|::|FIND-SYSTEM| ,|ASDF/COMPONENT|::|NAME|)))
  (|COMMON-LISP|::|LET|
   ((|ASDF/FIND-SYSTEM|::|NAME-PRIMARY-P|
     (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-P| |ASDF/COMPONENT|::|NAME|)))
   (|COMMON-LISP|::|UNLESS| |ASDF/FIND-SYSTEM|::|NAME-PRIMARY-P|
    (|ASDF/SYSTEM|::|FIND-SYSTEM|
     (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME| |ASDF/COMPONENT|::|NAME|)
     |COMMON-LISP|::|NIL|)))
  (|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|AND| |ASDF/SYSTEM-REGISTRY|::|*IMMUTABLE-SYSTEMS*|
    (|COMMON-LISP|::|GETHASH| |ASDF/COMPONENT|::|NAME|
     |ASDF/SYSTEM-REGISTRY|::|*IMMUTABLE-SYSTEMS*|)
    (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM| |ASDF/COMPONENT|::|NAME|)))
  (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
   (|ASDF/FIND-SYSTEM|::|FOUNDP| |ASDF/FIND-SYSTEM|::|FOUND-SYSTEM|
    |COMMON-LISP|::|PATHNAME| |ASDF/FIND-SYSTEM|::|PREVIOUS|
    |ASDF/FIND-SYSTEM|::|PREVIOUS-TIME| |ASDF/FIND-SYSTEM|::|PREVIOUS-PRIMARY|)
   (|ASDF/FIND-SYSTEM|::|LOCATE-SYSTEM| |ASDF/COMPONENT|::|NAME|)
   (|COMMON-LISP|::|ASSERT|
    (|COMMON-LISP|::|EQ| |ASDF/FIND-SYSTEM|::|FOUNDP|
     (|COMMON-LISP|::|AND|
      (|COMMON-LISP|::|OR| |ASDF/FIND-SYSTEM|::|FOUND-SYSTEM|
       |COMMON-LISP|::|PATHNAME| |ASDF/FIND-SYSTEM|::|PREVIOUS|)
      |COMMON-LISP|::|T|))))
  (|COMMON-LISP|::|LET|
   ((|ASDF/FIND-SYSTEM|::|PREVIOUS-PATHNAME|
     (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/FIND-SYSTEM|::|PREVIOUS|))
    (|ASDF/SYSTEM|::|SYSTEM|
     (|COMMON-LISP|::|OR| |ASDF/FIND-SYSTEM|::|PREVIOUS|
      |ASDF/FIND-SYSTEM|::|FOUND-SYSTEM|)))
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|AND| |ASDF/FIND-SYSTEM|::|FOUND-SYSTEM|
     (|COMMON-LISP|::|NOT| |ASDF/FIND-SYSTEM|::|PREVIOUS|))
    (|ASDF/SYSTEM-REGISTRY|::|REGISTER-SYSTEM|
     |ASDF/FIND-SYSTEM|::|FOUND-SYSTEM|))
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|AND| |ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|PATHNAME|)
    (|COMMON-LISP|::|SETF|
     (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/SYSTEM|::|SYSTEM|)
     |COMMON-LISP|::|PATHNAME|))
   (|UIOP/UTILITY|::|IF-LET|
    ((|ASDF/FIND-SYSTEM|::|STAMP|
      (|ASDF/SESSION|::|GET-FILE-STAMP| |COMMON-LISP|::|PATHNAME|)))
    (|COMMON-LISP|::|LET|
     ((|ASDF/FIND-SYSTEM|::|UP-TO-DATE-P|
       (|COMMON-LISP|::|AND| |ASDF/FIND-SYSTEM|::|PREVIOUS|
        |ASDF/FIND-SYSTEM|::|PREVIOUS-PRIMARY|
        (|COMMON-LISP|::|OR|
         (|UIOP/PATHNAME|::|PATHNAME-EQUAL| |COMMON-LISP|::|PATHNAME|
          |ASDF/FIND-SYSTEM|::|PREVIOUS-PATHNAME|)
         (|COMMON-LISP|::|AND| |COMMON-LISP|::|PATHNAME|
          |ASDF/FIND-SYSTEM|::|PREVIOUS-PATHNAME|
          (|UIOP/PATHNAME|::|PATHNAME-EQUAL|
           (|UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME| |COMMON-LISP|::|PATHNAME|)
           (|UIOP/PATHNAME|::|PHYSICALIZE-PATHNAME|
            |ASDF/FIND-SYSTEM|::|PREVIOUS-PATHNAME|))))
        (|UIOP/UTILITY|::|TIMESTAMP<=| |ASDF/FIND-SYSTEM|::|STAMP|
         |ASDF/FIND-SYSTEM|::|PREVIOUS-TIME|)
        (|ASDF/FIND-SYSTEM|::|DEFINITION-DEPENDENCIES-UP-TO-DATE-P|
         |ASDF/FIND-SYSTEM|::|PREVIOUS-PRIMARY|))))
     (|COMMON-LISP|::|UNLESS| |ASDF/FIND-SYSTEM|::|UP-TO-DATE-P|
      (|COMMON-LISP|::|RESTART-CASE|
       (|COMMON-LISP|::|SIGNAL| '|ASDF/PLAN|::|SYSTEM-OUT-OF-DATE| :|NAME|
        |ASDF/COMPONENT|::|NAME|)
       (|COMMON-LISP|::|CONTINUE| |COMMON-LISP|::|NIL| :|REPORT| "continue"))
      (|ASDF/FIND-SYSTEM|::|LOAD-ASD| |COMMON-LISP|::|PATHNAME| :|NAME|
       |ASDF/COMPONENT|::|NAME|)))))
  (|COMMON-LISP|::|OR|
   (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM| |ASDF/COMPONENT|::|NAME|)
   (|COMMON-LISP|::|WHEN| |ASDF/FIND-SYSTEM|::|ERROR-P|
    (|COMMON-LISP|::|ERROR| '|ASDF/FIND-COMPONENT|::|MISSING-COMPONENT|
     :|REQUIRES| |ASDF/COMPONENT|::|NAME|)))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SYSTEM-REGISTRY|::|MARK-COMPONENT-PRELOADED|
 (|ASDF/COMPONENT|::|COMPONENT|) "Mark a component as preloaded."
 (|COMMON-LISP|::|LET|
  ((|ASDF/COMPONENT|::|COMPONENT|
    (|ASDF/COMPONENT|::|FIND-COMPONENT| |ASDF/COMPONENT|::|COMPONENT|
     |COMMON-LISP|::|NIL| :|REGISTERED| |COMMON-LISP|::|T|)))
  (|COMMON-LISP|::|MAP| |COMMON-LISP|::|NIL|
   '|ASDF/SYSTEM-REGISTRY|::|MARK-COMPONENT-PRELOADED|
   (|ASDF/COMPONENT|::|COMPONENT-CHILDREN| |ASDF/COMPONENT|::|COMPONENT|))
  (|COMMON-LISP|::|LET|
   ((|ASDF/FIND-SYSTEM|::|COT|
     (|ASDF/COMPONENT|::|COMPONENT-OPERATION-TIMES|
      |ASDF/COMPONENT|::|COMPONENT|)))
   (|COMMON-LISP|::|DOLIST|
    (|ASDF/FIND-SYSTEM|::|O|
     `(,@(|COMMON-LISP|::|WHEN|
          (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-P| |ASDF/COMPONENT|::|COMPONENT|)
          '(|ASDF/FIND-SYSTEM|::|DEFINE-OP|))
       |ASDF/LISP-ACTION|::|PREPARE-OP| |ASDF/LISP-ACTION|::|COMPILE-OP|
       |ASDF/LISP-ACTION|::|LOAD-OP|))
    (|COMMON-LISP|::|SETF|
     (|COMMON-LISP|::|GETHASH|
      (|ASDF/OPERATION|::|MAKE-OPERATION| |ASDF/FIND-SYSTEM|::|O|)
      |ASDF/FIND-SYSTEM|::|COT|)
     0.)))))
(|COMMON-LISP|::|LET*| ((#1=#:|G33010| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/FIND-SYSTEM|::|LOAD-SYSTEM-DEFINITION-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|NAME| :|READERS|
    '(|ASDF/FIND-SYSTEM|::|ERROR-NAME|) :|INITARGS| '(:|NAME|))
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|PATHNAME| :|READERS|
    '(|ASDF/FIND-SYSTEM|::|ERROR-PATHNAME|) :|INITARGS| '(:|PATHNAME|))
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|CONDITION| :|READERS|
    '(|ASDF/FIND-SYSTEM|::|ERROR-CONDITION|) :|INITARGS| '(:|CONDITION|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-SYSTEM|::|ERROR-NAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-SYSTEM|::|ERROR-PATHNAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-SYSTEM|::|ERROR-CONDITION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|FIND-SYSTEM|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|FIND-SYSTEM|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SYSTEM-REGISTRY|::|FIND-SYSTEM-IF-BEING-DEFINED|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|FIND-SYSTEM-IF-BEING-DEFINED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/COMPONENT|::|NAME|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G33120| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/FIND-SYSTEM|::|DEFINE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"An operation to record dependencies on loading a .asd file."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/PLAN|::|RECORD-DEPENDENCY|
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/FIND-SYSTEM|::|LOAD-ASD|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-SYSTEM|::|LOAD-ASD|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|&KEY| |ASDF/COMPONENT|::|NAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/FIND-SYSTEM|::|*OLD-ASDF-SYSTEMS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/FIND-SYSTEM|::|CHECK-NOT-OLD-ASDF-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-SYSTEM|::|CHECK-NOT-OLD-ASDF-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|PATHNAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/FIND-SYSTEM|::|LOCATE-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/FIND-SYSTEM|::|LOCATE-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/COMPONENT|::|NAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/FIND-SYSTEM|::|DEFINITION-DEPENDENCIES-UP-TO-DATE-P|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/FIND-SYSTEM|::|DEFINITION-DEPENDENCIES-UP-TO-DATE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM|::|SYSTEM|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|FIND-SYSTEM|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SYSTEM-REGISTRY|::|MARK-COMPONENT-PRELOADED|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|MARK-COMPONENT-PRELOADED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/COMPONENT|::|COMPONENT|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|ASDF/PARSE-DEFSYSTEM| :|NICKNAMES| '(:|ASDF/DEFSYSTEM|) :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|ASDF/DRIVER| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT| :|ASDF/SYSTEM| :|ASDF/SYSTEM-REGISTRY|
    :|ASDF/FIND-COMPONENT| :|ASDF/ACTION| :|ASDF/LISP-ACTION| :|ASDF/OPERATE|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM|
  '((:|ASDF/SYSTEM| #:|DEPENDS-ON| #:|WEAKLY-DEPENDS-ON|)
    (:|ASDF/OPERATION| #:|MAKE-OPERATION|)
    (:|ASDF/COMPONENT| #:|%ADDITIONAL-INPUT-FILES|)
    (:|ASDF/FIND-SYSTEM| #:|DEFINE-OP|))
  :|EXPORT|
  '(#:|DEFSYSTEM| #:|REGISTER-SYSTEM-DEFINITION| #:|CLASS-FOR-TYPE|
    #:|*DEFAULT-COMPONENT-CLASS*| #:|DETERMINE-SYSTEM-DIRECTORY|
    #:|PARSE-COMPONENT-FORM| #:|NON-TOPLEVEL-SYSTEM| #:|NON-SYSTEM-SYSTEM|
    #:|BAD-SYSTEM-NAME| #:|SYSDEF-ERROR-COMPONENT| #:|CHECK-COMPONENT-INPUT|
    #:|EXPLAIN|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/PARSE-DEFSYSTEM| :|ASDF/DEFSYSTEM| :|ASDF|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/PARSE-DEFSYSTEM"))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PARSE-DEFSYSTEM|::|DETERMINE-SYSTEM-DIRECTORY|
 (|COMMON-LISP|::|PATHNAME|)
 (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|PATHNAME|
  (|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|STRING|
   |COMMON-LISP|::|PATHNAME|))
 (|UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME|
  (|UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS*|
   (|UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME|
    (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING| |COMMON-LISP|::|PATHNAME| :|TYPE|
     :|DIRECTORY|)
    #'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
       (|UIOP/PATHNAME|::|ENSURE-ABSOLUTE-PATHNAME|
        (|UIOP/LISP-BUILD|::|LOAD-PATHNAME|)
        '|UIOP/FILESYSTEM|::|GET-PATHNAME-DEFAULTS| |COMMON-LISP|::|NIL|))
    |COMMON-LISP|::|NIL|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PARSE-DEFSYSTEM|::|DETERMINE-SYSTEM-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|DETERMINE-SYSTEM-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PATHNAME|)))
(|COMMON-LISP|::|DEFVAR| |ASDF/PARSE-DEFSYSTEM|::|*DEFAULT-COMPONENT-CLASS*|
 '|ASDF/LISP-ACTION|::|CL-SOURCE-FILE|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PARSE-DEFSYSTEM|::|CLASS-FOR-TYPE|
 (|ASDF/COMPONENT|::|PARENT| |COMMON-LISP|::|TYPE|)
 (|COMMON-LISP|::|OR|
  (|UIOP/UTILITY|::|COERCE-CLASS| |COMMON-LISP|::|TYPE| :|PACKAGE|
   :|ASDF/INTERFACE| :|SUPER| '|ASDF/COMPONENT|::|COMPONENT| :|ERROR|
   |COMMON-LISP|::|NIL|)
  (|COMMON-LISP|::|AND| (|COMMON-LISP|::|EQ| |COMMON-LISP|::|TYPE| :|FILE|)
   (|UIOP/UTILITY|::|COERCE-CLASS|
    (|COMMON-LISP|::|OR|
     (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/PARSE-DEFSYSTEM|::|P|
      |COMMON-LISP|::|=| |ASDF/COMPONENT|::|PARENT| :|THEN|
      (|ASDF/COMPONENT|::|COMPONENT-PARENT| |ASDF/PARSE-DEFSYSTEM|::|P|)
      :|WHILE| |ASDF/PARSE-DEFSYSTEM|::|P| :|THEREIS|
      (|ASDF/COMPONENT|::|MODULE-DEFAULT-COMPONENT-CLASS|
       |ASDF/PARSE-DEFSYSTEM|::|P|))
     |ASDF/PARSE-DEFSYSTEM|::|*DEFAULT-COMPONENT-CLASS*|)
    :|PACKAGE| :|ASDF/INTERFACE| :|SUPER| '|ASDF/COMPONENT|::|COMPONENT|
    :|ERROR| |COMMON-LISP|::|NIL|))
  (|ASDF/SESSION|::|SYSDEF-ERROR| "don't recognize component type ~S"
   |COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/PARSE-DEFSYSTEM|::|*DEFAULT-COMPONENT-CLASS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PARSE-DEFSYSTEM|::|CLASS-FOR-TYPE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|CLASS-FOR-TYPE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/COMPONENT|::|PARENT| |COMMON-LISP|::|TYPE|)))
(|COMMON-LISP|::|DEFINE-CONDITION| |ASDF/PARSE-DEFSYSTEM|::|NON-SYSTEM-SYSTEM|
 (|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
 ((|ASDF/COMPONENT|::|NAME| :|INITARG| :|NAME| :|READER|
   |ASDF/PARSE-DEFSYSTEM|::|NON-SYSTEM-SYSTEM-NAME|)
  (|CLOS|::|CLASS-NAME| :|INITARG| :|CLASS-NAME| :|READER|
   |ASDF/PARSE-DEFSYSTEM|::|NON-SYSTEM-SYSTEM-CLASS-NAME|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA|
   (|ASDF/PARSE-DEFSYSTEM|::|C| |ASDF/PARSE-DEFSYSTEM|::|S|)
   (|COMMON-LISP|::|FORMAT| |ASDF/PARSE-DEFSYSTEM|::|S|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<Error while defining system ~S: class ~S isn't a subclass of ~S~@:>")
    (|ASDF/PARSE-DEFSYSTEM|::|NON-SYSTEM-SYSTEM-NAME|
     |ASDF/PARSE-DEFSYSTEM|::|C|)
    (|ASDF/PARSE-DEFSYSTEM|::|NON-SYSTEM-SYSTEM-CLASS-NAME|
     |ASDF/PARSE-DEFSYSTEM|::|C|)
    '|ASDF/SYSTEM|::|SYSTEM|))))
(|COMMON-LISP|::|DEFINE-CONDITION|
 |ASDF/PARSE-DEFSYSTEM|::|NON-TOPLEVEL-SYSTEM|
 (|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
 ((|ASDF/COMPONENT|::|PARENT| :|INITARG| :|PARENT| :|READER|
   |ASDF/PARSE-DEFSYSTEM|::|NON-TOPLEVEL-SYSTEM-PARENT|)
  (|ASDF/COMPONENT|::|NAME| :|INITARG| :|NAME| :|READER|
   |ASDF/PARSE-DEFSYSTEM|::|NON-TOPLEVEL-SYSTEM-NAME|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA|
   (|ASDF/PARSE-DEFSYSTEM|::|C| |ASDF/PARSE-DEFSYSTEM|::|S|)
   (|COMMON-LISP|::|FORMAT| |ASDF/PARSE-DEFSYSTEM|::|S|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<Error while defining system: component ~S claims to have a system ~S as a child~@:>")
    (|ASDF/PARSE-DEFSYSTEM|::|NON-TOPLEVEL-SYSTEM-PARENT|
     |ASDF/PARSE-DEFSYSTEM|::|C|)
    (|ASDF/PARSE-DEFSYSTEM|::|NON-TOPLEVEL-SYSTEM-NAME|
     |ASDF/PARSE-DEFSYSTEM|::|C|)))))
(|COMMON-LISP|::|DEFINE-CONDITION| |ASDF/PARSE-DEFSYSTEM|::|BAD-SYSTEM-NAME|
 (|COMMON-LISP|::|WARNING|)
 ((|ASDF/COMPONENT|::|NAME| :|INITARG| :|NAME| :|READER|
   |ASDF/COMPONENT|::|COMPONENT-NAME|)
  (|ASDF/COMPONENT|::|SOURCE-FILE| :|INITARG| :|SOURCE-FILE| :|READER|
   |ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA|
   (|ASDF/PARSE-DEFSYSTEM|::|C| |ASDF/PARSE-DEFSYSTEM|::|S|)
   (|COMMON-LISP|::|LET*|
    ((|ASDF/PARSE-DEFSYSTEM|::|FILE|
      (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/PARSE-DEFSYSTEM|::|C|))
     (|ASDF/COMPONENT|::|NAME|
      (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/PARSE-DEFSYSTEM|::|C|))
     (|ASDF/PARSE-DEFSYSTEM|::|ASD|
      (|COMMON-LISP|::|PATHNAME-NAME| |ASDF/PARSE-DEFSYSTEM|::|FILE|)))
    (|COMMON-LISP|::|FORMAT| |ASDF/PARSE-DEFSYSTEM|::|S|
     (|UIOP/COMMON-LISP|::|COMPATFMT|
      "~@<System definition file ~S contains definition for system ~S. ~\n
Please only define ~S and secondary systems with a name starting with ~S (e.g. ~S) in that file.~@:>")
     |ASDF/PARSE-DEFSYSTEM|::|FILE| |ASDF/COMPONENT|::|NAME|
     |ASDF/PARSE-DEFSYSTEM|::|ASD|
     (|UIOP/UTILITY|::|STRCAT| |ASDF/PARSE-DEFSYSTEM|::|ASD| "/")
     (|UIOP/UTILITY|::|STRCAT| |ASDF/PARSE-DEFSYSTEM|::|ASD| "/test"))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PARSE-DEFSYSTEM|::|SYSDEF-ERROR-COMPONENT|
 (|ASDF/PARSE-DEFSYSTEM|::|MSG| |COMMON-LISP|::|TYPE| |ASDF/COMPONENT|::|NAME|
  |ASDF/PARSE-DEFSYSTEM|::|VALUE|)
 (|ASDF/SESSION|::|SYSDEF-ERROR|
  (|UIOP/UTILITY|::|STRCAT| |ASDF/PARSE-DEFSYSTEM|::|MSG|
   (|UIOP/COMMON-LISP|::|COMPATFMT|
    "~&~@<The value specified for ~(~A~) ~A is ~S~@:>"))
  |COMMON-LISP|::|TYPE| |ASDF/COMPONENT|::|NAME|
  |ASDF/PARSE-DEFSYSTEM|::|VALUE|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PARSE-DEFSYSTEM|::|CHECK-COMPONENT-INPUT|
 (|COMMON-LISP|::|TYPE| |ASDF/COMPONENT|::|NAME|
  |ASDF/SYSTEM|::|WEAKLY-DEPENDS-ON| |ASDF/SYSTEM|::|DEPENDS-ON|
  |ASDF/COMPONENT|::|COMPONENTS|)
 "A partial test of the values of a component."
 (|COMMON-LISP|::|UNLESS| (|COMMON-LISP|::|LISTP| |ASDF/SYSTEM|::|DEPENDS-ON|)
  (|ASDF/PARSE-DEFSYSTEM|::|SYSDEF-ERROR-COMPONENT|
   ":depends-on must be a list." |COMMON-LISP|::|TYPE| |ASDF/COMPONENT|::|NAME|
   |ASDF/SYSTEM|::|DEPENDS-ON|))
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|LISTP| |ASDF/SYSTEM|::|WEAKLY-DEPENDS-ON|)
  (|ASDF/PARSE-DEFSYSTEM|::|SYSDEF-ERROR-COMPONENT|
   ":weakly-depends-on must be a list." |COMMON-LISP|::|TYPE|
   |ASDF/COMPONENT|::|NAME| |ASDF/SYSTEM|::|WEAKLY-DEPENDS-ON|))
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|LISTP| |ASDF/COMPONENT|::|COMPONENTS|)
  (|ASDF/PARSE-DEFSYSTEM|::|SYSDEF-ERROR-COMPONENT|
   ":components must be NIL or a list of components." |COMMON-LISP|::|TYPE|
   |ASDF/COMPONENT|::|NAME| |ASDF/COMPONENT|::|COMPONENTS|)))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PARSE-DEFSYSTEM|::|RECORD-ADDITIONAL-SYSTEM-INPUT-FILE|
 (|COMMON-LISP|::|PATHNAME| |ASDF/COMPONENT|::|COMPONENT|
  |ASDF/COMPONENT|::|PARENT|)
 (|COMMON-LISP|::|LET*|
  ((|ASDF/PARSE-DEFSYSTEM|::|RECORD-ON|
    (|COMMON-LISP|::|IF| |ASDF/COMPONENT|::|PARENT|
     (|COMMON-LISP|::|LOOP| :|WITH| |ASDF/PARSE-DEFSYSTEM|::|RETVAL| :|FOR|
      |ASDF/PARSE-DEFSYSTEM|::|PAR| |COMMON-LISP|::|=|
      |ASDF/COMPONENT|::|PARENT| :|THEN|
      (|ASDF/COMPONENT|::|COMPONENT-PARENT| |ASDF/PARSE-DEFSYSTEM|::|PAR|)
      :|WHILE| |ASDF/PARSE-DEFSYSTEM|::|PAR| :|DO|
      (|COMMON-LISP|::|SETF| |ASDF/PARSE-DEFSYSTEM|::|RETVAL|
       |ASDF/PARSE-DEFSYSTEM|::|PAR|)
      :|FINALLY| (|COMMON-LISP|::|RETURN| |ASDF/PARSE-DEFSYSTEM|::|RETVAL|))
     |ASDF/COMPONENT|::|COMPONENT|))
   (|ASDF/PARSE-DEFSYSTEM|::|COMP|
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|TYPEP| |ASDF/PARSE-DEFSYSTEM|::|RECORD-ON|
      '|ASDF/COMPONENT|::|COMPONENT|)
     |ASDF/PARSE-DEFSYSTEM|::|RECORD-ON|
     (|ASDF/COMPONENT|::|FIND-COMPONENT| |ASDF/PARSE-DEFSYSTEM|::|RECORD-ON|
      |COMMON-LISP|::|NIL|)))
   (|ASDF/PARSE-DEFSYSTEM|::|OP|
    (|ASDF/OPERATION|::|MAKE-OPERATION| '|ASDF/FIND-SYSTEM|::|DEFINE-OP|))
   (|ASDF/PARSE-DEFSYSTEM|::|CELL|
    (|COMMON-LISP|::|OR|
     (|COMMON-LISP|::|ASSOC| |ASDF/PARSE-DEFSYSTEM|::|OP|
      (|ASDF/COMPONENT|::|%ADDITIONAL-INPUT-FILES|
       |ASDF/PARSE-DEFSYSTEM|::|COMP|))
     (|COMMON-LISP|::|LET|
      ((|ASDF/PARSE-DEFSYSTEM|::|NEW-CELL|
        (|COMMON-LISP|::|LIST| |ASDF/PARSE-DEFSYSTEM|::|OP|)))
      (|COMMON-LISP|::|PUSH| |ASDF/PARSE-DEFSYSTEM|::|NEW-CELL|
       (|ASDF/COMPONENT|::|%ADDITIONAL-INPUT-FILES|
        |ASDF/PARSE-DEFSYSTEM|::|COMP|))
      |ASDF/PARSE-DEFSYSTEM|::|NEW-CELL|))))
  (|COMMON-LISP|::|PUSHNEW| |COMMON-LISP|::|PATHNAME|
   (|COMMON-LISP|::|CDR| |ASDF/PARSE-DEFSYSTEM|::|CELL|) :|TEST|
   '|UIOP/PATHNAME|::|PATHNAME-EQUAL|)
  (|COMMON-LISP|::|VALUES|)))
(|UIOP/UTILITY|::|DEFUN*| (|ASDF/PARSE-DEFSYSTEM|::|NORMALIZE-VERSION|)
 (|ASDF/PARSE-DEFSYSTEM|::|FORM| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|PATHNAME| |ASDF/COMPONENT|::|COMPONENT|
  |ASDF/COMPONENT|::|PARENT|)
 (|COMMON-LISP|::|LABELS|
  ((|ASDF/PARSE-DEFSYSTEM|::|INVALID|
    (|COMMON-LISP|::|&OPTIONAL|
     (|ASDF/PARSE-DEFSYSTEM|::|CONTINUATION| "using NIL instead"))
    (|COMMON-LISP|::|WARN|
     (|UIOP/COMMON-LISP|::|COMPATFMT|
      "~@<Invalid :version specifier ~S~@[ for component ~S~]~@[ in ~S~]~@[ from file ~S~]~@[, ~A~]~@:>")
     |ASDF/PARSE-DEFSYSTEM|::|FORM| |ASDF/COMPONENT|::|COMPONENT|
     |ASDF/COMPONENT|::|PARENT| |COMMON-LISP|::|PATHNAME|
     |ASDF/PARSE-DEFSYSTEM|::|CONTINUATION|))
   (|ASDF/PARSE-DEFSYSTEM|::|INVALID-PARSE|
    (|ASDF/PARSE-DEFSYSTEM|::|CONTROL| |COMMON-LISP|::|&REST|
     |ASDF/PARSE-DEFSYSTEM|::|ARGS|)
    (|COMMON-LISP|::|UNLESS|
     (|UIOP/UTILITY|::|IF-LET|
      (|ASDF/PARSE-DEFSYSTEM|::|TARGET|
       (|ASDF/COMPONENT|::|FIND-COMPONENT| |ASDF/COMPONENT|::|PARENT|
        |ASDF/COMPONENT|::|COMPONENT|))
      (|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P| |ASDF/PARSE-DEFSYSTEM|::|TARGET|))
     (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|WARN|
      |ASDF/PARSE-DEFSYSTEM|::|CONTROL| |ASDF/PARSE-DEFSYSTEM|::|ARGS|)
     (|ASDF/PARSE-DEFSYSTEM|::|INVALID|))))
  (|UIOP/UTILITY|::|IF-LET|
   (|ASDF/PARSE-DEFSYSTEM|::|V|
    (|COMMON-LISP|::|TYPECASE| |ASDF/PARSE-DEFSYSTEM|::|FORM|
     ((|COMMON-LISP|::|OR| |COMMON-LISP|::|STRING| |COMMON-LISP|::|NULL|)
      |ASDF/PARSE-DEFSYSTEM|::|FORM|)
     (|COMMON-LISP|::|REAL|
      (|ASDF/PARSE-DEFSYSTEM|::|INVALID| "Substituting a string")
      (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "~D"
       |ASDF/PARSE-DEFSYSTEM|::|FORM|))
     (|COMMON-LISP|::|CONS|
      (|COMMON-LISP|::|CASE|
       (|COMMON-LISP|::|FIRST| |ASDF/PARSE-DEFSYSTEM|::|FORM|)
       ((:|READ-FILE-FORM|)
        (|COMMON-LISP|::|DESTRUCTURING-BIND|
         (|ASDF/PARSE-DEFSYSTEM|::|SUBPATH| |COMMON-LISP|::|&KEY|
          (|ASDF/PARSE-DEFSYSTEM|::|AT| 0.))
         (|COMMON-LISP|::|REST| |ASDF/PARSE-DEFSYSTEM|::|FORM|)
         (|COMMON-LISP|::|LET|
          ((|ASDF/PARSE-DEFSYSTEM|::|PATH|
            (|UIOP/PATHNAME|::|SUBPATHNAME| |COMMON-LISP|::|PATHNAME|
             |ASDF/PARSE-DEFSYSTEM|::|SUBPATH|)))
          (|ASDF/PARSE-DEFSYSTEM|::|RECORD-ADDITIONAL-SYSTEM-INPUT-FILE|
           |ASDF/PARSE-DEFSYSTEM|::|PATH| |ASDF/COMPONENT|::|COMPONENT|
           |ASDF/COMPONENT|::|PARENT|)
          (|UIOP/STREAM|::|SAFE-READ-FILE-FORM| |ASDF/PARSE-DEFSYSTEM|::|PATH|
           :|AT| |ASDF/PARSE-DEFSYSTEM|::|AT| :|PACKAGE| :|ASDF-USER|))))
       ((:|READ-FILE-LINE|)
        (|COMMON-LISP|::|DESTRUCTURING-BIND|
         (|ASDF/PARSE-DEFSYSTEM|::|SUBPATH| |COMMON-LISP|::|&KEY|
          (|ASDF/PARSE-DEFSYSTEM|::|AT| 0.))
         (|COMMON-LISP|::|REST| |ASDF/PARSE-DEFSYSTEM|::|FORM|)
         (|COMMON-LISP|::|LET|
          ((|ASDF/PARSE-DEFSYSTEM|::|PATH|
            (|UIOP/PATHNAME|::|SUBPATHNAME| |COMMON-LISP|::|PATHNAME|
             |ASDF/PARSE-DEFSYSTEM|::|SUBPATH|)))
          (|ASDF/PARSE-DEFSYSTEM|::|RECORD-ADDITIONAL-SYSTEM-INPUT-FILE|
           |ASDF/PARSE-DEFSYSTEM|::|PATH| |ASDF/COMPONENT|::|COMPONENT|
           |ASDF/COMPONENT|::|PARENT|)
          (|UIOP/STREAM|::|SAFE-READ-FILE-LINE|
           (|UIOP/PATHNAME|::|SUBPATHNAME| |COMMON-LISP|::|PATHNAME|
            |ASDF/PARSE-DEFSYSTEM|::|SUBPATH|)
           :|AT| |ASDF/PARSE-DEFSYSTEM|::|AT|))))
       (|COMMON-LISP|::|OTHERWISE| (|ASDF/PARSE-DEFSYSTEM|::|INVALID|))))
     (|COMMON-LISP|::|T| (|ASDF/PARSE-DEFSYSTEM|::|INVALID|))))
   (|UIOP/UTILITY|::|IF-LET|
    (|ASDF/PARSE-DEFSYSTEM|::|PV|
     (|UIOP/VERSION|::|PARSE-VERSION| |ASDF/PARSE-DEFSYSTEM|::|V|
      #'|ASDF/PARSE-DEFSYSTEM|::|INVALID-PARSE|))
    (|UIOP/VERSION|::|UNPARSE-VERSION| |ASDF/PARSE-DEFSYSTEM|::|PV|)
    (|ASDF/PARSE-DEFSYSTEM|::|INVALID|)))))
(|COMMON-LISP|::|LET*| ((#1=#:|G33805| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/PARSE-DEFSYSTEM|::|NON-SYSTEM-SYSTEM| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|NAME| :|READERS|
    '(|ASDF/PARSE-DEFSYSTEM|::|NON-SYSTEM-SYSTEM-NAME|) :|INITARGS| '(:|NAME|))
   (|COMMON-LISP|::|LIST| :|NAME| '|CLOS|::|CLASS-NAME| :|READERS|
    '(|ASDF/PARSE-DEFSYSTEM|::|NON-SYSTEM-SYSTEM-CLASS-NAME|) :|INITARGS|
    '(:|CLASS-NAME|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|NON-SYSTEM-SYSTEM-NAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|NON-SYSTEM-SYSTEM-CLASS-NAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G33848| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/PARSE-DEFSYSTEM|::|NON-TOPLEVEL-SYSTEM| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|PARENT| :|READERS|
    '(|ASDF/PARSE-DEFSYSTEM|::|NON-TOPLEVEL-SYSTEM-PARENT|) :|INITARGS|
    '(:|PARENT|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|NAME| :|READERS|
    '(|ASDF/PARSE-DEFSYSTEM|::|NON-TOPLEVEL-SYSTEM-NAME|) :|INITARGS|
    '(:|NAME|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|NON-TOPLEVEL-SYSTEM-PARENT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|NON-TOPLEVEL-SYSTEM-NAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G33891| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/PARSE-DEFSYSTEM|::|BAD-SYSTEM-NAME| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|WARNING|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|NAME| :|READERS|
    '(|ASDF/COMPONENT|::|COMPONENT-NAME|) :|INITARGS| '(:|NAME|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|SOURCE-FILE| :|READERS|
    '(|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|) :|INITARGS| '(:|SOURCE-FILE|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/COMPONENT|::|COMPONENT-NAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PARSE-DEFSYSTEM|::|SYSDEF-ERROR-COMPONENT|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|SYSDEF-ERROR-COMPONENT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PARSE-DEFSYSTEM|::|MSG| |COMMON-LISP|::|TYPE|
    |ASDF/COMPONENT|::|NAME| |ASDF/PARSE-DEFSYSTEM|::|VALUE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PARSE-DEFSYSTEM|::|CHECK-COMPONENT-INPUT|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|CHECK-COMPONENT-INPUT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|TYPE| |ASDF/COMPONENT|::|NAME|
    |ASDF/SYSTEM|::|WEAKLY-DEPENDS-ON| |ASDF/SYSTEM|::|DEPENDS-ON|
    |ASDF/COMPONENT|::|COMPONENTS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PARSE-DEFSYSTEM|::|RECORD-ADDITIONAL-SYSTEM-INPUT-FILE|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/PARSE-DEFSYSTEM|::|RECORD-ADDITIONAL-SYSTEM-INPUT-FILE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|PATHNAME| |ASDF/COMPONENT|::|COMPONENT|
    |ASDF/COMPONENT|::|PARENT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PARSE-DEFSYSTEM|::|NORMALIZE-VERSION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|NORMALIZE-VERSION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PARSE-DEFSYSTEM|::|FORM| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|PATHNAME| |ASDF/COMPONENT|::|COMPONENT|
    |ASDF/COMPONENT|::|PARENT|)))
(|ASDF/UPGRADE|::|DEFPARAMETER*| |ASDF/PARSE-DEFSYSTEM|::|+ASDF-METHODS+|
 '(|ASDF/ACTION|::|PERFORM-WITH-RESTARTS| |ASDF/ACTION|::|PERFORM|
   |ASDF/PARSE-DEFSYSTEM|::|EXPLAIN| |ASDF/ACTION|::|OUTPUT-FILES|
   |ASDF/ACTION|::|OPERATION-DONE-P|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PARSE-DEFSYSTEM|::|%REMOVE-COMPONENT-INLINE-METHODS|
 (|ASDF/COMPONENT|::|COMPONENT|)
 (|COMMON-LISP|::|DOLIST|
  (|ASDF/COMPONENT|::|NAME| |ASDF/PARSE-DEFSYSTEM|::|+ASDF-METHODS+|)
  (|COMMON-LISP|::|MAP| |COMMON-LISP|::|NIL|
   #'(|COMMON-LISP|::|LAMBDA| (|ASDF/PARSE-DEFSYSTEM|::|M|)
      (|CLOS|::|REMOVE-METHOD|
       (|COMMON-LISP|::|SYMBOL-FUNCTION| |ASDF/COMPONENT|::|NAME|)
       |ASDF/PARSE-DEFSYSTEM|::|M|))
   (|ASDF/COMPONENT|::|COMPONENT-INLINE-METHODS|
    |ASDF/COMPONENT|::|COMPONENT|)))
 (|ASDF/COMPONENT|::|COMPONENT-INLINE-METHODS| |ASDF/COMPONENT|::|COMPONENT|)
 |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PARSE-DEFSYSTEM|::|%DEFINE-COMPONENT-INLINE-METHODS|
 (|ASDF/PARSE-DEFSYSTEM|::|RET| |COMMON-LISP|::|REST|)
 (|UIOP/COMMON-LISP|::|LOOP*| :|FOR|
  (|ASDF/PARSE-DEFSYSTEM|::|KEY| |ASDF/PARSE-DEFSYSTEM|::|VALUE|) :|ON|
  |COMMON-LISP|::|REST| :|BY| #'|COMMON-LISP|::|CDDR| :|FOR|
  |ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|=|
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|KEYWORDP| |ASDF/PARSE-DEFSYSTEM|::|KEY|)
   (|COMMON-LISP|::|FIND| |ASDF/PARSE-DEFSYSTEM|::|KEY|
    |ASDF/PARSE-DEFSYSTEM|::|+ASDF-METHODS+| :|TEST|
    '|COMMON-LISP|::|STRING=|))
  :|WHEN| |ASDF/COMPONENT|::|NAME| :|DO|
  (|COMMON-LISP|::|DESTRUCTURING-BIND|
   (|ASDF/PARSE-DEFSYSTEM|::|OP| |COMMON-LISP|::|&REST|
    |ASDF/PARSE-DEFSYSTEM|::|BODY|)
   |ASDF/PARSE-DEFSYSTEM|::|VALUE|
   (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/PARSE-DEFSYSTEM|::|ARG|
    |COMMON-LISP|::|=| (|COMMON-LISP|::|POP| |ASDF/PARSE-DEFSYSTEM|::|BODY|)
    :|WHILE| (|COMMON-LISP|::|ATOM| |ASDF/PARSE-DEFSYSTEM|::|ARG|) :|COLLECT|
    |ASDF/PARSE-DEFSYSTEM|::|ARG| :|INTO| |ASDF/PARSE-DEFSYSTEM|::|QUALIFIERS|
    :|FINALLY|
    (|COMMON-LISP|::|DESTRUCTURING-BIND|
     (|ASDF/PARSE-DEFSYSTEM|::|O| |ASDF/PARSE-DEFSYSTEM|::|C|)
     |ASDF/PARSE-DEFSYSTEM|::|ARG|
     (|COMMON-LISP|::|PUSHNEW|
      (|COMMON-LISP|::|EVAL|
       `(|CLOS|::|DEFMETHOD| ,|ASDF/COMPONENT|::|NAME|
         ,@|ASDF/PARSE-DEFSYSTEM|::|QUALIFIERS|
         ((,|ASDF/PARSE-DEFSYSTEM|::|O| ,|ASDF/PARSE-DEFSYSTEM|::|OP|)
          (,|ASDF/PARSE-DEFSYSTEM|::|C|
           (|COMMON-LISP|::|EQL| ,|ASDF/PARSE-DEFSYSTEM|::|RET|)))
         ,@|ASDF/PARSE-DEFSYSTEM|::|BODY|))
      (|ASDF/COMPONENT|::|COMPONENT-INLINE-METHODS|
       |ASDF/PARSE-DEFSYSTEM|::|RET|)))))))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PARSE-DEFSYSTEM|::|%REFRESH-COMPONENT-INLINE-METHODS|
 (|ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|REST|)
 (|ASDF/PARSE-DEFSYSTEM|::|%REMOVE-COMPONENT-INLINE-METHODS|
  |ASDF/COMPONENT|::|COMPONENT|)
 (|ASDF/PARSE-DEFSYSTEM|::|%DEFINE-COMPONENT-INLINE-METHODS|
  |ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|REST|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|%COMPUTE-+ASDF-METHODS+-VALUE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/PARSE-DEFSYSTEM|::|+ASDF-METHODS+|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PARSE-DEFSYSTEM|::|%REMOVE-COMPONENT-INLINE-METHODS|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/PARSE-DEFSYSTEM|::|%REMOVE-COMPONENT-INLINE-METHODS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/COMPONENT|::|COMPONENT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PARSE-DEFSYSTEM|::|%DEFINE-COMPONENT-INLINE-METHODS|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/PARSE-DEFSYSTEM|::|%DEFINE-COMPONENT-INLINE-METHODS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PARSE-DEFSYSTEM|::|RET| |COMMON-LISP|::|REST|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PARSE-DEFSYSTEM|::|%REFRESH-COMPONENT-INLINE-METHODS|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/PARSE-DEFSYSTEM|::|%REFRESH-COMPONENT-INLINE-METHODS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|REST|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PARSE-DEFSYSTEM|::|PARSE-DEPENDENCY-DEF|
 (|ASDF/PARSE-DEFSYSTEM|::|DD|)
 (|COMMON-LISP|::|IF| (|COMMON-LISP|::|LISTP| |ASDF/PARSE-DEFSYSTEM|::|DD|)
  (|COMMON-LISP|::|CASE| (|COMMON-LISP|::|FIRST| |ASDF/PARSE-DEFSYSTEM|::|DD|)
   (:|FEATURE|
    (|COMMON-LISP|::|UNLESS|
     (|COMMON-LISP|::|=| (|COMMON-LISP|::|LENGTH| |ASDF/PARSE-DEFSYSTEM|::|DD|)
      3.)
     (|ASDF/SESSION|::|SYSDEF-ERROR| "Ill-formed feature dependency: ~s"
      |ASDF/PARSE-DEFSYSTEM|::|DD|))
    (|COMMON-LISP|::|LET|
     ((|ASDF/PARSE-DEFSYSTEM|::|EMBEDDED|
       (|ASDF/PARSE-DEFSYSTEM|::|PARSE-DEPENDENCY-DEF|
        (|COMMON-LISP|::|THIRD| |ASDF/PARSE-DEFSYSTEM|::|DD|))))
     `(:|FEATURE| ,(|COMMON-LISP|::|SECOND| |ASDF/PARSE-DEFSYSTEM|::|DD|)
       ,|ASDF/PARSE-DEFSYSTEM|::|EMBEDDED|)))
   (|ASDF/PARSE-DEFSYSTEM|::|FEATURE|
    (|ASDF/SESSION|::|SYSDEF-ERROR|
     "`feature' has been removed from the dependency spec language of ASDF. Use :feature instead in ~s."
     |ASDF/PARSE-DEFSYSTEM|::|DD|))
   (:|REQUIRE|
    (|COMMON-LISP|::|UNLESS|
     (|COMMON-LISP|::|=| (|COMMON-LISP|::|LENGTH| |ASDF/PARSE-DEFSYSTEM|::|DD|)
      2.)
     (|ASDF/SESSION|::|SYSDEF-ERROR| "Ill-formed require dependency: ~s"
      |ASDF/PARSE-DEFSYSTEM|::|DD|))
    |ASDF/PARSE-DEFSYSTEM|::|DD|)
   (:|VERSION|
    (|COMMON-LISP|::|UNLESS|
     (|COMMON-LISP|::|=| (|COMMON-LISP|::|LENGTH| |ASDF/PARSE-DEFSYSTEM|::|DD|)
      3.)
     (|ASDF/SESSION|::|SYSDEF-ERROR| "Ill-formed version dependency: ~s"
      |ASDF/PARSE-DEFSYSTEM|::|DD|))
    `(:|VERSION|
      ,(|ASDF/SYSTEM|::|COERCE-NAME|
        (|COMMON-LISP|::|SECOND| |ASDF/PARSE-DEFSYSTEM|::|DD|))
      ,(|COMMON-LISP|::|THIRD| |ASDF/PARSE-DEFSYSTEM|::|DD|)))
   (|COMMON-LISP|::|OTHERWISE|
    (|ASDF/SESSION|::|SYSDEF-ERROR| "Ill-formed dependency: ~s"
     |ASDF/PARSE-DEFSYSTEM|::|DD|)))
  (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/PARSE-DEFSYSTEM|::|DD|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PARSE-DEFSYSTEM|::|PARSE-DEPENDENCY-DEFS|
 (|ASDF/PARSE-DEFSYSTEM|::|DD-LIST|)
 "Parse the dependency defs in DD-LIST into canonical form by translating all\n
system names contained using COERCE-NAME. Return the result."
 (|COMMON-LISP|::|MAPCAR| '|ASDF/PARSE-DEFSYSTEM|::|PARSE-DEPENDENCY-DEF|
  |ASDF/PARSE-DEFSYSTEM|::|DD-LIST|))
(|UIOP/UTILITY|::|DEFUN*| (|ASDF/PARSE-DEFSYSTEM|::|PARSE-COMPONENT-FORM|)
 (|ASDF/COMPONENT|::|PARENT| |ASDF/PARSE-DEFSYSTEM|::|OPTIONS|
  |COMMON-LISP|::|&KEY| |ASDF/PARSE-DEFSYSTEM|::|PREVIOUS-SERIAL-COMPONENT|)
 (|COMMON-LISP|::|DESTRUCTURING-BIND|
  (|COMMON-LISP|::|TYPE| |ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|&REST|
   |COMMON-LISP|::|REST| |COMMON-LISP|::|&KEY|
   (|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P| |COMMON-LISP|::|NIL|
    |ASDF/PARSE-DEFSYSTEM|::|BSPP|)
   |ASDF/COMPONENT|::|COMPONENTS| |COMMON-LISP|::|PATHNAME|
   |ASDF/ACTION|::|PERFORM| |ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|
   |ASDF/ACTION|::|OUTPUT-FILES| |ASDF/ACTION|::|OPERATION-DONE-P|
   |ASDF/SYSTEM|::|WEAKLY-DEPENDS-ON| |ASDF/SYSTEM|::|DEPENDS-ON|
   |ASDF/PARSE-DEFSYSTEM|::|SERIAL| |ASDF/PARSE-DEFSYSTEM|::|DO-FIRST|
   |ASDF/PARSE-DEFSYSTEM|::|IF-COMPONENT-DEP-FAILS| |ASDF/COMPONENT|::|VERSION|
   |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
  |ASDF/PARSE-DEFSYSTEM|::|OPTIONS|
  (|COMMON-LISP|::|DECLARE|
   (|COMMON-LISP|::|IGNORE| |ASDF/ACTION|::|PERFORM|
    |ASDF/PARSE-DEFSYSTEM|::|EXPLAIN| |ASDF/ACTION|::|OUTPUT-FILES|
    |ASDF/ACTION|::|OPERATION-DONE-P| |ASDF/SYSTEM|::|BUILTIN-SYSTEM-P|))
  (|ASDF/PARSE-DEFSYSTEM|::|CHECK-COMPONENT-INPUT| |COMMON-LISP|::|TYPE|
   |ASDF/COMPONENT|::|NAME| |ASDF/SYSTEM|::|WEAKLY-DEPENDS-ON|
   |ASDF/SYSTEM|::|DEPENDS-ON| |ASDF/COMPONENT|::|COMPONENTS|)
  (|COMMON-LISP|::|WHEN|
   (|COMMON-LISP|::|AND| |ASDF/COMPONENT|::|PARENT|
    (|ASDF/COMPONENT|::|FIND-COMPONENT| |ASDF/COMPONENT|::|PARENT|
     |ASDF/COMPONENT|::|NAME|)
    (|COMMON-LISP|::|NOT|
     (|COMMON-LISP|::|TYPEP|
      (|ASDF/COMPONENT|::|FIND-COMPONENT| |ASDF/COMPONENT|::|PARENT|
       |ASDF/COMPONENT|::|NAME|)
      (|ASDF/PARSE-DEFSYSTEM|::|CLASS-FOR-TYPE| |ASDF/COMPONENT|::|PARENT|
       |COMMON-LISP|::|TYPE|))))
   (|COMMON-LISP|::|ERROR| '|ASDF/COMPONENT|::|DUPLICATE-NAMES| :|NAME|
    |ASDF/COMPONENT|::|NAME|))
  (|COMMON-LISP|::|WHEN| |ASDF/PARSE-DEFSYSTEM|::|DO-FIRST|
   (|COMMON-LISP|::|ERROR| "DO-FIRST is not supported anymore as of ASDF 3"))
  (|COMMON-LISP|::|LET*|
   ((|ASDF/COMPONENT|::|NAME|
     (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/COMPONENT|::|NAME|))
    (|ASDF/PARSE-DEFSYSTEM|::|ARGS|
     `(:|NAME| ,|ASDF/COMPONENT|::|NAME| :|PATHNAME| ,|COMMON-LISP|::|PATHNAME|
       ,@(|COMMON-LISP|::|WHEN| |ASDF/COMPONENT|::|PARENT|
          `(:|PARENT| ,|ASDF/COMPONENT|::|PARENT|))
       ,@(|UIOP/UTILITY|::|REMOVE-PLIST-KEYS|
          '(:|COMPONENTS| :|PATHNAME| :|IF-COMPONENT-DEP-FAILS| :|VERSION|
            :|PERFORM| :|EXPLAIN| :|OUTPUT-FILES| :|OPERATION-DONE-P|
            :|WEAKLY-DEPENDS-ON| :|DEPENDS-ON| :|SERIAL|)
          |COMMON-LISP|::|REST|)))
    (|ASDF/COMPONENT|::|COMPONENT|
     (|ASDF/COMPONENT|::|FIND-COMPONENT| |ASDF/COMPONENT|::|PARENT|
      |ASDF/COMPONENT|::|NAME|))
    (|CLOS|::|CLASS|
     (|ASDF/PARSE-DEFSYSTEM|::|CLASS-FOR-TYPE| |ASDF/COMPONENT|::|PARENT|
      |COMMON-LISP|::|TYPE|)))
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|AND| |ASDF/COMPONENT|::|PARENT|
     (|COMMON-LISP|::|SUBTYPEP| |CLOS|::|CLASS| '|ASDF/SYSTEM|::|SYSTEM|))
    (|COMMON-LISP|::|ERROR| '|ASDF/PARSE-DEFSYSTEM|::|NON-TOPLEVEL-SYSTEM|
     :|PARENT| |ASDF/COMPONENT|::|PARENT| :|NAME| |ASDF/COMPONENT|::|NAME|))
   (|COMMON-LISP|::|IF| |ASDF/COMPONENT|::|COMPONENT|
    (|COMMON-LISP|::|APPLY| '|CLOS|::|REINITIALIZE-INSTANCE|
     |ASDF/COMPONENT|::|COMPONENT| |ASDF/PARSE-DEFSYSTEM|::|ARGS|)
    (|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|COMPONENT|
     (|COMMON-LISP|::|APPLY| '|CLOS|::|MAKE-INSTANCE| |CLOS|::|CLASS|
      |ASDF/PARSE-DEFSYSTEM|::|ARGS|)))
   (|ASDF/COMPONENT|::|COMPONENT-PATHNAME| |ASDF/COMPONENT|::|COMPONENT|)
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|TYPEP| |ASDF/COMPONENT|::|COMPONENT|
     '|ASDF/SYSTEM|::|SYSTEM|)
    (|COMMON-LISP|::|SETF|
     (|CLOS|::|SLOT-VALUE| |ASDF/COMPONENT|::|COMPONENT|
      '|ASDF/SYSTEM|::|DEPENDS-ON|)
     (|ASDF/PARSE-DEFSYSTEM|::|PARSE-DEPENDENCY-DEFS|
      |ASDF/SYSTEM|::|DEPENDS-ON|)
     (|CLOS|::|SLOT-VALUE| |ASDF/COMPONENT|::|COMPONENT|
      '|ASDF/SYSTEM|::|WEAKLY-DEPENDS-ON|)
     (|COMMON-LISP|::|MAPCAR| '|ASDF/SYSTEM|::|COERCE-NAME|
      |ASDF/SYSTEM|::|WEAKLY-DEPENDS-ON|)))
   (|COMMON-LISP|::|LET|
    ((|ASDF/PARSE-DEFSYSTEM|::|SYSFILE|
      (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
       (|ASDF/COMPONENT|::|COMPONENT-SYSTEM| |ASDF/COMPONENT|::|COMPONENT|))))
    (|COMMON-LISP|::|WHEN|
     (|COMMON-LISP|::|AND|
      (|COMMON-LISP|::|TYPEP| |ASDF/COMPONENT|::|COMPONENT|
       '|ASDF/SYSTEM|::|SYSTEM|)
      (|COMMON-LISP|::|NOT| |ASDF/PARSE-DEFSYSTEM|::|BSPP|))
     (|COMMON-LISP|::|SETF|
      (|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P| |ASDF/COMPONENT|::|COMPONENT|)
      (|UIOP/FILESYSTEM|::|LISP-IMPLEMENTATION-PATHNAME-P|
       |ASDF/PARSE-DEFSYSTEM|::|SYSFILE|)))
    (|COMMON-LISP|::|SETF| |ASDF/COMPONENT|::|VERSION|
     (|ASDF/PARSE-DEFSYSTEM|::|NORMALIZE-VERSION| |ASDF/COMPONENT|::|VERSION|
      :|COMPONENT| |ASDF/COMPONENT|::|NAME| :|PARENT|
      |ASDF/COMPONENT|::|PARENT| :|PATHNAME|
      |ASDF/PARSE-DEFSYSTEM|::|SYSFILE|)))
   (|COMMON-LISP|::|SETF|
    (|CLOS|::|SLOT-VALUE| |ASDF/COMPONENT|::|COMPONENT|
     '|ASDF/COMPONENT|::|VERSION|)
    |ASDF/COMPONENT|::|VERSION|)
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|TYPEP| |ASDF/COMPONENT|::|COMPONENT|
     '|ASDF/COMPONENT|::|PARENT-COMPONENT|)
    (|COMMON-LISP|::|SETF|
     (|ASDF/COMPONENT|::|COMPONENT-CHILDREN| |ASDF/COMPONENT|::|COMPONENT|)
     (|COMMON-LISP|::|LOOP| :|WITH|
      |ASDF/PARSE-DEFSYSTEM|::|PREVIOUS-COMPONENT| |COMMON-LISP|::|=|
      |COMMON-LISP|::|NIL| :|FOR| |ASDF/PARSE-DEFSYSTEM|::|C-FORM| :|IN|
      |ASDF/COMPONENT|::|COMPONENTS| :|FOR| |ASDF/PARSE-DEFSYSTEM|::|C|
      |COMMON-LISP|::|=|
      (|ASDF/PARSE-DEFSYSTEM|::|PARSE-COMPONENT-FORM|
       |ASDF/COMPONENT|::|COMPONENT| |ASDF/PARSE-DEFSYSTEM|::|C-FORM|
       :|PREVIOUS-SERIAL-COMPONENT|
       |ASDF/PARSE-DEFSYSTEM|::|PREVIOUS-COMPONENT|)
      :|FOR| |ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|=|
      (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/PARSE-DEFSYSTEM|::|C|)
      :|COLLECT| |ASDF/PARSE-DEFSYSTEM|::|C| :|WHEN|
      |ASDF/PARSE-DEFSYSTEM|::|SERIAL| :|DO|
      (|COMMON-LISP|::|SETF| |ASDF/PARSE-DEFSYSTEM|::|PREVIOUS-COMPONENT|
       |ASDF/COMPONENT|::|NAME|)))
    (|ASDF/COMPONENT|::|COMPUTE-CHILDREN-BY-NAME|
     |ASDF/COMPONENT|::|COMPONENT|))
   (|COMMON-LISP|::|WHEN| |ASDF/PARSE-DEFSYSTEM|::|PREVIOUS-SERIAL-COMPONENT|
    (|COMMON-LISP|::|PUSH| |ASDF/PARSE-DEFSYSTEM|::|PREVIOUS-SERIAL-COMPONENT|
     |ASDF/SYSTEM|::|DEPENDS-ON|))
   (|COMMON-LISP|::|WHEN| |ASDF/SYSTEM|::|WEAKLY-DEPENDS-ON|
    (|UIOP/UTILITY|::|APPENDF| |ASDF/SYSTEM|::|DEPENDS-ON|
     (|COMMON-LISP|::|REMOVE-IF|
      (|COMMON-LISP|::|COMPLEMENT|
       #'(|COMMON-LISP|::|LAMBDA| (|ASDF/PARSE-DEFSYSTEM|::|X|)
          (|ASDF/SYSTEM|::|FIND-SYSTEM| |ASDF/PARSE-DEFSYSTEM|::|X|
           |COMMON-LISP|::|NIL|)))
      |ASDF/SYSTEM|::|WEAKLY-DEPENDS-ON|)))
   (|COMMON-LISP|::|SETF|
    (|ASDF/COMPONENT|::|COMPONENT-SIDEWAY-DEPENDENCIES|
     |ASDF/COMPONENT|::|COMPONENT|)
    |ASDF/SYSTEM|::|DEPENDS-ON|)
   (|ASDF/PARSE-DEFSYSTEM|::|%REFRESH-COMPONENT-INLINE-METHODS|
    |ASDF/COMPONENT|::|COMPONENT| |COMMON-LISP|::|REST|)
   (|COMMON-LISP|::|WHEN| |ASDF/PARSE-DEFSYSTEM|::|IF-COMPONENT-DEP-FAILS|
    (|COMMON-LISP|::|ERROR|
     "The system definition for ~S uses deprecated ~\n
            ASDF option :IF-COMPONENT-DEP-FAILS. ~\n
            Starting with ASDF 3, please use :IF-FEATURE instead"
     (|ASDF/SYSTEM|::|COERCE-NAME|
      (|ASDF/COMPONENT|::|COMPONENT-SYSTEM| |ASDF/COMPONENT|::|COMPONENT|))))
   |ASDF/COMPONENT|::|COMPONENT|)))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PARSE-DEFSYSTEM|::|REGISTER-SYSTEM-DEFINITION|
 (|ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|&REST|
  |ASDF/PARSE-DEFSYSTEM|::|OPTIONS| |COMMON-LISP|::|&KEY|
  |COMMON-LISP|::|PATHNAME| (|CLOS|::|CLASS| '|ASDF/SYSTEM|::|SYSTEM|)
  (|ASDF/COMPONENT|::|SOURCE-FILE| |COMMON-LISP|::|NIL|
   |ASDF/PARSE-DEFSYSTEM|::|SFP|)
  |ASDF/COMPONENT|::|DEFSYSTEM-DEPENDS-ON| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|UIOP/UTILITY|::|NEST|
  (|ASDF/SESSION|::|WITH-ASDF-SESSION| |COMMON-LISP|::|NIL|)
  (|COMMON-LISP|::|LET*|
   ((|ASDF/COMPONENT|::|NAME|
     (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/COMPONENT|::|NAME|))
    (|ASDF/COMPONENT|::|SOURCE-FILE|
     (|COMMON-LISP|::|IF| |ASDF/PARSE-DEFSYSTEM|::|SFP|
      |ASDF/COMPONENT|::|SOURCE-FILE|
      (|UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS*|
       (|UIOP/LISP-BUILD|::|LOAD-PATHNAME|))))))
  (|COMMON-LISP|::|FLET|
   ((|ASDF/PARSE-DEFSYSTEM|::|FIX-CASE| (|ASDF/PARSE-DEFSYSTEM|::|X|)
     (|COMMON-LISP|::|IF|
      (|UIOP/PATHNAME|::|LOGICAL-PATHNAME-P| |ASDF/COMPONENT|::|SOURCE-FILE|)
      (|COMMON-LISP|::|STRING-DOWNCASE| |ASDF/PARSE-DEFSYSTEM|::|X|)
      |ASDF/PARSE-DEFSYSTEM|::|X|))))
  (|COMMON-LISP|::|LET*|
   ((|ASDF/PARSE-DEFSYSTEM|::|ASD-NAME|
     (|COMMON-LISP|::|AND| |ASDF/COMPONENT|::|SOURCE-FILE|
      (|COMMON-LISP|::|EQUAL| "asd"
       (|ASDF/PARSE-DEFSYSTEM|::|FIX-CASE|
        (|COMMON-LISP|::|PATHNAME-TYPE| |ASDF/COMPONENT|::|SOURCE-FILE|)))
      (|ASDF/PARSE-DEFSYSTEM|::|FIX-CASE|
       (|COMMON-LISP|::|PATHNAME-NAME| |ASDF/COMPONENT|::|SOURCE-FILE|))))
    (|ASDF/PARSE-DEFSYSTEM|::|PRIMARY-NAME|
     (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME| |ASDF/COMPONENT|::|NAME|)))
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|AND| |ASDF/PARSE-DEFSYSTEM|::|ASD-NAME|
     (|COMMON-LISP|::|NOT|
      (|COMMON-LISP|::|EQUAL| |ASDF/PARSE-DEFSYSTEM|::|ASD-NAME|
       |ASDF/PARSE-DEFSYSTEM|::|PRIMARY-NAME|)))
    (|COMMON-LISP|::|WARN|
     (|COMMON-LISP|::|MAKE-CONDITION|
      '|ASDF/PARSE-DEFSYSTEM|::|BAD-SYSTEM-NAME| :|SOURCE-FILE|
      |ASDF/COMPONENT|::|SOURCE-FILE| :|NAME| |ASDF/COMPONENT|::|NAME|))))
  (|COMMON-LISP|::|LET*|
   ((|ASDF/PARSE-DEFSYSTEM|::|CHECKED-DEFSYSTEM-DEPENDS-ON|
     (|COMMON-LISP|::|LET*|
      ((|ASDF/PARSE-DEFSYSTEM|::|DEP-FORMS|
        (|ASDF/PARSE-DEFSYSTEM|::|PARSE-DEPENDENCY-DEFS|
         |ASDF/COMPONENT|::|DEFSYSTEM-DEPENDS-ON|))
       (|ASDF/PARSE-DEFSYSTEM|::|DEPS|
        (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/PARSE-DEFSYSTEM|::|SPEC| :|IN|
         |ASDF/PARSE-DEFSYSTEM|::|DEP-FORMS| :|WHEN|
         (|ASDF/FIND-COMPONENT|::|RESOLVE-DEPENDENCY-SPEC| |COMMON-LISP|::|NIL|
          |ASDF/PARSE-DEFSYSTEM|::|SPEC|)
         :|COLLECT| :|IT|)))
      (|ASDF/OPERATE|::|LOAD-SYSTEMS*| |ASDF/PARSE-DEFSYSTEM|::|DEPS|)
      |ASDF/PARSE-DEFSYSTEM|::|DEP-FORMS|))
    (|ASDF/SYSTEM|::|SYSTEM|
     (|COMMON-LISP|::|OR|
      (|ASDF/SYSTEM-REGISTRY|::|FIND-SYSTEM-IF-BEING-DEFINED|
       |ASDF/COMPONENT|::|NAME|)
      (|UIOP/UTILITY|::|IF-LET|
       (|ASDF/PARSE-DEFSYSTEM|::|REGISTERED|
        (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM| |ASDF/COMPONENT|::|NAME|))
       (|ASDF/SYSTEM|::|RESET-SYSTEM-CLASS|
        |ASDF/PARSE-DEFSYSTEM|::|REGISTERED| '|ASDF/SYSTEM|::|UNDEFINED-SYSTEM|
        :|NAME| |ASDF/COMPONENT|::|NAME| :|SOURCE-FILE|
        |ASDF/COMPONENT|::|SOURCE-FILE|)
       (|ASDF/SYSTEM-REGISTRY|::|REGISTER-SYSTEM|
        (|CLOS|::|MAKE-INSTANCE| '|ASDF/SYSTEM|::|UNDEFINED-SYSTEM| :|NAME|
         |ASDF/COMPONENT|::|NAME| :|SOURCE-FILE|
         |ASDF/COMPONENT|::|SOURCE-FILE|)))))
    (|ASDF/PARSE-DEFSYSTEM|::|COMPONENT-OPTIONS|
     (|COMMON-LISP|::|APPEND|
      (|UIOP/UTILITY|::|REMOVE-PLIST-KEYS| '(:|DEFSYSTEM-DEPENDS-ON| :|CLASS|)
       |ASDF/PARSE-DEFSYSTEM|::|OPTIONS|)
      (|COMMON-LISP|::|WHEN|
       |ASDF/PARSE-DEFSYSTEM|::|CHECKED-DEFSYSTEM-DEPENDS-ON|
       `(:|DEFSYSTEM-DEPENDS-ON|
         ,|ASDF/PARSE-DEFSYSTEM|::|CHECKED-DEFSYSTEM-DEPENDS-ON|))))
    (|COMMON-LISP|::|DIRECTORY|
     (|ASDF/PARSE-DEFSYSTEM|::|DETERMINE-SYSTEM-DIRECTORY|
      |COMMON-LISP|::|PATHNAME|)))
   (|ASDF/SESSION|::|SET-ASDF-CACHE-ENTRY|
    `(|ASDF/SYSTEM|::|FIND-SYSTEM| ,|ASDF/COMPONENT|::|NAME|)
    (|COMMON-LISP|::|LIST| |ASDF/SYSTEM|::|SYSTEM|)))
  (|COMMON-LISP|::|LET|
   ((|CLOS|::|CLASS|
     (|ASDF/PARSE-DEFSYSTEM|::|CLASS-FOR-TYPE| |COMMON-LISP|::|NIL|
      |CLOS|::|CLASS|)))
   (|COMMON-LISP|::|UNLESS|
    (|COMMON-LISP|::|SUBTYPEP| |CLOS|::|CLASS| '|ASDF/SYSTEM|::|SYSTEM|)
    (|COMMON-LISP|::|ERROR| '|ASDF/PARSE-DEFSYSTEM|::|NON-SYSTEM-SYSTEM|
     :|NAME| |ASDF/COMPONENT|::|NAME| :|CLASS-NAME|
     (|CLOS|::|CLASS-NAME| |CLOS|::|CLASS|)))
   (|COMMON-LISP|::|UNLESS|
    (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|TYPE-OF| |ASDF/SYSTEM|::|SYSTEM|)
     |CLOS|::|CLASS|)
    (|ASDF/SYSTEM|::|RESET-SYSTEM-CLASS| |ASDF/SYSTEM|::|SYSTEM|
     |CLOS|::|CLASS|)))
  (|ASDF/PARSE-DEFSYSTEM|::|PARSE-COMPONENT-FORM| |COMMON-LISP|::|NIL|
   (|COMMON-LISP|::|LIST*| :|MODULE| |ASDF/COMPONENT|::|NAME| :|PATHNAME|
    |COMMON-LISP|::|DIRECTORY| |ASDF/PARSE-DEFSYSTEM|::|COMPONENT-OPTIONS|))))
(|COMMON-LISP|::|DEFMACRO| |ASDF/PARSE-DEFSYSTEM|::|DEFSYSTEM|
 (|ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|&BODY|
  |ASDF/PARSE-DEFSYSTEM|::|OPTIONS|)
 `(|COMMON-LISP|::|APPLY| '|ASDF/PARSE-DEFSYSTEM|::|REGISTER-SYSTEM-DEFINITION|
   ',|ASDF/COMPONENT|::|NAME| ',|ASDF/PARSE-DEFSYSTEM|::|OPTIONS|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PARSE-DEFSYSTEM|::|PARSE-DEPENDENCY-DEF|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|PARSE-DEPENDENCY-DEF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/PARSE-DEFSYSTEM|::|DD|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PARSE-DEFSYSTEM|::|PARSE-DEPENDENCY-DEFS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|PARSE-DEPENDENCY-DEFS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/PARSE-DEFSYSTEM|::|DD-LIST|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/PARSE-DEFSYSTEM|::|PARSE-COMPONENT-FORM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|PARSE-COMPONENT-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/COMPONENT|::|PARENT| |ASDF/PARSE-DEFSYSTEM|::|OPTIONS|
    |COMMON-LISP|::|&KEY|
    |ASDF/PARSE-DEFSYSTEM|::|PREVIOUS-SERIAL-COMPONENT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PARSE-DEFSYSTEM|::|REGISTER-SYSTEM-DEFINITION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|REGISTER-SYSTEM-DEFINITION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|&REST|
    |ASDF/PARSE-DEFSYSTEM|::|OPTIONS| |COMMON-LISP|::|&KEY|
    |COMMON-LISP|::|PATHNAME| (|CLOS|::|CLASS| '|ASDF/SYSTEM|::|SYSTEM|)
    (|ASDF/COMPONENT|::|SOURCE-FILE| |COMMON-LISP|::|NIL|
     |ASDF/PARSE-DEFSYSTEM|::|SFP|)
    |ASDF/COMPONENT|::|DEFSYSTEM-DEPENDS-ON|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|ASDF/PARSE-DEFSYSTEM|::|DEFSYSTEM|)
(|SYSTEM|::|%PUTD| '|ASDF/PARSE-DEFSYSTEM|::|DEFSYSTEM|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |ASDF/PARSE-DEFSYSTEM|::|DEFSYSTEM|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|ASDF/COMPONENT|::|NAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|ASDF/PARSE-DEFSYSTEM|::|OPTIONS| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |ASDF/PARSE-DEFSYSTEM|::|DEFSYSTEM|
       `(|COMMON-LISP|::|APPLY|
         '|ASDF/PARSE-DEFSYSTEM|::|REGISTER-SYSTEM-DEFINITION|
         ',|ASDF/COMPONENT|::|NAME| ',|ASDF/PARSE-DEFSYSTEM|::|OPTIONS|))))))
  '(|ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|&BODY|
    |ASDF/PARSE-DEFSYSTEM|::|OPTIONS|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/BUNDLE|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/COMPONENT|
    :|ASDF/SYSTEM| :|ASDF/OPERATION| :|ASDF/FIND-COMPONENT| :|ASDF/ACTION|
    :|ASDF/LISP-ACTION| :|ASDF/PLAN| :|ASDF/OPERATE| :|ASDF/PARSE-DEFSYSTEM|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|BUNDLE-OP| #:|BUNDLE-TYPE| #:|PROGRAM-SYSTEM| #:|BUNDLE-SYSTEM|
    #:|BUNDLE-PATHNAME-TYPE| #:|DIRECT-DEPENDENCY-FILES| #:|MONOLITHIC-OP|
    #:|MONOLITHIC-BUNDLE-OP| #:|OPERATION-MONOLITHIC-P|
    #:|BASIC-COMPILE-BUNDLE-OP| #:|PREPARE-BUNDLE-OP| #:|COMPILE-BUNDLE-OP|
    #:|LOAD-BUNDLE-OP| #:|MONOLITHIC-COMPILE-BUNDLE-OP|
    #:|MONOLITHIC-LOAD-BUNDLE-OP| #:|LIB-OP| #:|MONOLITHIC-LIB-OP| #:|DLL-OP|
    #:|MONOLITHIC-DLL-OP| #:|DELIVER-ASD-OP| #:|MONOLITHIC-DELIVER-ASD-OP|
    #:|PROGRAM-OP| #:|IMAGE-OP| #:|COMPILED-FILE| #:|PRECOMPILED-SYSTEM|
    #:|PREBUILT-SYSTEM| #:|USER-SYSTEM-P| #:|USER-SYSTEM| #:|TRIVIAL-SYSTEM-P|
    #:|PROLOGUE-CODE| #:|EPILOGUE-CODE| #:|STATIC-LIBRARY|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|ASDF/BUNDLE| :|ASDF|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/BUNDLE"))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|BUNDLE-OP| (|ASDF/OPERATION|::|OPERATION|)
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "base class for operations that bundle outputs from multiple components"))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/BUNDLE|::|BUNDLE-TYPE|
 (|ASDF/BUNDLE|::|BUNDLE-OP|))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|MONOLITHIC-OP|
 (|ASDF/OPERATION|::|OPERATION|) |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "A MONOLITHIC operation operates on a system *and all of its\n
dependencies*.  So, for example, a monolithic concatenate operation will\n
concatenate together a system's components and all of its dependencies, but a\n
simple concatenate operation will concatenate only the components of the system\n
itself."))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP|
 (|ASDF/BUNDLE|::|BUNDLE-OP| |ASDF/BUNDLE|::|MONOLITHIC-OP|)
 ((|ASDF/BUNDLE|::|PROLOGUE-CODE| :|INITFORM| |COMMON-LISP|::|NIL| :|ACCESSOR|
   |ASDF/BUNDLE|::|PROLOGUE-CODE|)
  (|ASDF/BUNDLE|::|EPILOGUE-CODE| :|INITFORM| |COMMON-LISP|::|NIL| :|ACCESSOR|
   |ASDF/BUNDLE|::|EPILOGUE-CODE|))
 (:|DOCUMENTATION| "operations that are both monolithic-op and bundle-op"))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|PROGRAM-SYSTEM| (|ASDF/SYSTEM|::|SYSTEM|)
 ((|ASDF/BUNDLE|::|PROLOGUE-CODE| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|PROLOGUE-CODE| :|READER| |ASDF/BUNDLE|::|PROLOGUE-CODE|)
  (|ASDF/BUNDLE|::|EPILOGUE-CODE| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|EPILOGUE-CODE| :|READER| |ASDF/BUNDLE|::|EPILOGUE-CODE|)
  (|ASDF/BUNDLE|::|NO-UIOP| :|INITFORM| |COMMON-LISP|::|NIL| :|INITARG|
   :|NO-UIOP| :|READER| |ASDF/BUNDLE|::|NO-UIOP|)
  (|ASDF/BUNDLE|::|PREFIX-LISP-OBJECT-FILES| :|INITARG|
   :|PREFIX-LISP-OBJECT-FILES| :|INITFORM| |COMMON-LISP|::|NIL| :|ACCESSOR|
   |ASDF/BUNDLE|::|PREFIX-LISP-OBJECT-FILES|)
  (|ASDF/BUNDLE|::|POSTFIX-LISP-OBJECT-FILES| :|INITARG|
   :|POSTFIX-LISP-OBJECT-FILES| :|INITFORM| |COMMON-LISP|::|NIL| :|ACCESSOR|
   |ASDF/BUNDLE|::|POSTFIX-LISP-OBJECT-FILES|)
  (|ASDF/BUNDLE|::|EXTRA-OBJECT-FILES| :|INITARG| :|EXTRA-OBJECT-FILES|
   :|INITFORM| |COMMON-LISP|::|NIL| :|ACCESSOR|
   |ASDF/BUNDLE|::|EXTRA-OBJECT-FILES|)
  (|ASDF/BUNDLE|::|EXTRA-BUILD-ARGS| :|INITARG| :|EXTRA-BUILD-ARGS| :|INITFORM|
   |COMMON-LISP|::|NIL| :|ACCESSOR| |ASDF/BUNDLE|::|EXTRA-BUILD-ARGS|)))
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|PROLOGUE-CODE|
 ((|ASDF/BUNDLE|::|X| |ASDF/SYSTEM|::|SYSTEM|)) |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|EPILOGUE-CODE|
 ((|ASDF/BUNDLE|::|X| |ASDF/SYSTEM|::|SYSTEM|)) |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|NO-UIOP|
 ((|ASDF/BUNDLE|::|X| |ASDF/SYSTEM|::|SYSTEM|)) |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|PREFIX-LISP-OBJECT-FILES|
 ((|ASDF/BUNDLE|::|X| |ASDF/SYSTEM|::|SYSTEM|)) |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|POSTFIX-LISP-OBJECT-FILES|
 ((|ASDF/BUNDLE|::|X| |ASDF/SYSTEM|::|SYSTEM|)) |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|EXTRA-OBJECT-FILES|
 ((|ASDF/BUNDLE|::|X| |ASDF/SYSTEM|::|SYSTEM|)) |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|EXTRA-BUILD-ARGS|
 ((|ASDF/BUNDLE|::|X| |ASDF/SYSTEM|::|SYSTEM|)) |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|LINK-OP| (|ASDF/BUNDLE|::|BUNDLE-OP|)
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION| "Abstract operation for linking files together"))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|GATHER-OPERATION|
 (|ASDF/BUNDLE|::|BUNDLE-OP|) |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Abstract operation for gathering many input files from a system"))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/BUNDLE|::|GATHER-OPERATION|
 (|ASDF/BUNDLE|::|GATHER-OPERATION|))
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|GATHER-OPERATION|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|GATHER-OPERATION|)) |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/BUNDLE|::|GATHER-TYPE|
 (|ASDF/BUNDLE|::|GATHER-OPERATION|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/BUNDLE|::|OPERATION-MONOLITHIC-P|
 (|ASDF/BUNDLE|::|OP|)
 (|COMMON-LISP|::|TYPEP| |ASDF/BUNDLE|::|OP| '|ASDF/BUNDLE|::|MONOLITHIC-OP|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|GATHER-OPERATION|)
  (|ASDF/BUNDLE|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|LET*|
  ((|ASDF/BUNDLE|::|MONO|
    (|ASDF/BUNDLE|::|OPERATION-MONOLITHIC-P| |ASDF/BUNDLE|::|O|))
   (|COMMON-LISP|::|GO|
    (|ASDF/OPERATION|::|MAKE-OPERATION|
     (|COMMON-LISP|::|OR|
      (|ASDF/BUNDLE|::|GATHER-OPERATION| |ASDF/BUNDLE|::|O|)
      '|ASDF/LISP-ACTION|::|COMPILE-OP|)))
   (|ASDF/BUNDLE|::|BUNDLE-P|
    (|COMMON-LISP|::|TYPEP| |COMMON-LISP|::|GO| '|ASDF/BUNDLE|::|BUNDLE-OP|))
   (|ASDF/BUNDLE|::|COMPONENT-TYPE|
    (|COMMON-LISP|::|IF| |ASDF/BUNDLE|::|MONO|
     (|COMMON-LISP|::|IF| |ASDF/BUNDLE|::|BUNDLE-P| '|ASDF/SYSTEM|::|SYSTEM|
      |COMMON-LISP|::|T|)
     '(|COMMON-LISP|::|NOT| |ASDF/SYSTEM|::|SYSTEM|)))
   (|ASDF/BUNDLE|::|KEEP-COMPONENT|
    (|COMMON-LISP|::|IF| |ASDF/BUNDLE|::|BUNDLE-P| '|ASDF/SYSTEM|::|SYSTEM|
     '(|COMMON-LISP|::|NOT| |ASDF/SYSTEM|::|SYSTEM|)))
   (|ASDF/BUNDLE|::|DEPS|
    (|ASDF/PLAN|::|REQUIRED-COMPONENTS| |ASDF/BUNDLE|::|S| :|OTHER-SYSTEMS|
     |ASDF/BUNDLE|::|MONO| :|COMPONENT-TYPE| |ASDF/BUNDLE|::|COMPONENT-TYPE|
     :|KEEP-COMPONENT| |ASDF/BUNDLE|::|KEEP-COMPONENT| :|GOAL-OPERATION|
     '|ASDF/LISP-ACTION|::|LOAD-OP| :|KEEP-OPERATION|
     '|ASDF/LISP-ACTION|::|BASIC-COMPILE-OP|)))
  `((,|COMMON-LISP|::|GO| ,@|ASDF/BUNDLE|::|DEPS|)
    ,@(|CLOS|::|CALL-NEXT-METHOD|))))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|BASIC-COMPILE-BUNDLE-OP|
 (|ASDF/BUNDLE|::|BUNDLE-OP| |ASDF/LISP-ACTION|::|BASIC-COMPILE-OP|)
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION| "Base class for compiling into a bundle"))
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|BUNDLE-TYPE|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|BASIC-COMPILE-BUNDLE-OP|)) :|FASB|)
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|GATHER-TYPE|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|BASIC-COMPILE-BUNDLE-OP|)) :|FASL|)
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|PREPARE-BUNDLE-OP|
 (|ASDF/ACTION|::|SIDEWAY-OPERATION|)
 ((|ASDF/ACTION|::|SIDEWAY-OPERATION| :|INITFORM|
   '|ASDF/LISP-ACTION|::|LOAD-OP| :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "Operation class for loading the bundles of a system's dependencies"))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|LIB-OP|
 (|ASDF/BUNDLE|::|LINK-OP| |ASDF/BUNDLE|::|GATHER-OPERATION|
  |ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Compile the system and produce a linkable static library (.a/.lib)\n
for all the linkable object files associated with the system. Compare with DLL-OP.\n\n
On most implementations, these object files only include extensions to the runtime\n
written in C or another language with a compiler producing linkable object files.\n
On CLASP, ECL, MKCL, these object files _also_ include the contents of Lisp files\n
themselves. In any case, this operation will produce what you need to further build\n
a static runtime for your system, or a dynamic library to load in an existing runtime."))
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|BUNDLE-TYPE|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|LIB-OP|)) :|LIB|)
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|GATHER-TYPE|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|LIB-OP|)) :|OBJECT|)
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|COMPILE-BUNDLE-OP|
 (|ASDF/BUNDLE|::|BASIC-COMPILE-BUNDLE-OP| |ASDF/ACTION|::|SELFWARD-OPERATION|
  |ASDF/BUNDLE|::|GATHER-OPERATION|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '(|ASDF/BUNDLE|::|PREPARE-BUNDLE-OP|) :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "This operator is an alternative to COMPILE-OP. Build a system\n
and all of its dependencies, but build only a single (\"monolithic\") FASL, instead\n
of one per source file, which may be more resource efficient.  That monolithic\n
FASL should be loaded with LOAD-BUNDLE-OP, rather than LOAD-OP."))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|LOAD-BUNDLE-OP|
 (|ASDF/LISP-ACTION|::|BASIC-LOAD-OP| |ASDF/ACTION|::|SELFWARD-OPERATION|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '(|ASDF/BUNDLE|::|PREPARE-BUNDLE-OP| |ASDF/BUNDLE|::|COMPILE-BUNDLE-OP|)
   :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "This operator is an alternative to LOAD-OP. Build a system\n
and all of its dependencies, using COMPILE-BUNDLE-OP. The difference with\n
respect to LOAD-OP is that it builds only a single FASL, which may be\n
faster and more resource efficient."))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|DLL-OP|
 (|ASDF/BUNDLE|::|LINK-OP| |ASDF/BUNDLE|::|GATHER-OPERATION|
  |ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Compile the system and produce a dynamic loadable library (.so/.dll)\n
for all the linkable object files associated with the system. Compare with LIB-OP."))
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|BUNDLE-TYPE|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|DLL-OP|)) :|DLL|)
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|GATHER-TYPE|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|DLL-OP|)) :|OBJECT|)
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|DELIVER-ASD-OP|
 (|ASDF/LISP-ACTION|::|BASIC-COMPILE-OP| |ASDF/ACTION|::|SELFWARD-OPERATION|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '(|ASDF/BUNDLE|::|COMPILE-BUNDLE-OP|) :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "produce an asd file for delivering the system as a single fasl"))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|MONOLITHIC-DELIVER-ASD-OP|
 (|ASDF/BUNDLE|::|DELIVER-ASD-OP| |ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '(|ASDF/BUNDLE|::|MONOLITHIC-COMPILE-BUNDLE-OP|) :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "produce fasl and asd files for combined system and dependencies."))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|MONOLITHIC-COMPILE-BUNDLE-OP|
 (|ASDF/BUNDLE|::|BASIC-COMPILE-BUNDLE-OP|
  |ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP| |ASDF/BUNDLE|::|GATHER-OPERATION|
  |ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Create a single fasl for the system and its dependencies."))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|MONOLITHIC-LOAD-BUNDLE-OP|
 (|ASDF/BUNDLE|::|LOAD-BUNDLE-OP| |ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '|ASDF/BUNDLE|::|MONOLITHIC-COMPILE-BUNDLE-OP| :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION| "Load a single fasl for the system and its dependencies."))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|MONOLITHIC-LIB-OP|
 (|ASDF/BUNDLE|::|LIB-OP| |ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP|
  |ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Compile the system and produce a linkable static library (.a/.lib)\n
for all the linkable object files associated with the system or its dependencies. See LIB-OP."))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|MONOLITHIC-DLL-OP|
 (|ASDF/BUNDLE|::|DLL-OP| |ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP|
  |ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Compile the system and produce a dynamic loadable library (.so/.dll)\n
for all the linkable object files associated with the system or its dependencies. See LIB-OP"))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|IMAGE-OP|
 (|ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP| |ASDF/ACTION|::|SELFWARD-OPERATION|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '(|ASDF/LISP-ACTION|::|LOAD-OP|) :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "create an image file from the system and its dependencies"))
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|BUNDLE-TYPE|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|IMAGE-OP|)) :|IMAGE|)
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|PROGRAM-OP| (|ASDF/BUNDLE|::|IMAGE-OP|)
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "create an executable file from the system and its dependencies"))
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|BUNDLE-TYPE|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|PROGRAM-OP|)) :|PROGRAM|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/BUNDLE|::|BUNDLE-PATHNAME-TYPE|
 (|ASDF/BUNDLE|::|BUNDLE-TYPE|)
 (|COMMON-LISP|::|ETYPECASE| |ASDF/BUNDLE|::|BUNDLE-TYPE|
  ((|COMMON-LISP|::|OR| |COMMON-LISP|::|NULL| |COMMON-LISP|::|STRING|)
   |ASDF/BUNDLE|::|BUNDLE-TYPE|)
  ((|COMMON-LISP|::|EQL| :|NO-OUTPUT-FILE|)
   (|COMMON-LISP|::|ERROR| "No output file, therefore no pathname type"))
  ((|COMMON-LISP|::|EQL| :|FASL|) (|UIOP/LISP-BUILD|::|COMPILE-FILE-TYPE|))
  ((|COMMON-LISP|::|EQL| :|FASB|) (|UIOP/LISP-BUILD|::|COMPILE-FILE-TYPE|))
  ((|COMMON-LISP|::|MEMBER| :|IMAGE|) "exe")
  ((|COMMON-LISP|::|EQL| :|OBJECT|)
   (|UIOP/OS|::|OS-COND| ((|UIOP/OS|::|OS-UNIX-P|) "o")
    ((|UIOP/OS|::|OS-WINDOWS-P|)
     (|COMMON-LISP|::|IF|
      (|UIOP/OS|::|FEATUREP| '(:|OR| :|MINGW32| :|MINGW64|)) "o" "obj"))))
  ((|COMMON-LISP|::|MEMBER| :|LIB| :|STATIC-LIBRARY|)
   (|UIOP/OS|::|OS-COND| ((|UIOP/OS|::|OS-UNIX-P|) "a")
    ((|UIOP/OS|::|OS-WINDOWS-P|)
     (|COMMON-LISP|::|IF|
      (|UIOP/OS|::|FEATUREP| '(:|OR| :|MINGW32| :|MINGW64|)) "a" "lib"))))
  ((|COMMON-LISP|::|MEMBER| :|DLL| :|SHARED-LIBRARY|)
   (|UIOP/OS|::|OS-COND| ((|UIOP/OS|::|OS-MACOSX-P|) "dylib")
    ((|UIOP/OS|::|OS-UNIX-P|) "so") ((|UIOP/OS|::|OS-WINDOWS-P|) "dll")))
  ((|COMMON-LISP|::|EQL| :|PROGRAM|)
   (|UIOP/OS|::|OS-COND| ((|UIOP/OS|::|OS-UNIX-P|) |COMMON-LISP|::|NIL|)
    ((|UIOP/OS|::|OS-WINDOWS-P|) "exe")))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/BUNDLE|::|BUNDLE-OUTPUT-FILES|
 (|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|C|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/BUNDLE|::|BUNDLE-TYPE|
    (|ASDF/BUNDLE|::|BUNDLE-TYPE| |ASDF/BUNDLE|::|O|)))
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|OR|
    (|COMMON-LISP|::|EQ| |ASDF/BUNDLE|::|BUNDLE-TYPE| :|NO-OUTPUT-FILE|)
    (|COMMON-LISP|::|AND|
     (|COMMON-LISP|::|NULL|
      (|ASDF/ACTION|::|INPUT-FILES| |ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|C|))
     (|COMMON-LISP|::|NOT|
      (|COMMON-LISP|::|MEMBER| |ASDF/BUNDLE|::|BUNDLE-TYPE|
       '(:|IMAGE| :|PROGRAM|)))))
   (|COMMON-LISP|::|LET|
    ((|ASDF/COMPONENT|::|NAME|
      (|COMMON-LISP|::|OR|
       (|ASDF/SYSTEM|::|COMPONENT-BUILD-PATHNAME| |ASDF/BUNDLE|::|C|)
       (|COMMON-LISP|::|LET|
        ((|ASDF/BUNDLE|::|SUFFIX|
          (|COMMON-LISP|::|UNLESS|
           (|COMMON-LISP|::|TYPEP| |ASDF/BUNDLE|::|O|
            '|ASDF/BUNDLE|::|PROGRAM-OP|)
           (|COMMON-LISP|::|IF|
            (|ASDF/BUNDLE|::|OPERATION-MONOLITHIC-P| |ASDF/BUNDLE|::|O|)
            "--all-systems" "--system"))))
        (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL| "~A~@[~A~]"
         (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/BUNDLE|::|C|)
         |ASDF/BUNDLE|::|SUFFIX|))))
     (|COMMON-LISP|::|TYPE|
      (|ASDF/BUNDLE|::|BUNDLE-PATHNAME-TYPE| |ASDF/BUNDLE|::|BUNDLE-TYPE|)))
    (|COMMON-LISP|::|VALUES|
     (|COMMON-LISP|::|LIST|
      (|UIOP/PATHNAME|::|SUBPATHNAME|
       (|ASDF/COMPONENT|::|COMPONENT-PATHNAME| |ASDF/BUNDLE|::|C|)
       |ASDF/COMPONENT|::|NAME| :|TYPE| |COMMON-LISP|::|TYPE|))
     (|COMMON-LISP|::|EQ| (|CLOS|::|CLASS-OF| |ASDF/BUNDLE|::|O|)
      (|UIOP/UTILITY|::|COERCE-CLASS|
       (|ASDF/COMPONENT|::|COMPONENT-BUILD-OPERATION| |ASDF/BUNDLE|::|C|)
       :|PACKAGE| :|ASDF/INTERFACE| :|SUPER| '|ASDF/OPERATION|::|OPERATION|
       :|ERROR| |COMMON-LISP|::|NIL|)))))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|OUTPUT-FILES|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|BUNDLE-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/SYSTEM|::|SYSTEM|))
 (|ASDF/BUNDLE|::|BUNDLE-OUTPUT-FILES| |ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|C|))
(|COMMON-LISP|::|PROGN|
 (|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
  ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|IMAGE-OP|)
   (|ASDF/BUNDLE|::|C| |ASDF/SYSTEM|::|SYSTEM|))
  (|UIOP/IMAGE|::|DUMP-IMAGE|
   (|ASDF/ACTION|::|OUTPUT-FILE| |ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|C|)
   :|EXECUTABLE|
   (|COMMON-LISP|::|TYPEP| |ASDF/BUNDLE|::|O| '|ASDF/BUNDLE|::|PROGRAM-OP|)))
 (|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM| :|BEFORE|
  ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|PROGRAM-OP|)
   (|ASDF/BUNDLE|::|C| |ASDF/SYSTEM|::|SYSTEM|))
  (|COMMON-LISP|::|SETF| |UIOP/IMAGE|::|*IMAGE-ENTRY-POINT*|
   (|UIOP/UTILITY|::|ENSURE-FUNCTION|
    (|ASDF/SYSTEM|::|COMPONENT-ENTRY-POINT| |ASDF/BUNDLE|::|C|)))))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|COMPILED-FILE|
 (|ASDF/COMPONENT|::|FILE-COMPONENT|)
 ((|COMMON-LISP|::|TYPE| :|INITFORM| (|UIOP/LISP-BUILD|::|COMPILE-FILE-TYPE|)))
 (:|DOCUMENTATION|
  "Class for a file that is already compiled,\n
e.g. as part of the implementation, of an outer build system that calls into ASDF,\n
or of opaque libraries shipped along the source code."))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|PRECOMPILED-SYSTEM|
 (|ASDF/SYSTEM|::|SYSTEM|)
 ((|ASDF/SYSTEM|::|BUILD-PATHNAME| :|INITARG| :|FASB| :|INITARG| :|FASL|))
 (:|DOCUMENTATION|
  "Class For a system that is delivered as a precompiled fasl"))
(|CLOS|::|DEFCLASS| |ASDF/BUNDLE|::|PREBUILT-SYSTEM| (|ASDF/SYSTEM|::|SYSTEM|)
 ((|ASDF/SYSTEM|::|BUILD-PATHNAME| :|INITARG| :|STATIC-LIBRARY| :|INITARG|
   :|LIB| :|ACCESSOR| |ASDF/BUNDLE|::|PREBUILT-SYSTEM-STATIC-LIBRARY|))
 (:|DOCUMENTATION|
  "Class for a system delivered with a linkable static library (.a/.lib)"))
(|COMMON-LISP|::|LET*| ((#1=#:|G34612| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/BUNDLE|::|BUNDLE-OP|
  :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST| '|ASDF/OPERATION|::|OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"base class for operations that bundle outputs from multiple components"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/BUNDLE|::|BUNDLE-TYPE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|BUNDLE-TYPE|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|COMMON-LISP|::|LET*| ((#1=#:|G34638| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|MONOLITHIC-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/OPERATION|::|OPERATION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"A MONOLITHIC operation operates on a system *and all of its\n
dependencies*.  So, for example, a monolithic concatenate operation will\n
concatenate together a system's components and all of its dependencies, but a\n
simple concatenate operation will concatenate only the components of the system\n
itself."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G34641| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|BUNDLE-OP|
   '|ASDF/BUNDLE|::|MONOLITHIC-OP|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/BUNDLE|::|PROLOGUE-CODE| :|READERS|
    '(|ASDF/BUNDLE|::|PROLOGUE-CODE|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|PROLOGUE-CODE|)) :|INITFORM|
    '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/BUNDLE|::|EPILOGUE-CODE| :|READERS|
    '(|ASDF/BUNDLE|::|EPILOGUE-CODE|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|EPILOGUE-CODE|)) :|INITFORM|
    '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"operations that are both monolithic-op and bundle-op"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|PROLOGUE-CODE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|PROLOGUE-CODE|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|EPILOGUE-CODE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|EPILOGUE-CODE|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G34658| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|PROGRAM-SYSTEM| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SYSTEM|::|SYSTEM|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/BUNDLE|::|PROLOGUE-CODE| :|READERS|
    '(|ASDF/BUNDLE|::|PROLOGUE-CODE|) :|INITARGS| '(:|PROLOGUE-CODE|)
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/BUNDLE|::|EPILOGUE-CODE| :|READERS|
    '(|ASDF/BUNDLE|::|EPILOGUE-CODE|) :|INITARGS| '(:|EPILOGUE-CODE|)
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/BUNDLE|::|NO-UIOP| :|READERS|
    '(|ASDF/BUNDLE|::|NO-UIOP|) :|INITARGS| '(:|NO-UIOP|) :|INITFORM|
    '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/BUNDLE|::|PREFIX-LISP-OBJECT-FILES|
    :|READERS| '(|ASDF/BUNDLE|::|PREFIX-LISP-OBJECT-FILES|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|PREFIX-LISP-OBJECT-FILES|))
    :|INITARGS| '(:|PREFIX-LISP-OBJECT-FILES|) :|INITFORM|
    '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/BUNDLE|::|POSTFIX-LISP-OBJECT-FILES|
    :|READERS| '(|ASDF/BUNDLE|::|POSTFIX-LISP-OBJECT-FILES|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|POSTFIX-LISP-OBJECT-FILES|))
    :|INITARGS| '(:|POSTFIX-LISP-OBJECT-FILES|) :|INITFORM|
    '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/BUNDLE|::|EXTRA-OBJECT-FILES|
    :|READERS| '(|ASDF/BUNDLE|::|EXTRA-OBJECT-FILES|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|EXTRA-OBJECT-FILES|)) :|INITARGS|
    '(:|EXTRA-OBJECT-FILES|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/BUNDLE|::|EXTRA-BUILD-ARGS| :|READERS|
    '(|ASDF/BUNDLE|::|EXTRA-BUILD-ARGS|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|EXTRA-BUILD-ARGS|)) :|INITARGS|
    '(:|EXTRA-BUILD-ARGS|) :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|PROLOGUE-CODE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|EPILOGUE-CODE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|NO-UIOP|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|PREFIX-LISP-OBJECT-FILES|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|PREFIX-LISP-OBJECT-FILES|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|POSTFIX-LISP-OBJECT-FILES|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|POSTFIX-LISP-OBJECT-FILES|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|EXTRA-OBJECT-FILES|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|EXTRA-OBJECT-FILES|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|EXTRA-BUILD-ARGS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|EXTRA-BUILD-ARGS|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|PROLOGUE-CODE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|EPILOGUE-CODE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|NO-UIOP|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|PREFIX-LISP-OBJECT-FILES|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|POSTFIX-LISP-OBJECT-FILES|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|EXTRA-OBJECT-FILES|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|EXTRA-BUILD-ARGS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G34866| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/BUNDLE|::|LINK-OP|
  :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|BUNDLE-OP|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Abstract operation for linking files together"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G34869| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|GATHER-OPERATION| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|BUNDLE-OP|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Abstract operation for gathering many input files from a system"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/BUNDLE|::|GATHER-OPERATION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|GATHER-OPERATION|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|GATHER-OPERATION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/BUNDLE|::|GATHER-TYPE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|GATHER-TYPE|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/BUNDLE|::|OPERATION-MONOLITHIC-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|OPERATION-MONOLITHIC-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/BUNDLE|::|OP|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G34988| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|BASIC-COMPILE-BUNDLE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|BUNDLE-OP|
   '|ASDF/LISP-ACTION|::|BASIC-COMPILE-OP|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Base class for compiling into a bundle"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|BUNDLE-TYPE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|GATHER-TYPE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G35039| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|PREPARE-BUNDLE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/ACTION|::|SIDEWAY-OPERATION|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SIDEWAY-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM| '#2='|ASDF/LISP-ACTION|::|LOAD-OP|
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation class for loading the bundles of a system's dependencies"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G35042| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/BUNDLE|::|LIB-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|LINK-OP|
   '|ASDF/BUNDLE|::|GATHER-OPERATION|
   '|ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Compile the system and produce a linkable static library (.a/.lib)\n
for all the linkable object files associated with the system. Compare with DLL-OP.\n\n
On most implementations, these object files only include extensions to the runtime\n
written in C or another language with a compiler producing linkable object files.\n
On CLASP, ECL, MKCL, these object files _also_ include the contents of Lisp files\n
themselves. In any case, this operation will produce what you need to further build\n
a static runtime for your system, or a dynamic library to load in an existing runtime."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|BUNDLE-TYPE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|GATHER-TYPE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G35093| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|COMPILE-BUNDLE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|BASIC-COMPILE-BUNDLE-OP|
   '|ASDF/ACTION|::|SELFWARD-OPERATION| '|ASDF/BUNDLE|::|GATHER-OPERATION|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='(|ASDF/BUNDLE|::|PREPARE-BUNDLE-OP|) :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"This operator is an alternative to COMPILE-OP. Build a system\n
and all of its dependencies, but build only a single (\"monolithic\") FASL, instead\n
of one per source file, which may be more resource efficient.  That monolithic\n
FASL should be loaded with LOAD-BUNDLE-OP, rather than LOAD-OP."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G35096| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|LOAD-BUNDLE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/LISP-ACTION|::|BASIC-LOAD-OP|
   '|ASDF/ACTION|::|SELFWARD-OPERATION|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='(|ASDF/BUNDLE|::|PREPARE-BUNDLE-OP|
          |ASDF/BUNDLE|::|COMPILE-BUNDLE-OP|)
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"This operator is an alternative to LOAD-OP. Build a system\n
and all of its dependencies, using COMPILE-BUNDLE-OP. The difference with\n
respect to LOAD-OP is that it builds only a single FASL, which may be\n
faster and more resource efficient."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G35099| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/BUNDLE|::|DLL-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|LINK-OP|
   '|ASDF/BUNDLE|::|GATHER-OPERATION|
   '|ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Compile the system and produce a dynamic loadable library (.so/.dll)\n
for all the linkable object files associated with the system. Compare with LIB-OP."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|BUNDLE-TYPE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|GATHER-TYPE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G35150| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|DELIVER-ASD-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/LISP-ACTION|::|BASIC-COMPILE-OP|
   '|ASDF/ACTION|::|SELFWARD-OPERATION|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='(|ASDF/BUNDLE|::|COMPILE-BUNDLE-OP|) :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"produce an asd file for delivering the system as a single fasl"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G35153| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|MONOLITHIC-DELIVER-ASD-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|DELIVER-ASD-OP|
   '|ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='(|ASDF/BUNDLE|::|MONOLITHIC-COMPILE-BUNDLE-OP|) :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"produce fasl and asd files for combined system and dependencies."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G35156| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|MONOLITHIC-COMPILE-BUNDLE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|BASIC-COMPILE-BUNDLE-OP|
   '|ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP| '|ASDF/BUNDLE|::|GATHER-OPERATION|
   '|ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Create a single fasl for the system and its dependencies."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G35159| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|MONOLITHIC-LOAD-BUNDLE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|LOAD-BUNDLE-OP|
   '|ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='|ASDF/BUNDLE|::|MONOLITHIC-COMPILE-BUNDLE-OP| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Load a single fasl for the system and its dependencies."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G35162| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|MONOLITHIC-LIB-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|LIB-OP|
   '|ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP|
   '|ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Compile the system and produce a linkable static library (.a/.lib)\n
for all the linkable object files associated with the system or its dependencies. See LIB-OP."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G35165| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|MONOLITHIC-DLL-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|DLL-OP|
   '|ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP|
   '|ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Compile the system and produce a dynamic loadable library (.so/.dll)\n
for all the linkable object files associated with the system or its dependencies. See LIB-OP"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G35168| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/BUNDLE|::|IMAGE-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP|
   '|ASDF/ACTION|::|SELFWARD-OPERATION|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM| '#2='(|ASDF/LISP-ACTION|::|LOAD-OP|)
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"create an image file from the system and its dependencies"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|BUNDLE-TYPE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G35195| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS| '|ASDF/BUNDLE|::|PROGRAM-OP|
  :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|IMAGE-OP|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"create an executable file from the system and its dependencies"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|BUNDLE-TYPE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/BUNDLE|::|BUNDLE-PATHNAME-TYPE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|BUNDLE-PATHNAME-TYPE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/BUNDLE|::|BUNDLE-TYPE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/BUNDLE|::|BUNDLE-OUTPUT-FILES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|BUNDLE-OUTPUT-FILES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|C|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G35392| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|COMPILED-FILE| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/COMPONENT|::|FILE-COMPONENT|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|TYPE| :|INITFORM|
    '#2=(|UIOP/LISP-BUILD|::|COMPILE-FILE-TYPE|) :|INITFUNCTION|
    (|COMMON-LISP|::|FUNCTION| |ASDF/BUNDLE|::|DEFAULT-TYPE|
     (|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| #2#))))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Class for a file that is already compiled,\n
e.g. as part of the implementation, of an outer build system that calls into ASDF,\n
or of opaque libraries shipped along the source code."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G35396| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|PRECOMPILED-SYSTEM| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SYSTEM|::|SYSTEM|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|BUILD-PATHNAME| :|INITARGS|
    '(:|FASB| :|FASL|)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Class For a system that is delivered as a precompiled fasl"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G35399| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BUNDLE|::|PREBUILT-SYSTEM| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SYSTEM|::|SYSTEM|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|BUILD-PATHNAME| :|READERS|
    '(|ASDF/BUNDLE|::|PREBUILT-SYSTEM-STATIC-LIBRARY|) :|WRITERS|
    '((|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|PREBUILT-SYSTEM-STATIC-LIBRARY|))
    :|INITARGS| '(:|STATIC-LIBRARY| :|LIB|)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Class for a system delivered with a linkable static library (.a/.lib)"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|PREBUILT-SYSTEM-STATIC-LIBRARY|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/BUNDLE|::|PREBUILT-SYSTEM-STATIC-LIBRARY|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|WHEN|
 (|COMMON-LISP|::|AND| (|ASDF/UPGRADE|::|UPGRADING-P| "3.2.0"))
 (|COMMON-LISP|::|HANDLER-BIND|
  ((|COMMON-LISP|::|STYLE-WARNING| #'|COMMON-LISP|::|MUFFLE-WARNING|))
  (|COMMON-LISP|::|EVAL|
   '(|COMMON-LISP|::|PROGN|
     (|CLOS|::|DEFMETHOD| |CLOS|::|INITIALIZE-INSTANCE| :|AFTER|
      ((|ASDF/BUNDLE|::|INSTANCE| |ASDF/BUNDLE|::|BUNDLE-OP|)
       |COMMON-LISP|::|&REST| |ASDF/BUNDLE|::|INITARGS| |COMMON-LISP|::|&KEY|
       |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
      (|COMMON-LISP|::|DECLARE|
       (|COMMON-LISP|::|IGNORE| |ASDF/BUNDLE|::|INITARGS|)))))))
(|UIOP/UTILITY|::|DEFGENERIC*| |ASDF/BUNDLE|::|TRIVIAL-SYSTEM-P|
 (|ASDF/COMPONENT|::|COMPONENT|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/BUNDLE|::|USER-SYSTEM-P| (|ASDF/BUNDLE|::|S|)
 (|COMMON-LISP|::|AND|
  (|COMMON-LISP|::|TYPEP| |ASDF/BUNDLE|::|S| '|ASDF/SYSTEM|::|SYSTEM|)
  (|COMMON-LISP|::|NOT| (|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P| |ASDF/BUNDLE|::|S|))
  (|COMMON-LISP|::|NOT|
   (|ASDF/BUNDLE|::|TRIVIAL-SYSTEM-P| |ASDF/BUNDLE|::|S|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/BUNDLE|::|TRIVIAL-SYSTEM-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|TRIVIAL-SYSTEM-P|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/BUNDLE|::|USER-SYSTEM-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|USER-SYSTEM-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/BUNDLE|::|S|)))
(|COMMON-LISP|::|DEFTYPE| |ASDF/BUNDLE|::|USER-SYSTEM| |COMMON-LISP|::|NIL|
 '(|COMMON-LISP|::|AND| |ASDF/SYSTEM|::|SYSTEM|
   (|COMMON-LISP|::|SATISFIES| |ASDF/BUNDLE|::|USER-SYSTEM-P|)))
(|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
 (|SYSTEM|::|%PUT| '|ASDF/BUNDLE|::|USER-SYSTEM| '|SYSTEM|::|DEFTYPE-EXPANDER|
  (|COMMON-LISP|::|FUNCTION| #:|DEFTYPE-USER-SYSTEM|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<DEFTYPE-FORM>|)
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<DEFTYPE-FORM>| 1.
       1.))
     (|SYSTEM|::|TYPE-CALL-ERROR| |SYSTEM|::|<DEFTYPE-FORM>|)
     (|COMMON-LISP|::|LET*| |COMMON-LISP|::|NIL|
      (|COMMON-LISP|::|BLOCK| |ASDF/BUNDLE|::|USER-SYSTEM|
       '(|COMMON-LISP|::|AND| |ASDF/SYSTEM|::|SYSTEM|
         (|COMMON-LISP|::|SATISFIES| |ASDF/BUNDLE|::|USER-SYSTEM-P|))))))))
 (|SYSTEM|::|%SET-DOCUMENTATION| '|ASDF/BUNDLE|::|USER-SYSTEM|
  '|COMMON-LISP|::|TYPE| '|COMMON-LISP|::|NIL|)
 '|ASDF/BUNDLE|::|USER-SYSTEM|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/BUNDLE|::|DIRECT-DEPENDENCY-FILES|
 (|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|C| |COMMON-LISP|::|&KEY|
  (|ASDF/BUNDLE|::|TEST| '|COMMON-LISP|::|IDENTITY|)
  (|ASDF/BUNDLE|::|KEY| '|ASDF/ACTION|::|OUTPUT-FILES|)
  |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
 (|UIOP/UTILITY|::|WHILE-COLLECTING| (|ASDF/BUNDLE|::|COLLECT|)
  (|ASDF/PLAN|::|MAP-DIRECT-DEPENDENCIES| |ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|C|
   #'(|COMMON-LISP|::|LAMBDA| (|ASDF/BUNDLE|::|SUB-O| |ASDF/BUNDLE|::|SUB-C|)
      (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/BUNDLE|::|F| :|IN|
       (|COMMON-LISP|::|FUNCALL| |ASDF/BUNDLE|::|KEY| |ASDF/BUNDLE|::|SUB-O|
        |ASDF/BUNDLE|::|SUB-C|)
       :|WHEN|
       (|COMMON-LISP|::|FUNCALL| |ASDF/BUNDLE|::|TEST| |ASDF/BUNDLE|::|F|)
       :|DO| (|ASDF/BUNDLE|::|COLLECT| |ASDF/BUNDLE|::|F|))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/BUNDLE|::|PATHNAME-TYPE-EQUAL-FUNCTION|
 (|COMMON-LISP|::|TYPE|)
 #'(|COMMON-LISP|::|LAMBDA| (|ASDF/BUNDLE|::|P|)
    (|COMMON-LISP|::|EQUALP|
     (|COMMON-LISP|::|PATHNAME-TYPE| |ASDF/BUNDLE|::|P|)
     |COMMON-LISP|::|TYPE|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|INPUT-FILES|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|GATHER-OPERATION|)
  (|ASDF/BUNDLE|::|C| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|UNLESS|
  (|COMMON-LISP|::|EQ| (|ASDF/BUNDLE|::|BUNDLE-TYPE| |ASDF/BUNDLE|::|O|)
   :|NO-OUTPUT-FILE|)
  (|ASDF/BUNDLE|::|DIRECT-DEPENDENCY-FILES| |ASDF/BUNDLE|::|O|
   |ASDF/BUNDLE|::|C| :|KEY| '|ASDF/ACTION|::|OUTPUT-FILES| :|TEST|
   (|ASDF/BUNDLE|::|PATHNAME-TYPE-EQUAL-FUNCTION|
    (|ASDF/BUNDLE|::|BUNDLE-PATHNAME-TYPE|
     (|ASDF/BUNDLE|::|GATHER-TYPE| |ASDF/BUNDLE|::|O|))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/BUNDLE|::|SELECT-BUNDLE-OPERATION|
 (|COMMON-LISP|::|TYPE| |COMMON-LISP|::|&OPTIONAL| |ASDF/BUNDLE|::|MONOLITHIC|)
 (|COMMON-LISP|::|ECASE| |COMMON-LISP|::|TYPE|
  ((:|DLL| :|SHARED-LIBRARY|)
   (|COMMON-LISP|::|IF| |ASDF/BUNDLE|::|MONOLITHIC|
    '|ASDF/BUNDLE|::|MONOLITHIC-DLL-OP| '|ASDF/BUNDLE|::|DLL-OP|))
  ((:|LIB| :|STATIC-LIBRARY|)
   (|COMMON-LISP|::|IF| |ASDF/BUNDLE|::|MONOLITHIC|
    '|ASDF/BUNDLE|::|MONOLITHIC-LIB-OP| '|ASDF/BUNDLE|::|LIB-OP|))
  ((:|FASB|)
   (|COMMON-LISP|::|IF| |ASDF/BUNDLE|::|MONOLITHIC|
    '|ASDF/BUNDLE|::|MONOLITHIC-COMPILE-BUNDLE-OP|
    '|ASDF/BUNDLE|::|COMPILE-BUNDLE-OP|))
  ((:|IMAGE|) '|ASDF/BUNDLE|::|IMAGE-OP|)
  ((:|PROGRAM|) '|ASDF/BUNDLE|::|PROGRAM-OP|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/BUNDLE|::|DIRECT-DEPENDENCY-FILES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|DIRECT-DEPENDENCY-FILES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|C| |COMMON-LISP|::|&KEY|
    (|ASDF/BUNDLE|::|TEST| '|COMMON-LISP|::|IDENTITY|)
    (|ASDF/BUNDLE|::|KEY| '|ASDF/ACTION|::|OUTPUT-FILES|)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/BUNDLE|::|PATHNAME-TYPE-EQUAL-FUNCTION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|PATHNAME-TYPE-EQUAL-FUNCTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/BUNDLE|::|SELECT-BUNDLE-OPERATION|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|SELECT-BUNDLE-OPERATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|TYPE| |COMMON-LISP|::|&OPTIONAL|
    |ASDF/BUNDLE|::|MONOLITHIC|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|LOAD-BUNDLE-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/SYSTEM|::|SYSTEM|))
 `((,|ASDF/BUNDLE|::|O|
    ,@(|ASDF/COMPONENT|::|COMPONENT-SIDEWAY-DEPENDENCIES| |ASDF/BUNDLE|::|C|))
   (,(|COMMON-LISP|::|IF| (|ASDF/BUNDLE|::|USER-SYSTEM-P| |ASDF/BUNDLE|::|C|)
      '|ASDF/BUNDLE|::|COMPILE-BUNDLE-OP| '|ASDF/LISP-ACTION|::|LOAD-OP|)
    ,|ASDF/BUNDLE|::|C|)
   ,@(|CLOS|::|CALL-NEXT-METHOD|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|INPUT-FILES|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|LOAD-BUNDLE-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|WHEN| (|ASDF/BUNDLE|::|USER-SYSTEM-P| |ASDF/BUNDLE|::|C|)
  (|ASDF/ACTION|::|OUTPUT-FILES|
   (|ASDF/OPERATION|::|FIND-OPERATION| |ASDF/BUNDLE|::|O|
    '|ASDF/BUNDLE|::|COMPILE-BUNDLE-OP|)
   |ASDF/BUNDLE|::|C|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|LOAD-BUNDLE-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|WHEN|
  (|ASDF/ACTION|::|INPUT-FILES| |ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|C|)
  (|ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-FASL| |ASDF/BUNDLE|::|O|
   |ASDF/BUNDLE|::|C|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|MARK-OPERATION-DONE| :|AFTER|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|LOAD-BUNDLE-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/SYSTEM|::|SYSTEM|))
 (|ASDF/ACTION|::|MARK-OPERATION-DONE|
  (|ASDF/OPERATION|::|FIND-OPERATION| |ASDF/BUNDLE|::|O|
   '|ASDF/LISP-ACTION|::|LOAD-OP|)
  |ASDF/BUNDLE|::|C|))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|MARK-OPERATION-DONE|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|TRIVIAL-SYSTEM-P|
 ((|ASDF/BUNDLE|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|EVERY|
  #'(|COMMON-LISP|::|LAMBDA| (|ASDF/BUNDLE|::|C|)
     (|COMMON-LISP|::|TYPEP| |ASDF/BUNDLE|::|C|
      '|ASDF/BUNDLE|::|COMPILED-FILE|))
  (|ASDF/COMPONENT|::|COMPONENT-CHILDREN| |ASDF/BUNDLE|::|S|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|INPUT-FILES|
 ((|ASDF/BUNDLE|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/BUNDLE|::|C| |ASDF/BUNDLE|::|COMPILED-FILE|))
 (|COMMON-LISP|::|LIST|
  (|ASDF/COMPONENT|::|COMPONENT-PATHNAME| |ASDF/BUNDLE|::|C|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/BUNDLE|::|O| |ASDF/LISP-ACTION|::|LOAD-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/BUNDLE|::|COMPILED-FILE|))
 (|ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-FASL| |ASDF/BUNDLE|::|O|
  |ASDF/BUNDLE|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/BUNDLE|::|O| |ASDF/LISP-ACTION|::|LOAD-SOURCE-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/BUNDLE|::|COMPILED-FILE|))
 (|ASDF/ACTION|::|PERFORM|
  (|ASDF/OPERATION|::|FIND-OPERATION| |ASDF/BUNDLE|::|O|
   '|ASDF/LISP-ACTION|::|LOAD-OP|)
  |ASDF/BUNDLE|::|C|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/BUNDLE|::|O| |ASDF/OPERATION|::|OPERATION|)
  (|ASDF/BUNDLE|::|C| |ASDF/BUNDLE|::|COMPILED-FILE|))
 |COMMON-LISP|::|NIL|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|TRIVIAL-SYSTEM-P|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|TRIVIAL-SYSTEM-P|
 ((|ASDF/BUNDLE|::|S| |ASDF/BUNDLE|::|PREBUILT-SYSTEM|)) |COMMON-LISP|::|T|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|LINK-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/BUNDLE|::|PREBUILT-SYSTEM|))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|BASIC-COMPILE-BUNDLE-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/BUNDLE|::|PREBUILT-SYSTEM|))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|LIB-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/BUNDLE|::|PREBUILT-SYSTEM|))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|DLL-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/BUNDLE|::|PREBUILT-SYSTEM|))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|GATHER-OPERATION|)
  (|ASDF/BUNDLE|::|C| |ASDF/BUNDLE|::|PREBUILT-SYSTEM|))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|OUTPUT-FILES|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|LIB-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/BUNDLE|::|PREBUILT-SYSTEM|))
 (|COMMON-LISP|::|VALUES|
  (|COMMON-LISP|::|LIST|
   (|ASDF/BUNDLE|::|PREBUILT-SYSTEM-STATIC-LIBRARY| |ASDF/BUNDLE|::|C|))
  |COMMON-LISP|::|T|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|TRIVIAL-SYSTEM-P|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|OUTPUT-FILES|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|DELIVER-ASD-OP|)
  (|ASDF/BUNDLE|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|LIST|
  (|COMMON-LISP|::|MAKE-PATHNAME| :|NAME|
   (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/BUNDLE|::|S|) :|TYPE| "asd"
   :|DEFAULTS| (|ASDF/COMPONENT|::|COMPONENT-PATHNAME| |ASDF/BUNDLE|::|S|))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|DELIVER-ASD-OP|)
  (|ASDF/BUNDLE|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|LET*|
  ((|ASDF/BUNDLE|::|INPUTS|
    (|ASDF/ACTION|::|INPUT-FILES| |ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|S|))
   (|ASDF/BUNDLE|::|FASL| (|COMMON-LISP|::|FIRST| |ASDF/BUNDLE|::|INPUTS|))
   (|ASDF/BUNDLE|::|LIBRARY| (|COMMON-LISP|::|SECOND| |ASDF/BUNDLE|::|INPUTS|))
   (|ASDF/BUNDLE|::|ASD|
    (|COMMON-LISP|::|FIRST|
     (|ASDF/ACTION|::|OUTPUT-FILES| |ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|S|)))
   (|ASDF/COMPONENT|::|NAME|
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|AND| |ASDF/BUNDLE|::|FASL| |ASDF/BUNDLE|::|ASD|)
     (|COMMON-LISP|::|PATHNAME-NAME| |ASDF/BUNDLE|::|ASD|)
     (|COMMON-LISP|::|RETURN-FROM| |ASDF/ACTION|::|PERFORM|)))
   (|ASDF/COMPONENT|::|VERSION|
    (|ASDF/COMPONENT|::|COMPONENT-VERSION| |ASDF/BUNDLE|::|S|))
   (|ASDF/BUNDLE|::|DEPENDENCIES|
    (|COMMON-LISP|::|IF|
     (|ASDF/BUNDLE|::|OPERATION-MONOLITHIC-P| |ASDF/BUNDLE|::|O|)
     (|COMMON-LISP|::|REMOVE-IF-NOT| '|ASDF/SYSTEM|::|BUILTIN-SYSTEM-P|
      (|ASDF/PLAN|::|REQUIRED-COMPONENTS| |ASDF/BUNDLE|::|S| :|COMPONENT-TYPE|
       '|ASDF/SYSTEM|::|SYSTEM| :|KEEP-OPERATION|
       '|ASDF/LISP-ACTION|::|BASIC-LOAD-OP|))
     (|UIOP/UTILITY|::|WHILE-COLLECTING| (|ASDF/BUNDLE|::|X|)
      (|ASDF/PLAN|::|MAP-DIRECT-DEPENDENCIES| '|ASDF/LISP-ACTION|::|LOAD-OP|
       |ASDF/BUNDLE|::|S|
       #'(|COMMON-LISP|::|LAMBDA| (|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|C|)
          (|COMMON-LISP|::|WHEN|
           (|COMMON-LISP|::|AND|
            (|COMMON-LISP|::|TYPEP| |ASDF/BUNDLE|::|O|
             '|ASDF/LISP-ACTION|::|LOAD-OP|)
            (|COMMON-LISP|::|TYPEP| |ASDF/BUNDLE|::|C|
             '|ASDF/SYSTEM|::|SYSTEM|))
           (|ASDF/BUNDLE|::|X| |ASDF/BUNDLE|::|C|)))))))
   (|ASDF/BUNDLE|::|DEPENDS-ON|
    (|COMMON-LISP|::|MAPCAR| '|ASDF/SYSTEM|::|COERCE-NAME|
     |ASDF/BUNDLE|::|DEPENDENCIES|)))
  (|COMMON-LISP|::|WHEN|
   (|UIOP/PATHNAME|::|PATHNAME-EQUAL| |ASDF/BUNDLE|::|ASD|
    (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/BUNDLE|::|S|))
   (|COMMON-LISP|::|CERROR| "overwrite the asd file"
    "~/asdf-action:format-action/ is going to overwrite the system definition file ~S ~\n
which is probably not what you want; you probably need to tweak your output translations."
    (|COMMON-LISP|::|CONS| |ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|S|)
    |ASDF/BUNDLE|::|ASD|))
  (|COMMON-LISP|::|WITH-OPEN-FILE|
   (|ASDF/BUNDLE|::|S| |ASDF/BUNDLE|::|ASD| :|DIRECTION| :|OUTPUT| :|IF-EXISTS|
    :|SUPERSEDE| :|IF-DOES-NOT-EXIST| :|CREATE|)
   (|COMMON-LISP|::|FORMAT| |ASDF/BUNDLE|::|S|
    ";;; Prebuilt~:[~; monolithic~] ASDF definition for system ~A~%"
    (|ASDF/BUNDLE|::|OPERATION-MONOLITHIC-P| |ASDF/BUNDLE|::|O|)
    |ASDF/COMPONENT|::|NAME|)
   (|COMMON-LISP|::|FORMAT| |ASDF/BUNDLE|::|S|
    ";;; Built for ~A ~A on a ~A/~A ~A~%"
    (|COMMON-LISP|::|LISP-IMPLEMENTATION-TYPE|)
    (|COMMON-LISP|::|LISP-IMPLEMENTATION-VERSION|)
    (|COMMON-LISP|::|SOFTWARE-TYPE|) (|COMMON-LISP|::|MACHINE-TYPE|)
    (|COMMON-LISP|::|SOFTWARE-VERSION|))
   (|COMMON-LISP|::|LET|
    ((|COMMON-LISP|::|*PACKAGE*| (|COMMON-LISP|::|FIND-PACKAGE| :|ASDF-USER|)))
    (|COMMON-LISP|::|PPRINT|
     `(|ASDF/PARSE-DEFSYSTEM|::|DEFSYSTEM| ,|ASDF/COMPONENT|::|NAME| :|CLASS|
       |ASDF/BUNDLE|::|PREBUILT-SYSTEM| :|VERSION| ,|ASDF/COMPONENT|::|VERSION|
       :|DEPENDS-ON| ,|ASDF/BUNDLE|::|DEPENDS-ON| :|COMPONENTS|
       ((:|COMPILED-FILE|
         ,(|COMMON-LISP|::|PATHNAME-NAME| |ASDF/BUNDLE|::|FASL|)))
       ,@(|COMMON-LISP|::|WHEN| |ASDF/BUNDLE|::|LIBRARY|
          `(:|LIB|
            ,(|COMMON-LISP|::|FILE-NAMESTRING| |ASDF/BUNDLE|::|LIBRARY|))))
     |ASDF/BUNDLE|::|S|)
    (|COMMON-LISP|::|TERPRI| |ASDF/BUNDLE|::|S|)))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|BASIC-COMPILE-BUNDLE-OP|)
  (|ASDF/BUNDLE|::|C| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|LET*|
  ((|ASDF/ACTION|::|INPUT-FILES|
    (|ASDF/ACTION|::|INPUT-FILES| |ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|C|))
   (|ASDF/BUNDLE|::|FASL-FILES|
    (|COMMON-LISP|::|REMOVE| (|UIOP/LISP-BUILD|::|COMPILE-FILE-TYPE|)
     |ASDF/ACTION|::|INPUT-FILES| :|KEY| #'|COMMON-LISP|::|PATHNAME-TYPE|
     :|TEST-NOT| #'|COMMON-LISP|::|EQUALP|))
   (|ASDF/BUNDLE|::|NON-FASL-FILES|
    (|COMMON-LISP|::|REMOVE| (|UIOP/LISP-BUILD|::|COMPILE-FILE-TYPE|)
     |ASDF/ACTION|::|INPUT-FILES| :|KEY| #'|COMMON-LISP|::|PATHNAME-TYPE|
     :|TEST| #'|COMMON-LISP|::|EQUALP|))
   (|ASDF/ACTION|::|OUTPUT-FILES|
    (|ASDF/ACTION|::|OUTPUT-FILES| |ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|C|))
   (|ASDF/ACTION|::|OUTPUT-FILE|
    (|COMMON-LISP|::|FIRST| |ASDF/ACTION|::|OUTPUT-FILES|)))
  (|COMMON-LISP|::|ASSERT|
   (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|NOT| |ASDF/ACTION|::|INPUT-FILES|)
    (|COMMON-LISP|::|NOT| |ASDF/ACTION|::|OUTPUT-FILES|)))
  (|COMMON-LISP|::|WHEN| |ASDF/ACTION|::|INPUT-FILES|
   (|COMMON-LISP|::|WHEN| |ASDF/BUNDLE|::|NON-FASL-FILES|
    (|COMMON-LISP|::|ERROR|
     "On ~A, asdf/bundle can only bundle FASL files, but these were also produced: ~S"
     (|UIOP/OS|::|IMPLEMENTATION-TYPE|) |ASDF/BUNDLE|::|NON-FASL-FILES|))
   (|COMMON-LISP|::|WHEN|
    (|COMMON-LISP|::|OR| (|ASDF/BUNDLE|::|PROLOGUE-CODE| |ASDF/BUNDLE|::|C|)
     (|ASDF/BUNDLE|::|EPILOGUE-CODE| |ASDF/BUNDLE|::|C|))
    (|COMMON-LISP|::|ERROR|
     "prologue-code and epilogue-code are not supported on ~A"
     (|UIOP/OS|::|IMPLEMENTATION-TYPE|)))
   (|UIOP/STREAM|::|WITH-STAGING-PATHNAME| (|ASDF/ACTION|::|OUTPUT-FILE|)
    (|UIOP/LISP-BUILD|::|COMBINE-FASLS| |ASDF/BUNDLE|::|FASL-FILES|
     |ASDF/ACTION|::|OUTPUT-FILE|)))))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|INPUT-FILES|
 ((|ASDF/BUNDLE|::|O| |ASDF/LISP-ACTION|::|LOAD-OP|)
  (|ASDF/BUNDLE|::|S| |ASDF/BUNDLE|::|PRECOMPILED-SYSTEM|))
 (|ASDF/BUNDLE|::|BUNDLE-OUTPUT-FILES|
  (|ASDF/OPERATION|::|FIND-OPERATION| |ASDF/BUNDLE|::|O|
   '|ASDF/BUNDLE|::|COMPILE-BUNDLE-OP|)
  |ASDF/BUNDLE|::|S|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/BUNDLE|::|O| |ASDF/LISP-ACTION|::|LOAD-OP|)
  (|ASDF/BUNDLE|::|S| |ASDF/BUNDLE|::|PRECOMPILED-SYSTEM|))
 (|ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-FASL| |ASDF/BUNDLE|::|O|
  |ASDF/BUNDLE|::|S|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 ((|ASDF/BUNDLE|::|O| |ASDF/BUNDLE|::|LOAD-BUNDLE-OP|)
  (|ASDF/BUNDLE|::|S| |ASDF/BUNDLE|::|PRECOMPILED-SYSTEM|))
 `((|ASDF/LISP-ACTION|::|LOAD-OP| ,|ASDF/BUNDLE|::|S|)
   ,@(|CLOS|::|CALL-NEXT-METHOD|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|COMPONENT-DEPENDS-ON|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|ASDF/CONCATENATE-SOURCE| :|NICKNAMES| '|COMMON-LISP|::|NIL|
  :|DOCUMENTATION| '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/COMPONENT|
    :|ASDF/OPERATION| :|ASDF/SYSTEM| :|ASDF/ACTION| :|ASDF/LISP-ACTION|
    :|ASDF/PLAN| :|ASDF/BUNDLE|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|CONCATENATE-SOURCE-OP| #:|LOAD-CONCATENATED-SOURCE-OP|
    #:|COMPILE-CONCATENATED-SOURCE-OP| #:|LOAD-COMPILED-CONCATENATED-SOURCE-OP|
    #:|MONOLITHIC-CONCATENATE-SOURCE-OP|
    #:|MONOLITHIC-LOAD-CONCATENATED-SOURCE-OP|
    #:|MONOLITHIC-COMPILE-CONCATENATED-SOURCE-OP|
    #:|MONOLITHIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/CONCATENATE-SOURCE| :|ASDF|) :|MIX| '|COMMON-LISP|::|NIL|
  :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/CONCATENATE-SOURCE"))
(|CLOS|::|DEFCLASS| |ASDF/CONCATENATE-SOURCE|::|BASIC-CONCATENATE-SOURCE-OP|
 (|ASDF/BUNDLE|::|BUNDLE-OP|) |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/BUNDLE|::|BUNDLE-TYPE|
 ((|ASDF/CONCATENATE-SOURCE|::|O|
   |ASDF/CONCATENATE-SOURCE|::|BASIC-CONCATENATE-SOURCE-OP|))
 "lisp")
(|CLOS|::|DEFCLASS|
 |ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-CONCATENATED-SOURCE-OP|
 (|ASDF/LISP-ACTION|::|BASIC-LOAD-OP| |ASDF/ACTION|::|SELFWARD-OPERATION|)
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFCLASS|
 |ASDF/CONCATENATE-SOURCE|::|BASIC-COMPILE-CONCATENATED-SOURCE-OP|
 (|ASDF/LISP-ACTION|::|BASIC-COMPILE-OP| |ASDF/ACTION|::|SELFWARD-OPERATION|)
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFCLASS|
 |ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP|
 (|ASDF/LISP-ACTION|::|BASIC-LOAD-OP| |ASDF/ACTION|::|SELFWARD-OPERATION|)
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFCLASS| |ASDF/CONCATENATE-SOURCE|::|CONCATENATE-SOURCE-OP|
 (|ASDF/CONCATENATE-SOURCE|::|BASIC-CONCATENATE-SOURCE-OP|
  |ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Operation to concatenate all sources in a system into a single file"))
(|CLOS|::|DEFCLASS| |ASDF/CONCATENATE-SOURCE|::|LOAD-CONCATENATED-SOURCE-OP|
 (|ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-CONCATENATED-SOURCE-OP|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '(|ASDF/LISP-ACTION|::|PREPARE-OP|
     |ASDF/CONCATENATE-SOURCE|::|CONCATENATE-SOURCE-OP|)
   :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "Operation to load the result of concatenate-source-op as source"))
(|CLOS|::|DEFCLASS| |ASDF/CONCATENATE-SOURCE|::|COMPILE-CONCATENATED-SOURCE-OP|
 (|ASDF/CONCATENATE-SOURCE|::|BASIC-COMPILE-CONCATENATED-SOURCE-OP|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '(|ASDF/LISP-ACTION|::|PREPARE-OP|
     |ASDF/CONCATENATE-SOURCE|::|CONCATENATE-SOURCE-OP|)
   :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION| "Operation to compile the result of concatenate-source-op"))
(|CLOS|::|DEFCLASS|
 |ASDF/CONCATENATE-SOURCE|::|LOAD-COMPILED-CONCATENATED-SOURCE-OP|
 (|ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '(|ASDF/LISP-ACTION|::|PREPARE-OP|
     |ASDF/CONCATENATE-SOURCE|::|COMPILE-CONCATENATED-SOURCE-OP|)
   :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "Operation to load the result of compile-concatenated-source-op"))
(|CLOS|::|DEFCLASS|
 |ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-CONCATENATE-SOURCE-OP|
 (|ASDF/CONCATENATE-SOURCE|::|BASIC-CONCATENATE-SOURCE-OP|
  |ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP|
  |ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
 |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Operation to concatenate all sources in a system and its dependencies\n
into a single file"))
(|CLOS|::|DEFCLASS|
 |ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-LOAD-CONCATENATED-SOURCE-OP|
 (|ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-CONCATENATED-SOURCE-OP|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '|ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-CONCATENATE-SOURCE-OP| :|ALLOCATION|
   :|CLASS|))
 (:|DOCUMENTATION|
  "Operation to load the result of monolithic-concatenate-source-op as source"))
(|CLOS|::|DEFCLASS|
 |ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-COMPILE-CONCATENATED-SOURCE-OP|
 (|ASDF/CONCATENATE-SOURCE|::|BASIC-COMPILE-CONCATENATED-SOURCE-OP|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '|ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-CONCATENATE-SOURCE-OP| :|ALLOCATION|
   :|CLASS|))
 (:|DOCUMENTATION|
  "Operation to compile the result of monolithic-concatenate-source-op"))
(|CLOS|::|DEFCLASS|
 |ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP|
 (|ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP|)
 ((|ASDF/ACTION|::|SELFWARD-OPERATION| :|INITFORM|
   '|ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-COMPILE-CONCATENATED-SOURCE-OP|
   :|ALLOCATION| :|CLASS|))
 (:|DOCUMENTATION|
  "Operation to load the result of monolithic-compile-concatenated-source-op"))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|INPUT-FILES|
 ((|ASDF/OPERATION|::|OPERATION|
   |ASDF/CONCATENATE-SOURCE|::|BASIC-CONCATENATE-SOURCE-OP|)
  (|ASDF/CONCATENATE-SOURCE|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|LOOP| :|WITH| |ASDF/CONCATENATE-SOURCE|::|ENCODING|
  |COMMON-LISP|::|=|
  (|COMMON-LISP|::|OR|
   (|ASDF/COMPONENT|::|COMPONENT-ENCODING| |ASDF/CONCATENATE-SOURCE|::|S|)
   |UIOP/STREAM|::|*DEFAULT-ENCODING*|)
  :|WITH| |ASDF/CONCATENATE-SOURCE|::|OTHER-ENCODINGS| |COMMON-LISP|::|=|
  '|COMMON-LISP|::|NIL| :|WITH| |ASDF/COMPONENT|::|AROUND-COMPILE|
  |COMMON-LISP|::|=|
  (|ASDF/COMPONENT|::|AROUND-COMPILE-HOOK| |ASDF/CONCATENATE-SOURCE|::|S|)
  :|WITH| |ASDF/CONCATENATE-SOURCE|::|OTHER-AROUND-COMPILE| |COMMON-LISP|::|=|
  '|COMMON-LISP|::|NIL| :|FOR| |ASDF/CONCATENATE-SOURCE|::|C| :|IN|
  (|ASDF/PLAN|::|REQUIRED-COMPONENTS| |ASDF/CONCATENATE-SOURCE|::|S|
   :|GOAL-OPERATION| '|ASDF/LISP-ACTION|::|LOAD-OP| :|KEEP-OPERATION|
   '|ASDF/LISP-ACTION|::|BASIC-COMPILE-OP| :|OTHER-SYSTEMS|
   (|ASDF/BUNDLE|::|OPERATION-MONOLITHIC-P| |ASDF/OPERATION|::|OPERATION|))
  :|APPEND|
  (|COMMON-LISP|::|WHEN|
   (|COMMON-LISP|::|TYPEP| |ASDF/CONCATENATE-SOURCE|::|C|
    '|ASDF/LISP-ACTION|::|CL-SOURCE-FILE|)
   (|COMMON-LISP|::|LET|
    ((|ASDF/CONCATENATE-SOURCE|::|E|
      (|ASDF/COMPONENT|::|COMPONENT-ENCODING| |ASDF/CONCATENATE-SOURCE|::|C|)))
    (|COMMON-LISP|::|UNLESS|
     (|COMMON-LISP|::|EQUAL| |ASDF/CONCATENATE-SOURCE|::|E|
      |ASDF/CONCATENATE-SOURCE|::|ENCODING|)
     (|COMMON-LISP|::|LET|
      ((|ASDF/CONCATENATE-SOURCE|::|A|
        (|COMMON-LISP|::|ASSOC| |ASDF/CONCATENATE-SOURCE|::|E|
         |ASDF/CONCATENATE-SOURCE|::|OTHER-ENCODINGS|)))
      (|COMMON-LISP|::|IF| |ASDF/CONCATENATE-SOURCE|::|A|
       (|COMMON-LISP|::|PUSH|
        (|ASDF/COMPONENT|::|COMPONENT-FIND-PATH|
         |ASDF/CONCATENATE-SOURCE|::|C|)
        (|COMMON-LISP|::|CDR| |ASDF/CONCATENATE-SOURCE|::|A|))
       (|COMMON-LISP|::|PUSH|
        (|COMMON-LISP|::|LIST| |ASDF/CONCATENATE-SOURCE|::|A|
         (|ASDF/COMPONENT|::|COMPONENT-FIND-PATH|
          |ASDF/CONCATENATE-SOURCE|::|C|))
        |ASDF/CONCATENATE-SOURCE|::|OTHER-ENCODINGS|)))))
   (|COMMON-LISP|::|UNLESS|
    (|COMMON-LISP|::|EQUAL| |ASDF/COMPONENT|::|AROUND-COMPILE|
     (|ASDF/COMPONENT|::|AROUND-COMPILE-HOOK| |ASDF/CONCATENATE-SOURCE|::|C|))
    (|COMMON-LISP|::|PUSH|
     (|ASDF/COMPONENT|::|COMPONENT-FIND-PATH| |ASDF/CONCATENATE-SOURCE|::|C|)
     |ASDF/CONCATENATE-SOURCE|::|OTHER-AROUND-COMPILE|))
   (|ASDF/ACTION|::|INPUT-FILES|
    (|ASDF/OPERATION|::|MAKE-OPERATION| '|ASDF/LISP-ACTION|::|COMPILE-OP|)
    |ASDF/CONCATENATE-SOURCE|::|C|))
  :|INTO| |ASDF/CONCATENATE-SOURCE|::|INPUTS| :|FINALLY|
  (|COMMON-LISP|::|WHEN| |ASDF/CONCATENATE-SOURCE|::|OTHER-ENCODINGS|
   (|COMMON-LISP|::|WARN|
    "~S uses encoding ~A but has sources that use these encodings:~{ ~A~}"
    |ASDF/OPERATION|::|OPERATION| |ASDF/CONCATENATE-SOURCE|::|ENCODING|
    (|COMMON-LISP|::|MAPCAR|
     #'(|COMMON-LISP|::|LAMBDA| (|ASDF/CONCATENATE-SOURCE|::|X|)
        (|COMMON-LISP|::|CONS|
         (|COMMON-LISP|::|CAR| |ASDF/CONCATENATE-SOURCE|::|X|)
         (|COMMON-LISP|::|LIST|
          (|COMMON-LISP|::|REVERSE|
           (|COMMON-LISP|::|CDR| |ASDF/CONCATENATE-SOURCE|::|X|)))))
     |ASDF/CONCATENATE-SOURCE|::|OTHER-ENCODINGS|)))
  (|COMMON-LISP|::|WHEN| |ASDF/CONCATENATE-SOURCE|::|OTHER-AROUND-COMPILE|
   (|COMMON-LISP|::|WARN|
    "~S uses around-compile hook ~A but has sources that use these hooks: ~A"
    |ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|AROUND-COMPILE|
    |ASDF/CONCATENATE-SOURCE|::|OTHER-AROUND-COMPILE|))
  (|COMMON-LISP|::|RETURN| |ASDF/CONCATENATE-SOURCE|::|INPUTS|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|OUTPUT-FILES|
 ((|ASDF/CONCATENATE-SOURCE|::|O|
   |ASDF/CONCATENATE-SOURCE|::|BASIC-COMPILE-CONCATENATED-SOURCE-OP|)
  (|ASDF/CONCATENATE-SOURCE|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|ASDF/LISP-ACTION|::|LISP-COMPILATION-OUTPUT-FILES|
  |ASDF/CONCATENATE-SOURCE|::|O| |ASDF/CONCATENATE-SOURCE|::|S|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/CONCATENATE-SOURCE|::|O|
   |ASDF/CONCATENATE-SOURCE|::|BASIC-CONCATENATE-SOURCE-OP|)
  (|ASDF/CONCATENATE-SOURCE|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|COMMON-LISP|::|LET*|
  ((|ASDF/CONCATENATE-SOURCE|::|INS|
    (|ASDF/ACTION|::|INPUT-FILES| |ASDF/CONCATENATE-SOURCE|::|O|
     |ASDF/CONCATENATE-SOURCE|::|S|))
   (|ASDF/CONCATENATE-SOURCE|::|OUT|
    (|ASDF/ACTION|::|OUTPUT-FILE| |ASDF/CONCATENATE-SOURCE|::|O|
     |ASDF/CONCATENATE-SOURCE|::|S|))
   (|ASDF/CONCATENATE-SOURCE|::|TMP|
    (|UIOP/STREAM|::|TMPIZE-PATHNAME| |ASDF/CONCATENATE-SOURCE|::|OUT|)))
  (|UIOP/STREAM|::|CONCATENATE-FILES| |ASDF/CONCATENATE-SOURCE|::|INS|
   |ASDF/CONCATENATE-SOURCE|::|TMP|)
  (|UIOP/FILESYSTEM|::|RENAME-FILE-OVERWRITING-TARGET|
   |ASDF/CONCATENATE-SOURCE|::|TMP| |ASDF/CONCATENATE-SOURCE|::|OUT|)))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/CONCATENATE-SOURCE|::|O|
   |ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-CONCATENATED-SOURCE-OP|)
  (|ASDF/CONCATENATE-SOURCE|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-SOURCE| |ASDF/CONCATENATE-SOURCE|::|O|
  |ASDF/CONCATENATE-SOURCE|::|S|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/CONCATENATE-SOURCE|::|O|
   |ASDF/CONCATENATE-SOURCE|::|BASIC-COMPILE-CONCATENATED-SOURCE-OP|)
  (|ASDF/CONCATENATE-SOURCE|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|ASDF/LISP-ACTION|::|PERFORM-LISP-COMPILATION| |ASDF/CONCATENATE-SOURCE|::|O|
  |ASDF/CONCATENATE-SOURCE|::|S|))
(|CLOS|::|DEFMETHOD| |ASDF/ACTION|::|PERFORM|
 ((|ASDF/CONCATENATE-SOURCE|::|O|
   |ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP|)
  (|ASDF/CONCATENATE-SOURCE|::|S| |ASDF/SYSTEM|::|SYSTEM|))
 (|ASDF/LISP-ACTION|::|PERFORM-LISP-LOAD-FASL| |ASDF/CONCATENATE-SOURCE|::|O|
  |ASDF/CONCATENATE-SOURCE|::|S|))
(|COMMON-LISP|::|LET*| ((#1=#:|G36400| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/CONCATENATE-SOURCE|::|BASIC-CONCATENATE-SOURCE-OP|
  :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST| '|ASDF/BUNDLE|::|BUNDLE-OP|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BUNDLE|::|BUNDLE-TYPE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G36427| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-CONCATENATED-SOURCE-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/LISP-ACTION|::|BASIC-LOAD-OP|
   '|ASDF/ACTION|::|SELFWARD-OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G36430| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/CONCATENATE-SOURCE|::|BASIC-COMPILE-CONCATENATED-SOURCE-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/LISP-ACTION|::|BASIC-COMPILE-OP|
   '|ASDF/ACTION|::|SELFWARD-OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G36433| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/LISP-ACTION|::|BASIC-LOAD-OP|
   '|ASDF/ACTION|::|SELFWARD-OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G36436| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/CONCATENATE-SOURCE|::|CONCATENATE-SOURCE-OP| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST|
   '|ASDF/CONCATENATE-SOURCE|::|BASIC-CONCATENATE-SOURCE-OP|
   '|ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation to concatenate all sources in a system into a single file"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G36439| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/CONCATENATE-SOURCE|::|LOAD-CONCATENATED-SOURCE-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST|
   '|ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-CONCATENATED-SOURCE-OP|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='(|ASDF/LISP-ACTION|::|PREPARE-OP|
          |ASDF/CONCATENATE-SOURCE|::|CONCATENATE-SOURCE-OP|)
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation to load the result of concatenate-source-op as source"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G36442| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/CONCATENATE-SOURCE|::|COMPILE-CONCATENATED-SOURCE-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST|
   '|ASDF/CONCATENATE-SOURCE|::|BASIC-COMPILE-CONCATENATED-SOURCE-OP|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='(|ASDF/LISP-ACTION|::|PREPARE-OP|
          |ASDF/CONCATENATE-SOURCE|::|CONCATENATE-SOURCE-OP|)
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation to compile the result of concatenate-source-op"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G36445| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/CONCATENATE-SOURCE|::|LOAD-COMPILED-CONCATENATED-SOURCE-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST|
   '|ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='(|ASDF/LISP-ACTION|::|PREPARE-OP|
          |ASDF/CONCATENATE-SOURCE|::|COMPILE-CONCATENATED-SOURCE-OP|)
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation to load the result of compile-concatenated-source-op"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G36448| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-CONCATENATE-SOURCE-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST|
   '|ASDF/CONCATENATE-SOURCE|::|BASIC-CONCATENATE-SOURCE-OP|
   '|ASDF/BUNDLE|::|MONOLITHIC-BUNDLE-OP|
   '|ASDF/ACTION|::|NON-PROPAGATING-OPERATION|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation to concatenate all sources in a system and its dependencies\n
into a single file"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G36451| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-LOAD-CONCATENATED-SOURCE-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST|
   '|ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-CONCATENATED-SOURCE-OP|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='|ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-CONCATENATE-SOURCE-OP|
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation to load the result of monolithic-concatenate-source-op as source"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G36454| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-COMPILE-CONCATENATED-SOURCE-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST|
   '|ASDF/CONCATENATE-SOURCE|::|BASIC-COMPILE-CONCATENATED-SOURCE-OP|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='|ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-CONCATENATE-SOURCE-OP|
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation to compile the result of monolithic-concatenate-source-op"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G36457| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST|
   '|ASDF/CONCATENATE-SOURCE|::|BASIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/ACTION|::|SELFWARD-OPERATION|
    :|ALLOCATION| ':|CLASS| :|INITFORM|
    '#2='|ASDF/CONCATENATE-SOURCE|::|MONOLITHIC-COMPILE-CONCATENATED-SOURCE-OP|
    :|INITFUNCTION| (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| #2#)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Operation to load the result of monolithic-compile-concatenated-source-op"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|INPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|OUTPUT-FILES|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/ACTION|::|PERFORM|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|ASDF/PACKAGE-INFERRED-SYSTEM| :|NICKNAMES| '|COMMON-LISP|::|NIL|
  :|DOCUMENTATION| '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT| :|ASDF/SYSTEM| :|ASDF/SYSTEM-REGISTRY|
    :|ASDF/LISP-ACTION| :|ASDF/PARSE-DEFSYSTEM|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|PACKAGE-INFERRED-SYSTEM| #:|SYSDEF-PACKAGE-INFERRED-SYSTEM-SEARCH|
    #:|PACKAGE-SYSTEM| #:|REGISTER-SYSTEM-PACKAGES| #:|*DEFPACKAGE-FORMS*|
    #:|*PACKAGE-INFERRED-SYSTEMS*|
    #:|PACKAGE-INFERRED-SYSTEM-MISSING-PACKAGE-ERROR|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/PACKAGE-INFERRED-SYSTEM| :|ASDF/PACKAGE-SYSTEM| :|ASDF|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/PACKAGE-INFERRED-SYSTEM"))
(|COMMON-LISP|::|DEFPARAMETER|
 |ASDF/PACKAGE-INFERRED-SYSTEM|::|*DEFPACKAGE-FORMS*|
 '(|COMMON-LISP|::|DEFPACKAGE| |UIOP/PACKAGE|::|DEFINE-PACKAGE|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PACKAGE-INFERRED-SYSTEM|::|INITIAL-PACKAGE-INFERRED-SYSTEMS-TABLE|
 |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|LET|
  ((|ASDF/PACKAGE-INFERRED-SYSTEM|::|H|
    (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)))
  (|COMMON-LISP|::|DOLIST|
   (|ASDF/PACKAGE-INFERRED-SYSTEM|::|P| (|COMMON-LISP|::|LIST-ALL-PACKAGES|))
   (|COMMON-LISP|::|DOLIST|
    (|ASDF/PACKAGE-INFERRED-SYSTEM|::|N|
     (|UIOP/PACKAGE|::|PACKAGE-NAMES| |ASDF/PACKAGE-INFERRED-SYSTEM|::|P|))
    (|COMMON-LISP|::|SETF|
     (|COMMON-LISP|::|GETHASH| |ASDF/PACKAGE-INFERRED-SYSTEM|::|N|
      |ASDF/PACKAGE-INFERRED-SYSTEM|::|H|)
     |COMMON-LISP|::|T|)))
  |ASDF/PACKAGE-INFERRED-SYSTEM|::|H|))
(|COMMON-LISP|::|DEFVAR|
 |ASDF/PACKAGE-INFERRED-SYSTEM|::|*PACKAGE-INFERRED-SYSTEMS*|
 (|ASDF/PACKAGE-INFERRED-SYSTEM|::|INITIAL-PACKAGE-INFERRED-SYSTEMS-TABLE|))
(|CLOS|::|DEFCLASS| |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM|
 (|ASDF/SYSTEM|::|SYSTEM|) |COMMON-LISP|::|NIL|
 (:|DOCUMENTATION|
  "Class for primary systems for which secondary systems are automatically\n
in the one-file, one-file, one-system style: system names are mapped to files under the primary\n
system's system-source-directory, dependencies are inferred from the first defpackage form in\n
every such file"))
(|CLOS|::|DEFCLASS| |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-SYSTEM|
 (|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM|)
 |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PACKAGE-INFERRED-SYSTEM|::|DEFPACKAGE-FORM-P|
 (|ASDF/PACKAGE-INFERRED-SYSTEM|::|FORM|)
 (|COMMON-LISP|::|AND|
  (|COMMON-LISP|::|CONSP| |ASDF/PACKAGE-INFERRED-SYSTEM|::|FORM|)
  (|COMMON-LISP|::|MEMBER|
   (|COMMON-LISP|::|CAR| |ASDF/PACKAGE-INFERRED-SYSTEM|::|FORM|)
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|*DEFPACKAGE-FORMS*|)))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PACKAGE-INFERRED-SYSTEM|::|STREAM-DEFPACKAGE-FORM|
 (|COMMON-LISP|::|STREAM|)
 (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/PACKAGE-INFERRED-SYSTEM|::|FORM|
  |COMMON-LISP|::|=|
  (|COMMON-LISP|::|READ| |COMMON-LISP|::|STREAM| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
  :|WHILE| |ASDF/PACKAGE-INFERRED-SYSTEM|::|FORM| :|WHEN|
  (|ASDF/PACKAGE-INFERRED-SYSTEM|::|DEFPACKAGE-FORM-P|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|FORM|)
  :|RETURN| |ASDF/PACKAGE-INFERRED-SYSTEM|::|FORM|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PACKAGE-INFERRED-SYSTEM|::|FILE-DEFPACKAGE-FORM|
 (|ASDF/PACKAGE-INFERRED-SYSTEM|::|FILE|)
 "Return the first DEFPACKAGE form in FILE."
 (|UIOP/STREAM|::|WITH-INPUT-FILE|
  (|ASDF/PACKAGE-INFERRED-SYSTEM|::|F| |ASDF/PACKAGE-INFERRED-SYSTEM|::|FILE|)
  (|ASDF/PACKAGE-INFERRED-SYSTEM|::|STREAM-DEFPACKAGE-FORM|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|F|)))
(|COMMON-LISP|::|DEFINE-CONDITION|
 |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM-MISSING-PACKAGE-ERROR|
 (|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
 ((|ASDF/SYSTEM|::|SYSTEM| :|INITARG| :|SYSTEM| :|READER|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|ERROR-SYSTEM|)
  (|COMMON-LISP|::|PATHNAME| :|INITARG| :|PATHNAME| :|READER|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|ERROR-PATHNAME|))
 (:|REPORT|
  (|COMMON-LISP|::|LAMBDA|
   (|ASDF/PACKAGE-INFERRED-SYSTEM|::|C| |ASDF/PACKAGE-INFERRED-SYSTEM|::|S|)
   (|COMMON-LISP|::|FORMAT| |ASDF/PACKAGE-INFERRED-SYSTEM|::|S|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<No package form found while ~\n
                                     trying to define package-inferred-system ~A from file ~A~>")
    (|ASDF/PACKAGE-INFERRED-SYSTEM|::|ERROR-SYSTEM|
     |ASDF/PACKAGE-INFERRED-SYSTEM|::|C|)
    (|ASDF/PACKAGE-INFERRED-SYSTEM|::|ERROR-PATHNAME|
     |ASDF/PACKAGE-INFERRED-SYSTEM|::|C|)))))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-DEPENDENCIES|
 (|ASDF/PACKAGE-INFERRED-SYSTEM|::|DEFPACKAGE-FORM|)
 "Return a list of packages depended on by the package\n
defined in DEFPACKAGE-FORM.  A package is depended upon if\n
the DEFPACKAGE-FORM uses it or imports a symbol from it."
 (|COMMON-LISP|::|ASSERT|
  (|ASDF/PACKAGE-INFERRED-SYSTEM|::|DEFPACKAGE-FORM-P|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|DEFPACKAGE-FORM|))
 (|COMMON-LISP|::|REMOVE-DUPLICATES|
  (|UIOP/UTILITY|::|WHILE-COLLECTING| (|ASDF/PACKAGE-INFERRED-SYSTEM|::|DEP|)
   (|UIOP/COMMON-LISP|::|LOOP*| :|FOR|
    (|ASDF/PACKAGE-INFERRED-SYSTEM|::|OPTION| .
     |ASDF/PACKAGE-INFERRED-SYSTEM|::|ARGUMENTS|)
    :|IN|
    (|COMMON-LISP|::|CDDR| |ASDF/PACKAGE-INFERRED-SYSTEM|::|DEFPACKAGE-FORM|)
    :|DO|
    (|COMMON-LISP|::|ECASE| |ASDF/PACKAGE-INFERRED-SYSTEM|::|OPTION|
     ((:|USE| :|MIX| :|REEXPORT| :|USE-REEXPORT| :|MIX-REEXPORT|)
      (|COMMON-LISP|::|DOLIST|
       (|ASDF/PACKAGE-INFERRED-SYSTEM|::|P|
        |ASDF/PACKAGE-INFERRED-SYSTEM|::|ARGUMENTS|)
       (|ASDF/PACKAGE-INFERRED-SYSTEM|::|DEP|
        (|COMMON-LISP|::|STRING| |ASDF/PACKAGE-INFERRED-SYSTEM|::|P|))))
     ((:|IMPORT-FROM| :|SHADOWING-IMPORT-FROM|)
      (|ASDF/PACKAGE-INFERRED-SYSTEM|::|DEP|
       (|COMMON-LISP|::|STRING|
        (|COMMON-LISP|::|FIRST| |ASDF/PACKAGE-INFERRED-SYSTEM|::|ARGUMENTS|))))
     ((:|NICKNAMES| :|DOCUMENTATION| :|SHADOW| :|EXPORT| :|INTERN| :|UNINTERN|
       :|RECYCLE|)))))
  :|FROM-END| |COMMON-LISP|::|T| :|TEST| '|COMMON-LISP|::|EQUAL|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-DESIGNATOR-NAME|
 (|COMMON-LISP|::|PACKAGE|) "Normalize a package designator to a string"
 (|COMMON-LISP|::|ETYPECASE| |COMMON-LISP|::|PACKAGE|
  (|COMMON-LISP|::|PACKAGE|
   (|COMMON-LISP|::|PACKAGE-NAME| |COMMON-LISP|::|PACKAGE|))
  (|COMMON-LISP|::|STRING| |COMMON-LISP|::|PACKAGE|)
  (|COMMON-LISP|::|SYMBOL|
   (|COMMON-LISP|::|STRING| |COMMON-LISP|::|PACKAGE|))))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PACKAGE-INFERRED-SYSTEM|::|REGISTER-SYSTEM-PACKAGES|
 (|ASDF/SYSTEM|::|SYSTEM| |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGES|)
 "Register SYSTEM as providing PACKAGES."
 (|COMMON-LISP|::|LET|
  ((|ASDF/COMPONENT|::|NAME|
    (|COMMON-LISP|::|OR|
     (|COMMON-LISP|::|EQ| |ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|T|)
     (|ASDF/SYSTEM|::|COERCE-NAME| |ASDF/SYSTEM|::|SYSTEM|))))
  (|COMMON-LISP|::|DOLIST|
   (|ASDF/PACKAGE-INFERRED-SYSTEM|::|P|
    (|UIOP/UTILITY|::|ENSURE-LIST| |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGES|))
   (|COMMON-LISP|::|SETF|
    (|COMMON-LISP|::|GETHASH|
     (|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-DESIGNATOR-NAME|
      |ASDF/PACKAGE-INFERRED-SYSTEM|::|P|)
     |ASDF/PACKAGE-INFERRED-SYSTEM|::|*PACKAGE-INFERRED-SYSTEMS*|)
    |ASDF/COMPONENT|::|NAME|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-NAME-SYSTEM|
 (|COMMON-LISP|::|PACKAGE-NAME|)
 "Return the name of the SYSTEM providing PACKAGE-NAME, if such exists,\n
otherwise return a default system name computed from PACKAGE-NAME."
 (|COMMON-LISP|::|CHECK-TYPE| |COMMON-LISP|::|PACKAGE-NAME|
  |COMMON-LISP|::|STRING|)
 (|COMMON-LISP|::|OR|
  (|COMMON-LISP|::|GETHASH| |COMMON-LISP|::|PACKAGE-NAME|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|*PACKAGE-INFERRED-SYSTEMS*|)
  (|COMMON-LISP|::|STRING-DOWNCASE| |COMMON-LISP|::|PACKAGE-NAME|)))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM-FILE-DEPENDENCIES|
 (|ASDF/PACKAGE-INFERRED-SYSTEM|::|FILE| |COMMON-LISP|::|&OPTIONAL|
  |ASDF/SYSTEM|::|SYSTEM|)
 (|UIOP/UTILITY|::|IF-LET|
  (|ASDF/PACKAGE-INFERRED-SYSTEM|::|DEFPACKAGE-FORM|
   (|ASDF/PACKAGE-INFERRED-SYSTEM|::|FILE-DEFPACKAGE-FORM|
    |ASDF/PACKAGE-INFERRED-SYSTEM|::|FILE|))
  (|COMMON-LISP|::|REMOVE| |COMMON-LISP|::|T|
   (|COMMON-LISP|::|MAPCAR|
    '|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-NAME-SYSTEM|
    (|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-DEPENDENCIES|
     |ASDF/PACKAGE-INFERRED-SYSTEM|::|DEFPACKAGE-FORM|)))
  (|COMMON-LISP|::|ERROR|
   '|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM-MISSING-PACKAGE-ERROR|
   :|SYSTEM| |ASDF/SYSTEM|::|SYSTEM| :|PATHNAME|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|FILE|)))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PACKAGE-INFERRED-SYSTEM|::|SAME-PACKAGE-INFERRED-SYSTEM-P|
 (|ASDF/SYSTEM|::|SYSTEM| |ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|DIRECTORY|
  |ASDF/PACKAGE-INFERRED-SYSTEM|::|SUBPATH| |ASDF/COMPONENT|::|AROUND-COMPILE|
  |ASDF/PACKAGE-INFERRED-SYSTEM|::|DEPENDENCIES|)
 (|COMMON-LISP|::|AND|
  (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|TYPE-OF| |ASDF/SYSTEM|::|SYSTEM|)
   '|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM|)
  (|COMMON-LISP|::|EQUAL|
   (|ASDF/COMPONENT|::|COMPONENT-NAME| |ASDF/SYSTEM|::|SYSTEM|)
   |ASDF/COMPONENT|::|NAME|)
  (|UIOP/PATHNAME|::|PATHNAME-EQUAL| |COMMON-LISP|::|DIRECTORY|
   (|ASDF/COMPONENT|::|COMPONENT-PATHNAME| |ASDF/SYSTEM|::|SYSTEM|))
  (|COMMON-LISP|::|EQUAL| |ASDF/PACKAGE-INFERRED-SYSTEM|::|DEPENDENCIES|
   (|ASDF/COMPONENT|::|COMPONENT-SIDEWAY-DEPENDENCIES|
    |ASDF/SYSTEM|::|SYSTEM|))
  (|COMMON-LISP|::|EQUAL| |ASDF/COMPONENT|::|AROUND-COMPILE|
   (|ASDF/COMPONENT|::|AROUND-COMPILE-HOOK| |ASDF/SYSTEM|::|SYSTEM|))
  (|COMMON-LISP|::|LET|
   ((|ASDF/COMPONENT|::|CHILDREN|
     (|ASDF/COMPONENT|::|COMPONENT-CHILDREN| |ASDF/SYSTEM|::|SYSTEM|)))
   (|COMMON-LISP|::|AND|
    (|UIOP/UTILITY|::|LENGTH=N-P| |ASDF/COMPONENT|::|CHILDREN| 1.)
    (|COMMON-LISP|::|LET|
     ((|ASDF/PACKAGE-INFERRED-SYSTEM|::|CHILD|
       (|COMMON-LISP|::|FIRST| |ASDF/COMPONENT|::|CHILDREN|)))
     (|COMMON-LISP|::|AND|
      (|COMMON-LISP|::|EQ|
       (|COMMON-LISP|::|TYPE-OF| |ASDF/PACKAGE-INFERRED-SYSTEM|::|CHILD|)
       '|ASDF/LISP-ACTION|::|CL-SOURCE-FILE|)
      (|COMMON-LISP|::|EQUAL|
       (|ASDF/COMPONENT|::|COMPONENT-NAME|
        |ASDF/PACKAGE-INFERRED-SYSTEM|::|CHILD|)
       "lisp")
      (|COMMON-LISP|::|AND|
       (|CLOS|::|SLOT-BOUNDP| |ASDF/PACKAGE-INFERRED-SYSTEM|::|CHILD|
        '|ASDF/COMPONENT|::|RELATIVE-PATHNAME|)
       (|COMMON-LISP|::|EQUAL|
        (|CLOS|::|SLOT-VALUE| |ASDF/PACKAGE-INFERRED-SYSTEM|::|CHILD|
         '|ASDF/COMPONENT|::|RELATIVE-PATHNAME|)
        |ASDF/PACKAGE-INFERRED-SYSTEM|::|SUBPATH|))))))))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/PACKAGE-INFERRED-SYSTEM|::|SYSDEF-PACKAGE-INFERRED-SYSTEM-SEARCH|
 (|ASDF/SYSTEM|::|SYSTEM|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/PACKAGE-INFERRED-SYSTEM|::|PRIMARY|
    (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME| |ASDF/SYSTEM|::|SYSTEM|)))
  (|COMMON-LISP|::|UNLESS|
   (|COMMON-LISP|::|EQUAL| |ASDF/PACKAGE-INFERRED-SYSTEM|::|PRIMARY|
    |ASDF/SYSTEM|::|SYSTEM|)
   (|COMMON-LISP|::|LET|
    ((|ASDF/PACKAGE-INFERRED-SYSTEM|::|TOP|
      (|ASDF/SYSTEM|::|FIND-SYSTEM| |ASDF/PACKAGE-INFERRED-SYSTEM|::|PRIMARY|
       |COMMON-LISP|::|NIL|)))
    (|COMMON-LISP|::|WHEN|
     (|COMMON-LISP|::|TYPEP| |ASDF/PACKAGE-INFERRED-SYSTEM|::|TOP|
      '|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM|)
     (|UIOP/UTILITY|::|IF-LET|
      (|ASDF/PACKAGE-INFERRED-SYSTEM|::|DIR|
       (|ASDF/COMPONENT|::|COMPONENT-PATHNAME|
        |ASDF/PACKAGE-INFERRED-SYSTEM|::|TOP|))
      (|COMMON-LISP|::|LET*|
       ((|ASDF/PACKAGE-INFERRED-SYSTEM|::|SUB|
         (|COMMON-LISP|::|SUBSEQ| |ASDF/SYSTEM|::|SYSTEM|
          (|COMMON-LISP|::|1+|
           (|COMMON-LISP|::|LENGTH|
            |ASDF/PACKAGE-INFERRED-SYSTEM|::|PRIMARY|))))
        (|ASDF/PACKAGE-INFERRED-SYSTEM|::|F|
         (|UIOP/FILESYSTEM|::|PROBE-FILE*|
          (|UIOP/PATHNAME|::|SUBPATHNAME| |ASDF/PACKAGE-INFERRED-SYSTEM|::|DIR|
           |ASDF/PACKAGE-INFERRED-SYSTEM|::|SUB| :|TYPE| "lisp")
          :|TRUENAME| |UIOP/FILESYSTEM|::|*RESOLVE-SYMLINKS*|)))
       (|COMMON-LISP|::|WHEN|
        (|UIOP/PATHNAME|::|FILE-PATHNAME-P|
         |ASDF/PACKAGE-INFERRED-SYSTEM|::|F|)
        (|COMMON-LISP|::|LET|
         ((|ASDF/PACKAGE-INFERRED-SYSTEM|::|DEPENDENCIES|
           (|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM-FILE-DEPENDENCIES|
            |ASDF/PACKAGE-INFERRED-SYSTEM|::|F| |ASDF/SYSTEM|::|SYSTEM|))
          (|ASDF/PACKAGE-INFERRED-SYSTEM|::|PREVIOUS|
           (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM|
            |ASDF/SYSTEM|::|SYSTEM|))
          (|ASDF/COMPONENT|::|AROUND-COMPILE|
           (|ASDF/COMPONENT|::|AROUND-COMPILE-HOOK|
            |ASDF/PACKAGE-INFERRED-SYSTEM|::|TOP|)))
         (|COMMON-LISP|::|IF|
          (|ASDF/PACKAGE-INFERRED-SYSTEM|::|SAME-PACKAGE-INFERRED-SYSTEM-P|
           |ASDF/PACKAGE-INFERRED-SYSTEM|::|PREVIOUS| |ASDF/SYSTEM|::|SYSTEM|
           |ASDF/PACKAGE-INFERRED-SYSTEM|::|DIR|
           |ASDF/PACKAGE-INFERRED-SYSTEM|::|SUB|
           |ASDF/COMPONENT|::|AROUND-COMPILE|
           |ASDF/PACKAGE-INFERRED-SYSTEM|::|DEPENDENCIES|)
          |ASDF/PACKAGE-INFERRED-SYSTEM|::|PREVIOUS|
          (|COMMON-LISP|::|EVAL|
           `(|ASDF/PARSE-DEFSYSTEM|::|DEFSYSTEM| ,|ASDF/SYSTEM|::|SYSTEM|
             :|CLASS| |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM|
             :|SOURCE-FILE|
             ,(|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE|
               |ASDF/PACKAGE-INFERRED-SYSTEM|::|TOP|)
             :|PATHNAME| ,|ASDF/PACKAGE-INFERRED-SYSTEM|::|DIR| :|DEPENDS-ON|
             ,|ASDF/PACKAGE-INFERRED-SYSTEM|::|DEPENDENCIES| :|AROUND-COMPILE|
             ,|ASDF/COMPONENT|::|AROUND-COMPILE| :|COMPONENTS|
             ((|ASDF/LISP-ACTION|::|CL-SOURCE-FILE| "lisp" :|PATHNAME|
               ,|ASDF/PACKAGE-INFERRED-SYSTEM|::|SUB|))))))))))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|*DEFPACKAGE-FORMS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|INITIAL-PACKAGE-INFERRED-SYSTEMS-TABLE|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/PACKAGE-INFERRED-SYSTEM|::|INITIAL-PACKAGE-INFERRED-SYSTEMS-TABLE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|*PACKAGE-INFERRED-SYSTEMS*|))
(|COMMON-LISP|::|LET*| ((#1=#:|G36765| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM|
  :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST| '|ASDF/SYSTEM|::|SYSTEM|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"Class for primary systems for which secondary systems are automatically\n
in the one-file, one-file, one-system style: system names are mapped to files under the primary\n
system's system-source-directory, dependencies are inferred from the first defpackage form in\n
every such file"
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G36768| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-SYSTEM| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST|
   '|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|DEFPACKAGE-FORM-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PACKAGE-INFERRED-SYSTEM|::|DEFPACKAGE-FORM-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PACKAGE-INFERRED-SYSTEM|::|FORM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|STREAM-DEFPACKAGE-FORM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PACKAGE-INFERRED-SYSTEM|::|STREAM-DEFPACKAGE-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|STREAM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|FILE-DEFPACKAGE-FORM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PACKAGE-INFERRED-SYSTEM|::|FILE-DEFPACKAGE-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PACKAGE-INFERRED-SYSTEM|::|FILE|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G36804| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM-MISSING-PACKAGE-ERROR|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/SESSION|::|SYSTEM-DEFINITION-ERROR|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/SYSTEM|::|SYSTEM| :|READERS|
    '(|ASDF/PACKAGE-INFERRED-SYSTEM|::|ERROR-SYSTEM|) :|INITARGS| '(:|SYSTEM|))
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|PATHNAME| :|READERS|
    '(|ASDF/PACKAGE-INFERRED-SYSTEM|::|ERROR-PATHNAME|) :|INITARGS|
    '(:|PATHNAME|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/PACKAGE-INFERRED-SYSTEM|::|ERROR-SYSTEM|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PACKAGE-INFERRED-SYSTEM|::|ERROR-PATHNAME|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-DEPENDENCIES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-DEPENDENCIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PACKAGE-INFERRED-SYSTEM|::|DEFPACKAGE-FORM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-DESIGNATOR-NAME|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-DESIGNATOR-NAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PACKAGE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|REGISTER-SYSTEM-PACKAGES|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/PACKAGE-INFERRED-SYSTEM|::|REGISTER-SYSTEM-PACKAGES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SYSTEM|::|SYSTEM| |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGES|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-NAME-SYSTEM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-NAME-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|PACKAGE-NAME|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM-FILE-DEPENDENCIES|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/PACKAGE-INFERRED-SYSTEM|::|PACKAGE-INFERRED-SYSTEM-FILE-DEPENDENCIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/PACKAGE-INFERRED-SYSTEM|::|FILE| |COMMON-LISP|::|&OPTIONAL|
    |ASDF/SYSTEM|::|SYSTEM|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|SAME-PACKAGE-INFERRED-SYSTEM-P|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/PACKAGE-INFERRED-SYSTEM|::|SAME-PACKAGE-INFERRED-SYSTEM-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SYSTEM|::|SYSTEM| |ASDF/COMPONENT|::|NAME| |COMMON-LISP|::|DIRECTORY|
    |ASDF/PACKAGE-INFERRED-SYSTEM|::|SUBPATH|
    |ASDF/COMPONENT|::|AROUND-COMPILE|
    |ASDF/PACKAGE-INFERRED-SYSTEM|::|DEPENDENCIES|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/PACKAGE-INFERRED-SYSTEM|::|SYSDEF-PACKAGE-INFERRED-SYSTEM-SEARCH|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/PACKAGE-INFERRED-SYSTEM|::|SYSDEF-PACKAGE-INFERRED-SYSTEM-SEARCH|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM|::|SYSTEM|)))
(|COMMON-LISP|::|PUSHNEW|
 '|ASDF/PACKAGE-INFERRED-SYSTEM|::|SYSDEF-PACKAGE-INFERRED-SYSTEM-SEARCH|
 |ASDF/SYSTEM-REGISTRY|::|*SYSTEM-DEFINITION-SEARCH-FUNCTIONS*|)
(|COMMON-LISP|::|SETF|
 |ASDF/SYSTEM-REGISTRY|::|*SYSTEM-DEFINITION-SEARCH-FUNCTIONS*|
 (|COMMON-LISP|::|REMOVE|
  (|UIOP/PACKAGE|::|FIND-SYMBOL*| :|SYSDEF-PACKAGE-SYSTEM-SEARCH|
   :|ASDF/PACKAGE-SYSTEM| |COMMON-LISP|::|NIL|)
  |ASDF/SYSTEM-REGISTRY|::|*SYSTEM-DEFINITION-SEARCH-FUNCTIONS*|))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|ASDF/OUTPUT-TRANSLATIONS| :|NICKNAMES| '|COMMON-LISP|::|NIL|
  :|DOCUMENTATION| '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE|) :|SHADOW|
  '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM| '|COMMON-LISP|::|NIL|
  :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|*OUTPUT-TRANSLATIONS*| #:|*OUTPUT-TRANSLATIONS-PARAMETER*|
    #:|INVALID-OUTPUT-TRANSLATION| #:|OUTPUT-TRANSLATIONS|
    #:|OUTPUT-TRANSLATIONS-INITIALIZED-P| #:|INITIALIZE-OUTPUT-TRANSLATIONS|
    #:|CLEAR-OUTPUT-TRANSLATIONS| #:|DISABLE-OUTPUT-TRANSLATIONS|
    #:|ENSURE-OUTPUT-TRANSLATIONS| #:|APPLY-OUTPUT-TRANSLATIONS|
    #:|VALIDATE-OUTPUT-TRANSLATIONS-DIRECTIVE|
    #:|VALIDATE-OUTPUT-TRANSLATIONS-FORM| #:|VALIDATE-OUTPUT-TRANSLATIONS-FILE|
    #:|VALIDATE-OUTPUT-TRANSLATIONS-DIRECTORY|
    #:|PARSE-OUTPUT-TRANSLATIONS-STRING| #:|WRAPPING-OUTPUT-TRANSLATIONS|
    #:|USER-OUTPUT-TRANSLATIONS-PATHNAME|
    #:|SYSTEM-OUTPUT-TRANSLATIONS-PATHNAME|
    #:|USER-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME|
    #:|SYSTEM-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME|
    #:|ENVIRONMENT-OUTPUT-TRANSLATIONS| #:|PROCESS-OUTPUT-TRANSLATIONS|
    #:|COMPUTE-OUTPUT-TRANSLATIONS|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/OUTPUT-TRANSLATIONS| :|ASDF|) :|MIX| '|COMMON-LISP|::|NIL|
  :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/OUTPUT-TRANSLATIONS"))
(|COMMON-LISP|::|WHEN|
 (|COMMON-LISP|::|AND| (|ASDF/UPGRADE|::|UPGRADING-P| "3.1.2"))
 (|COMMON-LISP|::|HANDLER-BIND|
  ((|COMMON-LISP|::|STYLE-WARNING| #'|COMMON-LISP|::|MUFFLE-WARNING|))
  (|COMMON-LISP|::|EVAL|
   '(|COMMON-LISP|::|PROGN|
     (|COMMON-LISP|::|FMAKUNBOUND|
      '(|COMMON-LISP|::|SETF|
        |ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS|))))))
(|COMMON-LISP|::|DEFINE-CONDITION|
 |ASDF/OUTPUT-TRANSLATIONS|::|INVALID-OUTPUT-TRANSLATION|
 (|UIOP/CONFIGURATION|::|INVALID-CONFIGURATION| |COMMON-LISP|::|WARNING|)
 ((|COMMON-LISP|::|FORMAT| :|INITFORM|
   (|UIOP/COMMON-LISP|::|COMPATFMT|
    "~@<Invalid asdf output-translation ~S~@[ in ~S~]~@{ ~@?~}~@:>"))))
(|COMMON-LISP|::|DEFVAR| |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS*|
 |COMMON-LISP|::|NIL|
 "Either NIL (for uninitialized), or a list of one element,\n
said element itself being a sorted list of mappings.\n
Each mapping is a pair of a source pathname and destination pathname,\n
and the order is by decreasing length of namestring of the source pathname.")
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS|
 |COMMON-LISP|::|NIL| "Return the configured output-translations, if any"
 (|COMMON-LISP|::|CAR| |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS*|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/OUTPUT-TRANSLATIONS|::|SET-OUTPUT-TRANSLATIONS|
 (|ASDF/OUTPUT-TRANSLATIONS|::|NEW-VALUE|)
 (|COMMON-LISP|::|SETF| |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS*|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|STABLE-SORT|
    (|COMMON-LISP|::|COPY-LIST| |ASDF/OUTPUT-TRANSLATIONS|::|NEW-VALUE|)
    #'|COMMON-LISP|::|>| :|KEY|
    #'(|COMMON-LISP|::|LAMBDA| (|ASDF/OUTPUT-TRANSLATIONS|::|X|)
       (|COMMON-LISP|::|ETYPECASE|
        (|COMMON-LISP|::|CAR| |ASDF/OUTPUT-TRANSLATIONS|::|X|)
        ((|COMMON-LISP|::|EQL| |COMMON-LISP|::|T|) -1.)
        (|COMMON-LISP|::|PATHNAME|
         (|COMMON-LISP|::|LET|
          ((|COMMON-LISP|::|DIRECTORY|
            (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
             (|COMMON-LISP|::|PATHNAME-DIRECTORY|
              (|COMMON-LISP|::|CAR| |ASDF/OUTPUT-TRANSLATIONS|::|X|)))))
          (|COMMON-LISP|::|IF|
           (|COMMON-LISP|::|LISTP| |COMMON-LISP|::|DIRECTORY|)
           (|COMMON-LISP|::|LENGTH| |COMMON-LISP|::|DIRECTORY|) 0.))))))))
 |ASDF/OUTPUT-TRANSLATIONS|::|NEW-VALUE|)
(|UIOP/UTILITY|::|DEFUN*|
 (|COMMON-LISP|::|SETF| |ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS|)
 (|ASDF/OUTPUT-TRANSLATIONS|::|NEW-VALUE|)
 (|ASDF/OUTPUT-TRANSLATIONS|::|SET-OUTPUT-TRANSLATIONS|
  |ASDF/OUTPUT-TRANSLATIONS|::|NEW-VALUE|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS-INITIALIZED-P|
 |COMMON-LISP|::|NIL| "Have the output-translations been initialized yet?"
 (|COMMON-LISP|::|AND| |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS*|
  |COMMON-LISP|::|T|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|CLEAR-OUTPUT-TRANSLATIONS| |COMMON-LISP|::|NIL|
 "Undoes any initialization of the output translations."
 (|COMMON-LISP|::|SETF| |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS*|
  '|COMMON-LISP|::|NIL|)
 (|COMMON-LISP|::|VALUES|))
(|UIOP/CONFIGURATION|::|REGISTER-CLEAR-CONFIGURATION-HOOK|
 '|ASDF/OUTPUT-TRANSLATIONS|::|CLEAR-OUTPUT-TRANSLATIONS|)
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-DIRECTIVE|
 (|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|)
 (|COMMON-LISP|::|OR|
  (|COMMON-LISP|::|MEMBER| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|
   '(:|ENABLE-USER-CACHE| :|DISABLE-CACHE| |COMMON-LISP|::|NIL|))
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|CONSP| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|)
   (|COMMON-LISP|::|OR|
    (|COMMON-LISP|::|AND|
     (|UIOP/UTILITY|::|LENGTH=N-P| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE| 2.)
     (|COMMON-LISP|::|OR|
      (|COMMON-LISP|::|AND|
       (|COMMON-LISP|::|EQ|
        (|COMMON-LISP|::|FIRST| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|)
        :|INCLUDE|)
       (|COMMON-LISP|::|TYPEP|
        (|COMMON-LISP|::|SECOND| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|)
        '(|COMMON-LISP|::|OR| |COMMON-LISP|::|STRING| |COMMON-LISP|::|PATHNAME|
          |COMMON-LISP|::|NULL|)))
      (|COMMON-LISP|::|AND|
       (|UIOP/CONFIGURATION|::|LOCATION-DESIGNATOR-P|
        (|COMMON-LISP|::|FIRST| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|))
       (|COMMON-LISP|::|OR|
        (|UIOP/CONFIGURATION|::|LOCATION-DESIGNATOR-P|
         (|COMMON-LISP|::|SECOND| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|))
        (|UIOP/CONFIGURATION|::|LOCATION-FUNCTION-P|
         (|COMMON-LISP|::|SECOND| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|))))))
    (|COMMON-LISP|::|AND|
     (|UIOP/UTILITY|::|LENGTH=N-P| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE| 1.)
     (|UIOP/CONFIGURATION|::|LOCATION-DESIGNATOR-P|
      (|COMMON-LISP|::|FIRST| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|)))))))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-FORM|
 (|ASDF/OUTPUT-TRANSLATIONS|::|FORM| |COMMON-LISP|::|&KEY|
  |ASDF/OUTPUT-TRANSLATIONS|::|LOCATION|)
 (|UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-FORM|
  |ASDF/OUTPUT-TRANSLATIONS|::|FORM| :|OUTPUT-TRANSLATIONS|
  '|ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-DIRECTIVE|
  :|LOCATION| |ASDF/OUTPUT-TRANSLATIONS|::|LOCATION| :|INVALID-FORM-REPORTER|
  '|ASDF/OUTPUT-TRANSLATIONS|::|INVALID-OUTPUT-TRANSLATION|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-FILE|
 (|ASDF/OUTPUT-TRANSLATIONS|::|FILE|)
 (|UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-FILE|
  |ASDF/OUTPUT-TRANSLATIONS|::|FILE|
  '|ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-FORM|
  :|DESCRIPTION| "output translations"))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-DIRECTORY|
 (|COMMON-LISP|::|DIRECTORY|)
 (|UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-DIRECTORY|
  |COMMON-LISP|::|DIRECTORY| :|OUTPUT-TRANSLATIONS|
  '|ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-DIRECTIVE|
  :|INVALID-FORM-REPORTER|
  '|ASDF/OUTPUT-TRANSLATIONS|::|INVALID-OUTPUT-TRANSLATION|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|PARSE-OUTPUT-TRANSLATIONS-STRING|
 (|COMMON-LISP|::|STRING| |COMMON-LISP|::|&KEY|
  |ASDF/OUTPUT-TRANSLATIONS|::|LOCATION|)
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |COMMON-LISP|::|STRING|)
    (|COMMON-LISP|::|EQUAL| |COMMON-LISP|::|STRING| ""))
   '(:|OUTPUT-TRANSLATIONS| :|INHERIT-CONFIGURATION|))
  ((|COMMON-LISP|::|NOT| (|COMMON-LISP|::|STRINGP| |COMMON-LISP|::|STRING|))
   (|COMMON-LISP|::|ERROR|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<Environment string isn't: ~3i~_~S~@:>")
    |COMMON-LISP|::|STRING|))
  ((|COMMON-LISP|::|EQL| (|COMMON-LISP|::|CHAR| |COMMON-LISP|::|STRING| 0.)
    #\")
   (|ASDF/OUTPUT-TRANSLATIONS|::|PARSE-OUTPUT-TRANSLATIONS-STRING|
    (|COMMON-LISP|::|READ-FROM-STRING| |COMMON-LISP|::|STRING|) :|LOCATION|
    |ASDF/OUTPUT-TRANSLATIONS|::|LOCATION|))
  ((|COMMON-LISP|::|EQL| (|COMMON-LISP|::|CHAR| |COMMON-LISP|::|STRING| 0.)
    #\()
   (|ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-FORM|
    (|COMMON-LISP|::|READ-FROM-STRING| |COMMON-LISP|::|STRING|) :|LOCATION|
    |ASDF/OUTPUT-TRANSLATIONS|::|LOCATION|))
  (|COMMON-LISP|::|T|
   (|COMMON-LISP|::|LOOP| :|WITH| |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT|
    |COMMON-LISP|::|=| |COMMON-LISP|::|NIL| :|WITH|
    |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVES| |COMMON-LISP|::|=|
    |COMMON-LISP|::|NIL| :|WITH| |ASDF/OUTPUT-TRANSLATIONS|::|START|
    |COMMON-LISP|::|=| 0. :|WITH| |ASDF/OUTPUT-TRANSLATIONS|::|END|
    |COMMON-LISP|::|=| (|COMMON-LISP|::|LENGTH| |COMMON-LISP|::|STRING|)
    :|WITH| |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE| |COMMON-LISP|::|=|
    |COMMON-LISP|::|NIL| :|WITH| |ASDF/OUTPUT-TRANSLATIONS|::|SEPARATOR|
    |COMMON-LISP|::|=| (|UIOP/FILESYSTEM|::|INTER-DIRECTORY-SEPARATOR|) :|FOR|
    |ASDF/OUTPUT-TRANSLATIONS|::|I| |COMMON-LISP|::|=|
    (|COMMON-LISP|::|OR|
     (|COMMON-LISP|::|POSITION| |ASDF/OUTPUT-TRANSLATIONS|::|SEPARATOR|
      |COMMON-LISP|::|STRING| :|START| |ASDF/OUTPUT-TRANSLATIONS|::|START|)
     |ASDF/OUTPUT-TRANSLATIONS|::|END|)
    :|DO|
    (|COMMON-LISP|::|LET|
     ((|ASDF/OUTPUT-TRANSLATIONS|::|S|
       (|COMMON-LISP|::|SUBSEQ| |COMMON-LISP|::|STRING|
        |ASDF/OUTPUT-TRANSLATIONS|::|START| |ASDF/OUTPUT-TRANSLATIONS|::|I|)))
     (|COMMON-LISP|::|COND|
      (|ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|
       (|COMMON-LISP|::|PUSH|
        (|COMMON-LISP|::|LIST| |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|
         (|COMMON-LISP|::|IF|
          (|COMMON-LISP|::|EQUAL| "" |ASDF/OUTPUT-TRANSLATIONS|::|S|)
          |COMMON-LISP|::|NIL| |ASDF/OUTPUT-TRANSLATIONS|::|S|))
        |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVES|)
       (|COMMON-LISP|::|SETF| |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|
        |COMMON-LISP|::|NIL|))
      ((|COMMON-LISP|::|EQUAL| "" |ASDF/OUTPUT-TRANSLATIONS|::|S|)
       (|COMMON-LISP|::|WHEN| |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT|
        (|COMMON-LISP|::|ERROR|
         (|UIOP/COMMON-LISP|::|COMPATFMT|
          "~@<Only one inherited configuration allowed: ~3i~_~S~@:>")
         |COMMON-LISP|::|STRING|))
       (|COMMON-LISP|::|SETF| |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT|
        |COMMON-LISP|::|T|)
       (|COMMON-LISP|::|PUSH| :|INHERIT-CONFIGURATION|
        |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVES|))
      (|COMMON-LISP|::|T|
       (|COMMON-LISP|::|SETF| |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|
        |ASDF/OUTPUT-TRANSLATIONS|::|S|)))
     (|COMMON-LISP|::|SETF| |ASDF/OUTPUT-TRANSLATIONS|::|START|
      (|COMMON-LISP|::|1+| |ASDF/OUTPUT-TRANSLATIONS|::|I|))
     (|COMMON-LISP|::|WHEN|
      (|COMMON-LISP|::|>| |ASDF/OUTPUT-TRANSLATIONS|::|START|
       |ASDF/OUTPUT-TRANSLATIONS|::|END|)
      (|COMMON-LISP|::|WHEN| |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|
       (|COMMON-LISP|::|ERROR|
        (|UIOP/COMMON-LISP|::|COMPATFMT|
         "~@<Uneven number of components in source to destination mapping: ~3i~_~S~@:>")
        |COMMON-LISP|::|STRING|))
      (|COMMON-LISP|::|UNLESS| |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT|
       (|COMMON-LISP|::|PUSH| :|IGNORE-INHERITED-CONFIGURATION|
        |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVES|))
      (|COMMON-LISP|::|RETURN|
       `(:|OUTPUT-TRANSLATIONS|
         ,@(|COMMON-LISP|::|NREVERSE|
            |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVES|)))))))))
(|ASDF/UPGRADE|::|DEFPARAMETER*|
 |ASDF/OUTPUT-TRANSLATIONS|::|*DEFAULT-OUTPUT-TRANSLATIONS*|
 '(|ASDF/OUTPUT-TRANSLATIONS|::|ENVIRONMENT-OUTPUT-TRANSLATIONS|
   |ASDF/OUTPUT-TRANSLATIONS|::|USER-OUTPUT-TRANSLATIONS-PATHNAME|
   |ASDF/OUTPUT-TRANSLATIONS|::|USER-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME|
   |ASDF/OUTPUT-TRANSLATIONS|::|SYSTEM-OUTPUT-TRANSLATIONS-PATHNAME|
   |ASDF/OUTPUT-TRANSLATIONS|::|SYSTEM-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|WRAPPING-OUTPUT-TRANSLATIONS|
 |COMMON-LISP|::|NIL|
 `(:|OUTPUT-TRANSLATIONS| :|INHERIT-CONFIGURATION| :|ENABLE-USER-CACHE|))
(|COMMON-LISP|::|DEFPARAMETER|
 |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-FILE*|
 (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING|
  "common-lisp/asdf-output-translations.conf"))
(|COMMON-LISP|::|DEFPARAMETER|
 |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-DIRECTORY*|
 (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING|
  "common-lisp/asdf-output-translations.conf.d/"))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|USER-OUTPUT-TRANSLATIONS-PATHNAME|
 (|COMMON-LISP|::|&KEY| (|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTION| :|INPUT|))
 (|UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAME|
  |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-FILE*|
  |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTION|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|SYSTEM-OUTPUT-TRANSLATIONS-PATHNAME|
 (|COMMON-LISP|::|&KEY| (|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTION| :|INPUT|))
 (|UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|
  (|UIOP/CONFIGURATION|::|SYSTEM-CONFIG-PATHNAMES|
   |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-FILE*|)
  :|DIRECTION| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTION|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|USER-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME|
 (|COMMON-LISP|::|&KEY| (|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTION| :|INPUT|))
 (|UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAME|
  |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-DIRECTORY*|
  |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTION|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|SYSTEM-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME|
 (|COMMON-LISP|::|&KEY| (|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTION| :|INPUT|))
 (|UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|
  (|UIOP/CONFIGURATION|::|SYSTEM-CONFIG-PATHNAMES|
   |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-DIRECTORY*|)
  :|DIRECTION| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTION|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|ENVIRONMENT-OUTPUT-TRANSLATIONS|
 |COMMON-LISP|::|NIL| (|UIOP/OS|::|GETENV| "ASDF_OUTPUT_TRANSLATIONS"))
(|UIOP/UTILITY|::|DEFGENERIC*|
 |ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
 (|ASDF/OUTPUT-TRANSLATIONS|::|SPEC| |COMMON-LISP|::|&KEY|
  |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT-OUTPUT-TRANSLATIONS|
 (|ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| |COMMON-LISP|::|&KEY|
  |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|)
 (|COMMON-LISP|::|WHEN| |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT|
  (|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
   (|COMMON-LISP|::|FIRST| |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT|) :|COLLECT|
   |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT| :|INHERIT|
   (|COMMON-LISP|::|REST| |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT|))))
(|UIOP/UTILITY|::|DEFUN*|
 (|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS-DIRECTIVE|)
 (|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE| |COMMON-LISP|::|&KEY|
  |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|)
 (|COMMON-LISP|::|IF|
  (|COMMON-LISP|::|ATOM| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|)
  (|COMMON-LISP|::|ECASE| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|
   ((:|ENABLE-USER-CACHE|)
    (|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS-DIRECTIVE|
     '(|COMMON-LISP|::|T| :|USER-CACHE|) :|COLLECT|
     |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|))
   ((:|DISABLE-CACHE|)
    (|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS-DIRECTIVE|
     '(|COMMON-LISP|::|T| |COMMON-LISP|::|T|) :|COLLECT|
     |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|))
   ((:|INHERIT-CONFIGURATION|)
    (|ASDF/OUTPUT-TRANSLATIONS|::|INHERIT-OUTPUT-TRANSLATIONS|
     |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| :|COLLECT|
     |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|))
   ((:|IGNORE-INHERITED-CONFIGURATION| :|IGNORE-INVALID-ENTRIES|
     |COMMON-LISP|::|NIL|)
    |COMMON-LISP|::|NIL|))
  (|COMMON-LISP|::|LET|
   ((|ASDF/OUTPUT-TRANSLATIONS|::|SRC|
     (|COMMON-LISP|::|FIRST| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|))
    (|ASDF/OUTPUT-TRANSLATIONS|::|DST|
     (|COMMON-LISP|::|SECOND| |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|)))
   (|COMMON-LISP|::|IF|
    (|COMMON-LISP|::|EQ| |ASDF/OUTPUT-TRANSLATIONS|::|SRC| :|INCLUDE|)
    (|COMMON-LISP|::|WHEN| |ASDF/OUTPUT-TRANSLATIONS|::|DST|
     (|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
      (|COMMON-LISP|::|PATHNAME| |ASDF/OUTPUT-TRANSLATIONS|::|DST|) :|INHERIT|
      |COMMON-LISP|::|NIL| :|COLLECT| |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|))
    (|COMMON-LISP|::|WHEN| |ASDF/OUTPUT-TRANSLATIONS|::|SRC|
     (|COMMON-LISP|::|LET|
      ((|ASDF/OUTPUT-TRANSLATIONS|::|TRUSRC|
        (|COMMON-LISP|::|OR|
         (|COMMON-LISP|::|EQL| |ASDF/OUTPUT-TRANSLATIONS|::|SRC|
          |COMMON-LISP|::|T|)
         (|COMMON-LISP|::|LET|
          ((|ASDF/OUTPUT-TRANSLATIONS|::|LOC|
            (|UIOP/CONFIGURATION|::|RESOLVE-LOCATION|
             |ASDF/OUTPUT-TRANSLATIONS|::|SRC| :|ENSURE-DIRECTORY|
             |COMMON-LISP|::|T| :|WILDEN| |COMMON-LISP|::|T|)))
          (|COMMON-LISP|::|IF|
           (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P|
            |ASDF/OUTPUT-TRANSLATIONS|::|LOC|)
           (|UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS*|
            |ASDF/OUTPUT-TRANSLATIONS|::|LOC|)
           |ASDF/OUTPUT-TRANSLATIONS|::|LOC|)))))
      (|COMMON-LISP|::|COND|
       ((|UIOP/CONFIGURATION|::|LOCATION-FUNCTION-P|
         |ASDF/OUTPUT-TRANSLATIONS|::|DST|)
        (|COMMON-LISP|::|FUNCALL| |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|
         (|COMMON-LISP|::|LIST| |ASDF/OUTPUT-TRANSLATIONS|::|TRUSRC|
          (|UIOP/UTILITY|::|ENSURE-FUNCTION|
           (|COMMON-LISP|::|SECOND| |ASDF/OUTPUT-TRANSLATIONS|::|DST|)))))
       ((|COMMON-LISP|::|TYPEP| |ASDF/OUTPUT-TRANSLATIONS|::|DST|
         '|COMMON-LISP|::|BOOLEAN|)
        (|COMMON-LISP|::|FUNCALL| |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|
         (|COMMON-LISP|::|LIST| |ASDF/OUTPUT-TRANSLATIONS|::|TRUSRC|
          |COMMON-LISP|::|T|)))
       (|COMMON-LISP|::|T|
        (|COMMON-LISP|::|LET*|
         ((|ASDF/OUTPUT-TRANSLATIONS|::|TRUDST|
           (|UIOP/CONFIGURATION|::|RESOLVE-LOCATION|
            |ASDF/OUTPUT-TRANSLATIONS|::|DST| :|ENSURE-DIRECTORY|
            |COMMON-LISP|::|T| :|WILDEN| |COMMON-LISP|::|T|)))
         (|COMMON-LISP|::|FUNCALL| |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|
          (|COMMON-LISP|::|LIST| |ASDF/OUTPUT-TRANSLATIONS|::|TRUDST|
           |COMMON-LISP|::|T|))
         (|COMMON-LISP|::|FUNCALL| |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|
          (|COMMON-LISP|::|LIST| |ASDF/OUTPUT-TRANSLATIONS|::|TRUSRC|
           |ASDF/OUTPUT-TRANSLATIONS|::|TRUDST|)))))))))))
(|CLOS|::|DEFMETHOD| |ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
 ((|ASDF/OUTPUT-TRANSLATIONS|::|X| |COMMON-LISP|::|SYMBOL|)
  |COMMON-LISP|::|&KEY|
  (|ASDF/OUTPUT-TRANSLATIONS|::|INHERIT|
   |ASDF/OUTPUT-TRANSLATIONS|::|*DEFAULT-OUTPUT-TRANSLATIONS*|)
  |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|)
 (|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
  (|COMMON-LISP|::|FUNCALL| |ASDF/OUTPUT-TRANSLATIONS|::|X|) :|INHERIT|
  |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| :|COLLECT|
  |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|))
(|CLOS|::|DEFMETHOD| |ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
 ((|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|PATHNAME|) |COMMON-LISP|::|&KEY|
  |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|)
 (|COMMON-LISP|::|COND|
  ((|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P| |COMMON-LISP|::|PATHNAME|)
   (|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
    (|ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-DIRECTORY|
     |COMMON-LISP|::|PATHNAME|)
    :|INHERIT| |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| :|COLLECT|
    |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|))
  ((|UIOP/FILESYSTEM|::|PROBE-FILE*| |COMMON-LISP|::|PATHNAME| :|TRUENAME|
    |UIOP/FILESYSTEM|::|*RESOLVE-SYMLINKS*|)
   (|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
    (|ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-FILE|
     |COMMON-LISP|::|PATHNAME|)
    :|INHERIT| |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| :|COLLECT|
    |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|))
  (|COMMON-LISP|::|T|
   (|ASDF/OUTPUT-TRANSLATIONS|::|INHERIT-OUTPUT-TRANSLATIONS|
    |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| :|COLLECT|
    |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|))))
(|CLOS|::|DEFMETHOD| |ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
 ((|COMMON-LISP|::|STRING| |COMMON-LISP|::|STRING|) |COMMON-LISP|::|&KEY|
  |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|)
 (|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
  (|ASDF/OUTPUT-TRANSLATIONS|::|PARSE-OUTPUT-TRANSLATIONS-STRING|
   |COMMON-LISP|::|STRING|)
  :|INHERIT| |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| :|COLLECT|
  |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|))
(|CLOS|::|DEFMETHOD| |ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
 ((|ASDF/OUTPUT-TRANSLATIONS|::|X| |COMMON-LISP|::|NULL|) |COMMON-LISP|::|&KEY|
  |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|)
 (|ASDF/OUTPUT-TRANSLATIONS|::|INHERIT-OUTPUT-TRANSLATIONS|
  |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| :|COLLECT|
  |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|))
(|CLOS|::|DEFMETHOD| |ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
 ((|ASDF/OUTPUT-TRANSLATIONS|::|FORM| |COMMON-LISP|::|CONS|)
  |COMMON-LISP|::|&KEY| |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT|
  |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|)
 (|COMMON-LISP|::|DOLIST|
  (|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|
   (|COMMON-LISP|::|CDR|
    (|ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-FORM|
     |ASDF/OUTPUT-TRANSLATIONS|::|FORM|)))
  (|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS-DIRECTIVE|
   |ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE| :|INHERIT|
   |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| :|COLLECT|
   |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|)))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|COMPUTE-OUTPUT-TRANSLATIONS|
 (|COMMON-LISP|::|&OPTIONAL| |ASDF/OUTPUT-TRANSLATIONS|::|PARAMETER|)
 "read the configuration, return it"
 (|COMMON-LISP|::|REMOVE-DUPLICATES|
  (|UIOP/UTILITY|::|WHILE-COLLECTING| (|ASDF/OUTPUT-TRANSLATIONS|::|C|)
   (|ASDF/OUTPUT-TRANSLATIONS|::|INHERIT-OUTPUT-TRANSLATIONS|
    `(|ASDF/OUTPUT-TRANSLATIONS|::|WRAPPING-OUTPUT-TRANSLATIONS|
      ,|ASDF/OUTPUT-TRANSLATIONS|::|PARAMETER|
      ,@|ASDF/OUTPUT-TRANSLATIONS|::|*DEFAULT-OUTPUT-TRANSLATIONS*|)
    :|COLLECT| #'|ASDF/OUTPUT-TRANSLATIONS|::|C|))
  :|TEST| '|COMMON-LISP|::|EQUAL| :|FROM-END| |COMMON-LISP|::|T|))
(|COMMON-LISP|::|DEFVAR|
 |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-PARAMETER*|
 |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|INITIALIZE-OUTPUT-TRANSLATIONS|
 (|COMMON-LISP|::|&OPTIONAL|
  (|ASDF/OUTPUT-TRANSLATIONS|::|PARAMETER|
   |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-PARAMETER*|))
 "read the configuration, initialize the internal configuration variable,\n
return the configuration"
 (|COMMON-LISP|::|SETF|
  |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-PARAMETER*|
  |ASDF/OUTPUT-TRANSLATIONS|::|PARAMETER|
  (|ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS|)
  (|ASDF/OUTPUT-TRANSLATIONS|::|COMPUTE-OUTPUT-TRANSLATIONS|
   |ASDF/OUTPUT-TRANSLATIONS|::|PARAMETER|)))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|DISABLE-OUTPUT-TRANSLATIONS| |COMMON-LISP|::|NIL|
 "Initialize output translations in a way that maps every file to itself,\n
effectively disabling the output translation facility."
 (|ASDF/OUTPUT-TRANSLATIONS|::|INITIALIZE-OUTPUT-TRANSLATIONS|
  '(:|OUTPUT-TRANSLATIONS| :|DISABLE-CACHE|
    :|IGNORE-INHERITED-CONFIGURATION|)))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/OUTPUT-TRANSLATIONS|::|ENSURE-OUTPUT-TRANSLATIONS| |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|IF|
  (|ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS-INITIALIZED-P|)
  (|ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS|)
  (|ASDF/OUTPUT-TRANSLATIONS|::|INITIALIZE-OUTPUT-TRANSLATIONS|)))
(|UIOP/UTILITY|::|DEFUN*|
 (|ASDF/OUTPUT-TRANSLATIONS|::|APPLY-OUTPUT-TRANSLATIONS|)
 (|ASDF/OUTPUT-TRANSLATIONS|::|PATH|)
 (|COMMON-LISP|::|ETYPECASE| |ASDF/OUTPUT-TRANSLATIONS|::|PATH|
  (|COMMON-LISP|::|LOGICAL-PATHNAME| |ASDF/OUTPUT-TRANSLATIONS|::|PATH|)
  ((|COMMON-LISP|::|OR| |COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|STRING|)
   (|ASDF/OUTPUT-TRANSLATIONS|::|ENSURE-OUTPUT-TRANSLATIONS|)
   (|UIOP/COMMON-LISP|::|LOOP*| :|WITH| |ASDF/OUTPUT-TRANSLATIONS|::|P|
    |COMMON-LISP|::|=|
    (|UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS*| |ASDF/OUTPUT-TRANSLATIONS|::|PATH|)
    :|FOR|
    (|ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|
     |ASDF/OUTPUT-TRANSLATIONS|::|DESTINATION|)
    :|IN|
    (|COMMON-LISP|::|CAR| |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS*|)
    :|FOR| |ASDF/OUTPUT-TRANSLATIONS|::|ROOT| |COMMON-LISP|::|=|
    (|COMMON-LISP|::|WHEN|
     (|COMMON-LISP|::|OR|
      (|COMMON-LISP|::|EQ| |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|
       |COMMON-LISP|::|T|)
      (|COMMON-LISP|::|AND|
       (|COMMON-LISP|::|PATHNAMEP| |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|)
       (|COMMON-LISP|::|NOT|
        (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P|
         |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|))))
     (|UIOP/PATHNAME|::|PATHNAME-ROOT| |ASDF/OUTPUT-TRANSLATIONS|::|P|))
    :|FOR| |ASDF/OUTPUT-TRANSLATIONS|::|ABSOLUTE-SOURCE| |COMMON-LISP|::|=|
    (|COMMON-LISP|::|COND|
     ((|COMMON-LISP|::|EQ| |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|
       |COMMON-LISP|::|T|)
      (|UIOP/PATHNAME|::|WILDEN| |ASDF/OUTPUT-TRANSLATIONS|::|ROOT|))
     (|ASDF/OUTPUT-TRANSLATIONS|::|ROOT|
      (|UIOP/PATHNAME|::|MERGE-PATHNAMES*| |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|
       |ASDF/OUTPUT-TRANSLATIONS|::|ROOT|))
     (|COMMON-LISP|::|T| |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|))
    :|WHEN|
    (|COMMON-LISP|::|OR|
     (|COMMON-LISP|::|EQ| |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|
      |COMMON-LISP|::|T|)
     (|COMMON-LISP|::|PATHNAME-MATCH-P| |ASDF/OUTPUT-TRANSLATIONS|::|P|
      |ASDF/OUTPUT-TRANSLATIONS|::|ABSOLUTE-SOURCE|))
    :|RETURN|
    (|UIOP/PATHNAME|::|TRANSLATE-PATHNAME*| |ASDF/OUTPUT-TRANSLATIONS|::|P|
     |ASDF/OUTPUT-TRANSLATIONS|::|ABSOLUTE-SOURCE|
     |ASDF/OUTPUT-TRANSLATIONS|::|DESTINATION|
     |ASDF/OUTPUT-TRANSLATIONS|::|ROOT| |ASDF/OUTPUT-TRANSLATIONS|::|SOURCE|)
    :|FINALLY| (|COMMON-LISP|::|RETURN| |ASDF/OUTPUT-TRANSLATIONS|::|P|)))))
(|COMMON-LISP|::|SETF| |UIOP/PATHNAME|::|*OUTPUT-TRANSLATION-FUNCTION*|
 '|ASDF/OUTPUT-TRANSLATIONS|::|APPLY-OUTPUT-TRANSLATIONS|)
(|COMMON-LISP|::|LET*| ((#1=#:|G37081| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/OUTPUT-TRANSLATIONS|::|INVALID-OUTPUT-TRANSLATION|
  :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|UIOP/CONFIGURATION|::|INVALID-CONFIGURATION|
   '|COMMON-LISP|::|WARNING|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|FORMAT| :|INITFORM|
    '#2=(|UIOP/COMMON-LISP|::|COMPATFMT|
         "~@<Invalid asdf output-translation ~S~@[ in ~S~]~@{ ~@?~}~@:>")
    :|INITFUNCTION|
    (|COMMON-LISP|::|FUNCTION| |ASDF/OUTPUT-TRANSLATIONS|::|DEFAULT-FORMAT|
     (|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| #2#))))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|SET-OUTPUT-TRANSLATIONS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|SET-OUTPUT-TRANSLATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OUTPUT-TRANSLATIONS|::|NEW-VALUE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   (|COMMON-LISP|::|SETF| |ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS|)))
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS|)
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OUTPUT-TRANSLATIONS|::|NEW-VALUE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS-INITIALIZED-P|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|OUTPUT-TRANSLATIONS-INITIALIZED-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|CLEAR-OUTPUT-TRANSLATIONS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|CLEAR-OUTPUT-TRANSLATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-DIRECTIVE|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-DIRECTIVE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-FORM|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OUTPUT-TRANSLATIONS|::|FORM| |COMMON-LISP|::|&KEY|
    |ASDF/OUTPUT-TRANSLATIONS|::|LOCATION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-FILE|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-FILE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/OUTPUT-TRANSLATIONS|::|FILE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-DIRECTORY|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|VALIDATE-OUTPUT-TRANSLATIONS-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|DIRECTORY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|PARSE-OUTPUT-TRANSLATIONS-STRING|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|PARSE-OUTPUT-TRANSLATIONS-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STRING| |COMMON-LISP|::|&KEY|
    |ASDF/OUTPUT-TRANSLATIONS|::|LOCATION|)))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|%COMPUTE-DEFAULT-OUTPUT-TRANSLATIONS-VALUE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/OUTPUT-TRANSLATIONS|::|*DEFAULT-OUTPUT-TRANSLATIONS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|WRAPPING-OUTPUT-TRANSLATIONS|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|WRAPPING-OUTPUT-TRANSLATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-FILE*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-DIRECTORY*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|USER-OUTPUT-TRANSLATIONS-PATHNAME|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|USER-OUTPUT-TRANSLATIONS-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| (|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTION| :|INPUT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|SYSTEM-OUTPUT-TRANSLATIONS-PATHNAME|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|SYSTEM-OUTPUT-TRANSLATIONS-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| (|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTION| :|INPUT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|USER-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|USER-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| (|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTION| :|INPUT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|SYSTEM-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|SYSTEM-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| (|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTION| :|INPUT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|ENVIRONMENT-OUTPUT-TRANSLATIONS|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|ENVIRONMENT-OUTPUT-TRANSLATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
 '#(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|INHERIT| :|COLLECT|)
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT-OUTPUT-TRANSLATIONS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|INHERIT-OUTPUT-TRANSLATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OUTPUT-TRANSLATIONS|::|INHERIT| |COMMON-LISP|::|&KEY|
    |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS-DIRECTIVE|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS-DIRECTIVE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/OUTPUT-TRANSLATIONS|::|DIRECTIVE| |COMMON-LISP|::|&KEY|
    |ASDF/OUTPUT-TRANSLATIONS|::|INHERIT|
    |ASDF/OUTPUT-TRANSLATIONS|::|COLLECT|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|INHERIT| :|COLLECT|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|INHERIT| :|COLLECT|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|INHERIT| :|COLLECT|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|INHERIT| :|COLLECT|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|PROCESS-OUTPUT-TRANSLATIONS|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|INHERIT| :|COLLECT|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|COMPUTE-OUTPUT-TRANSLATIONS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|COMPUTE-OUTPUT-TRANSLATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL| |ASDF/OUTPUT-TRANSLATIONS|::|PARAMETER|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-PARAMETER*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|INITIALIZE-OUTPUT-TRANSLATIONS|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/OUTPUT-TRANSLATIONS|::|INITIALIZE-OUTPUT-TRANSLATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL|
    (|ASDF/OUTPUT-TRANSLATIONS|::|PARAMETER|
     |ASDF/OUTPUT-TRANSLATIONS|::|*OUTPUT-TRANSLATIONS-PARAMETER*|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|DISABLE-OUTPUT-TRANSLATIONS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|DISABLE-OUTPUT-TRANSLATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|ENSURE-OUTPUT-TRANSLATIONS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|ENSURE-OUTPUT-TRANSLATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/OUTPUT-TRANSLATIONS|::|APPLY-OUTPUT-TRANSLATIONS|))
(|SYSTEM|::|C-DEFUN| '|ASDF/OUTPUT-TRANSLATIONS|::|APPLY-OUTPUT-TRANSLATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/OUTPUT-TRANSLATIONS|::|PATH|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|ASDF/SOURCE-REGISTRY| :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SYSTEM|
    :|ASDF/SYSTEM-REGISTRY|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|*SOURCE-REGISTRY-PARAMETER*| #:|*DEFAULT-SOURCE-REGISTRIES*|
    #:|INVALID-SOURCE-REGISTRY| #:|SOURCE-REGISTRY-INITIALIZED-P|
    #:|INITIALIZE-SOURCE-REGISTRY| #:|CLEAR-SOURCE-REGISTRY|
    #:|*SOURCE-REGISTRY*| #:|ENSURE-SOURCE-REGISTRY|
    #:|*SOURCE-REGISTRY-PARAMETER*| #:|*DEFAULT-SOURCE-REGISTRY-EXCLUSIONS*|
    #:|*SOURCE-REGISTRY-EXCLUSIONS*| #:|*WILD-ASD*| #:|DIRECTORY-ASD-FILES|
    #:|REGISTER-ASD-DIRECTORY| #:|*RECURSE-BEYOND-ASDS*|
    #:|COLLECT-ASDS-IN-DIRECTORY| #:|COLLECT-SUB*DIRECTORIES-ASD-FILES|
    #:|VALIDATE-SOURCE-REGISTRY-DIRECTIVE| #:|VALIDATE-SOURCE-REGISTRY-FORM|
    #:|VALIDATE-SOURCE-REGISTRY-FILE| #:|VALIDATE-SOURCE-REGISTRY-DIRECTORY|
    #:|PARSE-SOURCE-REGISTRY-STRING| #:|WRAPPING-SOURCE-REGISTRY|
    #:|DEFAULT-USER-SOURCE-REGISTRY| #:|DEFAULT-SYSTEM-SOURCE-REGISTRY|
    #:|USER-SOURCE-REGISTRY| #:|SYSTEM-SOURCE-REGISTRY|
    #:|USER-SOURCE-REGISTRY-DIRECTORY| #:|SYSTEM-SOURCE-REGISTRY-DIRECTORY|
    #:|ENVIRONMENT-SOURCE-REGISTRY| #:|PROCESS-SOURCE-REGISTRY|
    #:|INHERIT-SOURCE-REGISTRY| #:|COMPUTE-SOURCE-REGISTRY|
    #:|FLATTEN-SOURCE-REGISTRY| #:|SYSDEF-SOURCE-REGISTRY-SEARCH|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/SOURCE-REGISTRY| :|ASDF/FIND-SYSTEM| :|ASDF|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/SOURCE-REGISTRY"))
(|COMMON-LISP|::|DEFINE-CONDITION|
 |ASDF/SOURCE-REGISTRY|::|INVALID-SOURCE-REGISTRY|
 (|UIOP/CONFIGURATION|::|INVALID-CONFIGURATION| |COMMON-LISP|::|WARNING|)
 ((|COMMON-LISP|::|FORMAT| :|INITFORM|
   (|UIOP/COMMON-LISP|::|COMPATFMT|
    "~@<Invalid source registry ~S~@[ in ~S~]~@{ ~@?~}~@:>"))))
(|COMMON-LISP|::|DEFVAR|
 |ASDF/SOURCE-REGISTRY|::|*DEFAULT-SOURCE-REGISTRY-EXCLUSIONS*|
 '(".bzr" ".cdv" ".git" ".hg" ".pc" ".svn" "CVS" "RCS" "SCCS" "_darcs" "_sgbak"
   "autom4te.cache" "cover_db" "_build" "debian"))
(|COMMON-LISP|::|DEFVAR| |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-EXCLUSIONS*|
 |ASDF/SOURCE-REGISTRY|::|*DEFAULT-SOURCE-REGISTRY-EXCLUSIONS*|)
(|COMMON-LISP|::|DEFVAR| |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY*|
 |COMMON-LISP|::|NIL|
 "Either NIL (for uninitialized), or an equal hash-table, mapping\n
system names to pathnames of .asd files")
(|COMMON-LISP|::|DEFVAR| |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-PARAMETER*|
 |COMMON-LISP|::|NIL|)
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SOURCE-REGISTRY|::|SOURCE-REGISTRY-INITIALIZED-P| |COMMON-LISP|::|NIL|
 (|COMMON-LISP|::|TYPEP| |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY*|
  '|COMMON-LISP|::|HASH-TABLE|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|CLEAR-SOURCE-REGISTRY|
 |COMMON-LISP|::|NIL| "Undoes any initialization of the source registry."
 (|COMMON-LISP|::|SETF| |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY*|
  |COMMON-LISP|::|NIL|)
 (|COMMON-LISP|::|VALUES|))
(|UIOP/CONFIGURATION|::|REGISTER-CLEAR-CONFIGURATION-HOOK|
 '|ASDF/SOURCE-REGISTRY|::|CLEAR-SOURCE-REGISTRY|)
(|COMMON-LISP|::|DEFPARAMETER| |ASDF/SOURCE-REGISTRY|::|*WILD-ASD*|
 (|COMMON-LISP|::|MAKE-PATHNAME| :|DIRECTORY| |COMMON-LISP|::|NIL| :|NAME|
  |UIOP/PATHNAME|::|*WILD*| :|TYPE| "asd" :|VERSION| :|NEWEST|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|DIRECTORY-ASD-FILES|
 (|COMMON-LISP|::|DIRECTORY|)
 (|UIOP/FILESYSTEM|::|DIRECTORY-FILES| |COMMON-LISP|::|DIRECTORY|
  |ASDF/SOURCE-REGISTRY|::|*WILD-ASD*|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|COLLECT-ASDS-IN-DIRECTORY|
 (|COMMON-LISP|::|DIRECTORY| |ASDF/SOURCE-REGISTRY|::|COLLECT|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/SOURCE-REGISTRY|::|ASDS|
    (|ASDF/SOURCE-REGISTRY|::|DIRECTORY-ASD-FILES|
     |COMMON-LISP|::|DIRECTORY|)))
  (|COMMON-LISP|::|MAP| |COMMON-LISP|::|NIL| |ASDF/SOURCE-REGISTRY|::|COLLECT|
   |ASDF/SOURCE-REGISTRY|::|ASDS|)
  |ASDF/SOURCE-REGISTRY|::|ASDS|))
(|COMMON-LISP|::|DEFVAR| |ASDF/SOURCE-REGISTRY|::|*RECURSE-BEYOND-ASDS*|
 |COMMON-LISP|::|T|
 "Should :tree entries of the source-registry recurse in subdirectories\n
after having found a .asd file? True by default.")
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY-CACHE|
 (|COMMON-LISP|::|DIRECTORY| |ASDF/SOURCE-REGISTRY|::|COLLECT|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/SOURCE-REGISTRY|::|CACHE|
    (|COMMON-LISP|::|IGNORE-ERRORS|
     (|UIOP/STREAM|::|SAFE-READ-FILE-FORM|
      (|UIOP/PATHNAME|::|SUBPATHNAME| |COMMON-LISP|::|DIRECTORY|
       ".cl-source-registry.cache")))))
  (|COMMON-LISP|::|WHEN|
   (|COMMON-LISP|::|AND|
    (|COMMON-LISP|::|LISTP| |ASDF/SOURCE-REGISTRY|::|CACHE|)
    (|COMMON-LISP|::|EQ| :|SOURCE-REGISTRY-CACHE|
     (|COMMON-LISP|::|FIRST| |ASDF/SOURCE-REGISTRY|::|CACHE|)))
   (|COMMON-LISP|::|LOOP| :|FOR| |ASDF/SOURCE-REGISTRY|::|S| :|IN|
    (|COMMON-LISP|::|REST| |ASDF/SOURCE-REGISTRY|::|CACHE|) :|DO|
    (|COMMON-LISP|::|FUNCALL| |ASDF/SOURCE-REGISTRY|::|COLLECT|
     (|UIOP/PATHNAME|::|SUBPATHNAME| |COMMON-LISP|::|DIRECTORY|
      |ASDF/SOURCE-REGISTRY|::|S|)))
   |COMMON-LISP|::|T|)))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SOURCE-REGISTRY|::|COLLECT-SUB*DIRECTORIES-ASD-FILES|
 (|COMMON-LISP|::|DIRECTORY| |COMMON-LISP|::|&KEY|
  (|ASDF/SOURCE-REGISTRY|::|EXCLUDE|
   |ASDF/SOURCE-REGISTRY|::|*DEFAULT-SOURCE-REGISTRY-EXCLUSIONS*|)
  |ASDF/SOURCE-REGISTRY|::|COLLECT|
  (|ASDF/SOURCE-REGISTRY|::|RECURSE-BEYOND-ASDS|
   |ASDF/SOURCE-REGISTRY|::|*RECURSE-BEYOND-ASDS*|)
  |ASDF/SOURCE-REGISTRY|::|IGNORE-CACHE|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/SOURCE-REGISTRY|::|VISITED|
    (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUALP|)))
  (|COMMON-LISP|::|FLET|
   ((|ASDF/SOURCE-REGISTRY|::|COLLECTP| (|ASDF/SOURCE-REGISTRY|::|DIR|)
     (|COMMON-LISP|::|UNLESS|
      (|COMMON-LISP|::|AND|
       (|COMMON-LISP|::|NOT| |ASDF/SOURCE-REGISTRY|::|IGNORE-CACHE|)
       (|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY-CACHE|
        |COMMON-LISP|::|DIRECTORY| |ASDF/SOURCE-REGISTRY|::|COLLECT|))
      (|COMMON-LISP|::|LET|
       ((|ASDF/SOURCE-REGISTRY|::|ASDS|
         (|ASDF/SOURCE-REGISTRY|::|COLLECT-ASDS-IN-DIRECTORY|
          |ASDF/SOURCE-REGISTRY|::|DIR| |ASDF/SOURCE-REGISTRY|::|COLLECT|)))
       (|COMMON-LISP|::|OR| |ASDF/SOURCE-REGISTRY|::|RECURSE-BEYOND-ASDS|
        (|COMMON-LISP|::|NOT| |ASDF/SOURCE-REGISTRY|::|ASDS|)))))
    (|ASDF/SOURCE-REGISTRY|::|RECURSEP| (|ASDF/SOURCE-REGISTRY|::|X|)
     (|COMMON-LISP|::|AND|
      (|COMMON-LISP|::|NOT|
       (|COMMON-LISP|::|MEMBER|
        (|COMMON-LISP|::|CAR|
         (|COMMON-LISP|::|LAST|
          (|COMMON-LISP|::|PATHNAME-DIRECTORY| |ASDF/SOURCE-REGISTRY|::|X|)))
        |ASDF/SOURCE-REGISTRY|::|EXCLUDE| :|TEST| #'|COMMON-LISP|::|EQUAL|))
      (|COMMON-LISP|::|FLET|
       ((|ASDF/SOURCE-REGISTRY|::|PATHNAME-KEY| (|ASDF/SOURCE-REGISTRY|::|X|)
         (|COMMON-LISP|::|NAMESTRING|
          (|UIOP/FILESYSTEM|::|TRUENAME*| |ASDF/SOURCE-REGISTRY|::|X|))))
       (|COMMON-LISP|::|LET|
        ((|ASDF/SOURCE-REGISTRY|::|VISITEDP|
          (|COMMON-LISP|::|GETHASH|
           (|ASDF/SOURCE-REGISTRY|::|PATHNAME-KEY| |ASDF/SOURCE-REGISTRY|::|X|)
           |ASDF/SOURCE-REGISTRY|::|VISITED|)))
        (|COMMON-LISP|::|IF| |ASDF/SOURCE-REGISTRY|::|VISITEDP|
         |COMMON-LISP|::|NIL|
         (|COMMON-LISP|::|SETF|
          (|COMMON-LISP|::|GETHASH|
           (|ASDF/SOURCE-REGISTRY|::|PATHNAME-KEY| |ASDF/SOURCE-REGISTRY|::|X|)
           |ASDF/SOURCE-REGISTRY|::|VISITED|)
          |COMMON-LISP|::|T|)))))))
   (|UIOP/FILESYSTEM|::|COLLECT-SUB*DIRECTORIES| |COMMON-LISP|::|DIRECTORY|
    #'|ASDF/SOURCE-REGISTRY|::|COLLECTP| #'|ASDF/SOURCE-REGISTRY|::|RECURSEP|
    (|COMMON-LISP|::|CONSTANTLY| |COMMON-LISP|::|NIL|)))))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-DIRECTIVE|
 (|ASDF/SOURCE-REGISTRY|::|DIRECTIVE|)
 (|COMMON-LISP|::|OR|
  (|COMMON-LISP|::|MEMBER| |ASDF/SOURCE-REGISTRY|::|DIRECTIVE|
   '(:|DEFAULT-REGISTRY|))
  (|COMMON-LISP|::|AND|
   (|COMMON-LISP|::|CONSP| |ASDF/SOURCE-REGISTRY|::|DIRECTIVE|)
   (|COMMON-LISP|::|LET|
    ((|COMMON-LISP|::|REST|
      (|COMMON-LISP|::|REST| |ASDF/SOURCE-REGISTRY|::|DIRECTIVE|)))
    (|COMMON-LISP|::|CASE|
     (|COMMON-LISP|::|FIRST| |ASDF/SOURCE-REGISTRY|::|DIRECTIVE|)
     ((:|INCLUDE| :|DIRECTORY| :|TREE|)
      (|COMMON-LISP|::|AND|
       (|UIOP/UTILITY|::|LENGTH=N-P| |COMMON-LISP|::|REST| 1.)
       (|UIOP/CONFIGURATION|::|LOCATION-DESIGNATOR-P|
        (|COMMON-LISP|::|FIRST| |COMMON-LISP|::|REST|))))
     ((:|EXCLUDE| :|ALSO-EXCLUDE|)
      (|COMMON-LISP|::|EVERY| #'|COMMON-LISP|::|STRINGP|
       |COMMON-LISP|::|REST|))
     ((:|DEFAULT-REGISTRY|) (|COMMON-LISP|::|NULL| |COMMON-LISP|::|REST|)))))))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-FORM|
 (|ASDF/SOURCE-REGISTRY|::|FORM| |COMMON-LISP|::|&KEY|
  |ASDF/SOURCE-REGISTRY|::|LOCATION|)
 (|UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-FORM|
  |ASDF/SOURCE-REGISTRY|::|FORM| :|SOURCE-REGISTRY|
  '|ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-DIRECTIVE| :|LOCATION|
  |ASDF/SOURCE-REGISTRY|::|LOCATION| :|INVALID-FORM-REPORTER|
  '|ASDF/SOURCE-REGISTRY|::|INVALID-SOURCE-REGISTRY|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-FILE|
 (|ASDF/SOURCE-REGISTRY|::|FILE|)
 (|UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-FILE|
  |ASDF/SOURCE-REGISTRY|::|FILE|
  '|ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-FORM| :|DESCRIPTION|
  "a source registry"))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-DIRECTORY|
 (|COMMON-LISP|::|DIRECTORY|)
 (|UIOP/CONFIGURATION|::|VALIDATE-CONFIGURATION-DIRECTORY|
  |COMMON-LISP|::|DIRECTORY| :|SOURCE-REGISTRY|
  '|ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-DIRECTIVE|
  :|INVALID-FORM-REPORTER| '|ASDF/SOURCE-REGISTRY|::|INVALID-SOURCE-REGISTRY|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SOURCE-REGISTRY|::|PARSE-SOURCE-REGISTRY-STRING|
 (|COMMON-LISP|::|STRING| |COMMON-LISP|::|&KEY|
  |ASDF/SOURCE-REGISTRY|::|LOCATION|)
 (|COMMON-LISP|::|COND|
  ((|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |COMMON-LISP|::|STRING|)
    (|COMMON-LISP|::|EQUAL| |COMMON-LISP|::|STRING| ""))
   '(:|SOURCE-REGISTRY| :|INHERIT-CONFIGURATION|))
  ((|COMMON-LISP|::|NOT| (|COMMON-LISP|::|STRINGP| |COMMON-LISP|::|STRING|))
   (|COMMON-LISP|::|ERROR|
    (|UIOP/COMMON-LISP|::|COMPATFMT|
     "~@<Environment string isn't: ~3i~_~S~@:>")
    |COMMON-LISP|::|STRING|))
  ((|COMMON-LISP|::|FIND| (|COMMON-LISP|::|CHAR| |COMMON-LISP|::|STRING| 0.)
    "\"(")
   (|ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-FORM|
    (|COMMON-LISP|::|READ-FROM-STRING| |COMMON-LISP|::|STRING|) :|LOCATION|
    |ASDF/SOURCE-REGISTRY|::|LOCATION|))
  (|COMMON-LISP|::|T|
   (|COMMON-LISP|::|LOOP| :|WITH| |ASDF/SOURCE-REGISTRY|::|INHERIT|
    |COMMON-LISP|::|=| |COMMON-LISP|::|NIL| :|WITH|
    |ASDF/SOURCE-REGISTRY|::|DIRECTIVES| |COMMON-LISP|::|=|
    |COMMON-LISP|::|NIL| :|WITH| |ASDF/SOURCE-REGISTRY|::|START|
    |COMMON-LISP|::|=| 0. :|WITH| |ASDF/SOURCE-REGISTRY|::|END|
    |COMMON-LISP|::|=| (|COMMON-LISP|::|LENGTH| |COMMON-LISP|::|STRING|)
    :|WITH| |ASDF/SOURCE-REGISTRY|::|SEPARATOR| |COMMON-LISP|::|=|
    (|UIOP/FILESYSTEM|::|INTER-DIRECTORY-SEPARATOR|) :|FOR|
    |ASDF/SOURCE-REGISTRY|::|POS| |COMMON-LISP|::|=|
    (|COMMON-LISP|::|POSITION| |ASDF/SOURCE-REGISTRY|::|SEPARATOR|
     |COMMON-LISP|::|STRING| :|START| |ASDF/SOURCE-REGISTRY|::|START|)
    :|DO|
    (|COMMON-LISP|::|LET|
     ((|ASDF/SOURCE-REGISTRY|::|S|
       (|COMMON-LISP|::|SUBSEQ| |COMMON-LISP|::|STRING|
        |ASDF/SOURCE-REGISTRY|::|START|
        (|COMMON-LISP|::|OR| |ASDF/SOURCE-REGISTRY|::|POS|
         |ASDF/SOURCE-REGISTRY|::|END|))))
     (|COMMON-LISP|::|FLET|
      ((|ASDF/SOURCE-REGISTRY|::|CHECK| (|ASDF/SOURCE-REGISTRY|::|DIR|)
        (|COMMON-LISP|::|UNLESS|
         (|UIOP/PATHNAME|::|ABSOLUTE-PATHNAME-P| |ASDF/SOURCE-REGISTRY|::|DIR|)
         (|COMMON-LISP|::|ERROR|
          (|UIOP/COMMON-LISP|::|COMPATFMT|
           "~@<source-registry string must specify absolute pathnames: ~3i~_~S~@:>")
          |COMMON-LISP|::|STRING|))
        |ASDF/SOURCE-REGISTRY|::|DIR|))
      (|COMMON-LISP|::|COND|
       ((|COMMON-LISP|::|EQUAL| "" |ASDF/SOURCE-REGISTRY|::|S|)
        (|COMMON-LISP|::|WHEN| |ASDF/SOURCE-REGISTRY|::|INHERIT|
         (|COMMON-LISP|::|ERROR|
          (|UIOP/COMMON-LISP|::|COMPATFMT|
           "~@<Only one inherited configuration allowed: ~3i~_~S~@:>")
          |COMMON-LISP|::|STRING|))
        (|COMMON-LISP|::|SETF| |ASDF/SOURCE-REGISTRY|::|INHERIT|
         |COMMON-LISP|::|T|)
        (|COMMON-LISP|::|PUSH| ':|INHERIT-CONFIGURATION|
         |ASDF/SOURCE-REGISTRY|::|DIRECTIVES|))
       ((|UIOP/UTILITY|::|STRING-SUFFIX-P| |ASDF/SOURCE-REGISTRY|::|S| "//")
        (|COMMON-LISP|::|PUSH|
         `(:|TREE|
           ,(|ASDF/SOURCE-REGISTRY|::|CHECK|
             (|COMMON-LISP|::|SUBSEQ| |ASDF/SOURCE-REGISTRY|::|S| 0.
              (|COMMON-LISP|::|-|
               (|COMMON-LISP|::|LENGTH| |ASDF/SOURCE-REGISTRY|::|S|) 2.))))
         |ASDF/SOURCE-REGISTRY|::|DIRECTIVES|))
       (|COMMON-LISP|::|T|
        (|COMMON-LISP|::|PUSH|
         `(:|DIRECTORY|
           ,(|ASDF/SOURCE-REGISTRY|::|CHECK| |ASDF/SOURCE-REGISTRY|::|S|))
         |ASDF/SOURCE-REGISTRY|::|DIRECTIVES|))))
     (|COMMON-LISP|::|COND|
      (|ASDF/SOURCE-REGISTRY|::|POS|
       (|COMMON-LISP|::|SETF| |ASDF/SOURCE-REGISTRY|::|START|
        (|COMMON-LISP|::|1+| |ASDF/SOURCE-REGISTRY|::|POS|)))
      (|COMMON-LISP|::|T|
       (|COMMON-LISP|::|UNLESS| |ASDF/SOURCE-REGISTRY|::|INHERIT|
        (|COMMON-LISP|::|PUSH| '(:|IGNORE-INHERITED-CONFIGURATION|)
         |ASDF/SOURCE-REGISTRY|::|DIRECTIVES|))
       (|COMMON-LISP|::|RETURN|
        `(:|SOURCE-REGISTRY|
          ,@(|COMMON-LISP|::|NREVERSE|
             |ASDF/SOURCE-REGISTRY|::|DIRECTIVES|))))))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|REGISTER-ASD-DIRECTORY|
 (|COMMON-LISP|::|DIRECTORY| |COMMON-LISP|::|&KEY|
  |ASDF/SOURCE-REGISTRY|::|RECURSE| |ASDF/SOURCE-REGISTRY|::|EXCLUDE|
  |ASDF/SOURCE-REGISTRY|::|COLLECT|)
 (|COMMON-LISP|::|IF| (|COMMON-LISP|::|NOT| |ASDF/SOURCE-REGISTRY|::|RECURSE|)
  (|ASDF/SOURCE-REGISTRY|::|COLLECT-ASDS-IN-DIRECTORY|
   |COMMON-LISP|::|DIRECTORY| |ASDF/SOURCE-REGISTRY|::|COLLECT|)
  (|ASDF/SOURCE-REGISTRY|::|COLLECT-SUB*DIRECTORIES-ASD-FILES|
   |COMMON-LISP|::|DIRECTORY| :|EXCLUDE| |ASDF/SOURCE-REGISTRY|::|EXCLUDE|
   :|COLLECT| |ASDF/SOURCE-REGISTRY|::|COLLECT|)))
(|ASDF/UPGRADE|::|DEFPARAMETER*|
 |ASDF/SOURCE-REGISTRY|::|*DEFAULT-SOURCE-REGISTRIES*|
 '(|ASDF/SOURCE-REGISTRY|::|ENVIRONMENT-SOURCE-REGISTRY|
   |ASDF/SOURCE-REGISTRY|::|USER-SOURCE-REGISTRY|
   |ASDF/SOURCE-REGISTRY|::|USER-SOURCE-REGISTRY-DIRECTORY|
   |ASDF/SOURCE-REGISTRY|::|DEFAULT-USER-SOURCE-REGISTRY|
   |ASDF/SOURCE-REGISTRY|::|SYSTEM-SOURCE-REGISTRY|
   |ASDF/SOURCE-REGISTRY|::|SYSTEM-SOURCE-REGISTRY-DIRECTORY|
   |ASDF/SOURCE-REGISTRY|::|DEFAULT-SYSTEM-SOURCE-REGISTRY|)
 "List of default source registries" "3.1.0.102")
(|COMMON-LISP|::|DEFPARAMETER| |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-FILE*|
 (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING| "common-lisp/source-registry.conf"))
(|COMMON-LISP|::|DEFPARAMETER|
 |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-DIRECTORY*|
 (|UIOP/PATHNAME|::|PARSE-UNIX-NAMESTRING|
  "common-lisp/source-registry.conf.d/"))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|WRAPPING-SOURCE-REGISTRY|
 |COMMON-LISP|::|NIL| `(:|SOURCE-REGISTRY| :|INHERIT-CONFIGURATION|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SOURCE-REGISTRY|::|DEFAULT-USER-SOURCE-REGISTRY| |COMMON-LISP|::|NIL|
 `(:|SOURCE-REGISTRY| (:|TREE| (:|HOME| "common-lisp/"))
   (:|DIRECTORY|
    ,(|UIOP/CONFIGURATION|::|XDG-DATA-HOME| "common-lisp/systems/"))
   (:|TREE| ,(|UIOP/CONFIGURATION|::|XDG-DATA-HOME| "common-lisp/source/"))
   :|INHERIT-CONFIGURATION|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SOURCE-REGISTRY|::|DEFAULT-SYSTEM-SOURCE-REGISTRY| |COMMON-LISP|::|NIL|
 `(:|SOURCE-REGISTRY|
   ,@(|COMMON-LISP|::|LOOP| :|FOR| |ASDF/SOURCE-REGISTRY|::|DIR| :|IN|
      (|UIOP/CONFIGURATION|::|XDG-DATA-DIRS| "common-lisp/") :|COLLECT|
      `(:|DIRECTORY| (,|ASDF/SOURCE-REGISTRY|::|DIR| "systems/")) :|COLLECT|
      `(:|TREE| (,|ASDF/SOURCE-REGISTRY|::|DIR| "source/")))
   :|INHERIT-CONFIGURATION|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|USER-SOURCE-REGISTRY|
 (|COMMON-LISP|::|&KEY| (|ASDF/SOURCE-REGISTRY|::|DIRECTION| :|INPUT|))
 (|UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAME|
  |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-FILE*|
  |ASDF/SOURCE-REGISTRY|::|DIRECTION|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|SYSTEM-SOURCE-REGISTRY|
 (|COMMON-LISP|::|&KEY| (|ASDF/SOURCE-REGISTRY|::|DIRECTION| :|INPUT|))
 (|UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|
  (|UIOP/CONFIGURATION|::|SYSTEM-CONFIG-PATHNAMES|
   |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-FILE*|)
  :|DIRECTION| |ASDF/SOURCE-REGISTRY|::|DIRECTION|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SOURCE-REGISTRY|::|USER-SOURCE-REGISTRY-DIRECTORY|
 (|COMMON-LISP|::|&KEY| (|ASDF/SOURCE-REGISTRY|::|DIRECTION| :|INPUT|))
 (|UIOP/CONFIGURATION|::|XDG-CONFIG-PATHNAME|
  |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-DIRECTORY*|
  |ASDF/SOURCE-REGISTRY|::|DIRECTION|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SOURCE-REGISTRY|::|SYSTEM-SOURCE-REGISTRY-DIRECTORY|
 (|COMMON-LISP|::|&KEY| (|ASDF/SOURCE-REGISTRY|::|DIRECTION| :|INPUT|))
 (|UIOP/CONFIGURATION|::|FIND-PREFERRED-FILE|
  (|UIOP/CONFIGURATION|::|SYSTEM-CONFIG-PATHNAMES|
   |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-DIRECTORY*|)
  :|DIRECTION| |ASDF/SOURCE-REGISTRY|::|DIRECTION|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|ENVIRONMENT-SOURCE-REGISTRY|
 |COMMON-LISP|::|NIL| (|UIOP/OS|::|GETENV| "CL_SOURCE_REGISTRY"))
(|UIOP/UTILITY|::|DEFGENERIC*|
 |ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
 (|ASDF/SOURCE-REGISTRY|::|SPEC| |COMMON-LISP|::|&KEY|
  |ASDF/SOURCE-REGISTRY|::|INHERIT| |ASDF/SOURCE-REGISTRY|::|REGISTER|))
(|UIOP/UTILITY|::|DEFUN*| (|ASDF/SOURCE-REGISTRY|::|INHERIT-SOURCE-REGISTRY|)
 (|ASDF/SOURCE-REGISTRY|::|INHERIT| |COMMON-LISP|::|&KEY|
  |ASDF/SOURCE-REGISTRY|::|REGISTER|)
 (|COMMON-LISP|::|WHEN| |ASDF/SOURCE-REGISTRY|::|INHERIT|
  (|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
   (|COMMON-LISP|::|FIRST| |ASDF/SOURCE-REGISTRY|::|INHERIT|) :|REGISTER|
   |ASDF/SOURCE-REGISTRY|::|REGISTER| :|INHERIT|
   (|COMMON-LISP|::|REST| |ASDF/SOURCE-REGISTRY|::|INHERIT|))))
(|UIOP/UTILITY|::|DEFUN*|
 (|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY-DIRECTIVE|)
 (|ASDF/SOURCE-REGISTRY|::|DIRECTIVE| |COMMON-LISP|::|&KEY|
  |ASDF/SOURCE-REGISTRY|::|INHERIT| |ASDF/SOURCE-REGISTRY|::|REGISTER|)
 (|COMMON-LISP|::|DESTRUCTURING-BIND|
  (|ASDF/SOURCE-REGISTRY|::|KW| |COMMON-LISP|::|&REST| |COMMON-LISP|::|REST|)
  (|COMMON-LISP|::|IF|
   (|COMMON-LISP|::|CONSP| |ASDF/SOURCE-REGISTRY|::|DIRECTIVE|)
   |ASDF/SOURCE-REGISTRY|::|DIRECTIVE|
   (|COMMON-LISP|::|LIST| |ASDF/SOURCE-REGISTRY|::|DIRECTIVE|))
  (|COMMON-LISP|::|ECASE| |ASDF/SOURCE-REGISTRY|::|KW|
   ((:|INCLUDE|)
    (|COMMON-LISP|::|DESTRUCTURING-BIND| (|COMMON-LISP|::|PATHNAME|)
     |COMMON-LISP|::|REST|
     (|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
      (|UIOP/CONFIGURATION|::|RESOLVE-LOCATION| |COMMON-LISP|::|PATHNAME|)
      :|INHERIT| |COMMON-LISP|::|NIL| :|REGISTER|
      |ASDF/SOURCE-REGISTRY|::|REGISTER|)))
   ((:|DIRECTORY|)
    (|COMMON-LISP|::|DESTRUCTURING-BIND| (|COMMON-LISP|::|PATHNAME|)
     |COMMON-LISP|::|REST|
     (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PATHNAME|
      (|COMMON-LISP|::|FUNCALL| |ASDF/SOURCE-REGISTRY|::|REGISTER|
       (|UIOP/CONFIGURATION|::|RESOLVE-LOCATION| |COMMON-LISP|::|PATHNAME|
        :|ENSURE-DIRECTORY| |COMMON-LISP|::|T|)))))
   ((:|TREE|)
    (|COMMON-LISP|::|DESTRUCTURING-BIND| (|COMMON-LISP|::|PATHNAME|)
     |COMMON-LISP|::|REST|
     (|COMMON-LISP|::|WHEN| |COMMON-LISP|::|PATHNAME|
      (|COMMON-LISP|::|FUNCALL| |ASDF/SOURCE-REGISTRY|::|REGISTER|
       (|UIOP/CONFIGURATION|::|RESOLVE-LOCATION| |COMMON-LISP|::|PATHNAME|
        :|ENSURE-DIRECTORY| |COMMON-LISP|::|T|)
       :|RECURSE| |COMMON-LISP|::|T| :|EXCLUDE|
       |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-EXCLUSIONS*|))))
   ((:|EXCLUDE|)
    (|COMMON-LISP|::|SETF|
     |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-EXCLUSIONS*|
     |COMMON-LISP|::|REST|))
   ((:|ALSO-EXCLUDE|)
    (|UIOP/UTILITY|::|APPENDF|
     |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-EXCLUSIONS*|
     |COMMON-LISP|::|REST|))
   ((:|DEFAULT-REGISTRY|)
    (|ASDF/SOURCE-REGISTRY|::|INHERIT-SOURCE-REGISTRY|
     '(|ASDF/SOURCE-REGISTRY|::|DEFAULT-USER-SOURCE-REGISTRY|
       |ASDF/SOURCE-REGISTRY|::|DEFAULT-SYSTEM-SOURCE-REGISTRY|)
     :|REGISTER| |ASDF/SOURCE-REGISTRY|::|REGISTER|))
   ((:|INHERIT-CONFIGURATION|)
    (|ASDF/SOURCE-REGISTRY|::|INHERIT-SOURCE-REGISTRY|
     |ASDF/SOURCE-REGISTRY|::|INHERIT| :|REGISTER|
     |ASDF/SOURCE-REGISTRY|::|REGISTER|))
   ((:|IGNORE-INHERITED-CONFIGURATION|) |COMMON-LISP|::|NIL|)))
 |COMMON-LISP|::|NIL|)
(|CLOS|::|DEFMETHOD| |ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
 ((|ASDF/SOURCE-REGISTRY|::|X| |COMMON-LISP|::|SYMBOL|) |COMMON-LISP|::|&KEY|
  |ASDF/SOURCE-REGISTRY|::|INHERIT| |ASDF/SOURCE-REGISTRY|::|REGISTER|)
 (|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
  (|COMMON-LISP|::|FUNCALL| |ASDF/SOURCE-REGISTRY|::|X|) :|INHERIT|
  |ASDF/SOURCE-REGISTRY|::|INHERIT| :|REGISTER|
  |ASDF/SOURCE-REGISTRY|::|REGISTER|))
(|CLOS|::|DEFMETHOD| |ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
 ((|COMMON-LISP|::|PATHNAME| |COMMON-LISP|::|PATHNAME|) |COMMON-LISP|::|&KEY|
  |ASDF/SOURCE-REGISTRY|::|INHERIT| |ASDF/SOURCE-REGISTRY|::|REGISTER|)
 (|COMMON-LISP|::|COND|
  ((|UIOP/PATHNAME|::|DIRECTORY-PATHNAME-P| |COMMON-LISP|::|PATHNAME|)
   (|COMMON-LISP|::|LET|
    ((|UIOP/CONFIGURATION|::|*HERE-DIRECTORY*|
      (|UIOP/FILESYSTEM|::|RESOLVE-SYMLINKS*| |COMMON-LISP|::|PATHNAME|)))
    (|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
     (|ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-DIRECTORY|
      |COMMON-LISP|::|PATHNAME|)
     :|INHERIT| |ASDF/SOURCE-REGISTRY|::|INHERIT| :|REGISTER|
     |ASDF/SOURCE-REGISTRY|::|REGISTER|)))
  ((|UIOP/FILESYSTEM|::|PROBE-FILE*| |COMMON-LISP|::|PATHNAME| :|TRUENAME|
    |UIOP/FILESYSTEM|::|*RESOLVE-SYMLINKS*|)
   (|COMMON-LISP|::|LET|
    ((|UIOP/CONFIGURATION|::|*HERE-DIRECTORY*|
      (|UIOP/PATHNAME|::|PATHNAME-DIRECTORY-PATHNAME|
       |COMMON-LISP|::|PATHNAME|)))
    (|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
     (|ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-FILE|
      |COMMON-LISP|::|PATHNAME|)
     :|INHERIT| |ASDF/SOURCE-REGISTRY|::|INHERIT| :|REGISTER|
     |ASDF/SOURCE-REGISTRY|::|REGISTER|)))
  (|COMMON-LISP|::|T|
   (|ASDF/SOURCE-REGISTRY|::|INHERIT-SOURCE-REGISTRY|
    |ASDF/SOURCE-REGISTRY|::|INHERIT| :|REGISTER|
    |ASDF/SOURCE-REGISTRY|::|REGISTER|))))
(|CLOS|::|DEFMETHOD| |ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
 ((|COMMON-LISP|::|STRING| |COMMON-LISP|::|STRING|) |COMMON-LISP|::|&KEY|
  |ASDF/SOURCE-REGISTRY|::|INHERIT| |ASDF/SOURCE-REGISTRY|::|REGISTER|)
 (|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
  (|ASDF/SOURCE-REGISTRY|::|PARSE-SOURCE-REGISTRY-STRING|
   |COMMON-LISP|::|STRING|)
  :|INHERIT| |ASDF/SOURCE-REGISTRY|::|INHERIT| :|REGISTER|
  |ASDF/SOURCE-REGISTRY|::|REGISTER|))
(|CLOS|::|DEFMETHOD| |ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
 ((|ASDF/SOURCE-REGISTRY|::|X| |COMMON-LISP|::|NULL|) |COMMON-LISP|::|&KEY|
  |ASDF/SOURCE-REGISTRY|::|INHERIT| |ASDF/SOURCE-REGISTRY|::|REGISTER|)
 (|ASDF/SOURCE-REGISTRY|::|INHERIT-SOURCE-REGISTRY|
  |ASDF/SOURCE-REGISTRY|::|INHERIT| :|REGISTER|
  |ASDF/SOURCE-REGISTRY|::|REGISTER|))
(|CLOS|::|DEFMETHOD| |ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
 ((|ASDF/SOURCE-REGISTRY|::|FORM| |COMMON-LISP|::|CONS|) |COMMON-LISP|::|&KEY|
  |ASDF/SOURCE-REGISTRY|::|INHERIT| |ASDF/SOURCE-REGISTRY|::|REGISTER|)
 (|COMMON-LISP|::|LET|
  ((|ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-EXCLUSIONS*|
    |ASDF/SOURCE-REGISTRY|::|*DEFAULT-SOURCE-REGISTRY-EXCLUSIONS*|))
  (|COMMON-LISP|::|DOLIST|
   (|ASDF/SOURCE-REGISTRY|::|DIRECTIVE|
    (|COMMON-LISP|::|CDR|
     (|ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-FORM|
      |ASDF/SOURCE-REGISTRY|::|FORM|)))
   (|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY-DIRECTIVE|
    |ASDF/SOURCE-REGISTRY|::|DIRECTIVE| :|INHERIT|
    |ASDF/SOURCE-REGISTRY|::|INHERIT| :|REGISTER|
    |ASDF/SOURCE-REGISTRY|::|REGISTER|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|FLATTEN-SOURCE-REGISTRY|
 (|COMMON-LISP|::|&OPTIONAL|
  (|ASDF/SOURCE-REGISTRY|::|PARAMETER|
   |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-PARAMETER*|))
 (|COMMON-LISP|::|REMOVE-DUPLICATES|
  (|UIOP/UTILITY|::|WHILE-COLLECTING| (|ASDF/SOURCE-REGISTRY|::|COLLECT|)
   (|UIOP/PATHNAME|::|WITH-PATHNAME-DEFAULTS| |COMMON-LISP|::|NIL|
    (|ASDF/SOURCE-REGISTRY|::|INHERIT-SOURCE-REGISTRY|
     `(|ASDF/SOURCE-REGISTRY|::|WRAPPING-SOURCE-REGISTRY|
       ,|ASDF/SOURCE-REGISTRY|::|PARAMETER|
       ,@|ASDF/SOURCE-REGISTRY|::|*DEFAULT-SOURCE-REGISTRIES*|)
     :|REGISTER|
     #'(|COMMON-LISP|::|LAMBDA|
        (|COMMON-LISP|::|DIRECTORY| |COMMON-LISP|::|&KEY|
         |ASDF/SOURCE-REGISTRY|::|RECURSE| |ASDF/SOURCE-REGISTRY|::|EXCLUDE|)
        (|ASDF/SOURCE-REGISTRY|::|COLLECT|
         (|COMMON-LISP|::|LIST| |COMMON-LISP|::|DIRECTORY| :|RECURSE|
          |ASDF/SOURCE-REGISTRY|::|RECURSE| :|EXCLUDE|
          |ASDF/SOURCE-REGISTRY|::|EXCLUDE|))))))
  :|TEST| '|COMMON-LISP|::|EQUAL| :|FROM-END| |COMMON-LISP|::|T|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|PATHNAME-DIRECTORY-DEPTH|
 (|ASDF/SOURCE-REGISTRY|::|P|)
 (|COMMON-LISP|::|LENGTH|
  (|UIOP/PATHNAME|::|NORMALIZE-PATHNAME-DIRECTORY-COMPONENT|
   (|COMMON-LISP|::|PATHNAME-DIRECTORY| |ASDF/SOURCE-REGISTRY|::|P|))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|PREFERRED-SOURCE-PATH-P|
 (|ASDF/SOURCE-REGISTRY|::|X| |ASDF/SOURCE-REGISTRY|::|Y|)
 "Return T iff X is to be preferred over Y as a source path"
 (|COMMON-LISP|::|LET|
  ((|ASDF/SOURCE-REGISTRY|::|LX|
    (|ASDF/SOURCE-REGISTRY|::|PATHNAME-DIRECTORY-DEPTH|
     |ASDF/SOURCE-REGISTRY|::|X|))
   (|ASDF/SOURCE-REGISTRY|::|LY|
    (|ASDF/SOURCE-REGISTRY|::|PATHNAME-DIRECTORY-DEPTH|
     |ASDF/SOURCE-REGISTRY|::|Y|)))
  (|COMMON-LISP|::|OR|
   (|COMMON-LISP|::|<| |ASDF/SOURCE-REGISTRY|::|LX|
    |ASDF/SOURCE-REGISTRY|::|LY|)
   (|COMMON-LISP|::|AND|
    (|COMMON-LISP|::|=| |ASDF/SOURCE-REGISTRY|::|LX|
     |ASDF/SOURCE-REGISTRY|::|LY|)
    (|COMMON-LISP|::|STRING<|
     (|COMMON-LISP|::|NAMESTRING| |ASDF/SOURCE-REGISTRY|::|X|)
     (|COMMON-LISP|::|NAMESTRING| |ASDF/SOURCE-REGISTRY|::|Y|))))))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|COMPUTE-SOURCE-REGISTRY|
 (|COMMON-LISP|::|&OPTIONAL|
  (|ASDF/SOURCE-REGISTRY|::|PARAMETER|
   |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-PARAMETER*|)
  (|ASDF/SOURCE-REGISTRY|::|REGISTRY|
   |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY*|))
 (|COMMON-LISP|::|DOLIST|
  (|ASDF/SOURCE-REGISTRY|::|ENTRY|
   (|ASDF/SOURCE-REGISTRY|::|FLATTEN-SOURCE-REGISTRY|
    |ASDF/SOURCE-REGISTRY|::|PARAMETER|))
  (|COMMON-LISP|::|DESTRUCTURING-BIND|
   (|COMMON-LISP|::|DIRECTORY| |COMMON-LISP|::|&KEY|
    |ASDF/SOURCE-REGISTRY|::|RECURSE| |ASDF/SOURCE-REGISTRY|::|EXCLUDE|)
   |ASDF/SOURCE-REGISTRY|::|ENTRY|
   (|COMMON-LISP|::|LET*|
    ((|ASDF/SOURCE-REGISTRY|::|H|
      (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|)))
    (|ASDF/SOURCE-REGISTRY|::|REGISTER-ASD-DIRECTORY|
     |COMMON-LISP|::|DIRECTORY| :|RECURSE| |ASDF/SOURCE-REGISTRY|::|RECURSE|
     :|EXCLUDE| |ASDF/SOURCE-REGISTRY|::|EXCLUDE| :|COLLECT|
     #'(|COMMON-LISP|::|LAMBDA| (|ASDF/SOURCE-REGISTRY|::|ASD|)
        (|COMMON-LISP|::|LET*|
         ((|ASDF/SOURCE-REGISTRY|::|NAME|
           (|COMMON-LISP|::|PATHNAME-NAME| |ASDF/SOURCE-REGISTRY|::|ASD|))
          (|ASDF/SOURCE-REGISTRY|::|NAME|
           (|COMMON-LISP|::|IF|
            (|COMMON-LISP|::|TYPEP| |ASDF/SOURCE-REGISTRY|::|ASD|
             '|COMMON-LISP|::|LOGICAL-PATHNAME|)
            (|COMMON-LISP|::|STRING-DOWNCASE| |ASDF/SOURCE-REGISTRY|::|NAME|)
            |ASDF/SOURCE-REGISTRY|::|NAME|)))
         (|COMMON-LISP|::|UNLESS|
          (|COMMON-LISP|::|GETHASH| |ASDF/SOURCE-REGISTRY|::|NAME|
           |ASDF/SOURCE-REGISTRY|::|REGISTRY|)
          (|UIOP/UTILITY|::|IF-LET|
           (|ASDF/SOURCE-REGISTRY|::|OLD|
            (|COMMON-LISP|::|GETHASH| |ASDF/SOURCE-REGISTRY|::|NAME|
             |ASDF/SOURCE-REGISTRY|::|H|))
           (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
            (|ASDF/SOURCE-REGISTRY|::|BETTER| |ASDF/SOURCE-REGISTRY|::|WORSE|)
            (|COMMON-LISP|::|IF|
             (|ASDF/SOURCE-REGISTRY|::|PREFERRED-SOURCE-PATH-P|
              |ASDF/SOURCE-REGISTRY|::|ASD| |ASDF/SOURCE-REGISTRY|::|OLD|)
             (|COMMON-LISP|::|PROGN|
              (|COMMON-LISP|::|SETF|
               (|COMMON-LISP|::|GETHASH| |ASDF/SOURCE-REGISTRY|::|NAME|
                |ASDF/SOURCE-REGISTRY|::|H|)
               |ASDF/SOURCE-REGISTRY|::|ASD|)
              (|COMMON-LISP|::|VALUES| |ASDF/SOURCE-REGISTRY|::|ASD|
               |ASDF/SOURCE-REGISTRY|::|OLD|))
             (|COMMON-LISP|::|VALUES| |ASDF/SOURCE-REGISTRY|::|OLD|
              |ASDF/SOURCE-REGISTRY|::|ASD|))
            (|COMMON-LISP|::|WHEN| |ASDF/UPGRADE|::|*VERBOSE-OUT*|
             (|COMMON-LISP|::|WARN|
              (|UIOP/COMMON-LISP|::|COMPATFMT|
               "~@<In source-registry entry ~A~@[/~*~] ~\n
                                              found several entries for ~A - picking ~S over ~S~:>")
              |COMMON-LISP|::|DIRECTORY| |ASDF/SOURCE-REGISTRY|::|RECURSE|
              |ASDF/SOURCE-REGISTRY|::|NAME| |ASDF/SOURCE-REGISTRY|::|BETTER|
              |ASDF/SOURCE-REGISTRY|::|WORSE|)))
           (|COMMON-LISP|::|SETF|
            (|COMMON-LISP|::|GETHASH| |ASDF/SOURCE-REGISTRY|::|NAME|
             |ASDF/SOURCE-REGISTRY|::|H|)
            |ASDF/SOURCE-REGISTRY|::|ASD|))))))
    (|COMMON-LISP|::|MAPHASH|
     #'(|COMMON-LISP|::|LAMBDA|
        (|ASDF/SOURCE-REGISTRY|::|K| |ASDF/SOURCE-REGISTRY|::|V|)
        (|COMMON-LISP|::|SETF|
         (|COMMON-LISP|::|GETHASH| |ASDF/SOURCE-REGISTRY|::|K|
          |ASDF/SOURCE-REGISTRY|::|REGISTRY|)
         |ASDF/SOURCE-REGISTRY|::|V|))
     |ASDF/SOURCE-REGISTRY|::|H|))))
 (|COMMON-LISP|::|VALUES|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|INITIALIZE-SOURCE-REGISTRY|
 (|COMMON-LISP|::|&OPTIONAL|
  (|ASDF/SOURCE-REGISTRY|::|PARAMETER|
   |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-PARAMETER*|))
 (|COMMON-LISP|::|SETF| |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-PARAMETER*|
  |ASDF/SOURCE-REGISTRY|::|PARAMETER|)
 (|COMMON-LISP|::|SETF| |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY*|
  (|COMMON-LISP|::|MAKE-HASH-TABLE| :|TEST| '|COMMON-LISP|::|EQUAL|))
 (|ASDF/SOURCE-REGISTRY|::|COMPUTE-SOURCE-REGISTRY|
  |ASDF/SOURCE-REGISTRY|::|PARAMETER|))
(|UIOP/UTILITY|::|DEFUN*| |ASDF/SOURCE-REGISTRY|::|ENSURE-SOURCE-REGISTRY|
 (|COMMON-LISP|::|&OPTIONAL| |ASDF/SOURCE-REGISTRY|::|PARAMETER|)
 (|COMMON-LISP|::|UNLESS|
  (|ASDF/SOURCE-REGISTRY|::|SOURCE-REGISTRY-INITIALIZED-P|)
  (|ASDF/SOURCE-REGISTRY|::|INITIALIZE-SOURCE-REGISTRY|
   |ASDF/SOURCE-REGISTRY|::|PARAMETER|))
 (|COMMON-LISP|::|VALUES|))
(|UIOP/UTILITY|::|DEFUN*|
 |ASDF/SYSTEM-REGISTRY|::|SYSDEF-SOURCE-REGISTRY-SEARCH|
 (|ASDF/SYSTEM|::|SYSTEM|) (|ASDF/SOURCE-REGISTRY|::|ENSURE-SOURCE-REGISTRY|)
 (|COMMON-LISP|::|VALUES|
  (|COMMON-LISP|::|GETHASH|
   (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME| |ASDF/SYSTEM|::|SYSTEM|)
   |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY*|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G37699| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/SOURCE-REGISTRY|::|INVALID-SOURCE-REGISTRY| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|UIOP/CONFIGURATION|::|INVALID-CONFIGURATION|
   '|COMMON-LISP|::|WARNING|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|COMMON-LISP|::|FORMAT| :|INITFORM|
    '#2=(|UIOP/COMMON-LISP|::|COMPATFMT|
         "~@<Invalid source registry ~S~@[ in ~S~]~@{ ~@?~}~@:>")
    :|INITFUNCTION|
    (|COMMON-LISP|::|FUNCTION| |ASDF/SOURCE-REGISTRY|::|DEFAULT-FORMAT|
     (|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL| #2#))))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/SOURCE-REGISTRY|::|*DEFAULT-SOURCE-REGISTRY-EXCLUSIONS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-EXCLUSIONS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-PARAMETER*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|SOURCE-REGISTRY-INITIALIZED-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|SOURCE-REGISTRY-INITIALIZED-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SOURCE-REGISTRY|::|CLEAR-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|CLEAR-SOURCE-REGISTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/SOURCE-REGISTRY|::|*WILD-ASD*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SOURCE-REGISTRY|::|DIRECTORY-ASD-FILES|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|DIRECTORY-ASD-FILES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|DIRECTORY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|COLLECT-ASDS-IN-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|COLLECT-ASDS-IN-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|DIRECTORY| |ASDF/SOURCE-REGISTRY|::|COLLECT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/SOURCE-REGISTRY|::|*RECURSE-BEYOND-ASDS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY-CACHE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY-CACHE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|DIRECTORY| |ASDF/SOURCE-REGISTRY|::|COLLECT|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|COLLECT-SUB*DIRECTORIES-ASD-FILES|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/SOURCE-REGISTRY|::|COLLECT-SUB*DIRECTORIES-ASD-FILES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|DIRECTORY| |COMMON-LISP|::|&KEY|
    (|ASDF/SOURCE-REGISTRY|::|EXCLUDE|
     |ASDF/SOURCE-REGISTRY|::|*DEFAULT-SOURCE-REGISTRY-EXCLUSIONS*|)
    |ASDF/SOURCE-REGISTRY|::|COLLECT|
    (|ASDF/SOURCE-REGISTRY|::|RECURSE-BEYOND-ASDS|
     |ASDF/SOURCE-REGISTRY|::|*RECURSE-BEYOND-ASDS*|)
    |ASDF/SOURCE-REGISTRY|::|IGNORE-CACHE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-DIRECTIVE|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-DIRECTIVE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SOURCE-REGISTRY|::|DIRECTIVE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-FORM|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SOURCE-REGISTRY|::|FORM| |COMMON-LISP|::|&KEY|
    |ASDF/SOURCE-REGISTRY|::|LOCATION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-FILE|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-FILE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SOURCE-REGISTRY|::|FILE|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-DIRECTORY|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/SOURCE-REGISTRY|::|VALIDATE-SOURCE-REGISTRY-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|DIRECTORY|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|PARSE-SOURCE-REGISTRY-STRING|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|PARSE-SOURCE-REGISTRY-STRING|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|STRING| |COMMON-LISP|::|&KEY|
    |ASDF/SOURCE-REGISTRY|::|LOCATION|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|REGISTER-ASD-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|REGISTER-ASD-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|DIRECTORY| |COMMON-LISP|::|&KEY|
    |ASDF/SOURCE-REGISTRY|::|RECURSE| |ASDF/SOURCE-REGISTRY|::|EXCLUDE|
    |ASDF/SOURCE-REGISTRY|::|COLLECT|)))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/SOURCE-REGISTRY|::|%COMPUTE-DEFAULT-SOURCE-REGISTRIES-VALUE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/SOURCE-REGISTRY|::|*DEFAULT-SOURCE-REGISTRIES*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-FILE*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-DIRECTORY*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|WRAPPING-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|WRAPPING-SOURCE-REGISTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|DEFAULT-USER-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|DEFAULT-USER-SOURCE-REGISTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|DEFAULT-SYSTEM-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|DEFAULT-SYSTEM-SOURCE-REGISTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE| |ASDF/SOURCE-REGISTRY|::|USER-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|USER-SOURCE-REGISTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| (|ASDF/SOURCE-REGISTRY|::|DIRECTION| :|INPUT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|SYSTEM-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|SYSTEM-SOURCE-REGISTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| (|ASDF/SOURCE-REGISTRY|::|DIRECTION| :|INPUT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|USER-SOURCE-REGISTRY-DIRECTORY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|USER-SOURCE-REGISTRY-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| (|ASDF/SOURCE-REGISTRY|::|DIRECTION| :|INPUT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|SYSTEM-SOURCE-REGISTRY-DIRECTORY|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/SOURCE-REGISTRY|::|SYSTEM-SOURCE-REGISTRY-DIRECTORY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&KEY| (|ASDF/SOURCE-REGISTRY|::|DIRECTION| :|INPUT|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|ENVIRONMENT-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|ENVIRONMENT-SOURCE-REGISTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
 '#(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|INHERIT| :|REGISTER|)
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|INHERIT-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|INHERIT-SOURCE-REGISTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SOURCE-REGISTRY|::|INHERIT| |COMMON-LISP|::|&KEY|
    |ASDF/SOURCE-REGISTRY|::|REGISTER|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY-DIRECTIVE|))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY-DIRECTIVE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SOURCE-REGISTRY|::|DIRECTIVE| |COMMON-LISP|::|&KEY|
    |ASDF/SOURCE-REGISTRY|::|INHERIT| |ASDF/SOURCE-REGISTRY|::|REGISTER|)))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|INHERIT| :|REGISTER|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|INHERIT| :|REGISTER|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|INHERIT| :|REGISTER|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|INHERIT| :|REGISTER|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|PROCESS-SOURCE-REGISTRY|
 #(1. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|INHERIT| :|REGISTER|)
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|FLATTEN-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|FLATTEN-SOURCE-REGISTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL|
    (|ASDF/SOURCE-REGISTRY|::|PARAMETER|
     |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-PARAMETER*|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|PATHNAME-DIRECTORY-DEPTH|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|PATHNAME-DIRECTORY-DEPTH|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SOURCE-REGISTRY|::|P|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|PREFERRED-SOURCE-PATH-P|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|PREFERRED-SOURCE-PATH-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|ASDF/SOURCE-REGISTRY|::|X| |ASDF/SOURCE-REGISTRY|::|Y|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|COMPUTE-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|COMPUTE-SOURCE-REGISTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL|
    (|ASDF/SOURCE-REGISTRY|::|PARAMETER|
     |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-PARAMETER*|)
    (|ASDF/SOURCE-REGISTRY|::|REGISTRY|
     |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY*|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|INITIALIZE-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|INITIALIZE-SOURCE-REGISTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL|
    (|ASDF/SOURCE-REGISTRY|::|PARAMETER|
     |ASDF/SOURCE-REGISTRY|::|*SOURCE-REGISTRY-PARAMETER*|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SOURCE-REGISTRY|::|ENSURE-SOURCE-REGISTRY|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SOURCE-REGISTRY|::|ENSURE-SOURCE-REGISTRY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&OPTIONAL| |ASDF/SOURCE-REGISTRY|::|PARAMETER|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|NOTINLINE|
   |ASDF/SYSTEM-REGISTRY|::|SYSDEF-SOURCE-REGISTRY-SEARCH|))
(|SYSTEM|::|C-DEFUN| '|ASDF/SYSTEM-REGISTRY|::|SYSDEF-SOURCE-REGISTRY-SEARCH|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|ASDF/SYSTEM|::|SYSTEM|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|ASDF/BACKWARD-INTERNALS| :|NICKNAMES| '|COMMON-LISP|::|NIL|
  :|DOCUMENTATION| '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/FIND-SYSTEM|) :|SHADOW|
  '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM| '|COMMON-LISP|::|NIL|
  :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT| '(#:|LOAD-SYSDEF|) :|INTERN|
  '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|ASDF/BACKWARD-INTERNALS| :|ASDF|) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/BACKWARD-INTERNALS"))
(|UIOP/VERSION|::|WITH-DEPRECATION|
 ((|UIOP/VERSION|::|VERSION-DEPRECATION| |ASDF/UPGRADE|::|*ASDF-VERSION*|
   :|STYLE-WARNING| "3.2" :|WARNING| "3.4"))
 (|COMMON-LISP|::|DEFUN| |ASDF/BACKWARD-INTERNALS|::|LOAD-SYSDEF|
  (|ASDF/BACKWARD-INTERNALS|::|NAME| |COMMON-LISP|::|PATHNAME|)
  (|COMMON-LISP|::|DECLARE|
   (|COMMON-LISP|::|IGNORE| |ASDF/BACKWARD-INTERNALS|::|NAME|
    |COMMON-LISP|::|PATHNAME|))
  (|COMMON-LISP|::|ERROR| "Use asdf:load-asd instead of asdf::load-sysdef")))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/BACKWARD-INTERNALS|::|*DEPRECATED-FUNCTION-STYLE-WARNING-LOAD-SYSDEF-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| |ASDF/BACKWARD-INTERNALS|::|LOAD-SYSDEF|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|ASDF/BACKWARD-INTERNALS|::|LOAD-SYSDEF|)
 (|COMMON-LISP|::|FUNCTION| |ASDF/BACKWARD-INTERNALS|::|LOAD-SYSDEF|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK| |ASDF/BACKWARD-INTERNALS|::|LOAD-SYSDEF|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERNALS|::|LOAD-SYSDEF|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERNALS|::|LOAD-SYSDEF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '#1=(|ASDF/BACKWARD-INTERNALS|::|NAME| |COMMON-LISP|::|PATHNAME|))
 '(#1#
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN| |ASDF/BACKWARD-INTERNALS|::|LOAD-SYSDEF|)
    (|COMMON-LISP|::|IGNORE| |ASDF/BACKWARD-INTERNALS|::|NAME|
     |COMMON-LISP|::|PATHNAME|))
   (|COMMON-LISP|::|BLOCK| |ASDF/BACKWARD-INTERNALS|::|LOAD-SYSDEF|
    (|COMMON-LISP|::|UNLESS|
     |ASDF/BACKWARD-INTERNALS|::|*DEPRECATED-FUNCTION-STYLE-WARNING-LOAD-SYSDEF-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |ASDF/BACKWARD-INTERNALS|::|*DEPRECATED-FUNCTION-STYLE-WARNING-LOAD-SYSDEF-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERNALS|::|LOAD-SYSDEF|))
    (|COMMON-LISP|::|ERROR|
     "Use asdf:load-asd instead of asdf::load-sysdef"))))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE|
  ':|ASDF/BACKWARD-INTERFACE| :|NICKNAMES| '|COMMON-LISP|::|NIL|
  :|DOCUMENTATION| '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT| :|ASDF/SYSTEM| :|ASDF/SYSTEM-REGISTRY| :|ASDF/OPERATION|
    :|ASDF/ACTION| :|ASDF/LISP-ACTION| :|ASDF/PLAN| :|ASDF/OPERATE|
    :|ASDF/FIND-SYSTEM| :|ASDF/PARSE-DEFSYSTEM| :|ASDF/OUTPUT-TRANSLATIONS|
    :|ASDF/BUNDLE|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|*ASDF-VERBOSE*| #:|OPERATION-ERROR| #:|COMPILE-ERROR| #:|COMPILE-FAILED|
    #:|COMPILE-WARNED| #:|ERROR-COMPONENT| #:|ERROR-OPERATION| #:|TRAVERSE|
    #:|COMPONENT-LOAD-DEPENDENCIES|
    #:|ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY| #:|OPERATION-ON-FAILURE|
    #:|OPERATION-ON-WARNINGS| #:|ON-FAILURE| #:|ON-WARNINGS|
    #:|COMPONENT-PROPERTY| #:|RUN-SHELL-COMMAND| #:|SYSTEM-DEFINITION-PATHNAME|
    #:|SYSTEM-REGISTERED-P| #:|REQUIRE-SYSTEM| #:|EXPLAIN|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/BACKWARD-INTERFACE| :|ASDF|) :|MIX| '|COMMON-LISP|::|NIL|
  :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/BACKWARD-INTERFACE"))
(|UIOP/VERSION|::|WITH-DEPRECATION|
 ((|UIOP/VERSION|::|VERSION-DEPRECATION| |ASDF/UPGRADE|::|*ASDF-VERSION*|
   :|STYLE-WARNING| "3.2" :|WARNING| "3.4"))
 (|COMMON-LISP|::|PROGN|
  (|COMMON-LISP|::|DEFINE-CONDITION|
   |ASDF/BACKWARD-INTERFACE|::|OPERATION-ERROR| (|COMMON-LISP|::|ERROR|)
   ((|ASDF/COMPONENT|::|COMPONENT| :|READER|
     |ASDF/BACKWARD-INTERFACE|::|ERROR-COMPONENT| :|INITARG| :|COMPONENT|)
    (|ASDF/OPERATION|::|OPERATION| :|READER|
     |ASDF/BACKWARD-INTERFACE|::|ERROR-OPERATION| :|INITARG| :|OPERATION|))
   (:|REPORT|
    (|COMMON-LISP|::|LAMBDA|
     (|ASDF/BACKWARD-INTERFACE|::|C| |ASDF/BACKWARD-INTERFACE|::|S|)
     (|COMMON-LISP|::|FORMAT| |ASDF/BACKWARD-INTERFACE|::|S|
      (|UIOP/COMMON-LISP|::|COMPATFMT| "~@<~A while invoking ~A on ~A~@:>")
      (|COMMON-LISP|::|TYPE-OF| |ASDF/BACKWARD-INTERFACE|::|C|)
      (|ASDF/BACKWARD-INTERFACE|::|ERROR-OPERATION|
       |ASDF/BACKWARD-INTERFACE|::|C|)
      (|ASDF/BACKWARD-INTERFACE|::|ERROR-COMPONENT|
       |ASDF/BACKWARD-INTERFACE|::|C|)))))
  (|COMMON-LISP|::|DEFINE-CONDITION| |ASDF/BACKWARD-INTERFACE|::|COMPILE-ERROR|
   (|ASDF/BACKWARD-INTERFACE|::|OPERATION-ERROR|) |COMMON-LISP|::|NIL|)
  (|COMMON-LISP|::|DEFINE-CONDITION|
   |ASDF/BACKWARD-INTERFACE|::|COMPILE-FAILED|
   (|ASDF/BACKWARD-INTERFACE|::|COMPILE-ERROR|) |COMMON-LISP|::|NIL|)
  (|COMMON-LISP|::|DEFINE-CONDITION|
   |ASDF/BACKWARD-INTERFACE|::|COMPILE-WARNED|
   (|ASDF/BACKWARD-INTERFACE|::|COMPILE-ERROR|) |COMMON-LISP|::|NIL|))
 (|COMMON-LISP|::|DEFUN|
  |ASDF/BACKWARD-INTERFACE|::|COMPONENT-LOAD-DEPENDENCIES|
  (|ASDF/COMPONENT|::|COMPONENT|)
  "DEPRECATED. Please use COMPONENT-SIDEWAY-DEPENDENCIES instead; or better,\n
define your operations with proper use of SIDEWAY-OPERATION, SELFWARD-OPERATION,\n
or define methods on PREPARE-OP, etc."
  (|ASDF/COMPONENT|::|COMPONENT-SIDEWAY-DEPENDENCIES|
   |ASDF/COMPONENT|::|COMPONENT|))
 (|CLOS|::|DEFGENERIC| |ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-WARNINGS|
  (|ASDF/OPERATION|::|OPERATION|)
  (:|DOCUMENTATION|
   "DEPRECATED. Please use UIOP:*COMPILE-FILE-WARNINGS-BEHAVIOUR* instead."))
 (|CLOS|::|DEFGENERIC| |ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-FAILURE|
  (|ASDF/OPERATION|::|OPERATION|)
  (:|DOCUMENTATION|
   "DEPRECATED. Please use UIOP:*COMPILE-FILE-FAILURE-BEHAVIOUR* instead."))
 (|CLOS|::|DEFGENERIC|
  (|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-WARNINGS|)
  (|ASDF/BACKWARD-INTERFACE|::|X| |ASDF/OPERATION|::|OPERATION|)
  (:|DOCUMENTATION|
   "DEPRECATED. Please SETF UIOP:*COMPILE-FILE-WARNINGS-BEHAVIOUR* instead."))
 (|CLOS|::|DEFGENERIC|
  (|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-FAILURE|)
  (|ASDF/BACKWARD-INTERFACE|::|X| |ASDF/OPERATION|::|OPERATION|)
  (:|DOCUMENTATION|
   "DEPRECATED. Please SETF UIOP:*COMPILE-FILE-FAILURE-BEHAVIOUR* instead."))
 (|COMMON-LISP|::|PROGN|
  (|CLOS|::|DEFMETHOD| |ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-WARNINGS|
   ((|ASDF/BACKWARD-INTERFACE|::|O| |ASDF/OPERATION|::|OPERATION|))
   |UIOP/LISP-BUILD|::|*COMPILE-FILE-WARNINGS-BEHAVIOUR*|)
  (|CLOS|::|DEFMETHOD| |ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-FAILURE|
   ((|ASDF/BACKWARD-INTERFACE|::|O| |ASDF/OPERATION|::|OPERATION|))
   |UIOP/LISP-BUILD|::|*COMPILE-FILE-FAILURE-BEHAVIOUR*|)
  (|CLOS|::|DEFMETHOD|
   (|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-WARNINGS|)
   (|ASDF/BACKWARD-INTERFACE|::|X|
    (|ASDF/BACKWARD-INTERFACE|::|O| |ASDF/OPERATION|::|OPERATION|))
   (|COMMON-LISP|::|SETF|
    |UIOP/LISP-BUILD|::|*COMPILE-FILE-WARNINGS-BEHAVIOUR*|
    |ASDF/BACKWARD-INTERFACE|::|X|))
  (|CLOS|::|DEFMETHOD|
   (|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-FAILURE|)
   (|ASDF/BACKWARD-INTERFACE|::|X|
    (|ASDF/BACKWARD-INTERFACE|::|O| |ASDF/OPERATION|::|OPERATION|))
   (|COMMON-LISP|::|SETF| |UIOP/LISP-BUILD|::|*COMPILE-FILE-FAILURE-BEHAVIOUR*|
    |ASDF/BACKWARD-INTERFACE|::|X|)))
 (|COMMON-LISP|::|DEFUN|
  |ASDF/BACKWARD-INTERFACE|::|SYSTEM-DEFINITION-PATHNAME|
  (|ASDF/BACKWARD-INTERFACE|::|X|)
  "DEPRECATED. This function used to expose ASDF internals with subtle\n
differences with respect to user expectations, that have been refactored\n
away since. We recommend you use ASDF:SYSTEM-SOURCE-FILE instead for a\n
mostly compatible replacement that we're supporting, or even\n
ASDF:SYSTEM-SOURCE-DIRECTORY or ASDF:SYSTEM-RELATIVE-PATHNAME\n
if that's whay you mean."
  (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/BACKWARD-INTERFACE|::|X|))
 (|CLOS|::|DEFGENERIC| |ASDF/BACKWARD-INTERFACE|::|TRAVERSE|
  (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
   |COMMON-LISP|::|&KEY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
  (:|DOCUMENTATION|
   "DEPRECATED. Use MAKE-PLAN and PLAN-ACTIONS, or REQUIRED-COMPONENTS,\n
or some other supported interface instead.\n\n
Generate and return a plan for performing OPERATION on COMPONENT.\n\n
The plan returned is a list of dotted-pairs. Each pair is the CONS\n
of ASDF operation object and a COMPONENT object. The pairs will be\n
processed in order by OPERATE."))
 (|COMMON-LISP|::|PROGN|
  (|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
   |ASDF/BACKWARD-INTERFACE|::|TRAVERSE|
   (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|
    |COMMON-LISP|::|&KEY|)))
 (|CLOS|::|DEFMETHOD| |ASDF/BACKWARD-INTERFACE|::|TRAVERSE|
  ((|ASDF/BACKWARD-INTERFACE|::|O| |ASDF/OPERATION|::|OPERATION|)
   (|ASDF/BACKWARD-INTERFACE|::|C| |ASDF/COMPONENT|::|COMPONENT|)
   |COMMON-LISP|::|&REST| |ASDF/BACKWARD-INTERFACE|::|KEYS|
   |COMMON-LISP|::|&KEY| |ASDF/BACKWARD-INTERFACE|::|PLAN-CLASS|
   |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
  (|ASDF/PLAN|::|PLAN-ACTIONS|
   (|COMMON-LISP|::|APPLY| '|ASDF/PLAN|::|MAKE-PLAN|
    |ASDF/BACKWARD-INTERFACE|::|PLAN-CLASS| |ASDF/BACKWARD-INTERFACE|::|O|
    |ASDF/BACKWARD-INTERFACE|::|C| |ASDF/BACKWARD-INTERFACE|::|KEYS|)))
 (|COMMON-LISP|::|DEFUN|
  |ASDF/BACKWARD-INTERFACE|::|ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY|
  (|COMMON-LISP|::|&KEY|
   (|ASDF/BACKWARD-INTERFACE|::|CENTRALIZE-LISP-BINARIES| |COMMON-LISP|::|NIL|)
   (|ASDF/BACKWARD-INTERFACE|::|DEFAULT-TOPLEVEL-DIRECTORY|
    (|UIOP/PATHNAME|::|SUBPATHNAME| (|COMMON-LISP|::|USER-HOMEDIR-PATHNAME|)
     ".fasls/"))
   (|ASDF/BACKWARD-INTERFACE|::|INCLUDE-PER-USER-INFORMATION|
    |COMMON-LISP|::|NIL|)
   (|ASDF/BACKWARD-INTERFACE|::|MAP-ALL-SOURCE-FILES|
    (|COMMON-LISP|::|OR| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|))
   (|ASDF/BACKWARD-INTERFACE|::|SOURCE-TO-TARGET-MAPPINGS|
    |COMMON-LISP|::|NIL|)
   (|ASDF/BACKWARD-INTERFACE|::|FILE-TYPES|
    `(,(|UIOP/LISP-BUILD|::|COMPILE-FILE-TYPE|) "build-report" "lib")))
  "DEPRECATED. Use asdf-output-translations instead."
  (|COMMON-LISP|::|WHEN|
   (|COMMON-LISP|::|NULL| |ASDF/BACKWARD-INTERFACE|::|MAP-ALL-SOURCE-FILES|)
   (|COMMON-LISP|::|ERROR|
    "asdf:enable-asdf-binary-locations-compatibility doesn't support :map-all-source-files nil on CLISP, ECL and MKCL"))
  (|COMMON-LISP|::|LET*|
   ((|ASDF/BACKWARD-INTERFACE|::|PATTERNS|
     (|COMMON-LISP|::|IF| |ASDF/BACKWARD-INTERFACE|::|MAP-ALL-SOURCE-FILES|
      (|COMMON-LISP|::|LIST| |UIOP/PATHNAME|::|*WILD-FILE*|)
      (|COMMON-LISP|::|LOOP| :|FOR| |COMMON-LISP|::|TYPE| :|IN|
       |ASDF/BACKWARD-INTERFACE|::|FILE-TYPES| :|COLLECT|
       (|COMMON-LISP|::|MAKE-PATHNAME| :|TYPE| |COMMON-LISP|::|TYPE|
        :|DEFAULTS| |UIOP/PATHNAME|::|*WILD-FILE*|))))
    (|ASDF/BACKWARD-INTERFACE|::|DESTINATION-DIRECTORY|
     (|COMMON-LISP|::|IF| |ASDF/BACKWARD-INTERFACE|::|CENTRALIZE-LISP-BINARIES|
      `(,|ASDF/BACKWARD-INTERFACE|::|DEFAULT-TOPLEVEL-DIRECTORY|
        ,@(|COMMON-LISP|::|WHEN|
           |ASDF/BACKWARD-INTERFACE|::|INCLUDE-PER-USER-INFORMATION|
           (|COMMON-LISP|::|CDR|
            (|COMMON-LISP|::|PATHNAME-DIRECTORY|
             (|COMMON-LISP|::|USER-HOMEDIR-PATHNAME|))))
        :|IMPLEMENTATION| ,|UIOP/PATHNAME|::|*WILD-INFERIORS*|)
      `(:|ROOT| ,|UIOP/PATHNAME|::|*WILD-INFERIORS*| :|IMPLEMENTATION|))))
   (|ASDF/OUTPUT-TRANSLATIONS|::|INITIALIZE-OUTPUT-TRANSLATIONS|
    `(:|OUTPUT-TRANSLATIONS|
      ,@|ASDF/BACKWARD-INTERFACE|::|SOURCE-TO-TARGET-MAPPINGS|
      ,@(|COMMON-LISP|::|LOOP| :|FOR| |ASDF/BACKWARD-INTERFACE|::|PATTERN|
         :|IN| |ASDF/BACKWARD-INTERFACE|::|PATTERNS| :|COLLECT|
         `((:|ROOT| ,|UIOP/PATHNAME|::|*WILD-INFERIORS*|
            ,|ASDF/BACKWARD-INTERFACE|::|PATTERN|)
           (,@|ASDF/BACKWARD-INTERFACE|::|DESTINATION-DIRECTORY|
            ,|ASDF/BACKWARD-INTERFACE|::|PATTERN|)))
      (|COMMON-LISP|::|T| |COMMON-LISP|::|T|)
      :|IGNORE-INHERITED-CONFIGURATION|))))
 (|COMMON-LISP|::|PROGN|
  (|CLOS|::|DEFMETHOD| |ASDF/OPERATE|::|OPERATE| :|BEFORE|
   (|ASDF/BACKWARD-INTERFACE|::|OPERATION-CLASS| |ASDF/SYSTEM|::|SYSTEM|
    |COMMON-LISP|::|&REST| |ASDF/BACKWARD-INTERFACE|::|ARGS|
    |COMMON-LISP|::|&KEY| |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
   (|COMMON-LISP|::|DECLARE|
    (|COMMON-LISP|::|IGNORE| |ASDF/BACKWARD-INTERFACE|::|OPERATION-CLASS|
     |ASDF/SYSTEM|::|SYSTEM| |ASDF/BACKWARD-INTERFACE|::|ARGS|))
   (|COMMON-LISP|::|WHEN|
    (|UIOP/PACKAGE|::|FIND-SYMBOL*| '#:|OUTPUT-FILES-FOR-SYSTEM-AND-OPERATION|
     :|ASDF| |COMMON-LISP|::|NIL|)
    (|COMMON-LISP|::|ERROR|
     "ASDF 2 is not compatible with ASDF-BINARY-LOCATIONS, which you are using.\n
ASDF 2 now achieves the same purpose with its builtin ASDF-OUTPUT-TRANSLATIONS,\n
which should be easier to configure. Please stop using ASDF-BINARY-LOCATIONS,\n
and instead use ASDF-OUTPUT-TRANSLATIONS. See the ASDF manual for details.\n
In case you insist on preserving your previous A-B-L configuration, but\n
do not know how to achieve the same effect with A-O-T, you may use function\n
ASDF:ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY as documented in the manual;\n
call that function where you would otherwise have loaded and configured A-B-L."))))
 (|COMMON-LISP|::|DEFUN| |ASDF/BACKWARD-INTERFACE|::|RUN-SHELL-COMMAND|
  (|ASDF/BACKWARD-INTERFACE|::|CONTROL-STRING| |COMMON-LISP|::|&REST|
   |ASDF/BACKWARD-INTERFACE|::|ARGS|)
  "PLEASE DO NOT USE. This function is not just DEPRECATED, but also dysfunctional.\n
Please use UIOP:RUN-PROGRAM instead."
  (|COMMON-LISP|::|LET|
   ((|ASDF/BACKWARD-INTERFACE|::|COMMAND|
     (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
      |ASDF/BACKWARD-INTERFACE|::|CONTROL-STRING|
      |ASDF/BACKWARD-INTERFACE|::|ARGS|)))
   (|ASDF/UPGRADE|::|ASDF-MESSAGE| "; $ ~A~%"
    |ASDF/BACKWARD-INTERFACE|::|COMMAND|)
   (|COMMON-LISP|::|LET|
    ((|ASDF/BACKWARD-INTERFACE|::|EXIT-CODE|
      (|COMMON-LISP|::|IGNORE-ERRORS|
       (|COMMON-LISP|::|NTH-VALUE| 2.
        (|UIOP/RUN-PROGRAM|::|RUN-PROGRAM| |ASDF/BACKWARD-INTERFACE|::|COMMAND|
         :|FORCE-SHELL| |COMMON-LISP|::|T| :|IGNORE-ERROR-STATUS|
         |COMMON-LISP|::|T| :|OUTPUT| |ASDF/UPGRADE|::|*VERBOSE-OUT*|)))))
    (|COMMON-LISP|::|TYPECASE| |ASDF/BACKWARD-INTERFACE|::|EXIT-CODE|
     ((|COMMON-LISP|::|INTEGER| 0. 255.)
      |ASDF/BACKWARD-INTERFACE|::|EXIT-CODE|)
     (|COMMON-LISP|::|T| 255.)))))
 (|COMMON-LISP|::|PROGN|
  (|COMMON-LISP|::|DEFVAR| |ASDF/BACKWARD-INTERFACE|::|*ASDF-VERBOSE*|
   |COMMON-LISP|::|NIL|))
 (|CLOS|::|DEFGENERIC| |ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|
  (|ASDF/COMPONENT|::|COMPONENT| |ASDF/BACKWARD-INTERFACE|::|PROPERTY|))
 (|CLOS|::|DEFGENERIC|
  (|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|)
  (|ASDF/BACKWARD-INTERFACE|::|NEW-VALUE| |ASDF/COMPONENT|::|COMPONENT|
   |ASDF/BACKWARD-INTERFACE|::|PROPERTY|))
 (|CLOS|::|DEFMETHOD| |ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|
  ((|ASDF/BACKWARD-INTERFACE|::|C| |ASDF/COMPONENT|::|COMPONENT|)
   |ASDF/BACKWARD-INTERFACE|::|PROPERTY|)
  (|COMMON-LISP|::|CDR|
   (|COMMON-LISP|::|ASSOC| |ASDF/BACKWARD-INTERFACE|::|PROPERTY|
    (|CLOS|::|SLOT-VALUE| |ASDF/BACKWARD-INTERFACE|::|C|
     '|ASDF/COMPONENT|::|PROPERTIES|)
    :|TEST| #'|COMMON-LISP|::|EQUAL|)))
 (|CLOS|::|DEFMETHOD|
  (|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|)
  (|ASDF/BACKWARD-INTERFACE|::|NEW-VALUE|
   (|ASDF/BACKWARD-INTERFACE|::|C| |ASDF/COMPONENT|::|COMPONENT|)
   |ASDF/BACKWARD-INTERFACE|::|PROPERTY|)
  (|COMMON-LISP|::|LET|
   ((|ASDF/BACKWARD-INTERFACE|::|A|
     (|COMMON-LISP|::|ASSOC| |ASDF/BACKWARD-INTERFACE|::|PROPERTY|
      (|CLOS|::|SLOT-VALUE| |ASDF/BACKWARD-INTERFACE|::|C|
       '|ASDF/COMPONENT|::|PROPERTIES|)
      :|TEST| #'|COMMON-LISP|::|EQUAL|)))
   (|COMMON-LISP|::|IF| |ASDF/BACKWARD-INTERFACE|::|A|
    (|COMMON-LISP|::|SETF|
     (|COMMON-LISP|::|CDR| |ASDF/BACKWARD-INTERFACE|::|A|)
     |ASDF/BACKWARD-INTERFACE|::|NEW-VALUE|)
    (|COMMON-LISP|::|SETF|
     (|CLOS|::|SLOT-VALUE| |ASDF/BACKWARD-INTERFACE|::|C|
      '|ASDF/COMPONENT|::|PROPERTIES|)
     (|COMMON-LISP|::|ACONS| |ASDF/BACKWARD-INTERFACE|::|PROPERTY|
      |ASDF/BACKWARD-INTERFACE|::|NEW-VALUE|
      (|CLOS|::|SLOT-VALUE| |ASDF/BACKWARD-INTERFACE|::|C|
       '|ASDF/COMPONENT|::|PROPERTIES|)))))
  |ASDF/BACKWARD-INTERFACE|::|NEW-VALUE|)
 (|CLOS|::|DEFGENERIC| |ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|
  (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)
  (:|DOCUMENTATION|
   "Display a message describing an action.\n\n
DEPRECATED. Use ASDF:ACTION-DESCRIPTION and/or ASDF::FORMAT-ACTION instead."))
 (|COMMON-LISP|::|PROGN|
  (|ASDF/ACTION|::|DEFINE-CONVENIENCE-ACTION-METHODS|
   |ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|
   (|ASDF/OPERATION|::|OPERATION| |ASDF/COMPONENT|::|COMPONENT|)))
 (|CLOS|::|DEFMETHOD| |ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|
  ((|ASDF/BACKWARD-INTERFACE|::|O| |ASDF/OPERATION|::|OPERATION|)
   (|ASDF/BACKWARD-INTERFACE|::|C| |ASDF/COMPONENT|::|COMPONENT|))
  (|ASDF/UPGRADE|::|ASDF-MESSAGE|
   (|UIOP/COMMON-LISP|::|COMPATFMT| "~&~@<; ~@;~A~:>~%")
   (|ASDF/ACTION|::|ACTION-DESCRIPTION| |ASDF/BACKWARD-INTERFACE|::|O|
    |ASDF/BACKWARD-INTERFACE|::|C|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G38547| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BACKWARD-INTERFACE|::|OPERATION-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|ERROR|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/COMPONENT|::|COMPONENT| :|READERS|
    '(|ASDF/BACKWARD-INTERFACE|::|ERROR-COMPONENT|) :|INITARGS|
    '(:|COMPONENT|))
   (|COMMON-LISP|::|LIST| :|NAME| '|ASDF/OPERATION|::|OPERATION| :|READERS|
    '(|ASDF/BACKWARD-INTERFACE|::|ERROR-OPERATION|) :|INITARGS|
    '(:|OPERATION|)))
  :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|ERROR-COMPONENT|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|ERROR-OPERATION|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G38590| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BACKWARD-INTERFACE|::|COMPILE-ERROR| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BACKWARD-INTERFACE|::|OPERATION-ERROR|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G38593| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BACKWARD-INTERFACE|::|COMPILE-FAILED| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BACKWARD-INTERFACE|::|COMPILE-ERROR|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|COMMON-LISP|::|LET*| ((#1=#:|G38596| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|ASDF/BACKWARD-INTERFACE|::|COMPILE-WARNED| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|ASDF/BACKWARD-INTERFACE|::|COMPILE-ERROR|)
  :|DIRECT-SLOTS| (|COMMON-LISP|::|LIST|) :|METACLASS| #1#
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|DOCUMENTATION| |COMMON-LISP|::|NIL| :|GENERIC-ACCESSORS|
    '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-COMPONENT-LOAD-DEPENDENCIES-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE|
   |ASDF/BACKWARD-INTERFACE|::|COMPONENT-LOAD-DEPENDENCIES|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|ASDF/BACKWARD-INTERFACE|::|COMPONENT-LOAD-DEPENDENCIES|)
 (|COMMON-LISP|::|FUNCTION|
  |ASDF/BACKWARD-INTERFACE|::|COMPONENT-LOAD-DEPENDENCIES|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK|
     |ASDF/BACKWARD-INTERFACE|::|COMPONENT-LOAD-DEPENDENCIES|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERFACE|::|COMPONENT-LOAD-DEPENDENCIES|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|COMPONENT-LOAD-DEPENDENCIES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '#1=(|ASDF/COMPONENT|::|COMPONENT|))
 '(#1#
   "DEPRECATED. Please use COMPONENT-SIDEWAY-DEPENDENCIES instead; or better,\n
define your operations with proper use of SIDEWAY-OPERATION, SELFWARD-OPERATION,\n
or define methods on PREPARE-OP, etc."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN|
     |ASDF/BACKWARD-INTERFACE|::|COMPONENT-LOAD-DEPENDENCIES|))
   (|COMMON-LISP|::|BLOCK|
    |ASDF/BACKWARD-INTERFACE|::|COMPONENT-LOAD-DEPENDENCIES|
    (|COMMON-LISP|::|UNLESS|
     |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-COMPONENT-LOAD-DEPENDENCIES-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-COMPONENT-LOAD-DEPENDENCIES-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERFACE|::|COMPONENT-LOAD-DEPENDENCIES|))
    (|ASDF/COMPONENT|::|COMPONENT-SIDEWAY-DEPENDENCIES|
     |ASDF/COMPONENT|::|COMPONENT|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-WARNINGS|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-FAILURE|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-WARNINGS|)
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-FAILURE|)
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-WARNINGS|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-FAILURE|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-WARNINGS|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|OPERATION-ON-FAILURE|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-SYSTEM-DEFINITION-PATHNAME-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE|
   |ASDF/BACKWARD-INTERFACE|::|SYSTEM-DEFINITION-PATHNAME|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|ASDF/BACKWARD-INTERFACE|::|SYSTEM-DEFINITION-PATHNAME|)
 (|COMMON-LISP|::|FUNCTION|
  |ASDF/BACKWARD-INTERFACE|::|SYSTEM-DEFINITION-PATHNAME|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK|
     |ASDF/BACKWARD-INTERFACE|::|SYSTEM-DEFINITION-PATHNAME|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERFACE|::|SYSTEM-DEFINITION-PATHNAME|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|SYSTEM-DEFINITION-PATHNAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '#1=(|ASDF/BACKWARD-INTERFACE|::|X|))
 '(#1#
   "DEPRECATED. This function used to expose ASDF internals with subtle\n
differences with respect to user expectations, that have been refactored\n
away since. We recommend you use ASDF:SYSTEM-SOURCE-FILE instead for a\n
mostly compatible replacement that we're supporting, or even\n
ASDF:SYSTEM-SOURCE-DIRECTORY or ASDF:SYSTEM-RELATIVE-PATHNAME\n
if that's whay you mean."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN|
     |ASDF/BACKWARD-INTERFACE|::|SYSTEM-DEFINITION-PATHNAME|))
   (|COMMON-LISP|::|BLOCK|
    |ASDF/BACKWARD-INTERFACE|::|SYSTEM-DEFINITION-PATHNAME|
    (|COMMON-LISP|::|UNLESS|
     |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-SYSTEM-DEFINITION-PATHNAME-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-SYSTEM-DEFINITION-PATHNAME-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERFACE|::|SYSTEM-DEFINITION-PATHNAME|))
    (|ASDF/SYSTEM|::|SYSTEM-SOURCE-FILE| |ASDF/BACKWARD-INTERFACE|::|X|))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|TRAVERSE|
 '#(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|TRAVERSE|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|TRAVERSE|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|TRAVERSE|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-TRAVERSE-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| |ASDF/BACKWARD-INTERFACE|::|TRAVERSE|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|ASDF/BACKWARD-INTERFACE|::|TRAVERSE|)
 (|COMMON-LISP|::|FUNCTION| |ASDF/BACKWARD-INTERFACE|::|TRAVERSE|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK| |ASDF/BACKWARD-INTERFACE|::|TRAVERSE|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERFACE|::|TRAVERSE|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|TRAVERSE|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| (:|PLAN-CLASS|)
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE|
   |ASDF/BACKWARD-INTERFACE|::|ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|ASDF/BACKWARD-INTERFACE|::|ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY|)
 (|COMMON-LISP|::|FUNCTION|
  |ASDF/BACKWARD-INTERFACE|::|ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK|
     |ASDF/BACKWARD-INTERFACE|::|ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERFACE|::|ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN|
 '|ASDF/BACKWARD-INTERFACE|::|ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '#1=(|COMMON-LISP|::|&KEY|
       (|ASDF/BACKWARD-INTERFACE|::|CENTRALIZE-LISP-BINARIES|
        |COMMON-LISP|::|NIL|)
       (|ASDF/BACKWARD-INTERFACE|::|DEFAULT-TOPLEVEL-DIRECTORY|
        (|UIOP/PATHNAME|::|SUBPATHNAME|
         (|COMMON-LISP|::|USER-HOMEDIR-PATHNAME|) ".fasls/"))
       (|ASDF/BACKWARD-INTERFACE|::|INCLUDE-PER-USER-INFORMATION|
        |COMMON-LISP|::|NIL|)
       (|ASDF/BACKWARD-INTERFACE|::|MAP-ALL-SOURCE-FILES|
        (|COMMON-LISP|::|OR| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|))
       (|ASDF/BACKWARD-INTERFACE|::|SOURCE-TO-TARGET-MAPPINGS|
        |COMMON-LISP|::|NIL|)
       (|ASDF/BACKWARD-INTERFACE|::|FILE-TYPES|
        `(,(|UIOP/LISP-BUILD|::|COMPILE-FILE-TYPE|) "build-report" "lib"))))
 '(#1# "DEPRECATED. Use asdf-output-translations instead."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN|
     |ASDF/BACKWARD-INTERFACE|::|ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY|))
   (|COMMON-LISP|::|BLOCK|
    |ASDF/BACKWARD-INTERFACE|::|ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY|
    (|COMMON-LISP|::|UNLESS|
     |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERFACE|::|ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY|))
    (|COMMON-LISP|::|WHEN|
     (|COMMON-LISP|::|NULL| |ASDF/BACKWARD-INTERFACE|::|MAP-ALL-SOURCE-FILES|)
     (|COMMON-LISP|::|ERROR|
      "asdf:enable-asdf-binary-locations-compatibility doesn't support :map-all-source-files nil on CLISP, ECL and MKCL"))
    (|COMMON-LISP|::|LET*|
     ((|ASDF/BACKWARD-INTERFACE|::|PATTERNS|
       (|COMMON-LISP|::|IF| |ASDF/BACKWARD-INTERFACE|::|MAP-ALL-SOURCE-FILES|
        (|COMMON-LISP|::|LIST| |UIOP/PATHNAME|::|*WILD-FILE*|)
        (|COMMON-LISP|::|LOOP| :|FOR| |COMMON-LISP|::|TYPE| :|IN|
         |ASDF/BACKWARD-INTERFACE|::|FILE-TYPES| :|COLLECT|
         (|COMMON-LISP|::|MAKE-PATHNAME| :|TYPE| |COMMON-LISP|::|TYPE|
          :|DEFAULTS| |UIOP/PATHNAME|::|*WILD-FILE*|))))
      (|ASDF/BACKWARD-INTERFACE|::|DESTINATION-DIRECTORY|
       (|COMMON-LISP|::|IF|
        |ASDF/BACKWARD-INTERFACE|::|CENTRALIZE-LISP-BINARIES|
        `(,|ASDF/BACKWARD-INTERFACE|::|DEFAULT-TOPLEVEL-DIRECTORY|
          ,@(|COMMON-LISP|::|WHEN|
             |ASDF/BACKWARD-INTERFACE|::|INCLUDE-PER-USER-INFORMATION|
             (|COMMON-LISP|::|CDR|
              (|COMMON-LISP|::|PATHNAME-DIRECTORY|
               (|COMMON-LISP|::|USER-HOMEDIR-PATHNAME|))))
          :|IMPLEMENTATION| ,|UIOP/PATHNAME|::|*WILD-INFERIORS*|)
        `(:|ROOT| ,|UIOP/PATHNAME|::|*WILD-INFERIORS*| :|IMPLEMENTATION|))))
     (|ASDF/OUTPUT-TRANSLATIONS|::|INITIALIZE-OUTPUT-TRANSLATIONS|
      `(:|OUTPUT-TRANSLATIONS|
        ,@|ASDF/BACKWARD-INTERFACE|::|SOURCE-TO-TARGET-MAPPINGS|
        ,@(|COMMON-LISP|::|LOOP| :|FOR| |ASDF/BACKWARD-INTERFACE|::|PATTERN|
           :|IN| |ASDF/BACKWARD-INTERFACE|::|PATTERNS| :|COLLECT|
           `((:|ROOT| ,|UIOP/PATHNAME|::|*WILD-INFERIORS*|
              ,|ASDF/BACKWARD-INTERFACE|::|PATTERN|)
             (,@|ASDF/BACKWARD-INTERFACE|::|DESTINATION-DIRECTORY|
              ,|ASDF/BACKWARD-INTERFACE|::|PATTERN|)))
        (|COMMON-LISP|::|T| |COMMON-LISP|::|T|)
        :|IGNORE-INHERITED-CONFIGURATION|))))))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|OPERATE|
 #(2. 0. |COMMON-LISP|::|T| |COMMON-LISP|::|T| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|T|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-RUN-SHELL-COMMAND-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| |ASDF/BACKWARD-INTERFACE|::|RUN-SHELL-COMMAND|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|ASDF/BACKWARD-INTERFACE|::|RUN-SHELL-COMMAND|)
 (|COMMON-LISP|::|FUNCTION| |ASDF/BACKWARD-INTERFACE|::|RUN-SHELL-COMMAND|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK| |ASDF/BACKWARD-INTERFACE|::|RUN-SHELL-COMMAND|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERFACE|::|RUN-SHELL-COMMAND|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|RUN-SHELL-COMMAND|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '#1=(|ASDF/BACKWARD-INTERFACE|::|CONTROL-STRING| |COMMON-LISP|::|&REST|
       |ASDF/BACKWARD-INTERFACE|::|ARGS|))
 '(#1#
   "PLEASE DO NOT USE. This function is not just DEPRECATED, but also dysfunctional.\n
Please use UIOP:RUN-PROGRAM instead."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN| |ASDF/BACKWARD-INTERFACE|::|RUN-SHELL-COMMAND|))
   (|COMMON-LISP|::|BLOCK| |ASDF/BACKWARD-INTERFACE|::|RUN-SHELL-COMMAND|
    (|COMMON-LISP|::|UNLESS|
     |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-RUN-SHELL-COMMAND-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-RUN-SHELL-COMMAND-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERFACE|::|RUN-SHELL-COMMAND|))
    (|COMMON-LISP|::|LET|
     ((|ASDF/BACKWARD-INTERFACE|::|COMMAND|
       (|COMMON-LISP|::|APPLY| '|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|NIL|
        |ASDF/BACKWARD-INTERFACE|::|CONTROL-STRING|
        |ASDF/BACKWARD-INTERFACE|::|ARGS|)))
     (|ASDF/UPGRADE|::|ASDF-MESSAGE| "; $ ~A~%"
      |ASDF/BACKWARD-INTERFACE|::|COMMAND|)
     (|COMMON-LISP|::|LET|
      ((|ASDF/BACKWARD-INTERFACE|::|EXIT-CODE|
        (|COMMON-LISP|::|IGNORE-ERRORS|
         (|COMMON-LISP|::|NTH-VALUE| 2.
          (|UIOP/RUN-PROGRAM|::|RUN-PROGRAM|
           |ASDF/BACKWARD-INTERFACE|::|COMMAND| :|FORCE-SHELL|
           |COMMON-LISP|::|T| :|IGNORE-ERROR-STATUS| |COMMON-LISP|::|T|
           :|OUTPUT| |ASDF/UPGRADE|::|*VERBOSE-OUT*|)))))
      (|COMMON-LISP|::|TYPECASE| |ASDF/BACKWARD-INTERFACE|::|EXIT-CODE|
       ((|COMMON-LISP|::|INTEGER| 0. 255.)
        |ASDF/BACKWARD-INTERFACE|::|EXIT-CODE|)
       (|COMMON-LISP|::|T| 255.)))))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |ASDF/BACKWARD-INTERFACE|::|*ASDF-VERBOSE*|))
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|)
 '#(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-COMPONENT-PROPERTY-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| |ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|)
 (|COMMON-LISP|::|FUNCTION| |ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK| |ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-(SETF COMPONENT-PROPERTY)-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE|
   (|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|)))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '#1=(|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|))
 (|COMMON-LISP|::|FUNCTION| #1#
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK| |ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING| '#1#)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN|
 '(|COMMON-LISP|::|SETF| |ASDF/BACKWARD-INTERFACE|::|COMPONENT-PROPERTY|)
 #(3. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|
 '#(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-EXPLAIN-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| |ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION| '|ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|)
 (|COMMON-LISP|::|FUNCTION| |ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK| |ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|ASDF/PARSE-DEFSYSTEM|::|EXPLAIN|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|UIOP/VERSION|::|WITH-DEPRECATION|
 ((|UIOP/VERSION|::|VERSION-DEPRECATION| |ASDF/UPGRADE|::|*ASDF-VERSION*|
   :|STYLE-WARNING| "3.3"))
 (|COMMON-LISP|::|DEFUN| |ASDF/BACKWARD-INTERFACE|::|SYSTEM-REGISTERED-P|
  (|ASDF/COMPONENT|::|NAME|)
  "DEPRECATED. Return a generalized boolean that is true if a system of given NAME was registered already.\n
NAME is a system designator, to be normalized by COERCE-NAME.\n
The value returned if true is a pair of a timestamp and a system object."
  (|UIOP/UTILITY|::|IF-LET|
   (|ASDF/SYSTEM|::|SYSTEM|
    (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM| |ASDF/COMPONENT|::|NAME|))
   (|COMMON-LISP|::|CONS|
    (|UIOP/UTILITY|::|IF-LET|
     (|ASDF/BACKWARD-INTERFACE|::|PRIMARY-SYSTEM|
      (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM|
       (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME| |ASDF/COMPONENT|::|NAME|)))
     (|ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
      '|ASDF/FIND-SYSTEM|::|DEFINE-OP|
      |ASDF/BACKWARD-INTERFACE|::|PRIMARY-SYSTEM|))
    |ASDF/SYSTEM|::|SYSTEM|)))
 (|COMMON-LISP|::|DEFUN| |ASDF/OPERATE|::|REQUIRE-SYSTEM|
  (|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&REST|
   |ASDF/BACKWARD-INTERFACE|::|KEYS| |COMMON-LISP|::|&KEY|
   |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)
  "Ensure the specified SYSTEM is loaded, passing the KEYS to OPERATE, but do not update the\n
system or its dependencies if it has already been loaded."
  (|COMMON-LISP|::|DECLARE|
   (|COMMON-LISP|::|IGNORE| |ASDF/BACKWARD-INTERFACE|::|KEYS|))
  (|COMMON-LISP|::|UNLESS|
   (|ASDF/OPERATE|::|COMPONENT-LOADED-P| |ASDF/SYSTEM|::|SYSTEM|)
   (|ASDF/OPERATE|::|LOAD-SYSTEM| |ASDF/SYSTEM|::|SYSTEM|))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-SYSTEM-REGISTERED-P-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| |ASDF/BACKWARD-INTERFACE|::|SYSTEM-REGISTERED-P|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION|
  '|ASDF/BACKWARD-INTERFACE|::|SYSTEM-REGISTERED-P|)
 (|COMMON-LISP|::|FUNCTION| |ASDF/BACKWARD-INTERFACE|::|SYSTEM-REGISTERED-P|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK| |ASDF/BACKWARD-INTERFACE|::|SYSTEM-REGISTERED-P|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERFACE|::|SYSTEM-REGISTERED-P|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|ASDF/BACKWARD-INTERFACE|::|SYSTEM-REGISTERED-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '#1=(|ASDF/COMPONENT|::|NAME|))
 '(#1#
   "DEPRECATED. Return a generalized boolean that is true if a system of given NAME was registered already.\n
NAME is a system designator, to be normalized by COERCE-NAME.\n
The value returned if true is a pair of a timestamp and a system object."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN| |ASDF/BACKWARD-INTERFACE|::|SYSTEM-REGISTERED-P|))
   (|COMMON-LISP|::|BLOCK| |ASDF/BACKWARD-INTERFACE|::|SYSTEM-REGISTERED-P|
    (|COMMON-LISP|::|UNLESS|
     |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-SYSTEM-REGISTERED-P-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-SYSTEM-REGISTERED-P-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/BACKWARD-INTERFACE|::|SYSTEM-REGISTERED-P|))
    (|UIOP/UTILITY|::|IF-LET|
     (|ASDF/SYSTEM|::|SYSTEM|
      (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM| |ASDF/COMPONENT|::|NAME|))
     (|COMMON-LISP|::|CONS|
      (|UIOP/UTILITY|::|IF-LET|
       (|ASDF/BACKWARD-INTERFACE|::|PRIMARY-SYSTEM|
        (|ASDF/SYSTEM-REGISTRY|::|REGISTERED-SYSTEM|
         (|ASDF/SYSTEM|::|PRIMARY-SYSTEM-NAME| |ASDF/COMPONENT|::|NAME|)))
       (|ASDF/ACTION|::|COMPONENT-OPERATION-TIME|
        '|ASDF/FIND-SYSTEM|::|DEFINE-OP|
        |ASDF/BACKWARD-INTERFACE|::|PRIMARY-SYSTEM|))
      |ASDF/SYSTEM|::|SYSTEM|)))))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL|
   |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-REQUIRE-SYSTEM-NOTIFIED-P*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|INLINE| |ASDF/OPERATE|::|REQUIRE-SYSTEM|))
(|COMMON-LISP|::|SETF|
 (|COMMON-LISP|::|COMPILER-MACRO-FUNCTION| '|ASDF/OPERATE|::|REQUIRE-SYSTEM|)
 (|COMMON-LISP|::|FUNCTION| |ASDF/OPERATE|::|REQUIRE-SYSTEM|
  (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
   (|COMMON-LISP|::|SETQ| |SYSTEM|::|<MACRO-FORM>|
    (|SYSTEM|::|STRIP-FUNCALL-FORM| |SYSTEM|::|<MACRO-FORM>|))
   (|COMMON-LISP|::|LET*|
    ((|UIOP/VERSION|::|FORM| |SYSTEM|::|<MACRO-FORM>|)
     (|UIOP/VERSION|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |UIOP/VERSION|::|ARGS|))
    (|COMMON-LISP|::|BLOCK| |ASDF/OPERATE|::|REQUIRE-SYSTEM|
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/OPERATE|::|REQUIRE-SYSTEM|)
     |UIOP/VERSION|::|FORM|)))))
(|SYSTEM|::|C-DEFUN| '|ASDF/OPERATE|::|REQUIRE-SYSTEM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '#1=(|ASDF/SYSTEM|::|SYSTEM| |COMMON-LISP|::|&REST|
       |ASDF/BACKWARD-INTERFACE|::|KEYS| |COMMON-LISP|::|&KEY|
       |COMMON-LISP|::|&ALLOW-OTHER-KEYS|))
 '(#1#
   "Ensure the specified SYSTEM is loaded, passing the KEYS to OPERATE, but do not update the\n
system or its dependencies if it has already been loaded."
   (|COMMON-LISP|::|DECLARE|
    (|SYSTEM|::|IN-DEFUN| |ASDF/OPERATE|::|REQUIRE-SYSTEM|)
    (|COMMON-LISP|::|IGNORE| |ASDF/BACKWARD-INTERFACE|::|KEYS|))
   (|COMMON-LISP|::|BLOCK| |ASDF/OPERATE|::|REQUIRE-SYSTEM|
    (|COMMON-LISP|::|UNLESS|
     |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-REQUIRE-SYSTEM-NOTIFIED-P*|
     (|COMMON-LISP|::|SETF|
      |ASDF/BACKWARD-INTERFACE|::|*DEPRECATED-FUNCTION-STYLE-WARNING-REQUIRE-SYSTEM-NOTIFIED-P*|
      |COMMON-LISP|::|T|)
     (|UIOP/VERSION|::|NOTIFY-DEPRECATED-FUNCTION| :|STYLE-WARNING|
      '|ASDF/OPERATE|::|REQUIRE-SYSTEM|))
    (|COMMON-LISP|::|UNLESS|
     (|ASDF/OPERATE|::|COMPONENT-LOADED-P| |ASDF/SYSTEM|::|SYSTEM|)
     (|ASDF/OPERATE|::|LOAD-SYSTEM| |ASDF/SYSTEM|::|SYSTEM|)))))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/INTERFACE|
  :|NICKNAMES| '(:|ASDF| :|ASDF-UTILITIES|) :|DOCUMENTATION|
  '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/UPGRADE| :|ASDF/SESSION|
    :|ASDF/COMPONENT| :|ASDF/SYSTEM| :|ASDF/SYSTEM-REGISTRY|
    :|ASDF/FIND-COMPONENT| :|ASDF/OPERATION| :|ASDF/ACTION| :|ASDF/LISP-ACTION|
    :|ASDF/OUTPUT-TRANSLATIONS| :|ASDF/SOURCE-REGISTRY| :|ASDF/FORCING|
    :|ASDF/PLAN| :|ASDF/OPERATE| :|ASDF/FIND-SYSTEM| :|ASDF/PARSE-DEFSYSTEM|
    :|ASDF/BUNDLE| :|ASDF/CONCATENATE-SOURCE| :|ASDF/BACKWARD-INTERNALS|
    :|ASDF/BACKWARD-INTERFACE| :|ASDF/PACKAGE-INFERRED-SYSTEM|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '(#:|DEFSYSTEM| #:|FIND-SYSTEM| #:|LOAD-ASD| #:|LOCATE-SYSTEM|
    #:|COERCE-NAME| #:|PRIMARY-SYSTEM-NAME| #:|OOS| #:|OPERATE| #:|MAKE-PLAN|
    #:|PERFORM-PLAN| #:|SEQUENTIAL-PLAN| #:|SYSTEM-DEFINITION-PATHNAME|
    #:|SEARCH-FOR-SYSTEM-DEFINITION| #:|FIND-COMPONENT| #:|COMPONENT-FIND-PATH|
    #:|COMPILE-SYSTEM| #:|LOAD-SYSTEM| #:|LOAD-SYSTEMS| #:|LOAD-SYSTEMS*|
    #:|REQUIRE-SYSTEM| #:|TEST-SYSTEM| #:|CLEAR-SYSTEM| #:|OPERATION|
    #:|MAKE-OPERATION| #:|FIND-OPERATION| #:|UPWARD-OPERATION|
    #:|DOWNWARD-OPERATION| #:|SIDEWAY-OPERATION| #:|SELFWARD-OPERATION|
    #:|NON-PROPAGATING-OPERATION| #:|BUILD-OP| #:|MAKE| #:|LOAD-OP|
    #:|PREPARE-OP| #:|COMPILE-OP| #:|PREPARE-SOURCE-OP| #:|LOAD-SOURCE-OP|
    #:|TEST-OP| #:|DEFINE-OP| #:|FEATURE| #:|VERSION| #:|VERSION-SATISFIES|
    #:|UPGRADE-ASDF| #:|IMPLEMENTATION-IDENTIFIER| #:|IMPLEMENTATION-TYPE|
    #:|HOSTNAME| #:|COMPONENT-DEPENDS-ON| #:|INPUT-FILES|
    #:|ADDITIONAL-INPUT-FILES| #:|OUTPUT-FILES| #:|OUTPUT-FILE| #:|PERFORM|
    #:|PERFORM-WITH-RESTARTS| #:|OPERATION-DONE-P| #:|EXPLAIN|
    #:|ACTION-DESCRIPTION| #:|COMPONENT-SIDEWAY-DEPENDENCIES|
    #:|NEEDED-IN-IMAGE-P| #:|BUNDLE-OP| #:|MONOLITHIC-BUNDLE-OP|
    #:|PRECOMPILED-SYSTEM| #:|COMPILED-FILE| #:|BUNDLE-SYSTEM|
    #:|PROGRAM-SYSTEM| #:|BASIC-COMPILE-BUNDLE-OP| #:|PREPARE-BUNDLE-OP|
    #:|COMPILE-BUNDLE-OP| #:|LOAD-BUNDLE-OP| #:|MONOLITHIC-COMPILE-BUNDLE-OP|
    #:|MONOLITHIC-LOAD-BUNDLE-OP| #:|LIB-OP| #:|DLL-OP| #:|DELIVER-ASD-OP|
    #:|PROGRAM-OP| #:|IMAGE-OP| #:|MONOLITHIC-LIB-OP| #:|MONOLITHIC-DLL-OP|
    #:|MONOLITHIC-DELIVER-ASD-OP| #:|CONCATENATE-SOURCE-OP|
    #:|LOAD-CONCATENATED-SOURCE-OP| #:|COMPILE-CONCATENATED-SOURCE-OP|
    #:|LOAD-COMPILED-CONCATENATED-SOURCE-OP|
    #:|MONOLITHIC-CONCATENATE-SOURCE-OP|
    #:|MONOLITHIC-LOAD-CONCATENATED-SOURCE-OP|
    #:|MONOLITHIC-COMPILE-CONCATENATED-SOURCE-OP|
    #:|MONOLITHIC-LOAD-COMPILED-CONCATENATED-SOURCE-OP|
    #:|OPERATION-MONOLITHIC-P| #:|REQUIRED-COMPONENTS| #:|COMPONENT-LOADED-P|
    #:|COMPONENT| #:|PARENT-COMPONENT| #:|CHILD-COMPONENT| #:|SYSTEM|
    #:|MODULE| #:|FILE-COMPONENT| #:|SOURCE-FILE| #:|C-SOURCE-FILE|
    #:|JAVA-SOURCE-FILE| #:|CL-SOURCE-FILE| #:|CL-SOURCE-FILE.CL|
    #:|CL-SOURCE-FILE.LSP| #:|STATIC-FILE| #:|DOC-FILE| #:|HTML-FILE|
    #:|FILE-TYPE| #:|SOURCE-FILE-TYPE| #:|REGISTER-PRELOADED-SYSTEM|
    #:|SYSDEF-PRELOADED-SYSTEM-SEARCH| #:|REGISTER-IMMUTABLE-SYSTEM|
    #:|SYSDEF-IMMUTABLE-SYSTEM-SEARCH| #:|PACKAGE-INFERRED-SYSTEM|
    #:|REGISTER-SYSTEM-PACKAGES| #:|COMPONENT-CHILDREN|
    #:|COMPONENT-CHILDREN-BY-NAME| #:|COMPONENT-PATHNAME|
    #:|COMPONENT-RELATIVE-PATHNAME| #:|COMPONENT-NAME| #:|COMPONENT-VERSION|
    #:|COMPONENT-PARENT| #:|COMPONENT-SYSTEM| #:|COMPONENT-ENCODING|
    #:|COMPONENT-EXTERNAL-FORMAT| #:|SYSTEM-DESCRIPTION|
    #:|SYSTEM-LONG-DESCRIPTION| #:|SYSTEM-AUTHOR| #:|SYSTEM-MAINTAINER|
    #:|SYSTEM-LICENSE| #:|SYSTEM-LICENCE| #:|SYSTEM-SOURCE-FILE|
    #:|SYSTEM-SOURCE-DIRECTORY| #:|SYSTEM-RELATIVE-PATHNAME|
    #:|SYSTEM-HOMEPAGE| #:|SYSTEM-MAILTO| #:|SYSTEM-BUG-TRACKER|
    #:|SYSTEM-LONG-NAME| #:|SYSTEM-SOURCE-CONTROL| #:|MAP-SYSTEMS|
    #:|SYSTEM-DEFSYSTEM-DEPENDS-ON| #:|SYSTEM-DEPENDS-ON|
    #:|SYSTEM-WEAKLY-DEPENDS-ON| #:|*SYSTEM-DEFINITION-SEARCH-FUNCTIONS*|
    #:|*CENTRAL-REGISTRY*| #:|*COMPILE-FILE-WARNINGS-BEHAVIOUR*|
    #:|*COMPILE-FILE-FAILURE-BEHAVIOUR*| #:|*RESOLVE-SYMLINKS*|
    #:|*VERBOSE-OUT*| #:|ASDF-VERSION| #:|COMPILE-CONDITION|
    #:|COMPILE-FILE-ERROR| #:|COMPILE-WARNED-ERROR| #:|COMPILE-FAILED-ERROR|
    #:|COMPILE-WARNED-WARNING| #:|COMPILE-FAILED-WARNING| #:|ERROR-NAME|
    #:|ERROR-PATHNAME| #:|LOAD-SYSTEM-DEFINITION-ERROR| #:|ERROR-COMPONENT|
    #:|ERROR-OPERATION| #:|SYSTEM-DEFINITION-ERROR| #:|MISSING-COMPONENT|
    #:|MISSING-COMPONENT-OF-VERSION| #:|MISSING-DEPENDENCY|
    #:|MISSING-DEPENDENCY-OF-VERSION| #:|CIRCULAR-DEPENDENCY|
    #:|DUPLICATE-NAMES| #:|NON-TOPLEVEL-SYSTEM| #:|NON-SYSTEM-SYSTEM|
    #:|BAD-SYSTEM-NAME| #:|SYSTEM-OUT-OF-DATE|
    #:|PACKAGE-INFERRED-SYSTEM-MISSING-PACKAGE-ERROR|
    #:|OPERATION-DEFINITION-WARNING| #:|OPERATION-DEFINITION-ERROR|
    #:|TRY-RECOMPILING| #:|RETRY| #:|ACCEPT| #:|COERCE-ENTRY-TO-DIRECTORY|
    #:|REMOVE-ENTRY-FROM-REGISTRY| #:|CLEAR-CONFIGURATION-AND-RETRY|
    #:|*ENCODING-DETECTION-HOOK*| #:|*ENCODING-EXTERNAL-FORMAT-HOOK*|
    #:|*DEFAULT-ENCODING*| #:|*UTF-8-EXTERNAL-FORMAT*| #:|CLEAR-CONFIGURATION|
    #:|*OUTPUT-TRANSLATIONS-PARAMETER*| #:|INITIALIZE-OUTPUT-TRANSLATIONS|
    #:|DISABLE-OUTPUT-TRANSLATIONS| #:|CLEAR-OUTPUT-TRANSLATIONS|
    #:|ENSURE-OUTPUT-TRANSLATIONS| #:|APPLY-OUTPUT-TRANSLATIONS|
    #:|COMPILE-FILE*| #:|COMPILE-FILE-PATHNAME*| #:|*WARNINGS-FILE-TYPE*|
    #:|ENABLE-DEFERRED-WARNINGS-CHECK| #:|DISABLE-DEFERRED-WARNINGS-CHECK|
    #:|ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY|
    #:|*DEFAULT-SOURCE-REGISTRIES*| #:|*SOURCE-REGISTRY-PARAMETER*|
    #:|INITIALIZE-SOURCE-REGISTRY| #:|COMPUTE-SOURCE-REGISTRY|
    #:|CLEAR-SOURCE-REGISTRY| #:|ENSURE-SOURCE-REGISTRY|
    #:|PROCESS-SOURCE-REGISTRY| #:|REGISTERED-SYSTEM| #:|REGISTERED-SYSTEMS|
    #:|ALREADY-LOADED-SYSTEMS| #:|RESOLVE-LOCATION| #:|ASDF-MESSAGE|
    #:|*USER-CACHE*| #:|USER-OUTPUT-TRANSLATIONS-PATHNAME|
    #:|SYSTEM-OUTPUT-TRANSLATIONS-PATHNAME|
    #:|USER-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME|
    #:|SYSTEM-OUTPUT-TRANSLATIONS-DIRECTORY-PATHNAME| #:|USER-SOURCE-REGISTRY|
    #:|SYSTEM-SOURCE-REGISTRY| #:|USER-SOURCE-REGISTRY-DIRECTORY|
    #:|SYSTEM-SOURCE-REGISTRY-DIRECTORY| #:|*ASDF-VERBOSE*|
    #:|RUN-SHELL-COMMAND| #:|COMPONENT-LOAD-DEPENDENCIES|
    #:|SYSTEM-REGISTERED-P| #:|PACKAGE-SYSTEM| #:|OPERATION-ON-WARNINGS|
    #:|OPERATION-ON-FAILURE| #:|OPERATION-ERROR| #:|COMPILE-FAILED|
    #:|COMPILE-WARNED| #:|COMPILE-ERROR| #:|MODULE-COMPONENTS|
    #:|COMPONENT-PROPERTY| #:|TRAVERSE|)
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|ASDF/INTERFACE| :|ASDF|)
  :|MIX| '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '(#:|LOADED-SYSTEMS| #:|OUTPUT-FILES-FOR-SYSTEM-AND-OPERATION|)))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/USER|
  :|NICKNAMES| '#1=(:|ASDF-USER|) :|DOCUMENTATION| '|COMMON-LISP|::|NIL| :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/INTERFACE|) :|SHADOW|
  '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM| '|COMMON-LISP|::|NIL|
  :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT| '|COMMON-LISP|::|NIL|
  :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE| '(:|ASDF/USER| . #1#) :|MIX|
  '|COMMON-LISP|::|NIL| :|REEXPORT| '|COMMON-LISP|::|NIL| :|UNINTERN|
  '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|PROG1|
 (|COMMON-LISP|::|FUNCALL| '|UIOP/PACKAGE|::|ENSURE-PACKAGE| ':|ASDF/FOOTER|
  :|NICKNAMES| '|COMMON-LISP|::|NIL| :|DOCUMENTATION| '|COMMON-LISP|::|NIL|
  :|USE|
  '(:|UIOP/COMMON-LISP| :|UIOP| :|ASDF/SYSTEM| :|ASDF/UPGRADE|
    :|ASDF/SYSTEM-REGISTRY| :|ASDF/OPERATE| :|ASDF/BUNDLE|)
  :|SHADOW| '|COMMON-LISP|::|NIL| :|SHADOWING-IMPORT-FROM|
  '|COMMON-LISP|::|NIL| :|IMPORT-FROM| '|COMMON-LISP|::|NIL| :|EXPORT|
  '|COMMON-LISP|::|NIL| :|INTERN| '|COMMON-LISP|::|NIL| :|RECYCLE|
  '(:|ASDF/FOOTER| :|ASDF|) :|MIX| '|COMMON-LISP|::|NIL| :|REEXPORT|
  '|COMMON-LISP|::|NIL| :|UNINTERN| '|COMMON-LISP|::|NIL|))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "ASDF/FOOTER"))
(|COMMON-LISP|::|DOLIST|
 (|ASDF/FOOTER|::|S| '("asdf" "uiop" "asdf-package-system"))
 (|ASDF/SYSTEM-REGISTRY|::|REGISTER-PRELOADED-SYSTEM| |ASDF/FOOTER|::|S|
  :|VERSION| |ASDF/UPGRADE|::|*ASDF-VERSION*|))
(|UIOP/UTILITY|::|IF-LET|
 (|ASDF/FOOTER|::|X|
  (|UIOP/PACKAGE|::|FIND-SYMBOL*| '#:|*MODULE-PROVIDER-FUNCTIONS*| :|CUSTOM|
   |COMMON-LISP|::|NIL|))
 (|COMMON-LISP|::|EVAL|
  `(|COMMON-LISP|::|PUSHNEW| '|ASDF/OPERATE|::|MODULE-PROVIDE-ASDF|
    ,|ASDF/FOOTER|::|X|)))
(|COMMON-LISP|::|DOLIST|
 (|ASDF/FOOTER|::|F|
  '(:|ASDF| :|ASDF2| :|ASDF3| :|ASDF3.1| :|ASDF3.2| :|ASDF3.3|))
 (|COMMON-LISP|::|PUSHNEW| |ASDF/FOOTER|::|F| |COMMON-LISP|::|*FEATURES*|))
(|COMMON-LISP|::|PROVIDE| "asdf")
(|COMMON-LISP|::|PROVIDE| "ASDF")
(|ASDF/UPGRADE|::|CLEANUP-UPGRADED-ASDF|)
(|SYSTEM|::|C-PROVIDE| '"asdf")
(|SYSTEM|::|C-PROVIDE| '"ASDF")
